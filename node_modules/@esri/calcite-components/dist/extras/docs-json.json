{
  "timestamp": "2021-06-08T00:45:29",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.6.0",
    "typescriptVersion": "4.2.3"
  },
  "components": [
    {
      "filePath": "./src/components/calcite-accordion/calcite-accordion.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-accordion",
      "readme": "# calcite-accordion\n\n`calcite-accordion` can be used to present content in collapsible sections. Configuration options exist for visual style (icon-position, scale, appearance), and selection functionality. Selection modes include \"multi\", \"single\", and \"single-persist\".\n",
      "docs": "`calcite-accordion` can be used to present content in collapsible sections. Configuration options exist for visual style (icon-position, scale, appearance), and selection functionality. Selection modes include \"multi\", \"single\", and \"single-persist\".",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-accordion>\n  <calcite-accordion-item item-title=\"Accordion Item\">Accordion Section Content </calcite-accordion-item>\n  <calcite-accordion-item item-title=\"Accordion Item 2\" active>Accordion Section Content </calcite-accordion-item>\n  <calcite-accordion-item item-title=\"Accordion Item 3\">Accordion Section Content </calcite-accordion-item>\n</calcite-accordion>\n```\n"
      },
      "props": [
        {
          "name": "appearance",
          "type": "\"default\" | \"minimal\" | \"transparent\"",
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "specify the appearance - default (containing border), or minimal (no containing border), defaults to default",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "minimal",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPosition",
          "type": "\"end\" | \"start\"",
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": true,
          "docs": "specify the placement of the icon in the header, defaults to end",
          "docsTags": [],
          "default": "\"end\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconType",
          "type": "\"caret\" | \"chevron\" | \"plus-minus\"",
          "mutable": false,
          "attr": "icon-type",
          "reflectToAttr": true,
          "docs": "specify the type of the icon in the header, defaults to chevron",
          "docsTags": [],
          "default": "\"chevron\"",
          "values": [
            {
              "value": "caret",
              "type": "string"
            },
            {
              "value": "chevron",
              "type": "string"
            },
            {
              "value": "plus-minus",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of accordion, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"multi\" | \"single\" | \"single-persist\"",
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "specify the selection mode - multi (allow any number of open items), single (allow one open item),\nor single-persist (allow and require one open item), defaults to multi",
          "docsTags": [],
          "default": "\"multi\"",
          "values": [
            {
              "value": "multi",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            },
            {
              "value": "single-persist",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "calciteAccordionItemKeyEvent",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteAccordionItemRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteAccordionItemSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-accordion-item/calcite-accordion-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-accordion-item",
      "readme": "# calcite-accordion-item\n\nindividual `calcite-accordion` item\n",
      "docs": "individual `calcite-accordion` item",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display - accepts Calcite UI icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "itemSubtitle",
          "type": "string",
          "mutable": false,
          "attr": "item-subtitle",
          "reflectToAttr": false,
          "docs": "pass a title for the accordion item",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "itemTitle",
          "type": "string",
          "mutable": false,
          "attr": "item-title",
          "reflectToAttr": false,
          "docs": "pass a title for the accordion item",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteAccordionChange",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-accordion-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-action/calcite-action.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action",
      "readme": "# calcite-action\n\nThe `calcite-action` component lives in either a `calcite-action-bar` or `calcite-action-pad`. Actions look like an icon with a text description option of the component that will be revealed when the icon/ text is clicked or selected.\n",
      "docs": "The `calcite-action` component lives in either a `calcite-action-bar` or `calcite-action-pad`. Actions look like an icon with a text description option of the component that will be revealed when the icon/ text is clicked or selected.",
      "docsTags": [
        {
          "text": "- A slot for adding a `calcite-icon`.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Without text displayed\n\nRenders a `calcite-action` that displays only an icon and a tooltip label.\n\n```html\n<calcite-action label=\"Performs my custom action\" text=\"My Custom Action\" icon=\"plus\"></calcite-action>\n```\n\n#### With text displayed\n\nRenders a `calcite-action` that displays text along side an icon and a tooltip label.\n\n```html\n<calcite-action label=\"Performs my custom action\" text=\"Perform Action!\" text-enabled icon=\"save\"></calcite-action>\n```\n\n#### Clear appearance\n\nRenders a `calcite-action` that has a clear background.\n\n```html\n<calcite-action appearance=\"clear\" text=\"Layers\" icon=\"layers\"></calcite-action>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Indicates whether the action is highlighted.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "alignment",
          "type": "\"center\" | \"end\" | \"start\"",
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "Indicates the alignment when text-enabled is false.",
          "docsTags": [],
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "appearance",
          "type": "\"clear\" | \"outline\" | \"solid\"",
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Specify the appearance style of the action, defaults to solid.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "clear",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": true,
          "docs": "Compact mode is used internally by components to reduce side padding, e.g. calcite-block-section.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, disabled prevents interaction. This state shows items with lower opacity/grayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "indicator",
          "type": "boolean",
          "mutable": false,
          "attr": "indicator",
          "reflectToAttr": true,
          "docs": "Indicates unread changes.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlLoading",
          "type": "string",
          "mutable": false,
          "attr": "intl-loading",
          "reflectToAttr": false,
          "docs": "string to override English loading text",
          "docsTags": [],
          "default": "TEXT.loading",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label of the action. If no label is provided, the label inherits what's provided for the `text` prop.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When true, content is waiting to be loaded. This state shows a busy indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the action.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Text that accompanies the action icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "textEnabled",
          "type": "boolean",
          "mutable": false,
          "attr": "text-enabled",
          "reflectToAttr": true,
          "docs": "Indicates whether the text is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteActionClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the action has been clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding a `calcite-icon`."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-action-bar",
        "calcite-action-menu",
        "calcite-action-pad",
        "calcite-panel",
        "calcite-pick-list-item",
        "calcite-popover",
        "calcite-tip",
        "calcite-tip-manager"
      ],
      "dependencies": [
        "calcite-loader",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-action-bar": [
          "calcite-action"
        ],
        "calcite-action-menu": [
          "calcite-action"
        ],
        "calcite-action-pad": [
          "calcite-action"
        ],
        "calcite-panel": [
          "calcite-action"
        ],
        "calcite-pick-list-item": [
          "calcite-action"
        ],
        "calcite-popover": [
          "calcite-action"
        ],
        "calcite-tip": [
          "calcite-action"
        ],
        "calcite-tip-manager": [
          "calcite-action"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-action-bar/calcite-action-bar.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action-bar",
      "readme": "# calcite-action-bar\n\n## Description\n\nThe `calcite-action-bar` component is made up of multiple `calcite-action`s in the form of clickable icons. The action bar can be expanded to view actions with descriptive text or made smaller to view with just icons.\n",
      "docs": "",
      "docsTags": [
        {
          "text": "- A slot for adding `calcite-action`s that will appear at the top of the action bar.",
          "name": "slot"
        },
        {
          "text": "bottom-actions - A slot for adding `calcite-action`s that will appear at the bottom of the action bar, above the collapse/expand button.",
          "name": "slot"
        },
        {
          "text": "expand-tooltip - Used to set the tooltip for the expand toggle.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Basic Action Bar (Top Actions)\n\nRenders `calcite-action`s that stick to the top of the bar.\n\n```html\n<calcite-action-bar>\n  <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n  <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n</calcite-action-bar>\n```\n\n#### With grouping\n\nRenders a group of `calcite-action`s contained in a `calcite-action-group`. Actions in a group are visually separated from other groups or actions in the bar.\n\n```html\n<calcite-action-bar>\n  <calcite-action-group>\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n  </calcite-action-group>\n\n  <calcite-action-group>\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n    <calcite-action text=\"Basemaps\" icon=\"layer-basemap\"></calcite-action>\n  </calcite-action-group>\n</calcite-action-bar>\n```\n\n#### Bottom Actions\n\nThe bottom-actions slot renders `calcite-action`s that stick to the bottom of the bar above the expand/collapse icon.\n\n```html\n<calcite-action-bar>\n  <calcite-action text=\"Information\" icon=\"information\"></calcite-action>\n  <calcite-action text=\"Feedback\" slot=\"bottom-actions\" icon=\"mega-phone\"></calcite-action>\n</calcite-action-bar>\n```\n",
        "tooltip": "### Tooltip on the expand action\n\n```html\n<calcite-action-bar id=\"action-bar-test\">\n  <calcite-tooltip slot=\"expand-tooltip\">Expand</calcite-tooltip>\n  <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n</calcite-action-bar>\n```\n"
      },
      "props": [
        {
          "name": "expandDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "expand-disabled",
          "reflectToAttr": true,
          "docs": "When set to true, the expand-toggling behavior will be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "Indicates whether widget is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlCollapse",
          "type": "string",
          "mutable": false,
          "attr": "intl-collapse",
          "reflectToAttr": false,
          "docs": "Updates the label of the collapse icon when the component is expanded.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlExpand",
          "type": "string",
          "mutable": false,
          "attr": "intl-expand",
          "reflectToAttr": false,
          "docs": "Updates the label of the expand icon when the component is not expanded.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "overflowActionsDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "overflow-actions-disabled",
          "reflectToAttr": false,
          "docs": "Disables automatically overflowing actions that won't fit into menus.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "position",
          "type": "\"end\" | \"start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Arranges the component depending on the elements 'dir' property.",
          "docsTags": [],
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(focusId?: \"expand-toggle\") => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteActionBarToggle",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when expanded has been toggled.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-action`s that will appear at the top of the action bar."
        },
        {
          "name": "bottom-actions",
          "docs": "A slot for adding `calcite-action`s that will appear at the bottom of the action bar, above the collapse/expand button."
        },
        {
          "name": "expand-tooltip",
          "docs": "Used to set the tooltip for the expand toggle."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action-group",
        "calcite-action",
        "calcite-tooltip-manager"
      ],
      "dependencyGraph": {
        "calcite-action-bar": [
          "calcite-action-group",
          "calcite-action",
          "calcite-tooltip-manager"
        ],
        "calcite-action-group": [
          "calcite-action-menu"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-tooltip-manager",
          "calcite-popover"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-action-group/calcite-action-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action-group",
      "readme": "# calcite-action-group\n\nThe `calcite-action-group` is a wrapper for multiple `calcite-action`s and housed in `calcite-action-bar` and `calcite-action-pad`.\n",
      "docs": "The `calcite-action-group` is a wrapper for multiple `calcite-action`s and housed in `calcite-action-bar` and `calcite-action-pad`.",
      "docsTags": [
        {
          "text": "- A slot for adding a group of `calcite-action`s.",
          "name": "slot"
        },
        {
          "text": "menu-actions - a slot for adding an overflow menu with actions inside a dropdown.",
          "name": "slot"
        },
        {
          "text": "menu-tooltip - a slot for adding an tooltip for the menu.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "columns",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "columns",
          "reflectToAttr": true,
          "docs": "Indicates number of columns.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "Indicates whether widget is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlMore",
          "type": "string",
          "mutable": false,
          "attr": "intl-more",
          "reflectToAttr": false,
          "docs": "Text string for the actions menu.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"grid\" | \"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Indicates the horizontal, vertical, or grid layout of the component.",
          "docsTags": [],
          "default": "\"vertical\"",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuOpen",
          "type": "boolean",
          "mutable": true,
          "attr": "menu-open",
          "reflectToAttr": true,
          "docs": "Opens the action menu.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding a group of `calcite-action`s."
        },
        {
          "name": "menu-actions",
          "docs": "a slot for adding an overflow menu with actions inside a dropdown."
        },
        {
          "name": "menu-tooltip",
          "docs": "a slot for adding an tooltip for the menu."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-action-bar",
        "calcite-action-pad"
      ],
      "dependencies": [
        "calcite-action-menu"
      ],
      "dependencyGraph": {
        "calcite-action-group": [
          "calcite-action-menu"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-tooltip-manager",
          "calcite-popover"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-action-bar": [
          "calcite-action-group"
        ],
        "calcite-action-pad": [
          "calcite-action-group"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-action-menu/calcite-action-menu.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action-menu",
      "readme": "# calcite-action-menu\n",
      "docs": "",
      "docsTags": [
        {
          "text": "- A slot for adding `calcite-action`s.",
          "name": "slot"
        },
        {
          "text": "tooltip - a slot for adding an tooltip for the menu.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "Indicates whether widget is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flipPlacements",
          "type": "Placement[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the available placements that can be used when a flip occurs.",
          "docsTags": [],
          "values": [
            {
              "type": "Placement[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Text string for the actions menu.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Opens the action menu.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": false,
          "docs": "Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "Placement | PlacementRtl | VariationRtl",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Determines where the component will be positioned relative to the referenceElement.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "type": "Placement"
            },
            {
              "type": "PlacementRtl"
            },
            {
              "type": "VariationRtl"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the action.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteActionMenuOpenChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the open property has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-action`s."
        },
        {
          "name": "tooltip",
          "docs": "a slot for adding an tooltip for the menu."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-action-group",
        "calcite-panel"
      ],
      "dependencies": [
        "calcite-action",
        "calcite-tooltip-manager",
        "calcite-popover"
      ],
      "dependencyGraph": {
        "calcite-action-menu": [
          "calcite-action",
          "calcite-tooltip-manager",
          "calcite-popover"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-action-group": [
          "calcite-action-menu"
        ],
        "calcite-panel": [
          "calcite-action-menu"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-action-pad/calcite-action-pad.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-action-pad",
      "readme": "# calcite-action-pad\n\nThe `calcite-action-pad` component is made up of `calcite-action`s in the form of clickable icons. This does not have an expandable option and is a smaller and simpler component than `calcite-action-bar`.\n",
      "docs": "The `calcite-action-pad` component is made up of `calcite-action`s in the form of clickable icons. This does not have an expandable option and is a smaller and simpler component than `calcite-action-bar`.",
      "docsTags": [
        {
          "text": "- A slot for adding `calcite-action`s to the action pad.",
          "name": "slot"
        },
        {
          "text": "expand-tooltip - Used to set the tooltip for the expand toggle.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Basic Action Pad\n\nRenders a basic action pad with `calcite-action`s.\n\n```html\n<calcite-action-pad>\n  <calcite-action text=\"Undo\" icon=\"undo\"></calcite-action>\n  <calcite-action text=\"Redo\" icon=\"redo\"></calcite-action>\n</calcite-action-pad>\n```\n\n#### With Grouping\n\nRenders a group of `calcite-action`s contained in a `calcite-action-group`. Actions in a group are visually separated from other groups or actions in the pad.\n\n```html\n<calcite-action-pad>\n  <calcite-action-group>\n    <calcite-action text=\"Home\" icon=\"home\"></calcite-action>\n    <calcite-action text=\"Styles\" icon=\"add-in-edit\"></calcite-action>\n  </calcite-action-group>\n\n  <calcite-action text=\"Tips\" icon=\"lightbulb\"></calcite-action>\n</calcite-action-pad>\n```\n",
        "tooltip": "### Tooltip on the expand action\n\n```html\n<calcite-action-pad id=\"action-pad-test\">\n  <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n</calcite-action-pad>\n<calcite-tooltip id=\"tooltip\">Expand</calcite-tooltip>\n<script>\n  var actionPad = document.getElementById(\"action-pad-test\");\n  var tooltip = document.getElementById(\"tooltip\");\n  actionPad.tooltipExpand = tooltip;\n</script>\n```\n"
      },
      "props": [
        {
          "name": "expandDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "expand-disabled",
          "reflectToAttr": true,
          "docs": "When set to true, the expand-toggling behavior will be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "Indicates whether widget is expanded.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlCollapse",
          "type": "string",
          "mutable": false,
          "attr": "intl-collapse",
          "reflectToAttr": false,
          "docs": "Updates the label of the collapse icon when the component is expanded.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlExpand",
          "type": "string",
          "mutable": false,
          "attr": "intl-expand",
          "reflectToAttr": false,
          "docs": "Updates the label of the expand icon when the component is not expanded.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"grid\" | \"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Indicates the horizontal or vertical layout of the component.",
          "docsTags": [],
          "default": "\"vertical\"",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"end\" | \"start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Arranges the component depending on the elements 'dir' property.",
          "docsTags": [],
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(focusId?: \"expand-toggle\") => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteActionPadToggle",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when expanded has been toggled.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-action`s to the action pad."
        },
        {
          "name": "expand-tooltip",
          "docs": "Used to set the tooltip for the expand toggle."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action-group",
        "calcite-action",
        "calcite-tooltip-manager"
      ],
      "dependencyGraph": {
        "calcite-action-pad": [
          "calcite-action-group",
          "calcite-action",
          "calcite-tooltip-manager"
        ],
        "calcite-action-group": [
          "calcite-action-menu"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-tooltip-manager",
          "calcite-popover"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-alert/calcite-alert.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-alert",
      "readme": "# calcite-alert\n",
      "docs": "",
      "docsTags": [
        {
          "text": "title - Title of the alert (optional)",
          "name": "slot"
        },
        {
          "text": "message - Main text of the alert",
          "name": "slot"
        },
        {
          "text": "link - Optional action to take from the alert (undo, try again, link to page, etc.)",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "A single instance of an alert. Multiple alerts will aggregate in a queue.\n\n```html\n<calcite-alert>\n  <div slot=\"title\">Title of alert</div>\n  <div slot=\"alert-message\">Message text of the alert</div>\n  <a slot=\"alert-link\" href=\"#\">Retry</a>\n</calcite-alert>\n<calcite-alert>\n  <div slot=\"title\">Title of alert</div>\n  <div slot=\"alert-message\">Message text of the alert</div>\n  <a slot=\"alert-link\" href=\"#\">Retry</a>\n</calcite-alert>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Is the alert currently active or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autoDismiss",
          "type": "boolean",
          "mutable": false,
          "attr": "auto-dismiss",
          "reflectToAttr": false,
          "docs": "Close the alert automatically (recommended for passive, non-blocking alerts)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autoDismissDuration",
          "type": "\"fast\" | \"medium\" | \"slow\"",
          "mutable": false,
          "attr": "auto-dismiss-duration",
          "reflectToAttr": true,
          "docs": "Duration of autoDismiss (only used with `autoDismiss`)",
          "docsTags": [],
          "default": "this.autoDismiss ? \"medium\" : null",
          "values": [
            {
              "value": "fast",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "slow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"blue\" | \"green\" | \"red\" | \"yellow\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "Color for the alert (will apply to top border and icon)",
          "docsTags": [],
          "default": "\"blue\"",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean | string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "when used as a boolean set to true, show a default recommended icon. You can\nalso pass a calcite-ui-icon name to this prop to display a requested icon",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlClose",
          "type": "string",
          "mutable": false,
          "attr": "intl-close",
          "reflectToAttr": false,
          "docs": "string to override English close text",
          "docsTags": [],
          "default": "TEXT.intlClose",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the button, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "focus either the slotted link or the close button",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteAlertClose",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when an alert is closed",
          "docsTags": []
        },
        {
          "event": "calciteAlertOpen",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when an alert is opened",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteAlertSync",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteAlertRegister",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "link",
          "docs": "Optional action to take from the alert (undo, try again, link to page, etc.)"
        },
        {
          "name": "message",
          "docs": "Main text of the alert"
        },
        {
          "name": "title",
          "docs": "Title of the alert (optional)"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-alert": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-avatar/calcite-avatar.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-avatar",
      "readme": "# calcite-avatar\n\nThe avatar component provides a unique (but consistent) visual for a user. It's built\nto work with users returned from the ArcGIS REST API.\n",
      "docs": "The avatar component provides a unique (but consistent) visual for a user. It's built\nto work with users returned from the ArcGIS REST API.",
      "docsTags": [],
      "usage": {
        "basic": "Take the following sample user returned from a [search for users](https://developers.arcgis.com/rest/users-groups-and-items/user-search.htm):\n\n```json\n{\n  \"username\": \"ron_swanson_pawnee\",\n  \"id\": \"a81470986eaeee1833b74b7d8abcd5b2\",\n  \"fullName\": \"Ron Swanson\",\n  \"firstName\": \"Ron\",\n  \"lastName\": \"Swanson\",\n  \"thumbnail\": \"mySelf.jpg\",\n  ...\n}\n```\n\nYou can create an avatar for Ron by passing these properties directly to the avatar component, like so:\n\n```html\n<calcite-avatar\n  username=\"ron_swanson_pawnee\"\n  user-id=\"a81470986eaeee1833b74b7d8abcd5b2\"\n  full-name=\"Ron Swanson\"\n  thumbnail=\"mySelf.jpg\"\n/>\n```\n\nWhen no thumbnail is provided, the avatar component will construct a useful placeholder, leveraging the user's information to construct a unique background-color with initials.\n\n**Note:** if your user is private, remember to append a token to the end of the thumbnail using the form `thumbnail.jpg?token=YOUR_LOGGED_IN_USER_TOKEN`.\n"
      },
      "props": [
        {
          "name": "fullName",
          "type": "string",
          "mutable": false,
          "attr": "full-name",
          "reflectToAttr": false,
          "docs": "full name of the user",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the avatar, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "thumbnail",
          "type": "string",
          "mutable": false,
          "attr": "thumbnail",
          "reflectToAttr": false,
          "docs": "src to an image (remember to add a token if the user is private)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "userId",
          "type": "string",
          "mutable": false,
          "attr": "user-id",
          "reflectToAttr": false,
          "docs": "unique id for user",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "username",
          "type": "string",
          "mutable": false,
          "attr": "username",
          "reflectToAttr": false,
          "docs": "user name",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-avatar": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-block/calcite-block.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-block",
      "readme": "# calcite-block\n\nThe `calcite-block` component is intended for displaying a heading and content. Content can also include stacked, collapsible `calcite-block-section`s typically housed in a panel.\n",
      "docs": "The `calcite-block` component is intended for displaying a heading and content. Content can also include stacked, collapsible `calcite-block-section`s typically housed in a panel.",
      "docsTags": [
        {
          "text": "icon - A slot for adding a trailing header icon.",
          "name": "slot"
        },
        {
          "text": "control - A slot for adding a single HTML input element in a header.",
          "name": "slot"
        },
        {
          "text": "- A slot for adding content to the block.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Default (non-collapsible)\n\n```html\n<calcite-block heading=\"Fruit\" summary=\"It's nature's candy\"> </calcite-block>\n```\n\n#### Header with control\n\nRenders a header and control with a slot for adding a single HTML element (in the header).\n\n```html\n<calcite-block heading=\"This header\" summary=\"it has an input\">\n  <div slot=\"control\"><input placeholder=\"I am in control\">\n</calcite-block>\n```\n\n#### Header with Icon\n\nRenders a header and icon with the icon.\n\n```html\n<calcite-block heading=\"Icon't believe it!\">\n  <div slot=\"icon\">🤯</div>\n</calcite-block>\n```\n\n#### Header with content (always open)\n\nRenders a header and content that remains open - no collapsible option.\n\n```html\n<calcite-block heading=\"When your son becomes a priest, do you call him...\" open>\n  <div>Father or Son?</div>\n</calcite-block>\n```\n\n#### Header with content (collapsible)\n\nRenders a header with a clickable icon to toggle the block open and closed.\n\n```html\n<calcite-block heading=\"Domestic pets\" open collapsible>\n  <calcite-block-section text=\"puppers rool, kittehs drule\"> </calcite-block-section>\n</calcite-block>\n```\n"
      },
      "props": [
        {
          "name": "collapsible",
          "type": "boolean",
          "mutable": false,
          "attr": "collapsible",
          "reflectToAttr": false,
          "docs": "When true, this block will be collapsible.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, disabled prevents interaction. This state shows items with lower opacity/grayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragHandle",
          "type": "boolean",
          "mutable": false,
          "attr": "drag-handle",
          "reflectToAttr": true,
          "docs": "When true, displays a drag handle in the header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Block heading.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlCollapse",
          "type": "string",
          "mutable": false,
          "attr": "intl-collapse",
          "reflectToAttr": false,
          "docs": "Tooltip used for the toggle when expanded.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlExpand",
          "type": "string",
          "mutable": false,
          "attr": "intl-expand",
          "reflectToAttr": false,
          "docs": "Tooltip used for the toggle when collapsed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlLoading",
          "type": "string",
          "mutable": false,
          "attr": "intl-loading",
          "reflectToAttr": false,
          "docs": "string to override English loading text",
          "docsTags": [],
          "default": "TEXT.loading",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When true, content is waiting to be loaded. This state shows a busy indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When true, the block's content will be displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "summary",
          "type": "string",
          "mutable": false,
          "attr": "summary",
          "reflectToAttr": false,
          "docs": "Block summary.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteBlockToggle",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the header has been clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding content to the block."
        },
        {
          "name": "control",
          "docs": "A slot for adding a single HTML input element in a header."
        },
        {
          "name": "icon",
          "docs": "A slot for adding a trailing header icon."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-scrim",
        "calcite-handle",
        "calcite-icon",
        "calcite-loader"
      ],
      "dependencyGraph": {
        "calcite-block": [
          "calcite-scrim",
          "calcite-handle",
          "calcite-icon",
          "calcite-loader"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ],
        "calcite-handle": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-block-section/calcite-block-section.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-block-section",
      "readme": "# calcite-block-section\n\nThe `calcite-block-section` component is a child element of `calcite-block`. Sections can have their own header and content and can be toggled open or closed.\n",
      "docs": "The `calcite-block-section` component is a child element of `calcite-block`. Sections can have their own header and content and can be toggled open or closed.",
      "docsTags": [
        {
          "text": "- A slot for adding content to the block section.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "intlCollapse",
          "type": "string",
          "mutable": false,
          "attr": "intl-collapse",
          "reflectToAttr": false,
          "docs": "Tooltip used for the toggle when expanded.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlExpand",
          "type": "string",
          "mutable": false,
          "attr": "intl-expand",
          "reflectToAttr": false,
          "docs": "Tooltip used for the toggle when collapsed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "When true, the block's section content will be displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Text displayed in the button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toggleDisplay",
          "type": "\"button\" | \"switch\"",
          "mutable": false,
          "attr": "toggle-display",
          "reflectToAttr": true,
          "docs": "This property determines the look of the section toggle.\nIf the value is \"switch\", a toggle-switch will be displayed.\nIf the value is \"button\", a clickable header is displayed.",
          "docsTags": [
            {
              "text": "revisit doc",
              "name": "todo"
            }
          ],
          "default": "\"button\"",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "switch",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteBlockSectionToggle",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the header has been clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding content to the block section."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-switch",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-block-section": [
          "calcite-switch",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-button/calcite-button.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-button",
      "readme": "# calcite-button\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-button icon-start=\"plus\" color=\"red\">Go!</calcite-button>\n```\n",
        "focusing": "You can programmatically focus a `calcite-button` with the `setFocus()` method:\n\n```html\n<div onclick=\"document.querySelector('#my-button').setFocus()\">Focus!</div>\n```\n",
        "internals": "#### Passing attributes to internal components\n\nAny additional attributes set on `<calcite-button>` are passed to the internal `<a>` or `<button>` tag. For example:\n\n- ```html\n  <calcite-button href=\"https://github.com/esri/calcite-components\" target=\"_blank\">\n    Calcite Components on GitHub\n  </calcite-button>\n  ```\n\n  would set `target=\"_blank` On the internal `<a>`.\n\n- ```html\n  <calcite-button type=\"submit\">Submit</calcite-button>\n  ```\n\n  would set `type=\"submit\"` On the internal `<button>`.\n",
        "with-icons": "```html\n<calcite-button appearance=\"solid\" icon-start=\"arrow-left\">Back</calcite-button>\n<calcite-button icon-end=\"map\" color=\"red\">Map Options</calcite-button>\n<calcite-button icon-end=\"plus\" appearance=\"outline\" color=\"inverse\">Add to favorites</calcite-button>\n```\n",
        "with-loader-disabled": "```html\n<calcite-button loading color=\"neutral\">Fetching data...</calcite-button>\n<calcite-button disabled>Can't touch this</calcite-button>\n```\n",
        "within-form": "```html\n<form name=\"sign-up\">\n  <calcite-label>\n    First name\n    <calcite-input name=\"first-name\" required value=\"Jane\"></calcite-input>\n  </calcite-label>\n  <calcite-button type=\"reset\">I should reset the form (type reset)</calcite-button>\n  <calcite-button type=\"button\">I should not submit the form (type button)</calcite-button>\n  <calcite-button>Submit</calcite-button>\n</form>\n```\n"
      },
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"end\" | \"icon-end-space-between\" | \"icon-start-space-between\" | \"space-between\" | \"start\"",
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "optionally specify alignment of button elements.",
          "docsTags": [],
          "default": "\"center\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "icon-end-space-between",
              "type": "string"
            },
            {
              "value": "icon-start-space-between",
              "type": "string"
            },
            {
              "value": "space-between",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "appearance",
          "type": "\"clear\" | \"outline\" | \"solid\" | \"transparent\"",
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "specify the appearance style of the button, defaults to solid.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "clear",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"blue\" | \"inverse\" | \"neutral\" | \"red\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "specify the color of the button, defaults to blue",
          "docsTags": [],
          "default": "\"blue\"",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "inverse",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "is the button disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "optionally pass a href - used to determine if the component should render as a button or an anchor",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the end of a button - accepts calcite ui icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "flip the icon(s) in rtl",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the start of a button - accepts calcite ui icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlLoading",
          "type": "string",
          "mutable": false,
          "attr": "intl-loading",
          "reflectToAttr": false,
          "docs": "string to override English loading text",
          "docsTags": [],
          "default": "TEXT.loading",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "optionally add a calcite-loader component to the button, disabling interaction.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "round",
          "type": "boolean",
          "mutable": false,
          "attr": "round",
          "reflectToAttr": true,
          "docs": "optionally add a round style to the button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the button, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "splitChild",
          "type": "\"primary\" | \"secondary\" | boolean",
          "mutable": false,
          "attr": "split-child",
          "reflectToAttr": true,
          "docs": "is the button a child of a calcite-split-button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\" | \"half\"",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "specify the width of the button, defaults to auto",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "half",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-color-picker",
        "calcite-fab",
        "calcite-inline-editable",
        "calcite-split-button"
      ],
      "dependencies": [
        "calcite-loader",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-color-picker": [
          "calcite-button"
        ],
        "calcite-fab": [
          "calcite-button"
        ],
        "calcite-inline-editable": [
          "calcite-button"
        ],
        "calcite-split-button": [
          "calcite-button"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-card/calcite-card.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-card",
      "readme": "# calcite-card\n",
      "docs": "Cards do not include a grid or bounding container\n- cards will expand to fit the width of their container",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "intlDeselect",
          "type": "string",
          "mutable": false,
          "attr": "intl-deselect",
          "reflectToAttr": false,
          "docs": "string to override English deselect text for checkbox when selectable is true",
          "docsTags": [],
          "default": "TEXT.deselect",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlLoading",
          "type": "string",
          "mutable": false,
          "attr": "intl-loading",
          "reflectToAttr": false,
          "docs": "string to override English loading text",
          "docsTags": [],
          "default": "TEXT.loading",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlSelect",
          "type": "string",
          "mutable": false,
          "attr": "intl-select",
          "reflectToAttr": false,
          "docs": "string to override English select text for checkbox when selectable is true",
          "docsTags": [],
          "default": "TEXT.select",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When true, the cards content is waiting to be loaded. This state shows a busy indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectable",
          "type": "boolean",
          "mutable": false,
          "attr": "selectable",
          "reflectToAttr": true,
          "docs": "Indicates whether the card is selectable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Indicates whether the card is selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteCardSelect",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when a selectable card is selected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-loader",
        "calcite-checkbox"
      ],
      "dependencyGraph": {
        "calcite-card": [
          "calcite-loader",
          "calcite-checkbox"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-checkbox/calcite-checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-checkbox",
      "readme": "# calcite-checkbox\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-checkbox id=\"first-name\" name=\"first-name\"></calcite-checkbox>\n```\n",
        "checked-with-calcite-label": "```html\n<calcite-label layout=\"inline\" for=\"checked-item\">\n  To do\n  <calcite-checkbox checked id=\"checked-item\" name=\"checked-item\"></calcite-checkbox>\n</calcite-label>\n```\n",
        "hovered-with-calcite-label": "```html\n<calcite-label layout=\"inline\" for=\"hovered-item\">\n  <calcite-checkbox hovered id=\"hovered-item\" name=\"hovered-item\"></calcite-checkbox>\n  To do\n</calcite-label>\n```\n",
        "indeterminate-with-native-label": "```html\n<label for=\"checked-indeterminate\">\n  Status\n  <calcite-checkbox checked indeterminate id=\"checked-indeterminate\" name=\"checked-indeterminate\"></calcite-checkbox>\n</label>\n```\n"
      },
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "The checked state of the checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "True if the checkbox is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "guid",
          "type": "string",
          "mutable": true,
          "attr": "guid",
          "reflectToAttr": true,
          "docs": "The id attribute of the checkbox.  When omitted, a globally unique identifier is used.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hovered",
          "type": "boolean",
          "mutable": true,
          "attr": "hovered",
          "reflectToAttr": true,
          "docs": "The hovered state of the checkbox.",
          "docsTags": [
            {
              "name": "private"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": true,
          "attr": "indeterminate",
          "reflectToAttr": true,
          "docs": "True if the checkbox is initially indeterminate,\nwhich is independent from its checked state\nhttps://css-tricks.com/indeterminate-checkboxes/",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name of the checkbox input",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the checkbox, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the checkbox input",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteCheckboxChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checkbox checked status changes",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-card",
        "calcite-tree-item"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-card": [
          "calcite-checkbox"
        ],
        "calcite-tree-item": [
          "calcite-checkbox"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-chip/calcite-chip.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-chip",
      "readme": "# calcite-chip\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "appearance",
          "type": "\"clear\" | \"solid\"",
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "specify the appearance style of the button, defaults to solid.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "clear",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"blue\" | \"green\" | \"grey\" | \"red\" | \"yellow\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "specify the color of the button, defaults to blue",
          "docsTags": [],
          "default": "\"grey\"",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dismissLabel",
          "type": "string",
          "mutable": false,
          "attr": "dismiss-label",
          "reflectToAttr": false,
          "docs": "Aria label for the \"x\" button",
          "docsTags": [],
          "default": "TEXT.close",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "mutable": false,
          "attr": "dismissible",
          "reflectToAttr": true,
          "docs": "Optionally show a button the user can click to dismiss the chip",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display - accepts Calcite UI icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "flip the icon in rtl",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the chip, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteChipDismiss",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the dismiss button is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-combobox",
        "calcite-rating"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-chip": [
          "calcite-icon"
        ],
        "calcite-combobox": [
          "calcite-chip"
        ],
        "calcite-rating": [
          "calcite-chip"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-color-picker/calcite-color-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-color-picker",
      "readme": "# calcite-color-picker\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowEmpty",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-empty",
          "reflectToAttr": false,
          "docs": "When false, empty color (null) will be allowed as a value. Otherwise, a color value is always enforced by the component.\n\nWhen true, clearing the input and blurring will restore the last valid color set. When false, it will set it to empty.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "appearance",
          "type": "\"default\" | \"minimal\"",
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "specify the appearance - default (containing border), or minimal (no containing border)",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "minimal",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"auto\" | \"hex\" | \"hexa\" | \"hsl\" | \"hsl-css\" | \"hsla\" | \"hsla-css\" | \"hsv\" | \"hsva\" | \"rgb\" | \"rgb-css\" | \"rgba\" | \"rgba-css\"",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "The format of the value property.\n\nWhen \"auto\", the format will be inferred from `value` when set.",
          "docsTags": [],
          "default": "defaultFormat",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "hex",
              "type": "string"
            },
            {
              "value": "hexa",
              "type": "string"
            },
            {
              "value": "hsl",
              "type": "string"
            },
            {
              "value": "hsl-css",
              "type": "string"
            },
            {
              "value": "hsla",
              "type": "string"
            },
            {
              "value": "hsla-css",
              "type": "string"
            },
            {
              "value": "hsv",
              "type": "string"
            },
            {
              "value": "hsva",
              "type": "string"
            },
            {
              "value": "rgb",
              "type": "string"
            },
            {
              "value": "rgb-css",
              "type": "string"
            },
            {
              "value": "rgba",
              "type": "string"
            },
            {
              "value": "rgba-css",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideChannels",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-channels",
          "reflectToAttr": false,
          "docs": "When true, hides the RGB/HSV channel inputs",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideHex",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-hex",
          "reflectToAttr": false,
          "docs": "When true, hides the hex input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideSaved",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-saved",
          "reflectToAttr": false,
          "docs": "When true, hides the saved colors section",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlB",
          "type": "string",
          "mutable": false,
          "attr": "intl-b",
          "reflectToAttr": false,
          "docs": "Label used for the blue channel",
          "docsTags": [],
          "default": "TEXT.b",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlBlue",
          "type": "string",
          "mutable": false,
          "attr": "intl-blue",
          "reflectToAttr": false,
          "docs": "Label used for the blue channel description",
          "docsTags": [],
          "default": "TEXT.blue",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlDeleteColor",
          "type": "string",
          "mutable": false,
          "attr": "intl-delete-color",
          "reflectToAttr": false,
          "docs": "Label used for the delete color button.",
          "docsTags": [],
          "default": "TEXT.deleteColor",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlG",
          "type": "string",
          "mutable": false,
          "attr": "intl-g",
          "reflectToAttr": false,
          "docs": "Label used for the green channel",
          "docsTags": [],
          "default": "TEXT.g",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlGreen",
          "type": "string",
          "mutable": false,
          "attr": "intl-green",
          "reflectToAttr": false,
          "docs": "Label used for the green channel description",
          "docsTags": [],
          "default": "TEXT.green",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlH",
          "type": "string",
          "mutable": false,
          "attr": "intl-h",
          "reflectToAttr": false,
          "docs": "Label used for the hue channel",
          "docsTags": [],
          "default": "TEXT.h",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlHex",
          "type": "string",
          "mutable": false,
          "attr": "intl-hex",
          "reflectToAttr": false,
          "docs": "Label used for the hex input",
          "docsTags": [],
          "default": "TEXT.hex",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlHsv",
          "type": "string",
          "mutable": false,
          "attr": "intl-hsv",
          "reflectToAttr": false,
          "docs": "Label used for the HSV mode",
          "docsTags": [],
          "default": "TEXT.hsv",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlHue",
          "type": "string",
          "mutable": false,
          "attr": "intl-hue",
          "reflectToAttr": false,
          "docs": "Label used for the hue channel description",
          "docsTags": [],
          "default": "TEXT.hue",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlNoColor",
          "type": "string",
          "mutable": false,
          "attr": "intl-no-color",
          "reflectToAttr": false,
          "docs": "Label used for the hex input when there is no color selected.",
          "docsTags": [],
          "default": "TEXT.noColor",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlR",
          "type": "string",
          "mutable": false,
          "attr": "intl-r",
          "reflectToAttr": false,
          "docs": "Label used for the red channel",
          "docsTags": [],
          "default": "TEXT.r",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlRed",
          "type": "string",
          "mutable": false,
          "attr": "intl-red",
          "reflectToAttr": false,
          "docs": "Label used for the red channel description",
          "docsTags": [],
          "default": "TEXT.red",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlRgb",
          "type": "string",
          "mutable": false,
          "attr": "intl-rgb",
          "reflectToAttr": false,
          "docs": "Label used for the RGB mode",
          "docsTags": [],
          "default": "TEXT.rgb",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlS",
          "type": "string",
          "mutable": false,
          "attr": "intl-s",
          "reflectToAttr": false,
          "docs": "Label used for the saturation channel",
          "docsTags": [],
          "default": "TEXT.s",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlSaturation",
          "type": "string",
          "mutable": false,
          "attr": "intl-saturation",
          "reflectToAttr": false,
          "docs": "Label used for the saturation channel description",
          "docsTags": [],
          "default": "TEXT.saturation",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlSaveColor",
          "type": "string",
          "mutable": false,
          "attr": "intl-save-color",
          "reflectToAttr": false,
          "docs": "Label used for the save color button.",
          "docsTags": [],
          "default": "TEXT.saveColor",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlSaved",
          "type": "string",
          "mutable": false,
          "attr": "intl-saved",
          "reflectToAttr": false,
          "docs": "Label used for the saved colors section",
          "docsTags": [],
          "default": "TEXT.saved",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlV",
          "type": "string",
          "mutable": false,
          "attr": "intl-v",
          "reflectToAttr": false,
          "docs": "Label used for the value channel",
          "docsTags": [],
          "default": "TEXT.v",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlValue",
          "type": "string",
          "mutable": false,
          "attr": "intl-value",
          "reflectToAttr": false,
          "docs": "Label used for the",
          "docsTags": [],
          "default": "TEXT.value",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The scale of the color picker.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "storageId",
          "type": "string",
          "mutable": false,
          "attr": "storage-id",
          "reflectToAttr": false,
          "docs": "Storage ID for colors.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "HSL | HSL & ObjectWithAlpha | HSV | HSV & ObjectWithAlpha | RGB | RGB & ObjectWithAlpha | string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The color value.\n\nThis value can be either a {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color|CSS string}\na RGB, HSL or HSV object.\n\nThe type will be preserved as the color is updated.",
          "docsTags": [],
          "default": "defaultValue",
          "values": [
            {
              "type": "HSL"
            },
            {
              "type": "HSL & ObjectWithAlpha"
            },
            {
              "type": "HSV"
            },
            {
              "type": "HSV & ObjectWithAlpha"
            },
            {
              "type": "RGB"
            },
            {
              "type": "RGB & ObjectWithAlpha"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteColorPickerChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the color value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": true,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-tab-title",
        "calcite-tab",
        "calcite-input",
        "calcite-color-picker-hex-input",
        "calcite-tabs",
        "calcite-tab-nav",
        "calcite-button",
        "calcite-color-picker-swatch"
      ],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-tab-title",
          "calcite-tab",
          "calcite-input",
          "calcite-color-picker-hex-input",
          "calcite-tabs",
          "calcite-tab-nav",
          "calcite-button",
          "calcite-color-picker-swatch"
        ],
        "calcite-tab-title": [
          "calcite-icon"
        ],
        "calcite-input": [
          "calcite-progress",
          "calcite-icon"
        ],
        "calcite-color-picker-hex-input": [
          "calcite-input",
          "calcite-color-picker-swatch"
        ],
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-color-picker-hex-input/calcite-color-picker-hex-input.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-color-picker-hex-input",
      "readme": "# calcite-hex-input\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowEmpty",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-empty",
          "reflectToAttr": false,
          "docs": "When false, empty color (null) will be allowed as a value. Otherwise, a color value is always enforced by the component.\n\nWhen true, clearing the input and blurring will restore the last valid color set. When false, it will set it to empty.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlHex",
          "type": "string",
          "mutable": false,
          "attr": "intl-hex",
          "reflectToAttr": false,
          "docs": "Label used for the hex input.",
          "docsTags": [],
          "default": "TEXT.hex",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlNoColor",
          "type": "string",
          "mutable": false,
          "attr": "intl-no-color",
          "reflectToAttr": false,
          "docs": "Label used for the hex input when there is no color selected.",
          "docsTags": [],
          "default": "TEXT.noColor",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The component's scale.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The hex value.",
          "docsTags": [],
          "default": "normalizeHex(DEFAULT_COLOR.hex())",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteColorPickerHexInputChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the hex value changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [
        "calcite-input",
        "calcite-color-picker-swatch"
      ],
      "dependencyGraph": {
        "calcite-color-picker-hex-input": [
          "calcite-input",
          "calcite-color-picker-swatch"
        ],
        "calcite-input": [
          "calcite-progress",
          "calcite-icon"
        ],
        "calcite-color-picker": [
          "calcite-color-picker-hex-input"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-color-picker-swatch/calcite-color-picker-swatch.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-color-picker-swatch",
      "readme": "# my-component\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Used to display whether the swatch is active or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The color value.",
          "docsTags": [
            {
              "text": "https ://developer.mozilla.org/en-US/docs/Web/CSS/color_value",
              "name": "see"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The component scale.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-color-picker",
        "calcite-color-picker-hex-input"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-color-picker-swatch"
        ],
        "calcite-color-picker-hex-input": [
          "calcite-color-picker-swatch"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-combobox/calcite-combobox.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-combobox",
      "readme": "# calcite-combobox\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Open and close combobox",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "allowCustomValues",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-custom-values",
          "reflectToAttr": false,
          "docs": "Allow entry of custom values which are not in the original set of items",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disable combobox input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Aria label for combobox (required)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "maxItems",
          "type": "number",
          "mutable": false,
          "attr": "max-items",
          "reflectToAttr": false,
          "docs": "Specify the maximum number of combobox items (including nested children) to display before showing the scroller",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": false,
          "docs": "Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder text for input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specify the scale of the combobox, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"ancestors\" | \"multi\" | \"single\"",
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "specify the selection mode\n- multi: allow any number of selected items (default)\n- single: only one selection)\n- ancestors: like multi, but show ancestors of selected items as selected, only deepest children shown in chips",
          "docsTags": [],
          "default": "\"multi\"",
          "values": [
            {
              "value": "ancestors",
              "type": "string"
            },
            {
              "value": "multi",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "reposition() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteComboboxChipDismiss",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Called when a selected item in the combobox is dismissed via its chip *",
          "docsTags": []
        },
        {
          "event": "calciteComboboxFilterChange",
          "detail": "{ visibleItems: HTMLCalciteComboboxItemElement[]; text: string; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Called when the user has entered text to filter the options list",
          "docsTags": []
        },
        {
          "event": "calciteLookupChange",
          "detail": "HTMLCalciteComboboxItemElement[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Called when the selected items set changes",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteComboboxItemChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-chip",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-combobox": [
          "calcite-chip",
          "calcite-icon"
        ],
        "calcite-chip": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-combobox-item/calcite-combobox-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-combobox-item",
      "readme": "# calcite-combobox-item\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "True when item is highlighted either from keyboard or mouse hover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ancestors",
          "type": "ComboboxChildElement[]",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Parent and grandparent combobox items, this is set internally for use from combobox",
          "docsTags": [],
          "values": [
            {
              "type": "ComboboxChildElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "constant",
          "type": "boolean",
          "mutable": false,
          "attr": "constant",
          "reflectToAttr": true,
          "docs": "Don't filter this item based on the search text",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, the item cannot be clicked and is visually muted.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "guid",
          "type": "string",
          "mutable": false,
          "attr": "guid",
          "reflectToAttr": false,
          "docs": "Unique identifier, used for accessibility",
          "docsTags": [],
          "default": "guid()",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Custom icon to display both in combobox chips and next to combobox item text",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Set this to true to pre-select an item. Toggles when an item is checked/unchecked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textLabel",
          "type": "string",
          "mutable": false,
          "attr": "text-label",
          "reflectToAttr": true,
          "docs": "The main label for this item.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The item's associated value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "toggleSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggleSelected(coerce?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "Used to toggle the selection state. By default this won't trigger an event.\nThe first argument allows the value to be coerced, rather than swapping values.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteComboboxItemChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the item is selected or unselected.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-combobox-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-combobox-item-group/calcite-combobox-item-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-combobox-item-group",
      "readme": "# calcite-combobox-item-group\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ancestors",
          "type": "ComboboxChildElement[]",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Parent and grandparent combobox items, this is set internally for use from combobox",
          "docsTags": [],
          "values": [
            {
              "type": "ComboboxChildElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Title of the group",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-date-picker/calcite-date-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-date-picker",
      "readme": "# calcite-date-picker\n\nThe `calcite-date-picker` component allows for selecting a date via a calendar or text input. It supports multiple locales, languages, right to left, and is fully keyboard accessible.\n",
      "docs": "The `calcite-date-picker` component allows for selecting a date via a calendar or text input. It supports multiple locales, languages, right to left, and is fully keyboard accessible.",
      "docsTags": [],
      "usage": {
        "basic": "You can set a min and max range, as well as an initial value with ISO 8601 formatted strings:\n\n```html\n<calcite-date-picker value=\"2020-03-27\" min=\"2020-02-01\" max=\"2021-01-01\" />\n```\n",
        "range": "You can also add range property to activate date range mode. In this mode, you can specify start and end instead of the single value property.\n\n```html\n<calcite-date-picker range start=\"2020-03-15\" end=\"2020-03-27\" min=\"2020-02-01\" max=\"2021-01-01\" />\n```\n"
      },
      "props": [
        {
          "name": "activeRange",
          "type": "\"end\" | \"start\"",
          "mutable": false,
          "attr": "active-range",
          "reflectToAttr": false,
          "docs": "Active range",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "end",
          "type": "string",
          "mutable": true,
          "attr": "end",
          "reflectToAttr": false,
          "docs": "Selected end date",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "endAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Selected end date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlNextMonth",
          "type": "string",
          "mutable": false,
          "attr": "intl-next-month",
          "reflectToAttr": false,
          "docs": "Localized string for \"next month\" (used for aria label)",
          "docsTags": [],
          "default": "TEXT.nextMonth",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlPrevMonth",
          "type": "string",
          "mutable": false,
          "attr": "intl-prev-month",
          "reflectToAttr": false,
          "docs": "Localized string for \"previous month\" (used for aria label)",
          "docsTags": [],
          "default": "TEXT.prevMonth",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "BCP 47 language tag for desired language and country format",
          "docsTags": [],
          "default": "document.documentElement.lang || \"en\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Latest allowed date (\"yyyy-mm-dd\")",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Latest allowed date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Earliest allowed date (\"yyyy-mm-dd\")",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Earliest allowed date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "proximitySelectionDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "proximity-selection-disabled",
          "reflectToAttr": false,
          "docs": "Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "range",
          "type": "boolean",
          "mutable": false,
          "attr": "range",
          "reflectToAttr": true,
          "docs": "Range mode activation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the date picker",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "start",
          "type": "string",
          "mutable": false,
          "attr": "start",
          "reflectToAttr": false,
          "docs": "Selected start date",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "startAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Selected start date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Selected date",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "valueAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Selected date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteDatePickerChange",
          "detail": "Date",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Trigger calcite date change when a user changes the date.",
          "docsTags": []
        },
        {
          "event": "calciteDatePickerRangeChange",
          "detail": "DateRangeChange",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Trigger calcite date change when a user changes the date range.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focusin",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-input-date-picker"
      ],
      "dependencies": [
        "calcite-date-picker-month-header",
        "calcite-date-picker-month"
      ],
      "dependencyGraph": {
        "calcite-date-picker": [
          "calcite-date-picker-month-header",
          "calcite-date-picker-month"
        ],
        "calcite-date-picker-month-header": [
          "calcite-icon"
        ],
        "calcite-date-picker-month": [
          "calcite-date-picker-day"
        ],
        "calcite-input-date-picker": [
          "calcite-date-picker"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-date-picker-day/calcite-date-picker-day.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-date-picker-day",
      "readme": "# calcite-date-day\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Date is actively in focus for keyboard navigation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentMonth",
          "type": "boolean",
          "mutable": false,
          "attr": "current-month",
          "reflectToAttr": true,
          "docs": "Date is in the current month.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "day",
          "type": "number",
          "mutable": false,
          "attr": "day",
          "reflectToAttr": false,
          "docs": "Day of the month to be shown.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Date is outside of range and can't be selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "endOfRange",
          "type": "boolean",
          "mutable": false,
          "attr": "end-of-range",
          "reflectToAttr": true,
          "docs": "Date is the end of date range",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlighted",
          "type": "boolean",
          "mutable": false,
          "attr": "highlighted",
          "reflectToAttr": true,
          "docs": "Date is currently highlighted as part of the range",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "localeData",
          "type": "DateLocaleData",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "CLDR data for current locale",
          "docsTags": [],
          "values": [
            {
              "type": "DateLocaleData"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "range",
          "type": "boolean",
          "mutable": false,
          "attr": "range",
          "reflectToAttr": true,
          "docs": "Showing date range",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rangeHover",
          "type": "boolean",
          "mutable": false,
          "attr": "range-hover",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the date picker",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Date is the current selected date of the picker",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "startOfRange",
          "type": "boolean",
          "mutable": false,
          "attr": "start-of-range",
          "reflectToAttr": true,
          "docs": "Date is the start of date range",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Date value for the day.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteDaySelect",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when user selects day",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "mouseover",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-date-picker-month"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-date-picker-month": [
          "calcite-date-picker-day"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-date-picker-month/calcite-date-picker-month.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-date-picker-month",
      "readme": "# calcite-date-month\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeDate",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Date currently active.",
          "docsTags": [],
          "default": "new Date()",
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "endDate",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "End date currently active",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hoverRange",
          "type": "any",
          "mutable": false,
          "attr": "hover-range",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Maximum date of the calendar above which is disabled.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Minimum date of the calendar below which is disabled.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the date picker",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedDate",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Already selected date.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "startDate",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Start date currently active.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteDatePickerActiveDateChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Active date for the user keyboard access.",
          "docsTags": []
        },
        {
          "event": "calciteDatePickerSelect",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when user selects the date.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "mouseout",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-date-picker"
      ],
      "dependencies": [
        "calcite-date-picker-day"
      ],
      "dependencyGraph": {
        "calcite-date-picker-month": [
          "calcite-date-picker-day"
        ],
        "calcite-date-picker": [
          "calcite-date-picker-month"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-date-picker-month-header/calcite-date-picker-month-header.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-date-picker-month-header",
      "readme": "# calcite-date-month-header\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeDate",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Focused date with indicator (will become selected date if user proceeds)",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlNextMonth",
          "type": "string",
          "mutable": false,
          "attr": "intl-next-month",
          "reflectToAttr": false,
          "docs": "Localized string for next month.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlPrevMonth",
          "type": "string",
          "mutable": false,
          "attr": "intl-prev-month",
          "reflectToAttr": false,
          "docs": "Localized string for previous month.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "User's language and region as BCP 47 formatted string.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "localeData",
          "type": "DateLocaleData",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "CLDR locale data for translated calendar info",
          "docsTags": [],
          "values": [
            {
              "type": "DateLocaleData"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Maximum date of the calendar above which is disabled.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Minimum date of the calendar below which is disabled.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the date picker",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedDate",
          "type": "Date",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Already selected date.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteDatePickerSelect",
          "detail": "Date",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Changes to active date",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-date-picker"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-date-picker-month-header": [
          "calcite-icon"
        ],
        "calcite-date-picker": [
          "calcite-date-picker-month-header"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-dropdown/calcite-dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-dropdown",
      "readme": "# calcite-dropdown\n\nA `calcite-dropdown` can be used to provide an absolutely positioned set of selectable items. You can combine multiple groups of items and selection modes, and optionally pass a title for each group. All `<calcite-dropdown-item>` must have a parent `<calcite-dropdown-group>`, even if `group-title` attribute is not set.\n",
      "docs": "A `calcite-dropdown` can be used to provide an absolutely positioned set of selectable items. You can combine multiple groups of items and selection modes, and optionally pass a title for each group. All `<calcite-dropdown-item>` must have a parent `<calcite-dropdown-group>`, even if `group-title` attribute is not set.",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-dropdown>\n  <calcite-button slot=\"dropdown-trigger\">Open Dropdown</calcite-button>\n  <calcite-dropdown-group>\n    <calcite-dropdown-item>Relevance</calcite-dropdown-item>\n    <calcite-dropdown-item active>Date modified</calcite-dropdown-item>\n    <calcite-dropdown-item>Title</calcite-dropdown-item>\n  </calcite-dropdown-group>\n</calcite-dropdown>\n```\n",
        "disabling-close-on-select": "You can choose to leave the dropdown open when an item is selected with the `disable-close-on-select` attribute. Note that this will only apply when the `calcite-dropdown-group` selection mode is set to `single` or `multi` - dropdowns will always close when an item in `none` selection mode is selected.\n\n```html\n<calcite-dropdown disable-close-on-select>\n  <calcite-button id=\"trigger\" slot=\"dropdown-trigger\">Open dropdown</calcite-button>\n  <calcite-dropdown-group id=\"group-1\" selection-mode=\"single\">\n    <calcite-dropdown-item id=\"item-1\"> Dropdown Item Content </calcite-dropdown-item>\n    <calcite-dropdown-item id=\"item-2\" active> Dropdown Item Content </calcite-dropdown-item>\n    <calcite-dropdown-item id=\"item-3\"> Dropdown Item Content </calcite-dropdown-item>\n  </calcite-dropdown-group>\n</calcite-dropdown>\n```\n",
        "groups": "You can combine groups in a single dropdown, with varying selection modes:\n\n```html\n<calcite-dropdown>\n  <calcite-button slot=\"dropdown-trigger\">Open Dropdown</calcite-button>\n  <calcite-dropdown-group group-title=\"Select one\">\n    <calcite-dropdown-item>Apple</calcite-dropdown-item>\n    <calcite-dropdown-item active>Orange</calcite-dropdown-item>\n    <calcite-dropdown-item>Grape</calcite-dropdown-item>\n  </calcite-dropdown-group>\n  <calcite-dropdown-group group-title=\"Select multi\" selection-mode=\"multi\">\n    <calcite-dropdown-item>Asparagus</calcite-dropdown-item>\n    <calcite-dropdown-item active>Potato</calcite-dropdown-item>\n    <calcite-dropdown-item>Yam</calcite-dropdown-item>\n  </calcite-dropdown-group>\n  <calcite-dropdown-group group-title=\"Select none (useful for actions)\" selection-mode=\"none\">\n    <calcite-dropdown-item>Plant beans</calcite-dropdown-item>\n    <calcite-dropdown-item active>Add peas</calcite-dropdown-item>\n  </calcite-dropdown-group>\n</calcite-dropdown>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableCloseOnSelect",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-close-on-select",
          "reflectToAttr": true,
          "docs": "allow the dropdown to remain open after a selection is made\nif the selection-mode of the selected item's containing group is \"none\", the dropdown will always close",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "is the dropdown disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxItems",
          "type": "number",
          "mutable": false,
          "attr": "max-items",
          "reflectToAttr": false,
          "docs": "specify the maximum number of calcite-dropdown-items to display before showing the scroller, must be greater than 0 -\nthis value does not include groupTitles passed to calcite-dropdown-group",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": false,
          "docs": "Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-leading\" | \"bottom-start\" | \"bottom-trailing\" | \"top\" | \"top-end\" | \"top-leading\" | \"top-start\" | \"top-trailing\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Determines where the dropdown will be positioned relative to the button.",
          "docsTags": [],
          "default": "DefaultDropdownPlacement",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-leading",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "bottom-trailing",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-leading",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            },
            {
              "value": "top-trailing",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of dropdown, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "HTMLCalciteDropdownItemElement[]",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "**read-only** The currently selected items",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "HTMLCalciteDropdownItemElement[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"click\" | \"hover\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "specify whether the dropdown is opened by hover or click of a trigger element",
          "docsTags": [],
          "default": "\"click\"",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "specify the width of dropdown, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "reposition() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteDropdownClose",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fires when a dropdown has been closed *",
          "docsTags": []
        },
        {
          "event": "calciteDropdownOpen",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fires when a dropdown has been opened *",
          "docsTags": []
        },
        {
          "event": "calciteDropdownSelect",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fires when a dropdown item has been selected or deselected *",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteDropdownCloseRequest",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteDropdownOpen",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        },
        {
          "event": "calciteDropdownItemKeyEvent",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteDropdownItemSelect",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteDropdownGroupRegister",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-split-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-split-button": [
          "calcite-dropdown"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-dropdown-group/calcite-dropdown-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-dropdown-group",
      "readme": "# calcite-dropdown-group\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "groupTitle",
          "type": "string",
          "mutable": false,
          "attr": "group-title",
          "reflectToAttr": true,
          "docs": "optionally set a group title for display",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the action.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"multi\" | \"none\" | \"single\"",
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "specify the selection mode - multi (allow any number of (or no) active items), single (allow and require one active item),\nnone (no active items), defaults to single",
          "docsTags": [],
          "default": "\"single\"",
          "values": [
            {
              "value": "multi",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "calciteDropdownItemRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteDropdownItemSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-dropdown-item/calcite-dropdown-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-dropdown-item",
      "readme": "# calcite-dropdown-item\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "optionally pass a href - used to determine if the component should render as anchor",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the end of an item - accepts calcite ui icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "flip the icon(s) in rtl",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the start of an item - accepts calcite ui icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Focuses the selected item.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteDropdownItemChange",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-dropdown-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-fab/calcite-fab.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-fab",
      "readme": "# calcite-fab\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "basic": "#### Without text\n\nRenders a `calcite-fab` that displays only an icon and a tooltip label.\n\n```html\n<calcite-fab label=\"Performs my custom action\"></calcite-fab>\n```\n\n#### With text\n\nRenders a `calcite-fab` that displays text along side an icon and a tooltip label.\n\n```html\n<calcite-fab label=\"Performs my custom action\" text=\"Perform Action!\" text-enabled></calcite-fab>\n```\n\n#### Loading and disabled\n\nRenders a `calcite-fab` that is loading and disabled.\n\n```html\n<calcite-fab loading disabled></calcite-fab>\n```\n"
      },
      "props": [
        {
          "name": "appearance",
          "type": "\"outline\" | \"solid\"",
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "Used to set the button's appearance. Default is outline.",
          "docsTags": [],
          "default": "\"outline\"",
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"blue\" | \"inverse\" | \"neutral\" | \"red\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "Used to set the button's color. Default is light.",
          "docsTags": [],
          "default": "\"neutral\"",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "inverse",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, disabled prevents interaction. This state shows items with lower opacity/grayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.",
          "docsTags": [],
          "default": "ICONS.plus",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the FAB, exposed on hover when textEnabled is false. If no label is provided, the label inherits what's provided for the `text` prop.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When true, content is waiting to be loaded. This state shows a busy indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specifies the size of the fab.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Text that accompanies the FAB icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "textEnabled",
          "type": "boolean",
          "mutable": false,
          "attr": "text-enabled",
          "reflectToAttr": true,
          "docs": "Indicates whether the text is displayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-button"
      ],
      "dependencyGraph": {
        "calcite-fab": [
          "calcite-button"
        ],
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-filter/calcite-filter.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-filter",
      "readme": "# calcite-filter\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "data",
          "type": "object[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The input data. The filter uses this as the starting point, and returns items\nthat contain the string entered in the input, using a partial match and recursive search.",
          "docsTags": [],
          "values": [
            {
              "type": "object[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, disabled prevents interaction. This state shows items with lower opacity/grayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlClear",
          "type": "string",
          "mutable": false,
          "attr": "intl-clear",
          "reflectToAttr": false,
          "docs": "A text label that will appear on the clear button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlLabel",
          "type": "string",
          "mutable": false,
          "attr": "intl-label",
          "reflectToAttr": false,
          "docs": "A text label that will appear next to the input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder text for the input element's placeholder attribute",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Focuses the filter input.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteFilterChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "This event fires when the filter text changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-pick-list",
        "calcite-value-list"
      ],
      "dependencies": [
        "calcite-scrim",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-filter": [
          "calcite-scrim",
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ],
        "calcite-pick-list": [
          "calcite-filter"
        ],
        "calcite-value-list": [
          "calcite-filter"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-flow/calcite-flow.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-flow",
      "readme": "# calcite-flow\n\nThe `calcite-flow` component is a series of panels that provides a user with a workflow (eg. editing experience), by which the user can switch from panel to panel of `calcite-panel`s.\n",
      "docs": "The `calcite-flow` component is a series of panels that provides a user with a workflow (eg. editing experience), by which the user can switch from panel to panel of `calcite-panel`s.",
      "docsTags": [
        {
          "text": "- A slot for adding `calcite-panel`s to the flow.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Basic\n\nRenders a basic flow with a couple `calcite-panel`s.\n\n```html\n<calcite-flow>\n  <calcite-panel heading=\"one, two, three, four\">\n    <!-- image -->\n  </calcite-panel>\n  <calcite-panel heading=\"tell me that you love me more\">\n    <!-- image -->\n  </calcite-panel>\n</calcite-flow>\n```\n\n#### Menu-actions and footer-actions\n\nRenders a flow with menu-actions and footer-actions in the form of buttons.\n\n```html\n<calcite-flow>\n  <calcite-panel heading=\"What are the most popular commute alternatives?\">\n    <button slot=\"header-menu-actions\">Reset</button>\n    <button slot=\"header-menu-actions\">Rename</button>\n    <button slot=\"footer-actions\">Save</button>\n    <button slot=\"footer-actions\">Cancel</button>\n  </calcite-panel>\n</calcite-flow>\n```\n"
      },
      "props": [],
      "methods": [
        {
          "name": "back",
          "returns": {
            "type": "Promise<HTMLCalcitePanelElement>",
            "docs": ""
          },
          "signature": "back() => Promise<HTMLCalcitePanelElement>",
          "parameters": [],
          "docs": "Removes the currently active `calcite-panel`.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "calcitePanelBackClick",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-panel`s to the flow."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-graph/calcite-graph.tsx",
      "encapsulation": "none",
      "tag": "calcite-graph",
      "readme": "# calcite-graph\n\nThe graph component is used to show small, lightweight graphs in places where a full interactive chart is not needed. This includes sparklines, histograms, and small trend plots.\n",
      "docs": "The graph component is used to show small, lightweight graphs in places where a full interactive chart is not needed. This includes sparklines, histograms, and small trend plots.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "data",
          "type": "Point[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Array of tuples describing a single data point ([x, y])\nThese data points should be sorted by x-axis value",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "Point[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "height",
          "type": "number",
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "Width of graph in pixels",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlightMax",
          "type": "number",
          "mutable": false,
          "attr": "highlight-max",
          "reflectToAttr": false,
          "docs": "End of highlight color if highlighting range",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlightMin",
          "type": "number",
          "mutable": false,
          "attr": "highlight-min",
          "reflectToAttr": false,
          "docs": "Start of highlight color if highlighting range",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "number",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Width of graph in pixels",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-slider"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-slider": [
          "calcite-graph"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-handle/calcite-handle.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-handle",
      "readme": "# calcite-handle\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "textTitle",
          "type": "string",
          "mutable": false,
          "attr": "text-title",
          "reflectToAttr": true,
          "docs": "Value for the button title attribute",
          "docsTags": [],
          "default": "\"handle\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteHandleNudge",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the the handle is activated and the up or down arrow key is pressed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-block"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-handle": [
          "calcite-icon"
        ],
        "calcite-block": [
          "calcite-handle"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-icon/calcite-icon.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-icon",
      "readme": "# calcite-icon\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "custom-icon-color": "To use a custom color for the icon fill, you can add a class to the `calcite-icon` component with the desired color.\n\n```html\n<calcite-icon class=\"my-icon-color-class\" icon=\"arrowBoldLeft\"></calcite-icon>\n```\n\n```css\n.my-icon-color-class {\n  color: #007ac2;\n}\n```\n"
      },
      "props": [
        {
          "name": "flipRtl",
          "type": "boolean",
          "mutable": false,
          "attr": "flip-rtl",
          "reflectToAttr": true,
          "docs": "When true, the icon will be flipped when the element direction is 'rtl'.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Icon scale.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textLabel",
          "type": "string",
          "mutable": false,
          "attr": "text-label",
          "reflectToAttr": false,
          "docs": "The icon label.\n\nIt is recommended to set this value if your icon is semantic.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-accordion-item",
        "calcite-action",
        "calcite-alert",
        "calcite-avatar",
        "calcite-block",
        "calcite-block-section",
        "calcite-button",
        "calcite-chip",
        "calcite-combobox",
        "calcite-combobox-item",
        "calcite-date-picker-month-header",
        "calcite-dropdown-item",
        "calcite-filter",
        "calcite-handle",
        "calcite-input",
        "calcite-input-date-picker",
        "calcite-input-message",
        "calcite-link",
        "calcite-modal",
        "calcite-notice",
        "calcite-pagination",
        "calcite-pick-list-item",
        "calcite-popover",
        "calcite-radio-group-item",
        "calcite-rating",
        "calcite-select",
        "calcite-stepper-item",
        "calcite-tab-title",
        "calcite-tile",
        "calcite-time-picker",
        "calcite-tree-item",
        "calcite-value-list-item"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-accordion-item": [
          "calcite-icon"
        ],
        "calcite-action": [
          "calcite-icon"
        ],
        "calcite-alert": [
          "calcite-icon"
        ],
        "calcite-avatar": [
          "calcite-icon"
        ],
        "calcite-block": [
          "calcite-icon"
        ],
        "calcite-block-section": [
          "calcite-icon"
        ],
        "calcite-button": [
          "calcite-icon"
        ],
        "calcite-chip": [
          "calcite-icon"
        ],
        "calcite-combobox": [
          "calcite-icon"
        ],
        "calcite-combobox-item": [
          "calcite-icon"
        ],
        "calcite-date-picker-month-header": [
          "calcite-icon"
        ],
        "calcite-dropdown-item": [
          "calcite-icon"
        ],
        "calcite-filter": [
          "calcite-icon"
        ],
        "calcite-handle": [
          "calcite-icon"
        ],
        "calcite-input": [
          "calcite-icon"
        ],
        "calcite-input-date-picker": [
          "calcite-icon"
        ],
        "calcite-input-message": [
          "calcite-icon"
        ],
        "calcite-link": [
          "calcite-icon"
        ],
        "calcite-modal": [
          "calcite-icon"
        ],
        "calcite-notice": [
          "calcite-icon"
        ],
        "calcite-pagination": [
          "calcite-icon"
        ],
        "calcite-pick-list-item": [
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-icon"
        ],
        "calcite-radio-group-item": [
          "calcite-icon"
        ],
        "calcite-rating": [
          "calcite-icon"
        ],
        "calcite-select": [
          "calcite-icon"
        ],
        "calcite-stepper-item": [
          "calcite-icon"
        ],
        "calcite-tab-title": [
          "calcite-icon"
        ],
        "calcite-tile": [
          "calcite-icon"
        ],
        "calcite-time-picker": [
          "calcite-icon"
        ],
        "calcite-tree-item": [
          "calcite-icon"
        ],
        "calcite-value-list-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-inline-editable/calcite-inline-editable.tsx",
      "encapsulation": "scoped",
      "tag": "calcite-inline-editable",
      "readme": "# calcite-inline-editable\n",
      "docs": "",
      "docsTags": [
        {
          "text": "- slot for rendering a `<calcite-input>`",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "There is no need to set a theme or scale on the `<calcite-inline-editable>` component, as it inherits these values from the wrapped `<calcite-input>`, or the closest parent component where these props are set.\n\n```html\n<calcite-inline-editable>\n  <calcite-input value=\"Entered value\" placeholder=\"My placeholder\"></calcite-input>\n</calcite-inline-editable>\n```\n",
        "with-label": "```html\n<calcite-label>\n  My great label\n  <calcite-inline-editable controls>\n    <calcite-input value=\"Entered value\" placeholder=\"My placeholder\"></calcite-input>\n  </calcite-inline-editable>\n</calcite-label>\n```\n",
        "with-save-and-cancel-controls": "```html\n<calcite-inline-editable controls>\n  <calcite-input value=\"Entered value\" placeholder=\"My placeholder\"></calcite-input>\n</calcite-inline-editable>\n```\n"
      },
      "props": [
        {
          "name": "afterConfirm",
          "type": "() => Promise<void>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "when controls, specify a callback to be executed prior to disabling editing. when provided, loading state will be handled automatically.",
          "docsTags": [],
          "values": [
            {
              "type": "() => Promise<void>"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "controls",
          "type": "boolean",
          "mutable": false,
          "attr": "controls",
          "reflectToAttr": true,
          "docs": "specify whether save/cancel controls should be displayed when editingEnabled is true, defaults to false",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "specify whether editing can be enabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editingEnabled",
          "type": "boolean",
          "mutable": true,
          "attr": "editing-enabled",
          "reflectToAttr": true,
          "docs": "specify whether the wrapped input element is editable, defaults to false",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlCancelEditing",
          "type": "string",
          "mutable": false,
          "attr": "intl-cancel-editing",
          "reflectToAttr": true,
          "docs": "specify text to be user for the cancel editing button's aria-label, defaults to `Cancel`",
          "docsTags": [],
          "default": "TEXT.intlCancelEditing",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlConfirmChanges",
          "type": "string",
          "mutable": false,
          "attr": "intl-confirm-changes",
          "reflectToAttr": true,
          "docs": "specify text to be user for the confirm changes button's aria-label, defaults to `Save`",
          "docsTags": [],
          "default": "TEXT.intlConfirmChanges",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlEnableEditing",
          "type": "string",
          "mutable": false,
          "attr": "intl-enable-editing",
          "reflectToAttr": true,
          "docs": "specify text to be user for the enable editing button's aria-label, defaults to `Click to edit`",
          "docsTags": [],
          "default": "TEXT.intlEnablingEditing",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": true,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "specify whether the confirm button should display a loading state, defaults to false",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": true,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the inline-editable component, defaults to the scale of the wrapped calcite-input or the scale of the closest wrapping component with a set scale",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "calciteInputBlur",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "slot for rendering a `<calcite-input>`"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-button"
      ],
      "dependencyGraph": {
        "calcite-inline-editable": [
          "calcite-button"
        ],
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-input/calcite-input.tsx",
      "encapsulation": "scoped",
      "tag": "calcite-input",
      "readme": "# calcite-input\n",
      "docs": "",
      "docsTags": [
        {
          "text": "`calcite-action` - A slot for positioning a button next to an input",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "```html\n<calcite-input value=\"Entered value\" placeholder=\"My placeholder\"></calcite-input>\n```\n",
        "clearable": "```html\n<calcite-label>\n  Clearable item\n  <calcite-input clearable value=\"My great name\" placeholder=\"John Doe\"></calcite-input>\n</calcite-label>\n```\n",
        "native-events": "You can also listen for native events emitted from `<calcite-input>`.\n\nYou must use `focusin`/`focusout` instead of `focus`/`blur` because these events bubble up from the rendered child element rendered inside of `<calcite-input>`\n\nAll events return an element and a value:\n\n```js\ninput.addEventListener(\"change\", logChange);\ninput.addEventListener(\"focusin\", logFocus);\ninput.addEventListener(\"focusout\", logBlur);\n\nfunction logChange() {\n  console.log(event.target.element);\n  console.log(event.target.value);\n}\n```\n",
        "with-label": "Using a wrapping `calcite-label` component lets consumers set the status attribute once and have it propagate to child `calcite-input` and `calcite-input-message` elements\n\n```html\n<calcite-label status=\"invalid\">\n  Invalid input\n  <calcite-input placeholder=\"Filter your files\" value=\"adfo2h2\"></calcite-input>\n  <calcite-input-message active icon> Something doesn't look right </calcite-input-message>\n</calcite-label>\n```\n",
        "with-message": "```html\n<calcite-label>\n  My great label\n  <calcite-input placeholder=\"Enter your information\"></calcite-input>\n  <calcite-input-message icon=\"3d-glasses\" active>\n    Here's something you should know about this input\n  </calcite-input-message>\n</calcite-label>\n```\n"
      },
      "props": [
        {
          "name": "alignment",
          "type": "\"end\" | \"start\"",
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "specify the alignment of the value of the input",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "should the input autofocus",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": true,
          "docs": "optionally display a clear button that displays when field has a value\nshows by default for search, time, date\nwill not display for type=\"textarea\"",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "is the input disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "groupSeparator",
          "type": "boolean",
          "mutable": false,
          "attr": "group-separator",
          "reflectToAttr": false,
          "docs": "for number values, displays the locale's group separator",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean | string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "when used as a boolean set to true, show a default recommended icon for certain\ninput types (tel, password, email, date, time, search). You can also pass a\ncalcite-ui-icon name to this prop to display a requested icon for any input type",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "flip the icon in rtl",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "specify if the input is in loading state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "BCP 47 language tag for desired language and country format",
          "docsTags": [],
          "default": "document.documentElement.lang || \"en\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "input max",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": true,
          "docs": "Maximum length of the input value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": true,
          "docs": "Maximum length of text input.",
          "docsTags": [
            {
              "text": "use maxLength instead",
              "name": "deprecated"
            }
          ],
          "deprecation": "use maxLength instead",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "input min",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minLength",
          "type": "number",
          "mutable": false,
          "attr": "min-length",
          "reflectToAttr": true,
          "docs": "Minimum length of the text input",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name of the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "numberButtonType",
          "type": "\"horizontal\" | \"none\" | \"vertical\"",
          "mutable": false,
          "attr": "number-button-type",
          "reflectToAttr": true,
          "docs": "specify the placement of the number buttons",
          "docsTags": [],
          "default": "\"vertical\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "explicitly whitelist placeholder attribute",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "prefixText",
          "type": "string",
          "mutable": false,
          "attr": "prefix-text",
          "reflectToAttr": false,
          "docs": "optionally add prefix",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "is the input required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": true,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the input, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "mutable": true,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "specify the status of the input field, determines message and icons",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "\"any\" | number",
          "mutable": true,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "input step",
          "docsTags": [],
          "values": [
            {
              "value": "any",
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "suffixText",
          "type": "string",
          "mutable": false,
          "attr": "suffix-text",
          "reflectToAttr": false,
          "docs": "optionally add suffix  *",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"image\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"week\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "specify the input type\n\nNote that the following types add type-specific icons by default: `date`, `email`, `password`, `search`, `tel`, `time`",
          "docsTags": [],
          "default": "\"text\"",
          "values": [
            {
              "value": "color",
              "type": "string"
            },
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "datetime-local",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "file",
              "type": "string"
            },
            {
              "value": "image",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "textarea",
              "type": "string"
            },
            {
              "value": "time",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            },
            {
              "value": "week",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "input value",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "focus the rendered child element",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteInputInput",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "This event fires each time a new value is typed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "`calcite-action`",
          "docs": "A slot for positioning a button next to an input"
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-color-picker",
        "calcite-color-picker-hex-input",
        "calcite-input-date-picker",
        "calcite-input-time-picker"
      ],
      "dependencies": [
        "calcite-progress",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-input": [
          "calcite-progress",
          "calcite-icon"
        ],
        "calcite-color-picker": [
          "calcite-input"
        ],
        "calcite-color-picker-hex-input": [
          "calcite-input"
        ],
        "calcite-input-date-picker": [
          "calcite-input"
        ],
        "calcite-input-time-picker": [
          "calcite-input"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-input-date-picker/calcite-input-date-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input-date-picker",
      "readme": "# calcite-input-date-picker\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Expand or collapse when calendar does not have input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "end",
          "type": "string",
          "mutable": false,
          "attr": "end",
          "reflectToAttr": false,
          "docs": "Selected end date",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "endAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Selected end date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlNextMonth",
          "type": "string",
          "mutable": false,
          "attr": "intl-next-month",
          "reflectToAttr": false,
          "docs": "Localized string for \"next month\" (used for aria label)",
          "docsTags": [],
          "default": "TEXT.nextMonth",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlPrevMonth",
          "type": "string",
          "mutable": false,
          "attr": "intl-prev-month",
          "reflectToAttr": false,
          "docs": "Localized string for \"previous month\" (used for aria label)",
          "docsTags": [],
          "default": "TEXT.prevMonth",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Layout",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "BCP 47 language tag for desired language and country format",
          "docsTags": [],
          "default": "document.documentElement.lang || \"en\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Latest allowed date (\"yyyy-mm-dd\")",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Latest allowed date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Earliest allowed date (\"yyyy-mm-dd\")",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Earliest allowed date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": false,
          "docs": "Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "proximitySelectionDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "proximity-selection-disabled",
          "reflectToAttr": false,
          "docs": "Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "range",
          "type": "boolean",
          "mutable": false,
          "attr": "range",
          "reflectToAttr": true,
          "docs": "Range mode activation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the date picker",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "start",
          "type": "string",
          "mutable": false,
          "attr": "start",
          "reflectToAttr": false,
          "docs": "Selected start date",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "startAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Selected start date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Selected date",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "valueAsDate",
          "type": "Date",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Selected date as full date object",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "reposition() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteDatePickerChange",
          "detail": "Date",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Trigger calcite date change when a user changes the date.",
          "docsTags": []
        },
        {
          "event": "calciteDatePickerRangeChange",
          "detail": "DateRangeChange",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Trigger calcite date change when a user changes the date range.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focusin",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteDaySelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-input",
        "calcite-date-picker",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-input-date-picker": [
          "calcite-input",
          "calcite-date-picker",
          "calcite-icon"
        ],
        "calcite-input": [
          "calcite-progress",
          "calcite-icon"
        ],
        "calcite-date-picker": [
          "calcite-date-picker-month-header",
          "calcite-date-picker-month"
        ],
        "calcite-date-picker-month-header": [
          "calcite-icon"
        ],
        "calcite-date-picker-month": [
          "calcite-date-picker-day"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-input-message/calcite-input-message.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input-message",
      "readme": "# calcite-input-message\n\nDisplays a contextual message to a user. Allows the passing of content, links, etc.\n",
      "docs": "Displays a contextual message to a user. Allows the passing of content, links, etc.",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-label status=\"“invalid”\">\n  My great label\n  <calcite-input placeholder=\"“Enter\" your information”></calcite-input>\n  <calcite-input-message active\n    >That's not going to work out.\n    <calcite-button appearance=\"inline\" href=\"\">Learn more</calcite-button></calcite-input-message\n  >\n</calcite-label>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean | string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "when used as a boolean set to true, show a default icon based on status. You can\nalso pass a calcite-ui-icon name to this prop to display a custom icon",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": true,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the input, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "mutable": true,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "specify the status of the input field, determines message and icons",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"default\" | \"floating\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "specify the appearance of any slotted message - default (displayed under input), or floating (positioned absolutely under input)",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "floating",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-input-message": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-input-time-picker/calcite-input-time-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-input-time-picker",
      "readme": "# calcite-input-time-picker\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "The active state of the time input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "The disabled state of the time input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hourDisplayFormat",
          "type": "\"12\" | \"24\"",
          "mutable": false,
          "attr": "hour-display-format",
          "reflectToAttr": false,
          "docs": "Format of the hour value (12-hour or 24-hour) (this will be replaced by locale eventually)",
          "docsTags": [],
          "default": "\"12\"",
          "values": [
            {
              "value": "12",
              "type": "string"
            },
            {
              "value": "24",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlHour",
          "type": "string",
          "mutable": false,
          "attr": "intl-hour",
          "reflectToAttr": false,
          "docs": "aria-label for the hour input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlHourDown",
          "type": "string",
          "mutable": false,
          "attr": "intl-hour-down",
          "reflectToAttr": false,
          "docs": "aria-label for the hour down button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlHourUp",
          "type": "string",
          "mutable": false,
          "attr": "intl-hour-up",
          "reflectToAttr": false,
          "docs": "aria-label for the hour up button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlMeridiem",
          "type": "string",
          "mutable": false,
          "attr": "intl-meridiem",
          "reflectToAttr": false,
          "docs": "aria-label for the meridiem (am/pm) input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlMeridiemDown",
          "type": "string",
          "mutable": false,
          "attr": "intl-meridiem-down",
          "reflectToAttr": false,
          "docs": "aria-label for the meridiem (am/pm) down button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlMeridiemUp",
          "type": "string",
          "mutable": false,
          "attr": "intl-meridiem-up",
          "reflectToAttr": false,
          "docs": "aria-label for the meridiem (am/pm) up button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlMinute",
          "type": "string",
          "mutable": false,
          "attr": "intl-minute",
          "reflectToAttr": false,
          "docs": "aria-label for the minute input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlMinuteDown",
          "type": "string",
          "mutable": false,
          "attr": "intl-minute-down",
          "reflectToAttr": false,
          "docs": "aria-label for the minute down button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlMinuteUp",
          "type": "string",
          "mutable": false,
          "attr": "intl-minute-up",
          "reflectToAttr": false,
          "docs": "aria-label for the minute up button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlSecond",
          "type": "string",
          "mutable": false,
          "attr": "intl-second",
          "reflectToAttr": false,
          "docs": "aria-label for the second input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlSecondDown",
          "type": "string",
          "mutable": false,
          "attr": "intl-second-down",
          "reflectToAttr": false,
          "docs": "aria-label for the second down button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlSecondUp",
          "type": "string",
          "mutable": false,
          "attr": "intl-second-up",
          "reflectToAttr": false,
          "docs": "aria-label for the second up button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the time input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The scale (size) of the time input",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "number that specifies the granularity that the value must adhere to",
          "docsTags": [],
          "default": "60",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The selected time",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteInputTimePickerChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the time value is changed as a result of user input.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTimePickerBlur",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTimePickerChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTimePickerFocus",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-input",
        "calcite-popover",
        "calcite-time-picker"
      ],
      "dependencyGraph": {
        "calcite-input-time-picker": [
          "calcite-input",
          "calcite-popover",
          "calcite-time-picker"
        ],
        "calcite-input": [
          "calcite-progress",
          "calcite-icon"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-time-picker": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-label/calcite-label.tsx",
      "encapsulation": "scoped",
      "tag": "calcite-label",
      "readme": "# calcite-label\n\nRenders a `<label>` around its children and can be used with any [labelable native](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Form_labelable) or labelable calcite element.\n",
      "docs": "Renders a `<label>` around its children and can be used with any [labelable native](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Form_labelable) or labelable calcite element.",
      "docsTags": [],
      "usage": {
        "basic": "## Status Property\n\nIt also allows consumers to set a `status` attribute for child `calcite-input` and `calcite-input-message` components to use to set their own properties.\n\n```html\n<calcite-label status=\"invalid\">\n  Invalid input\n  <calcite-input type=\"search\" placeholder=\"Filter your files\" value=\"adfo2h2\"></calcite-input>\n  <calcite-input-message active icon> Something doesn't look right </calcite-input-message>\n</calcite-label>\n```\n\n## Caveat when using with browsers that don't support flex gap\n\nWhen using the `default`, `inline` or `inline-space-between` layout option with [browsers that do not support the CSS `gap` property when used with flexbox](https://caniuse.com/flexbox-gap), you will need to use the `disable-spacing` attribute and apply spacing manually to the label by wrapping it in a styled span like so:\n\n```html\n<calcite-label layout=\"inline\" disable-spacing>\n  <span style=\"margin-right: 0.75rem\">Text leading inline</span>\n  <calcite-checkbox></calcite-checkbox>\n</calcite-label>\n```\n"
      },
      "props": [
        {
          "name": "alignment",
          "type": "\"center\" | \"end\" | \"start\"",
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": true,
          "docs": "specify the text alignment of the label",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableSpacing",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-spacing",
          "reflectToAttr": false,
          "docs": "eliminates any space around the label",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "is the label disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "for",
          "type": "string",
          "mutable": false,
          "attr": "for",
          "reflectToAttr": true,
          "docs": "The id of the input associated with the label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"default\" | \"inline\" | \"inline-space-between\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "is the wrapped element positioned inline with the label slotted text",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "inline",
              "type": "string"
            },
            {
              "value": "inline-space-between",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the input, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"idle\" | \"invalid\" | \"valid\"",
          "mutable": false,
          "attr": "status",
          "reflectToAttr": true,
          "docs": "specify the status of the label and any child input / input messages",
          "docsTags": [],
          "default": "\"idle\"",
          "values": [
            {
              "value": "idle",
              "type": "string"
            },
            {
              "value": "invalid",
              "type": "string"
            },
            {
              "value": "valid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-link/calcite-link.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-link",
      "readme": "# calcite-link\n",
      "docs": "It is the consumers responsibility to add aria information, rel, target, for links, and any link attributes for form submission",
      "docsTags": [],
      "usage": {
        "focusing": "You can programmatically focus a `calcite-link` with the `setFocus()` method:\n\n```html\n<div onclick=document.querySelector('#my-link').setFocus()>Focus!</div>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "is the link disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "optionally pass a href - used to determine if the component should render as a link or an anchor",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the end of a button - accepts calcite ui icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "flip the icon(s) in rtl",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the start of a button - accepts calcite ui icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-tile"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-link": [
          "calcite-icon"
        ],
        "calcite-tile": [
          "calcite-link"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-loader/calcite-loader.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-loader",
      "readme": "# calcite-loader\n\nThe `calcite-loader` component can act as a determinate or indeterminate loading indicator.\n",
      "docs": "The `calcite-loader` component can act as a determinate or indeterminate loading indicator.",
      "docsTags": [],
      "usage": {
        "basic": "You can use the `active` attribute to toggle visibility:\n\n```html\n<calcite-loader text=\"Fetching data...\" active></calcite-loader>\n```\n",
        "compact": "For instances when you don't have room for the full loader, you can use the smaller `inline` version of the loader. The inline version is meant to sit to the left of text:\n\n```html\n<p><calcite-loader active inline></calcite-loader> Inline loader</p>\n```\n",
        "determinate": "If you can calculate your progress, it's best to use the determinate version of the loader. Update the `value` of the element when progress is made:\n\n```html\n<calcite-loader type=\"determinate\" value=\"32\" active></calcite-loader>\n```\n\nThe above will display a progress bar along the perimeter of the loader showing 32% complete.\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Show the loader",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "Inline loaders are smaller and will appear to the left of the text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "noPadding",
          "type": "boolean",
          "mutable": false,
          "attr": "no-padding",
          "reflectToAttr": false,
          "docs": "Turn off spacing around the loader",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Speficy the scale of the loader. Defaults to \"m\"",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Text which should appear under the loading indicator (optional)",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"determinate\" | \"indeterminate\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "Use indeterminate if finding actual progress value is impossible",
          "docsTags": [],
          "values": [
            {
              "value": "determinate",
              "type": "string"
            },
            {
              "value": "indeterminate",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Percent complete of 100, only valid for determinate indicators",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-action",
        "calcite-block",
        "calcite-button",
        "calcite-card",
        "calcite-scrim"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-action": [
          "calcite-loader"
        ],
        "calcite-block": [
          "calcite-loader"
        ],
        "calcite-button": [
          "calcite-loader"
        ],
        "calcite-card": [
          "calcite-loader"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-modal/calcite-modal.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-modal",
      "readme": "# calcite-modal\n\n`calcite-modal` allows you to show a modal/dialog to your users. The modal handles fencing focus and animating in/out.\n",
      "docs": "`calcite-modal` allows you to show a modal/dialog to your users. The modal handles fencing focus and animating in/out.",
      "docsTags": [],
      "usage": {
        "basic": "Customize the modal by passing your content into multiple named slots: `header` (title-area of the modal), `content` (main body of the modal), and up to three modal actions: primary, secondary, and back.\n\n```html\n<calcite-modal aria-labelledby=\"modal-title\">\n  <h3 slot=\"header\" id=\"modal-title\">Title of the modal</h3>\n  <div slot=\"content\">The actual content of the modal</div>\n  <calcite-button slot=\"back\" color=\"neutral\" appearance=\"outline\" icon=\"chevron-left\" width=\"full\">\n    Back\n  </calcite-button>\n  <calcite-button slot=\"secondary\" width=\"full\" appearance=\"outline\"> Cancel </calcite-button>\n  <calcite-button slot=\"primary\" width=\"full\"> Save </calcite-button>\n</calcite-modal>\n```\n\nNotice above we've used the `aria-labelledby` attribute, relating it to the title of the modal. In order to ensure good accessibility, it's recommended that you use either an `aria-label` or `aria-labelledby` attribute so screen readers can infer what the subject matter of your modal is.\n",
        "open": "To open a modal, add the `active` prop:\n\n```html\n<calcite-modal active></calcite-modal>\n```\n\nOnce the opening animation is complete, the `calciteModalOpen` event will be fired.\n\nTo close the modal, simply remove the attribute. This will run your before close method (if provided, see below) and fire the `calciteModalClose` event after the animation and teardown is complete.\n",
        "reacting-before-close": "If you'd like to perform some actions prior to closing (ie. warning users they will lose their changes) you can pass a function to the `beforeClose` property. This method will be called prior to close and should return a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise):\n\n```js\nfunction beforeClose() {\n  return new Promise((resolve) => {\n    // do something async\n    resolve(); // this will trigger the close animation\n  });\n}\n\nconst modal = document.getElementById(\"my-modal\");\nmodal.beforeClose = beforeClose;\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Add the active attribute to open the modal",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "backgroundColor",
          "type": "\"grey\" | \"white\"",
          "mutable": false,
          "attr": "background-color",
          "reflectToAttr": true,
          "docs": "Background color of modal content",
          "docsTags": [],
          "default": "\"white\"",
          "values": [
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "beforeClose",
          "type": "(el: HTMLElement) => Promise<void>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Optionally pass a function to run before close",
          "docsTags": [],
          "default": "() => Promise.resolve()",
          "values": [
            {
              "type": "(el: HTMLElement) => Promise<void>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"blue\" | \"red\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "Adds a color bar at the top for visual impact,\nUse color to add importance to destructive/workflow dialogs.",
          "docsTags": [],
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableCloseButton",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-close-button",
          "reflectToAttr": false,
          "docs": "Disables the display a close button within the Modal",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableEscape",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-escape",
          "reflectToAttr": false,
          "docs": "Flag to disable the default close on escape behavior",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "docked",
          "type": "boolean",
          "mutable": false,
          "attr": "docked",
          "reflectToAttr": true,
          "docs": "Prevent the modal from taking up the entire screen on mobile",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "firstFocus",
          "type": "HTMLElement",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Specify an element to focus when the modal is first opened",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fullscreen",
          "type": "boolean",
          "mutable": false,
          "attr": "fullscreen",
          "reflectToAttr": true,
          "docs": "Set the modal to always be fullscreen (overrides width)",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlClose",
          "type": "string",
          "mutable": false,
          "attr": "intl-close",
          "reflectToAttr": false,
          "docs": "Aria label for the close button",
          "docsTags": [],
          "default": "\"Close\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noPadding",
          "type": "boolean",
          "mutable": false,
          "attr": "no-padding",
          "reflectToAttr": false,
          "docs": "Turn off spacing around the content area slot",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of modal, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"l\" | \"m\" | \"s\" | number",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "Set the width of the modal. Can use stock sizes or pass a number (in pixels)",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "focusElement",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "focusElement(el?: HTMLElement) => Promise<void>",
          "parameters": [],
          "docs": "Focus first interactive element",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "use `setFocus` instead."
            }
          ],
          "deprecation": "use `setFocus` instead."
        },
        {
          "name": "scrollContent",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "scrollContent(top?: number, left?: number) => Promise<void>",
          "parameters": [],
          "docs": "Set the scroll top of the modal content",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(focusId?: \"close-button\") => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the component.\n\nBy default, will try to focus on any focusable content. If there is none, it will focus on the close button.\nIf you want to focus on the close button, you can use the `close-button` focus ID.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteModalClose",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the modal begins the close animation",
          "docsTags": []
        },
        {
          "event": "calciteModalOpen",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the modal begins the open animation",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-scrim",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-modal": [
          "calcite-scrim",
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-notice/calcite-notice.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-notice",
      "readme": "# calcite-notice\n",
      "docs": "",
      "docsTags": [
        {
          "text": "title - Title of the notice (optional)",
          "name": "slot"
        },
        {
          "text": "message - Main text of the notice",
          "name": "slot"
        },
        {
          "text": "link - Optional action to take from the notice (undo, try again, link to page, etc.)",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "You can programmatically focus the close button of a `dismissible` `calcite-notice` with the `setFocus()` method:\n\n```html\n<div onclick=document.querySelector('#my-notice').setFocus()>Focus!</div>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Is the notice currently active or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"blue\" | \"green\" | \"red\" | \"yellow\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "Color for the notice (will apply to top border and icon)",
          "docsTags": [],
          "default": "\"blue\"",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "mutable": false,
          "attr": "dismissible",
          "reflectToAttr": true,
          "docs": "Optionally show a button the user can click to dismiss the notice",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean | string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "when used as a boolean set to true, show a default recommended icon. You can\nalso pass a calcite-ui-icon name to this prop to display a requested icon",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlClose",
          "type": "string",
          "mutable": false,
          "attr": "intl-close",
          "reflectToAttr": false,
          "docs": "String for the close button.",
          "docsTags": [],
          "default": "TEXT.close",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the notice, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\" | \"half\"",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "specify the width of the notice, defaults to auto",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "half",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "focus the close button, if present and requested",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteNoticeClose",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when an notice is closed",
          "docsTags": []
        },
        {
          "event": "calciteNoticeOpen",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when an Notice is opened",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "link",
          "docs": "Optional action to take from the notice (undo, try again, link to page, etc.)"
        },
        {
          "name": "message",
          "docs": "Main text of the notice"
        },
        {
          "name": "title",
          "docs": "Title of the notice (optional)"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-notice": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-option/calcite-option.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-option",
      "readme": "# calcite-option\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, it prevents the option from being selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": true,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The option label.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "When true, this option is selected. Otherwise, false.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value associated with this option.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-option-group/calcite-option-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-option-group",
      "readme": "# calcite-option-group\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, it prevents selection from any of its associated options.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The group label. This property is required.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-pagination/calcite-pagination.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-pagination",
      "readme": "# calcite-pagination\n\n`calcite-pagination` allows users to select a page from a paginated API.\n",
      "docs": "`calcite-pagination` allows users to select a page from a paginated API.",
      "docsTags": [],
      "usage": {
        "basic": "The component is meant to interface with responses from ArcGIS REST services, so the props share names with [response properties](https://developers.arcgis.com/rest/users-groups-and-items/search.htm) from various search endpoints.\n\nFor example, after querying the search API, you'll get back a response similar to the following:\n\n```JSON\n{\n  \"total\": 2021,\n  \"start\": 1,\n  \"num\": 100,\n  \"results\": []\n}\n```\n\nThese can be passed straight to the `calcite-pagination` component:\n\n```html\n<calcite-pagination start=\"1\" num=\"100\" total=\"2021\"></calcite-pagination>\n```\n"
      },
      "props": [
        {
          "name": "num",
          "type": "number",
          "mutable": false,
          "attr": "num",
          "reflectToAttr": false,
          "docs": "number of items per page",
          "docsTags": [],
          "default": "20",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The scale of the pagination",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "start",
          "type": "number",
          "mutable": true,
          "attr": "start",
          "reflectToAttr": false,
          "docs": "index of item that should begin the page",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textLabelNext",
          "type": "string",
          "mutable": false,
          "attr": "text-label-next",
          "reflectToAttr": false,
          "docs": "title of the next button",
          "docsTags": [],
          "default": "TEXT.nextLabel",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textLabelPrevious",
          "type": "string",
          "mutable": false,
          "attr": "text-label-previous",
          "reflectToAttr": false,
          "docs": "title of the previous button",
          "docsTags": [],
          "default": "TEXT.previousLabel",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "total",
          "type": "number",
          "mutable": false,
          "attr": "total",
          "reflectToAttr": false,
          "docs": "total number of items",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "nextPage",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "nextPage() => Promise<void>",
          "parameters": [],
          "docs": "Go to the next page of results",
          "docsTags": []
        },
        {
          "name": "previousPage",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "previousPage() => Promise<void>",
          "parameters": [],
          "docs": "Go to the previous page of results",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calcitePaginationChange",
          "detail": "CalcitePaginationDetail",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the selected page changes.",
          "docsTags": []
        },
        {
          "event": "calcitePaginationUpdate",
          "detail": "CalcitePaginationDetail",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the selected page changes.",
          "docsTags": [
            {
              "text": "use calcitePaginationChange instead",
              "name": "deprecated"
            }
          ],
          "deprecation": "use calcitePaginationChange instead"
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-pagination": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-panel/calcite-panel.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-panel",
      "readme": "# calcite-panel\n\nThe `calcite-panel` component is a container for a header, content and optional footer. The header will have centered content as well as optional leading and trailing content. The panel can also be setup to be dismissible which allows it to be closed by a user.\n",
      "docs": "The `calcite-panel` component is a container for a header, content and optional footer. The header will have centered content as well as optional leading and trailing content. The panel can also be setup to be dismissible which allows it to be closed by a user.",
      "docsTags": [
        {
          "text": "header-actions-start - a slot for adding actions or content to the start side of the panel header.",
          "name": "slot"
        },
        {
          "text": "header-actions-end - a slot for adding actions or content to the end side of the panel header.",
          "name": "slot"
        },
        {
          "text": "header-content - a slot for adding custom content to the header.",
          "name": "slot"
        },
        {
          "text": "header-menu-actions - a slot for adding an overflow menu with actions inside a dropdown.",
          "name": "slot"
        },
        {
          "text": "fab - a slot for adding a `calcite-fab` (floating action button) to perform an action.",
          "name": "slot"
        },
        {
          "text": "footer-actions - a slot for adding buttons to the footer.",
          "name": "slot"
        },
        {
          "text": "footer - a slot for adding custom content to the footer.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Basic\n\nRenders a basic panel with a header.\n\n```html\n<calcite-panel>\n  <div slot=\"header-content\">Header!</div>\n  <p>Slotted content!</p>\n</calcite-panel>\n```\n\n#### With footer\n\nRenders a panel with a header and a footer.\n\n```html\n<calcite-panel>\n  <div slot=\"header-content\">Header!</div>\n  <p>I have a footer.</p>\n  <div slot=\"footer\">Footer!</div>\n</calcite-panel>\n```\n\n#### Header with actions\n\nRenders a panel with leading and trailing `calcite-action`s.\n\n```html\n<calcite-panel>\n  <div slot=\"header-leading-content\">\n    <calcite-action label=\"Performs my custom action\" text=\"Perform Action!\" text-enabled icon=\"home\"></calcite-action>\n  </div>\n  <div slot=\"header-content\">Header!</div>\n  <div slot=\"header-trailing-content\">\n    <calcite-action\n      label=\"Performs another custom action\"\n      text=\"Perform Another Action!\"\n      text-enabled\n      icon=\"blog\"\n    ></calcite-action>\n  </div>\n  <p>Actions are in the top left and right.</p>\n</calcite-panel>\n```\n\n#### Dismissible panel\n\nRenders a panel that is dismissible with a click of the \"x\".\n\n```html\n<calcite-panel dismissible id=\"dismissible-panel\">\n  <div slot=\"header-content\">Dismissible Header</div>\n  <p>Click the X and I go away!</p>\n</calcite-panel>\n```\n"
      },
      "props": [
        {
          "name": "beforeBack",
          "type": "() => Promise<void>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "When provided, this method will be called before it is removed from the parent flow.",
          "docsTags": [],
          "values": [
            {
              "type": "() => Promise<void>"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, disabled prevents interaction. This state shows items with lower opacity/grayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dismissed",
          "type": "boolean",
          "mutable": true,
          "attr": "dismissed",
          "reflectToAttr": true,
          "docs": "Hides the panel.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "mutable": false,
          "attr": "dismissible",
          "reflectToAttr": true,
          "docs": "Displays a close button in the trailing side of the header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Heading text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heightScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "height-scale",
          "reflectToAttr": true,
          "docs": "Specifies the maxiumum height of the panel.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlBack",
          "type": "string",
          "mutable": false,
          "attr": "intl-back",
          "reflectToAttr": false,
          "docs": "'Back' text string.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlClose",
          "type": "string",
          "mutable": false,
          "attr": "intl-close",
          "reflectToAttr": false,
          "docs": "'Close' text string for the close button. The close button will only be shown when 'dismissible' is true.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlOptions",
          "type": "string",
          "mutable": false,
          "attr": "intl-options",
          "reflectToAttr": false,
          "docs": "'Options' text string for the actions menu.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When true, content is waiting to be loaded. This state shows a busy indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuOpen",
          "type": "boolean",
          "mutable": false,
          "attr": "menu-open",
          "reflectToAttr": true,
          "docs": "Opens the action menu.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showBackButton",
          "type": "boolean",
          "mutable": false,
          "attr": "show-back-button",
          "reflectToAttr": true,
          "docs": "Shows a back button in the header.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "summary",
          "type": "string",
          "mutable": false,
          "attr": "summary",
          "reflectToAttr": false,
          "docs": "Summary text. A description displayed underneath the heading.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "widthScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "width-scale",
          "reflectToAttr": true,
          "docs": "This sets width of the panel.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(focusId?: \"dismiss-button\" | \"back-button\") => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calcitePanelBackClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the back button has been clicked.",
          "docsTags": []
        },
        {
          "event": "calcitePanelDismissedChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the close button has been clicked.",
          "docsTags": []
        },
        {
          "event": "calcitePanelScroll",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the content has been scrolled.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "fab",
          "docs": "a slot for adding a `calcite-fab` (floating action button) to perform an action."
        },
        {
          "name": "footer",
          "docs": "a slot for adding custom content to the footer."
        },
        {
          "name": "footer-actions",
          "docs": "a slot for adding buttons to the footer."
        },
        {
          "name": "header-actions-end",
          "docs": "a slot for adding actions or content to the end side of the panel header."
        },
        {
          "name": "header-actions-start",
          "docs": "a slot for adding actions or content to the start side of the panel header."
        },
        {
          "name": "header-content",
          "docs": "a slot for adding custom content to the header."
        },
        {
          "name": "header-menu-actions",
          "docs": "a slot for adding an overflow menu with actions inside a dropdown."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action",
        "calcite-action-menu",
        "calcite-scrim"
      ],
      "dependencyGraph": {
        "calcite-panel": [
          "calcite-action",
          "calcite-action-menu",
          "calcite-scrim"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-action-menu": [
          "calcite-action",
          "calcite-tooltip-manager",
          "calcite-popover"
        ],
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-pick-list/calcite-pick-list.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-pick-list",
      "readme": "# calcite-pick-list\n\n`calcite-pick-list` lives in a panel and contains `calcite-pick-list-item`s. Each item is able to be be selected via radio button or checkboxes (which have a multiselect and shift-click capability). There is also an option for a filter at the top of the list for searching.\n",
      "docs": "`calcite-pick-list` lives in a panel and contains `calcite-pick-list-item`s. Each item is able to be be selected via radio button or checkboxes (which have a multiselect and shift-click capability). There is also an option for a filter at the top of the list for searching.",
      "docsTags": [
        {
          "text": "- A slot for adding `calcite-pick-list-item` elements or `calcite-pick-list-group` elements. Items are displayed as a vertical list.",
          "name": "slot"
        },
        {
          "text": "menu-actions - A slot for adding a button + menu combo for performing actions like sorting.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "Renders a basic pick list with radio buttons on the left and actions on the right side.\n\n```html\n<calcite-pick-list>\n  <calcite-pick-list-item label=\"T. Rex\" description=\"Arm strength impaired\" value=\"trex\">\n    <calcite-action slot=\"actions-end\" icon=\"circle\"></calcite-action>\n  </calcite-pick-list-item>\n  <calcite-pick-list-item label=\"Triceratops\" description=\"3 horn\" value=\"triceratops\" selected>\n    <calcite-action slot=\"actions-end\" icon=\"circle\"></calcite-action>\n  </calcite-pick-list-item>\n  <calcite-pick-list-item label=\"Velociraptor\" description=\"Swift seizer\" value=\"velociraptor\">\n    <calcite-action slot=\"actions-end\" icon=\"circle\"></calcite-action>\n  </calcite-pick-list-item>\n</calcite-pick-list>\n```\n\n#### Multi-select & filter-enabled\n\nRenders a pick list with a sticky filter and checkboxes for multiple selection of items.\n\n```html\n<calcite-pick-list multiple filter-enabled>\n  <calcite-pick-list-item label=\"Chocolate\" value=\"chocolate\">\n    <calcite-action slot=\"actions-end\" icon=\"ellipsis-circle\"></calcite-action>\n  </calcite-pick-list-item>\n  <calcite-pick-list-item label=\"Vanilla\" description=\"Oldie but goodie\" value=\"vanilla\">\n    <calcite-action slot=\"actions-end\" icon=\"ellipsis-circle\"></calcite-action>\n  </calcite-pick-list-item>\n  <calcite-pick-list-item label=\"Strawberry\" description=\"no metadata on this one\" value=\"strawberry\">\n    <calcite-action slot=\"actions-end\" icon=\"ellipsis-circle\"></calcite-action>\n  </calcite-pick-list-item>\n</calcite-pick-list>\n```\n\n#### Sub groups\n\nRenders groups of pick list items that are visually separated.\n\n```html\n<calcite-pick-list>\n  <calcite-pick-list-group group-title=\"numbers\">\n    <calcite-pick-list-item heading=\"one\" description=\"fish\" value=\"one\" icon=\"grip\">\n      <calcite-action slot=\"actions-end\" icon=\"ellipsis\"></calcite-action>\n    </calcite-pick-list-item>\n    <calcite-pick-list-item heading=\"two\" description=\"fish\" value=\"two\" icon=\"grip\">\n      <calcite-action slot=\"actions-end\" icon=\"ellipsis\"></calcite-action>\n    </calcite-pick-list-item>\n  </calcite-pick-list-group>\n  <calcite-pick-list-group group-title=\"colors\">\n    <calcite-pick-list-item heading=\"red\" description=\"fish\" value=\"red\" icon=\"grip\">\n      <calcite-action slot=\"actions-end\" icon=\"ellipsis\"></calcite-action>\n    </calcite-pick-list-item>\n    <calcite-pick-list-item heading=\"blue\" description=\"fish\" value=\"blue\" icon=\"grip\">\n      <calcite-action slot=\"actions-end\" icon=\"ellipsis\"></calcite-action>\n    </calcite-pick-list-item>\n  </calcite-pick-list-group>\n</calcite-pick-list>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, disabled prevents interaction. This state shows items with lower opacity/grayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterEnabled",
          "type": "boolean",
          "mutable": false,
          "attr": "filter-enabled",
          "reflectToAttr": true,
          "docs": "When true, an input appears at the top of the list that can be used by end users to filter items in the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterPlaceholder",
          "type": "string",
          "mutable": false,
          "attr": "filter-placeholder",
          "reflectToAttr": true,
          "docs": "Placeholder text for the filter input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When true, content is waiting to be loaded. This state shows a busy indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "Multiple works similar to standard radio buttons and checkboxes.\nWhen true, a user can select multiple items at a time.\nWhen false, only a single item can be selected at a time\nand selecting a new item will deselect any other selected items.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedItems",
          "returns": {
            "type": "Promise<Map<string, HTMLCalcitePickListItemElement>>",
            "docs": ""
          },
          "signature": "getSelectedItems() => Promise<Map<string, HTMLCalcitePickListItemElement>>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(focusId?: ListFocusId) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteListChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when any of the item selections have changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteListItemRemove",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemPropsChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemValueChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-pick-list-item` elements or `calcite-pick-list-group` elements. Items are displayed as a vertical list."
        },
        {
          "name": "menu-actions",
          "docs": "A slot for adding a button + menu combo for performing actions like sorting."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-filter",
        "calcite-scrim"
      ],
      "dependencyGraph": {
        "calcite-pick-list": [
          "calcite-filter",
          "calcite-scrim"
        ],
        "calcite-filter": [
          "calcite-scrim",
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-pick-list-group/calcite-pick-list-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-pick-list-group",
      "readme": "# calcite-pick-list-group\n\n`calcite-pick-list-group` is a wrapper for multiple `calcite-pick-list-item`s and lives in `calcite-pick-list`.\n",
      "docs": "`calcite-pick-list-group` is a wrapper for multiple `calcite-pick-list-item`s and lives in `calcite-pick-list`.",
      "docsTags": [
        {
          "text": "- A slot for adding `calcite-pick-list-item` elements.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "groupTitle",
          "type": "string",
          "mutable": false,
          "attr": "group-title",
          "reflectToAttr": true,
          "docs": "The title used for all nested `calcite-pick-list` rows.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-pick-list-item` elements."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-pick-list-item/calcite-pick-list-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-pick-list-item",
      "readme": "# calcite-pick-list-item\n\n`calcite-pick-list-item`s are cards contained in a `calcite-pick-list`. They each can have a label and description, an icon, and be set to compact. The developer can disable or preselect each list item and give it a value.\n",
      "docs": "`calcite-pick-list-item`s are cards contained in a `calcite-pick-list`. They each can have a label and description, an icon, and be set to compact. The developer can disable or preselect each list item and give it a value.",
      "docsTags": [
        {
          "text": "actions-end - a slot for adding actions or content to the end side of the item.",
          "name": "slot"
        },
        {
          "text": "actions-start - a slot for adding actions or content to the start side of the item.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "An optional description for this item.  This will appear below the label text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableDeselect",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-deselect",
          "reflectToAttr": false,
          "docs": "When false, the item cannot be deselected by user interaction.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, the item cannot be clicked and is visually muted.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "ICON_TYPES.circle | ICON_TYPES.grip | ICON_TYPES.square",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Determines the icon SVG symbol that will be shown. Options are circle, square, grid or null.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "ICON_TYPES.circle"
            },
            {
              "type": "ICON_TYPES.grip"
            },
            {
              "type": "ICON_TYPES.square"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlRemove",
          "type": "string",
          "mutable": false,
          "attr": "intl-remove",
          "reflectToAttr": true,
          "docs": "The text for the remove item buttons. Only applicable if removable is true.",
          "docsTags": [],
          "default": "TEXT.remove",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "The main label for this item. This will appear next to the icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "metadata",
          "type": "{ [x: string]: unknown; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Used to provide additional metadata to an item, primarily used when the parent list has a filter.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: unknown; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "removable",
          "type": "boolean",
          "mutable": false,
          "attr": "removable",
          "reflectToAttr": true,
          "docs": "Set this to true to display a remove action that removes the item from the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Set this to true to pre-select an item. Toggles when an item is checked/unchecked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The item's associated value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "toggleSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggleSelected(coerce?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "Used to toggle the selection state. By default this won't trigger an event.\nThe first argument allows the value to be coerced, rather than swapping values.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteListItemChange",
          "detail": "{ item: HTMLCalcitePickListItemElement; value: any; selected: boolean; shiftPressed: boolean; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the item is selected or unselected.",
          "docsTags": []
        },
        {
          "event": "calciteListItemRemove",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the remove button is pressed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "actions-end",
          "docs": "a slot for adding actions or content to the end side of the item."
        },
        {
          "name": "actions-start",
          "docs": "a slot for adding actions or content to the start side of the item."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-value-list-item"
      ],
      "dependencies": [
        "calcite-icon",
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-pick-list-item": [
          "calcite-icon",
          "calcite-action"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-value-list-item": [
          "calcite-pick-list-item"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-popover/calcite-popover.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-popover",
      "readme": "# calcite-popover\n",
      "docs": "",
      "docsTags": [
        {
          "text": "image - A slot for adding an image. The image will appear above the other slot content.",
          "name": "slot"
        }
      ],
      "usage": {
        "manager": "```html\n<calcite-popover reference-element=\"popover-button\">Hello! I am some popover content!</calcite-popover>\n\n<calcite-popover-manager\n  ><calcite-button id=\"popover-button\">Clickable popover</calcite-button></calcite-popover-manager\n>\n```\n"
      },
      "props": [
        {
          "name": "closeButton",
          "type": "boolean",
          "mutable": false,
          "attr": "close-button",
          "reflectToAttr": true,
          "docs": "Display a close button within the Popover.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableFlip",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-flip",
          "reflectToAttr": true,
          "docs": "Prevents flipping the popover's placement when it starts to overlap its reference element.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disablePointer",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-pointer",
          "reflectToAttr": true,
          "docs": "Removes the caret pointer.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flipPlacements",
          "type": "Placement[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the available placements that can be used when a flip occurs.",
          "docsTags": [],
          "values": [
            {
              "type": "Placement[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Heading text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlClose",
          "type": "string",
          "mutable": false,
          "attr": "intl-close",
          "reflectToAttr": false,
          "docs": "Text for close button.",
          "docsTags": [],
          "default": "TEXT.close",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "offsetDistance",
          "type": "number",
          "mutable": false,
          "attr": "offset-distance",
          "reflectToAttr": true,
          "docs": "Offset the position of the popover away from the reference element.",
          "docsTags": [],
          "default": "defaultOffsetDistance",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetSkidding",
          "type": "number",
          "mutable": false,
          "attr": "offset-skidding",
          "reflectToAttr": true,
          "docs": "Offset the position of the popover along the reference element.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Display and position the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": false,
          "docs": "Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "Placement | PlacementRtl | VariationRtl",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Determines where the component will be positioned relative to the referenceElement.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "type": "Placement"
            },
            {
              "type": "PlacementRtl"
            },
            {
              "type": "VariationRtl"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "referenceElement",
          "type": "HTMLElement | string",
          "mutable": false,
          "attr": "reference-element",
          "reflectToAttr": false,
          "docs": "Reference HTMLElement used to position this component according to the placement property.",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "reposition() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(focusId?: PopoverFocusId) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle(value?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calcitePopoverClose",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the popover is closed",
          "docsTags": []
        },
        {
          "event": "calcitePopoverOpen",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the popover is opened",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "image",
          "docs": "A slot for adding an image. The image will appear above the other slot content."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-action-menu",
        "calcite-input-time-picker"
      ],
      "dependencies": [
        "calcite-action",
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-popover": [
          "calcite-action",
          "calcite-icon"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ],
        "calcite-action-menu": [
          "calcite-popover"
        ],
        "calcite-input-time-picker": [
          "calcite-popover"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-popover-manager/calcite-popover-manager.tsx",
      "encapsulation": "none",
      "tag": "calcite-popover-manager",
      "readme": "# calcite-popover-manager\n",
      "docs": "",
      "docsTags": [
        {
          "text": "- A slot for adding elements that reference a 'calcite-popover' by the 'selector' property.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autoClose",
          "type": "boolean",
          "mutable": false,
          "attr": "auto-close",
          "reflectToAttr": true,
          "docs": "Automatically closes any currently open popovers when clicking outside of a popover.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selector",
          "type": "string",
          "mutable": false,
          "attr": "selector",
          "reflectToAttr": false,
          "docs": "CSS Selector to match reference elements for popovers. Reference elements will be identified by this selector in order to open their associated popover.",
          "docsTags": [],
          "default": "`[${POPOVER_REFERENCE}]`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding elements that reference a 'calcite-popover' by the 'selector' property."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-progress/calcite-progress.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-progress",
      "readme": "# calcite-progress\n\nThe `calcite-progress` component is used to show progress on some async task to the user.\n\n## TODO\n",
      "docs": "The `calcite-progress` component is used to show progress on some async task to the user.",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-progress type=\"indeterminate\"></calcite-progress>\n```\n"
      },
      "props": [
        {
          "name": "reversed",
          "type": "boolean",
          "mutable": false,
          "attr": "reversed",
          "reflectToAttr": false,
          "docs": "For indeterminate progress bars, reverse the animation direction",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Text label for the progress indicator",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"determinate\" | \"indeterminate\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Use indeterminate if finding actual progress value is impossible",
          "docsTags": [],
          "default": "\"determinate\"",
          "values": [
            {
              "value": "determinate",
              "type": "string"
            },
            {
              "value": "indeterminate",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Fraction completed, in the range of 0 - 1.0",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-input"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-input": [
          "calcite-progress"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-radio/calcite-radio.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-radio",
      "readme": "# calcite-radio\n\nRenders small, medium and large radio circles. This is an internal component used by `calcite-radio-button`.\n",
      "docs": "Renders small, medium and large radio circles. This is an internal component used by `calcite-radio-button`.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "The checked state of the radio.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "The disabled state of the radio.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "mutable": false,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "The focused state of the radio.",
          "docsTags": [
            {
              "name": "private"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "The radio's hidden status.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hovered",
          "type": "boolean",
          "mutable": false,
          "attr": "hovered",
          "reflectToAttr": true,
          "docs": "The hovered state of the radio.",
          "docsTags": [
            {
              "name": "private"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The scale (size) of the radio.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-radio-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-radio-button": [
          "calcite-radio"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-radio-button/calcite-radio-button.tsx",
      "encapsulation": "scoped",
      "tag": "calcite-radio-button",
      "readme": "# calcite-radio-button\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "The checked state of the radio button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "The disabled state of the radio button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "mutable": true,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "The focused state of the radio button.",
          "docsTags": [
            {
              "name": "private"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "guid",
          "type": "string",
          "mutable": true,
          "attr": "guid",
          "reflectToAttr": true,
          "docs": "The id attribute of the radio button.  When omitted, a globally unique identifier is used.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "The radio button's hidden status.  When a radio button is hidden it is not focusable or checkable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hovered",
          "type": "boolean",
          "mutable": true,
          "attr": "hovered",
          "reflectToAttr": true,
          "docs": "The hovered state of the radio button.",
          "docsTags": [
            {
              "name": "private"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name of the radio button.  <code>name</code> is passed as a property automatically from <code>calcite-radio-button-group</code>.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Requires that a value is selected for the radio button group before the parent form will submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The scale (size) of the radio button.  <code>scale</code> is passed as a property automatically from <code>calcite-radio-button-group</code>.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the radio button.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteRadioButtonChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires only when the radio button is checked.  This behavior is identical to the native HTML input element.\nSince this event does not fire when the radio button is unchecked, it's not recommended to attach a listener for this event\ndirectly on the element, but instead either attach it to a node that contains all of the radio buttons in the group\nor use the calciteRadioButtonGroupChange event if using this with calcite-radio-button-group.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-radio"
      ],
      "dependencyGraph": {
        "calcite-radio-button": [
          "calcite-radio"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-radio-button-group/calcite-radio-button-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-radio-button-group",
      "readme": "# calcite-radio-button-group\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "basic": "Renders the radio button group with default horizontal layout\n\n```html\n<calcite-radio-button-group name=\"basic-group\">\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Maps\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Layers\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Data\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Geography\n  </calcite-label>\n</calcite-radio-button-group>\n```\n",
        "disabled-checked": "Renders all radio button inputs disabled, first one checked\n\n```html\n<calcite-radio-button-group name=\"disabled-group\" disabled>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button checked></calcite-radio-button>\n    A\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    B\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    C\n  </calcite-label>\n</calcite-radio-button-group>\n```\n",
        "with-vertical-layout": "```html\n<calcite-radio-button-group name=\"vertical-group\" layout=\"vertical\">\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Maps\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Layers\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Data\n  </calcite-label>\n  <calcite-label layout=\"inline\">\n    <calcite-radio-button></calcite-radio-button>\n    Geography\n  </calcite-label>\n</calcite-radio-button-group>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "The disabled state of the radio button group.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "The radio button group's hidden status.  When a radio button group is hidden none of its options are focusable or checkable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"grid\" | \"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "The layout direction of the radio buttons in a group.",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name of the radio button group. <code>name</code> must be unique to other radio button group instances.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Requires that a value is selected for the radio button group before the parent form will submit.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The scale (size) of the radio button group.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteRadioButtonGroupChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": [
            {
              "text": "doc",
              "name": "todo"
            }
          ]
        }
      ],
      "listeners": [
        {
          "event": "calciteRadioButtonChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-radio-group/calcite-radio-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-radio-group",
      "readme": "# calcite-radio-group\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "appearance",
          "type": "\"outline\" | \"solid\"",
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "specify the appearance style of the radio group, defaults to solid.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "is the radio group disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"grid\" | \"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "specify the layout of the radio group, defaults to horizontal",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The group's name. Gets submitted with the form.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The scale of the radio group",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItem",
          "type": "HTMLCalciteRadioGroupItemElement",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The group's selected item.",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLCalciteRadioGroupItemElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\"",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "specify the width of the group, defaults to auto",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Focuses the selected item. If there is no selection, it focuses the first item.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteRadioGroupChange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when the selected option changes, event detail is the new value",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteLabelFocus",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteRadioGroupItemChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-radio-group-item/calcite-radio-group-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-radio-group-item",
      "readme": "# calcite-radio-group-item\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Indicates whether the control is checked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display - accepts Calcite UI icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "boolean",
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "flip the icon in rtl",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconPosition",
          "type": "\"end\" | \"start\"",
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": true,
          "docs": "optionally used with icon, select where to position the icon",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The control's value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-radio-group-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-rating/calcite-rating.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-rating",
      "readme": "# calcite-rating\n\n## Labeling for a11y\n\n```\n<calcite-rating intl-rating=\"Label for rating\"></calcite-rating>\n```\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "average",
          "type": "number",
          "mutable": false,
          "attr": "average",
          "reflectToAttr": true,
          "docs": "optionally pass a cumulative average rating to display",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "count",
          "type": "number",
          "mutable": false,
          "attr": "count",
          "reflectToAttr": true,
          "docs": "optionally pass a number of previous ratings to display",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "is the rating component in a selectable mode",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlRating",
          "type": "string",
          "mutable": false,
          "attr": "intl-rating",
          "reflectToAttr": false,
          "docs": "Localized string for \"Rating\" (used for aria label)",
          "docsTags": [],
          "default": "TEXT.rating",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlStars",
          "type": "string",
          "mutable": false,
          "attr": "intl-stars",
          "reflectToAttr": false,
          "docs": "Localized string for labelling each star, `${num}` in the string will be replaced by the number",
          "docsTags": [],
          "default": "TEXT.stars",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readOnly",
          "type": "boolean",
          "mutable": false,
          "attr": "read-only",
          "reflectToAttr": true,
          "docs": "is the rating component in a selectable mode",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the component, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showChip",
          "type": "boolean",
          "mutable": false,
          "attr": "show-chip",
          "reflectToAttr": true,
          "docs": "Show average and count data summary chip (if available)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "the value of the rating component",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteRatingChange",
          "detail": "{ value: number; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the rating value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteLabelFocus",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "blur",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-chip"
      ],
      "dependencyGraph": {
        "calcite-rating": [
          "calcite-icon",
          "calcite-chip"
        ],
        "calcite-chip": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-scrim/calcite-scrim.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-scrim",
      "readme": "# calcite-scrim\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "basic": "### Simple panel example\n\n```html\n<div style=\"position: relative; width: 200px; height: 200px; overflow: auto;\">\n  <calcite-scrim>\n    <p>I'm a panel that is not loading.</p>\n    <p>This content can have any zIndex and it will not be placed above</p>\n    <p>.</p>\n    <p>.</p>\n    <p>.</p>\n    <p>.</p>\n  </calcite-scrim>\n</div>\n```\n\n### Loading scrim panel\n\n```html\n<div style=\"position: relative; width: 200px; height: 200px; overflow: auto;\">\n  <calcite-scrim loading>\n    <p>I'm a panel that is not loading.</p>\n    <p>I have a loading spinner over my content.</p>\n    <p>.</p>\n    <p>.</p>\n    <p>.</p>\n    <p>.</p>\n  </calcite-scrim>\n</div>\n```\n"
      },
      "props": [
        {
          "name": "intlLoading",
          "type": "string",
          "mutable": false,
          "attr": "intl-loading",
          "reflectToAttr": false,
          "docs": "string to override English loading text",
          "docsTags": [],
          "default": "TEXT.loading",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "Determines if the component will have the loader overlay.\nOtherwise, will render opaque disabled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-block",
        "calcite-filter",
        "calcite-modal",
        "calcite-panel",
        "calcite-pick-list",
        "calcite-value-list"
      ],
      "dependencies": [
        "calcite-loader"
      ],
      "dependencyGraph": {
        "calcite-scrim": [
          "calcite-loader"
        ],
        "calcite-block": [
          "calcite-scrim"
        ],
        "calcite-filter": [
          "calcite-scrim"
        ],
        "calcite-modal": [
          "calcite-scrim"
        ],
        "calcite-panel": [
          "calcite-scrim"
        ],
        "calcite-pick-list": [
          "calcite-scrim"
        ],
        "calcite-value-list": [
          "calcite-scrim"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-select/calcite-select.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-select",
      "readme": "# calcite-select\n\nThis component represents a menu of options.\n",
      "docs": "This component represents a menu of options.",
      "docsTags": [],
      "usage": {
        "basic": "#### Default\n\n```html\n<calcite-select>\n  <calcite-option>high</calcite-option>\n  <calcite-option>medium</calcite-option>\n  <calcite-option>low</calcite-option>\n</calcite-select>\n```\n\n#### Specifying underlying value\n\n```html\n<calcite-select>\n  <calcite-option value=\"high\">😃</calcite-option>\n  <calcite-option value=\"medium\">😶</calcite-option>\n  <calcite-option value=\"low\">😭</calcite-option>\n</calcite-select>\n```\n\n#### Specifying different value than option content\n\n```html\n<calcite-select>\n  <calcite-option label=\"high\">1</calcite-option>\n  <calcite-option label=\"medium\">2</calcite-option>\n  <calcite-option label=\"low\">3</calcite-option>\n</calcite-select>\n```\n\n#### Grouped\n\n```html\n<calcite-select>\n  <calcite-option-group label=\"letters\">\n    <calcite-option>a</calcite-option>\n    <calcite-option>b</calcite-option>\n    <calcite-option>c</calcite-option>\n  </calcite-option-group>\n  <calcite-option-group label=\"numbers\">\n    <calcite-option>1</calcite-option>\n    <calcite-option selected>2</calcite-option>\n    <calcite-option>3</calcite-option>\n  </calcite-option-group>\n</calcite-select>\n```\n\n### Side by side (container is flex-box)\n\n```html\n<div class=\"demo-side-by-side\">\n  <calcite-select width=\"half\" label=\"half width\">\n    <calcite-option>☕️</calcite-option>\n    <calcite-option>🍵</calcite-option>\n    <calcite-option selected>🍻</calcite-option>\n  </calcite-select>\n  <calcite-select width=\"half\" label=\"half width\">\n    <calcite-option selected>🌮</calcite-option>\n    <calcite-option>🍔</calcite-option>\n    <calcite-option>🌯</calcite-option>\n  </calcite-select>\n</div>\n```\n\n### Disabling items and/or groups\n\n```html\n<calcite-select>\n  <calcite-option-group label=\"letters\">\n    <calcite-option>a</calcite-option>\n    <calcite-option>b</calcite-option>\n    <calcite-option>c</calcite-option>\n    <calcite-option disabled>d (disabled)</calcite-option>\n  </calcite-option-group>\n  <calcite-option-group label=\"numbers\">\n    <calcite-option disabled>1 (disabled)</calcite-option>\n    <calcite-option>2</calcite-option>\n    <calcite-option selected>2</calcite-option>\n  </calcite-option-group>\n  <calcite-option-group label=\"non-selectable\" disabled>\n    <calcite-option>You-Know-Who</calcite-option>\n    <calcite-option selected>Tom Marvolo Riddle</calcite-option>\n    <calcite-option>He-Who-Must-Not-Be-Named</calcite-option>\n    <calcite-option>Voldemort</calcite-option>\n  </calcite-option-group>\n</calcite-select>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, it prevents the option from being selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The component's label. This is required for accessibility purposes.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The component scale.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedOption",
          "type": "HTMLCalciteOptionElement",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The currently selected option.",
          "docsTags": [
            {
              "name": "readonly"
            }
          ],
          "values": [
            {
              "type": "HTMLCalciteOptionElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\" | \"half\"",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "The component width.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "half",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteSelectChange",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "This event will fire whenever the selected option changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteOptionChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteOptionGroupChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteLabelFocus",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-select": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-shell/calcite-shell.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-shell",
      "readme": "# calcite-shell\n\nThe `calcite-shell` component is used for application layout management. It is a container for the view as well as other calcite components like `calcite-shell-panel` and `calcite-tip-manager`.\n\n_note: calcite-shell supports tablet as the smallest screen size_\n",
      "docs": "The `calcite-shell` component is used for application layout management. It is a container for the view as well as other calcite components like `calcite-shell-panel` and `calcite-tip-manager`.\n\n_note: calcite-shell supports tablet as the smallest screen size_",
      "docsTags": [
        {
          "text": "header - A slot for adding header content. This content will be positioned at the top of the shell.",
          "name": "slot"
        },
        {
          "text": "footer - A slot for adding footer content. This content will be positioned at the bottom of the shell.",
          "name": "slot"
        },
        {
          "text": "primary-panel - A slot for adding the leading `calcite-shell-panel`.",
          "name": "slot"
        },
        {
          "text": "contextual-panel - A slot for adding the trailing `calcite-shell-panel`.",
          "name": "slot"
        },
        {
          "text": "bottom-panel - A slot for adding a bottom floating panel such as a chart or `calcite-tip-manager`.",
          "name": "slot"
        },
        {
          "text": "- A slot for adding content to the shell. This content will appear between any leading and trailing panels added to the shell. (eg. a map)",
          "name": "slot"
        }
      ],
      "usage": {
        "advanced": "#### Advanced\n\nRenders a shell with leading and trailing floating panels, action bar/pad, block, flow, tip manager, footer.\n\n```html\n<calcite-shell>\n  <calcite-shell-panel slot=\"primary-panel\" position=\"start\" detached>\n    <calcite-action-bar slot=\"action-bar\">\n      <calcite-action-group>\n        <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n        <calcite-action text=\"Save\" disabled icon=\"save\"></calcite-action>\n        <calcite-action text=\"Layers\" active indicator icon=\"layers\"></calcite-action>\n      </calcite-action-group>\n      <calcite-action-group>\n        <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n        <calcite-action text=\"Layers\" indicator icon=\"layers\"></calcite-action>\n      </calcite-action-group>\n    </calcite-action-bar>\n    <calcite-block collapsible  heading=\"Primary Content\" summary=\"This is the primary.\">\n      <calcite-block-content>\n        <calcite-action text=\"Puppies\" text-enabled indicator icon=\"plus\"></calcite-action>\n        <calcite-action text=\"Kittens\" text-enabled icon=\"save\"></calcite-action>\n        <calcite-action text=\"Birds?\" text-enabled icon=\"banana\"></calcite-action>\n      </calcite-block-content>\n    </calcite-block>\n    <calcite-block collapsible  heading=\"Additional Block\" summary=\"Baby shark doo doo doo doo.\">\n      <calcite-block-content>\n          <p>Cool thing.</p>\n      </calcite-block-content>\n    </calcite-block>\n  </calcite-shell-panel>\n\n   <calcite-shell-panel slot=\"contextual-panel\" position=\"end\" detached height-scale=\"l\">\n      <calcite-action-bar slot=\"action-bar\">\n        <calcite-action-group>\n          <calcite-action text=\"Add\" active icon=\"plus\"></calcite-action>\n          <calcite-action text=\"Save\" disabled icon=\"save\"></calcite-action>\n          <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n        </calcite-action-group>\n        <calcite-action-group>\n          <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n          <calcite-action text=\"Save\" disabled icon=\"save\"></calcite-action>\n          <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n        </calcite-action-group>\n        <calcite-action slot=\"bottom-actions\" text=\"Tips\" icon=\"lightbulb\"></calcite-action>\n      </calcite-action-bar>\n      <calcite-flow>\n        <calcite-panel heading=\"Layer settings\">\n          <calcite-block collapsible open heading=\"Contextual Content\" summary=\"Select goodness\">\n            <calcite-value-list multiple filter-enabled>\n              <calcite-value-list-item label=\"2018 Population Density (Esri)\" description=\"{POPDENS_CY}\" value=\"POPDENS_CY\">\n                <calcite-action slot=\"actions-end\" icon=\"camera-flash-on\"></calcite-action>\n              </calcite-value-list-item>\n              <calcite-value-list-item label=\"2018 Population Density [Updated]\" description=\"{POPDENS_CY}\" value=\"POPDENS_CY2\">\n                <calcite-action slot=\"actions-end\" icon=\"banana\"></calcite-action>\n              </calcite-value-list-item>\n              <calcite-value-list-item label=\"2018 Total Households (Esri)\" description=\"{TOTHH_CY}\" value=\"TOTHH_CY\">\n                <calcite-action slot=\"actions-end\" icon=\"person2\"></calcite-action>\n              </calcite-value-list-item>\n            </calcite-value-list>\n          </calcite-block>\n        </calcite-panel>\n      </calcite-flow>\n  </calcite-shell-panel>\n  <calcite-tip-manager slot=\"center-row\">\n    <calcite-tip heading=\"The Red Rocks and Blue Water\" thumbnail=\"https://placeimg.com/1000/600\" text-thumbnail=\"This is an image of nature.\">\n    <calcite-tip heading=\"The Long Trees\" thumbnail=\"https://placeimg.com/1000/600\" text-thumbnail=\"This is an image of trees.\">\n  </calcite-tip-manager>\n  <footer slot=\"footer\">Footer</footer>\n</calcite-shell>\n```\n",
        "basic": "#### Basic\n\nRenders a basic shell with a header and a footer.\n\n```html\n<calcite-shell>\n  <div slot=\"header\">\n    <header>\n      <h2>Shell Header: My App</h2>\n    </header>\n  </div>\n  <p>Shell Content</p>\n  <!-- insert map or fillable content here -->\n  <footer slot=\"footer\">Footer</footer>\n</calcite-shell>\n```\n\n#### With panels\n\nRenders a shell with a header and panels on the left and right sides of the app.\n\n```html\n<calcite-shell>\n  <calcite-shell-panel slot=\"primary-panel\" position=\"start\">\n    Leading panel! (on the left side, since this is a LTR app)\n  </calcite-shell-panel>\n  <calcite-shell-panel slot=\"contextual-panel\" position=\"end\"> Trailing panel! (right side) </calcite-shell-panel>\n  <calcite-shell-center-row slot=\"center-row\" position=\"end\" height-scale=\"m\">\n    Center Row! (center bottom)\n  </calcite-shell-center-row>\n  <div slot=\"header\">\n    <header>\n      <h2>Shell Header: My App</h2>\n    </header>\n  </div>\n  <p>Shell Content</p>\n  <!-- insert map or fillable content here -->\n</calcite-shell>\n```\n\n#### Panel with action bar\n\nRenders a single panel with actions in an action bar.\n\n```html\n<calcite-shell>\n  <calcite-shell-panel slot=\"primary-panel\" position=\"start\">\n    <img src=\"https://via.placeholder.com/300x200\" alt=\"placeholder\" />\n    <calcite-action-bar slot=\"action-bar\">\n      <calcite-action text=\"Add\" active icon=\"plus\"></calcite-action>\n      <calcite-action text=\"Save\" disabled icon=\"save\"></calcite-action>\n      <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n    </calcite-action-bar>\n  </calcite-shell-panel>\n</calcite-shell>\n```\n"
      },
      "props": [
        {
          "name": "contentBehind",
          "type": "boolean",
          "mutable": false,
          "attr": "content-behind",
          "reflectToAttr": true,
          "docs": "Positions the center content behind any calcite-shell-panels.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding content to the shell. This content will appear between any leading and trailing panels added to the shell. (eg. a map)"
        },
        {
          "name": "bottom-panel",
          "docs": "A slot for adding a bottom floating panel such as a chart or `calcite-tip-manager`."
        },
        {
          "name": "contextual-panel",
          "docs": "A slot for adding the trailing `calcite-shell-panel`."
        },
        {
          "name": "footer",
          "docs": "A slot for adding footer content. This content will be positioned at the bottom of the shell."
        },
        {
          "name": "header",
          "docs": "A slot for adding header content. This content will be positioned at the top of the shell."
        },
        {
          "name": "primary-panel",
          "docs": "A slot for adding the leading `calcite-shell-panel`."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-shell-center-row/calcite-shell-center-row.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-shell-center-row",
      "readme": "# calcite-shell-center-row\n",
      "docs": "",
      "docsTags": [
        {
          "text": "action-bar - A slot for adding a `calcite-action-bar` to the panel.",
          "name": "slot"
        },
        {
          "text": "- A slot for adding content to the shell panel.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "detached",
          "type": "boolean",
          "mutable": false,
          "attr": "detached",
          "reflectToAttr": true,
          "docs": "This property makes the content area appear like a \"floating\" panel.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heightScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "height-scale",
          "reflectToAttr": true,
          "docs": "Specifies the maxiumum height of the row.",
          "docsTags": [],
          "default": "\"s\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"end\" | \"start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Arranges the component depending on the elements 'dir' property.",
          "docsTags": [],
          "default": "\"end\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding content to the shell panel."
        },
        {
          "name": "action-bar",
          "docs": "A slot for adding a `calcite-action-bar` to the panel."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-shell-panel/calcite-shell-panel.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-shell-panel",
      "readme": "# calcite-shell-panel\n\nThe `calcite-shell-panel` is a child component of `calcite-shell` used as a container to display other components like `calcite-block` and `calcite-flow`.\n",
      "docs": "The `calcite-shell-panel` is a child component of `calcite-shell` used as a container to display other components like `calcite-block` and `calcite-flow`.",
      "docsTags": [
        {
          "text": "action-bar - A slot for adding a `calcite-action-bar` to the panel.",
          "name": "slot"
        },
        {
          "text": "- A slot for adding content to the shell panel.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Basic\n\nRenders a basic shell panel with text content.\n\n```html\n<calcite-shell-panel>\n  <p>Primary Content</p>\n</calcite-shell-panel>\n```\n\n#### With action bar\n\nRenders a panel with an action bar.\n\n```html\n<calcite-shell-panel>\n  <calcite-action-bar slot=\"action-bar\">\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n  </calcite-action-bar>\n</calcite-shell-panel>\n```\n\n#### With a CalcitePanel.\n\n```html\n<calcite-shell-panel>\n  <calcite-action-bar slot=\"action-bar\">\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n  </calcite-action-bar>\n  <calcite-panel> ... </calcite-panel>\n</calcite-shell-panel>\n```\n\n#### With a CalciteFlow.\n\n```html\n<calcite-shell-panel>\n  <calcite-action-bar slot=\"action-bar\">\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n  </calcite-action-bar>\n  <calcite-flow>\n    <calcite-panel> ... </calcite-panel>\n    <calcite-panel> ... </calcite-panel>\n  </calcite-flow>\n</calcite-shell-panel>\n```\n\n#### With a custom element wrapping a CalcitePanel.\n\nAdd `calcite-match-height` to a wrapping element to ensure proper height, scrolling, and sticky behavior (header, footer, fab). Note that multiple levels of nesting is not supported.\n\n```html\n<calcite-shell-panel>\n  <calcite-action-bar slot=\"action-bar\">\n    <calcite-action text=\"Add\" icon=\"plus\"></calcite-action>\n    <calcite-action text=\"Save\" icon=\"save\"></calcite-action>\n    <calcite-action text=\"Layers\" icon=\"layers\"></calcite-action>\n  </calcite-action-bar>\n  <your-custom-element class=\"calcite-match-height\">\n    <calcite-panel> ... </calcite-panel>\n  </your-custom-element>\n</calcite-shell-panel>\n```\n"
      },
      "props": [
        {
          "name": "collapsed",
          "type": "boolean",
          "mutable": false,
          "attr": "collapsed",
          "reflectToAttr": true,
          "docs": "Hide the content panel.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "detached",
          "type": "boolean",
          "mutable": false,
          "attr": "detached",
          "reflectToAttr": true,
          "docs": "This property makes the content area appear like a \"floating\" panel.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "detachedHeightScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "detached-height-scale",
          "reflectToAttr": true,
          "docs": "Specifies the maxiumum height of the contents when detached.",
          "docsTags": [],
          "default": "\"l\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"end\" | \"start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Arranges the component depending on the elements 'dir' property.",
          "docsTags": [],
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "widthScale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "width-scale",
          "reflectToAttr": true,
          "docs": "This sets width of the content area.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteShellPanelToggle",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when collapse has been toggled.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding content to the shell panel."
        },
        {
          "name": "action-bar",
          "docs": "A slot for adding a `calcite-action-bar` to the panel."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-slider/calcite-slider.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-slider",
      "readme": "# calcite-slider\n\nRange selection component for selecting single or multiple numeric values inside a given range.\n",
      "docs": "Range selection component for selecting single or multiple numeric values inside a given range.",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-slider min=\"1\" max=\"100\" value=\"50\" step=\"1\"></calcite-slider>\n```\n",
        "two-handles": "If you'd like to allow an upper and lower value selection (two handles), you can set `min-value` and `max-value` rather than `value`. Note: these are mutually exclusive.\n\n```html\n<calcite-slider\n  min=\"1\"\n  max=\"100\"\n  min-value=\"50\"\n  max-value=\"85\"\n  step=\"1\"\n  min-label=\"Temperature (lower)\"\n  max-label=\"Temperature (upper)\"\n></calcite-slider>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disable and gray out the slider",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasHistogram",
          "type": "boolean",
          "mutable": true,
          "attr": "has-histogram",
          "reflectToAttr": true,
          "docs": "Indicates if a histogram is present",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "histogram",
          "type": "Point[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Display a histogram above the slider",
          "docsTags": [],
          "values": [
            {
              "type": "Point[]"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "labelHandles",
          "type": "boolean",
          "mutable": false,
          "attr": "label-handles",
          "reflectToAttr": true,
          "docs": "Label handles with their numeric value",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "labelTicks",
          "type": "boolean",
          "mutable": false,
          "attr": "label-ticks",
          "reflectToAttr": true,
          "docs": "Label tick marks with their numeric value.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "Maximum selectable value",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLabel",
          "type": "string",
          "mutable": false,
          "attr": "max-label",
          "reflectToAttr": false,
          "docs": "Label for second handle if needed (ex. \"Temperature, upper bound\")",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxValue",
          "type": "number",
          "mutable": true,
          "attr": "max-value",
          "reflectToAttr": false,
          "docs": "Currently selected upper number (if multi-select)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "Minimum selectable value",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minLabel",
          "type": "string",
          "mutable": false,
          "attr": "min-label",
          "reflectToAttr": false,
          "docs": "Label for first (or only) handle (ex. \"Temperature, lower bound\")",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minValue",
          "type": "number",
          "mutable": true,
          "attr": "min-value",
          "reflectToAttr": false,
          "docs": "Currently selected lower number (if multi-select)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pageStep",
          "type": "number",
          "mutable": false,
          "attr": "page-step",
          "reflectToAttr": false,
          "docs": "Interval to move on page up/page down keys",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "precise",
          "type": "boolean",
          "mutable": false,
          "attr": "precise",
          "reflectToAttr": false,
          "docs": "Use finer point for handles",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "snap",
          "type": "boolean",
          "mutable": false,
          "attr": "snap",
          "reflectToAttr": false,
          "docs": "When true, enables snap selection along the step interval",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Interval to move on up/down keys",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ticks",
          "type": "number",
          "mutable": false,
          "attr": "ticks",
          "reflectToAttr": false,
          "docs": "Show tick marks on the number line at provided interval",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Currently selected number (if single select)",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteSliderChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires on all updates to the slider.\n:warning: Will be fired frequently during drag. If you are performing any\nexpensive operations consider using a debounce or throttle to avoid\nlocking up the main thread.",
          "docsTags": []
        },
        {
          "event": "calciteSliderUpdate",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires on all updates to the slider.\n:warning: Will be fired frequently during drag. If you are performing any\nexpensive operations consider using a debounce or throttle to avoid\nlocking up the main thread.",
          "docsTags": [
            {
              "text": "use calciteSliderChange instead",
              "name": "deprecated"
            }
          ],
          "deprecation": "use calciteSliderChange instead"
        }
      ],
      "listeners": [
        {
          "event": "calciteLabelFocus",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-graph"
      ],
      "dependencyGraph": {
        "calcite-slider": [
          "calcite-graph"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-sortable-list/calcite-sortable-list.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-sortable-list",
      "readme": "# calcite-sortable-list\n",
      "docs": "",
      "docsTags": [
        {
          "text": "- A slot for adding sortable items",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, disabled prevents interaction. This state shows items with lower opacity/grayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelector",
          "type": "string",
          "mutable": false,
          "attr": "handle-selector",
          "reflectToAttr": false,
          "docs": "The class on the handle elements.",
          "docsTags": [],
          "default": "\"calcite-handle\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When true, content is waiting to be loaded. This state shows a busy indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteListOrderChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the order of the list has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteHandleNudge",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding sortable items"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-split-button/calcite-split-button.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-split-button",
      "readme": "# calcite-split-button\n\nThe calcite-split-button control is one that combines a button with a dropdown menu in order to provide a primary action along with one or more related secondary options / actions. It's useful for grouping related actions or options for users, while elevating a commonly-used or default action for easier access. Its inner content populates the control's dropdown menu, and is thus expected to be valid `calcite-dropdown` content.\n",
      "docs": "The calcite-split-button control is one that combines a button with a dropdown menu in order to provide a primary action along with one or more related secondary options / actions. It's useful for grouping related actions or options for users, while elevating a commonly-used or default action for easier access. Its inner content populates the control's dropdown menu, and is thus expected to be valid `calcite-dropdown` content.",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-split-button primary-icon-start=\"save\" primary-text=\"Primary Option\">\n  <calcite-dropdown-group selection-mode=\"none\">\n    <calcite-dropdown-item>Option 2</calcite-dropdown-item>\n    <calcite-dropdown-item>Option 3</calcite-dropdown-item>\n    <calcite-dropdown-item>Option 4</calcite-dropdown-item>\n  </calcite-dropdown-group>\n</calcite-split-button>\n```\n"
      },
      "props": [
        {
          "name": "appearance",
          "type": "\"clear\" | \"outline\" | \"solid\" | \"transparent\"",
          "mutable": false,
          "attr": "appearance",
          "reflectToAttr": true,
          "docs": "specify the appearance style of the button, defaults to solid.",
          "docsTags": [],
          "default": "\"solid\"",
          "values": [
            {
              "value": "clear",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"blue\" | \"inverse\" | \"neutral\" | \"red\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "specify the color of the control, defaults to blue",
          "docsTags": [],
          "default": "\"blue\"",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "inverse",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "is the control disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dropdownIconType",
          "type": "\"caret\" | \"chevron\" | \"ellipsis\" | \"overflow\"",
          "mutable": false,
          "attr": "dropdown-icon-type",
          "reflectToAttr": true,
          "docs": "specify the icon used for the dropdown menu, defaults to chevron",
          "docsTags": [],
          "default": "\"chevron\"",
          "values": [
            {
              "value": "caret",
              "type": "string"
            },
            {
              "value": "chevron",
              "type": "string"
            },
            {
              "value": "ellipsis",
              "type": "string"
            },
            {
              "value": "overflow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dropdownLabel",
          "type": "string",
          "mutable": false,
          "attr": "dropdown-label",
          "reflectToAttr": true,
          "docs": "aria label for overflow button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "optionally add a calcite-loader component to the control,\ndisabling interaction. with the primary button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "primaryIconEnd",
          "type": "string",
          "mutable": false,
          "attr": "primary-icon-end",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the end of the primary button - accepts Calcite UI icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "primaryIconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "mutable": false,
          "attr": "primary-icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "flip the primary icon(s) in rtl",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "primaryIconStart",
          "type": "string",
          "mutable": false,
          "attr": "primary-icon-start",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the start of the primary button - accepts Calcite UI icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "primaryLabel",
          "type": "string",
          "mutable": false,
          "attr": "primary-label",
          "reflectToAttr": true,
          "docs": "optionally pass an aria-label for the primary button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "primaryText",
          "type": "string",
          "mutable": false,
          "attr": "primary-text",
          "reflectToAttr": true,
          "docs": "text for primary action button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of the control, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteSplitButtonPrimaryClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fired when the primary button is clicked",
          "docsTags": []
        },
        {
          "event": "calciteSplitButtonSecondaryClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fired when the secondary button is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-button",
        "calcite-dropdown"
      ],
      "dependencyGraph": {
        "calcite-split-button": [
          "calcite-button",
          "calcite-dropdown"
        ],
        "calcite-button": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-stepper/calcite-stepper.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-stepper",
      "readme": "# calcite-stepper\n\nCalcite stepper can be used to present a stepper workflow to a user. It has configurable display options for layout (horizontal or vertical), and the ability to automatically render status icons, and step numbers.\n",
      "docs": "Calcite stepper can be used to present a stepper workflow to a user. It has configurable display options for layout (horizontal or vertical), and the ability to automatically render status icons, and step numbers.",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-stepper icon numbered id=\"my-example-stepper\">\n  <calcite-stepper-item item-title=\"Choose method\" item-subtitle=\"Add members without sending invitations\" complete>\n    Step 1 Content Goes Here\n  </calcite-stepper-item>\n  <calcite-stepper-item item-title=\"Compile member list\" error> Step 2 Content Goes Here </calcite-stepper-item>\n  <calcite-stepper-item item-title=\"Set member properties\" item-subtitle=\"Some subtext\" active>\n    Step 3 Content Goes Here\n  </calcite-stepper-item>\n  <calcite-stepper-item item-title=\"Confirm and complete\" item-subtitle=\"Disabled example\" disabled>\n    Step 4 Content Goes Here\n  </calcite-stepper-item>\n</calcite-stepper>\n```\n"
      },
      "props": [
        {
          "name": "icon",
          "type": "boolean",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "optionally display a status icon next to the step title",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"grid\" | \"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "specify the layout of stepper, defaults to horizontal",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numbered",
          "type": "boolean",
          "mutable": false,
          "attr": "numbered",
          "reflectToAttr": true,
          "docs": "optionally display the number next to the step title",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "specify the scale of stepper, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "endStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "endStep() => Promise<void>",
          "parameters": [],
          "docs": "set the last step as active",
          "docsTags": []
        },
        {
          "name": "goToStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "goToStep(num: number) => Promise<void>",
          "parameters": [],
          "docs": "set the requested step as active",
          "docsTags": []
        },
        {
          "name": "nextStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "nextStep() => Promise<void>",
          "parameters": [],
          "docs": "set the next step as active",
          "docsTags": []
        },
        {
          "name": "prevStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "prevStep() => Promise<void>",
          "parameters": [],
          "docs": "set the previous step as active",
          "docsTags": []
        },
        {
          "name": "startStep",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "startStep() => Promise<void>",
          "parameters": [],
          "docs": "set the first step as active",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "calciteStepperItemKeyEvent",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteStepperItemRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteStepperItemSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-stepper-item/calcite-stepper-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-stepper-item",
      "readme": "# calcite-stepper-item\n\nindividual `calcite-stepper-item` item\n",
      "docs": "individual `calcite-stepper-item` item",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "is the step active",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "complete",
          "type": "boolean",
          "mutable": false,
          "attr": "complete",
          "reflectToAttr": true,
          "docs": "has the step been completed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "is the step disabled and not navigable to by a user",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "error",
          "type": "boolean",
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "does the step contain an error that needs to be resolved by the user",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemSubtitle",
          "type": "string",
          "mutable": false,
          "attr": "item-subtitle",
          "reflectToAttr": false,
          "docs": "pass a title for the stepper item",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "itemTitle",
          "type": "string",
          "mutable": false,
          "attr": "item-title",
          "reflectToAttr": false,
          "docs": "pass a title for the stepper item",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteStepperItemChange",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-stepper-item": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-switch/calcite-switch.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-switch",
      "readme": "# calcite-switch\n\n`calcite-switch` is used to toggle a value on or off.\n",
      "docs": "`calcite-switch` is used to toggle a value on or off.",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<label> <calcite-switch switched></calcite-switch> Switch is on </label>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "True if the switch is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name of the switch input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The scale of the switch",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "switched",
          "type": "boolean",
          "mutable": true,
          "attr": "switched",
          "reflectToAttr": true,
          "docs": "True if the switch is initially on",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The value of the switch input",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteSwitchChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the switched value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteLabelFocus",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-block-section"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-block-section": [
          "calcite-switch"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tab/calcite-tab.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tab",
      "readme": "# calcite-tab\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "basic": "`calcite-tab` wraps the content you would like to appear when that tab is selected:\n\n```html\n<calcite-tab>My stuff!</calcite-tab>\n```\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Show this tab",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tab",
          "type": "string",
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": true,
          "docs": "Optionally include a unique name for this tab,\nbe sure to also set this name on the associated title.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getTabIndex",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "signature": "getTabIndex() => Promise<number>",
          "parameters": [],
          "docs": "Return the index of this tab within the tab array",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "calciteTabChange",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-tab"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tab-nav/calcite-tab-nav.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tab-nav",
      "readme": "# calcite-tab-nav\n\nThe tab-nav groups several [calcite-tab-title](../calcite-tab-title) components and builds out the navigation. You can optionally use attibutes on the tab-nav to configure client side storage of the selected tab.\n",
      "docs": "The tab-nav groups several [calcite-tab-title](../calcite-tab-title) components and builds out the navigation. You can optionally use attibutes on the tab-nav to configure client side storage of the selected tab.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "storageId",
          "type": "string",
          "mutable": false,
          "attr": "storage-id",
          "reflectToAttr": false,
          "docs": "Name to use when saving selected tab data to localStorage",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "syncId",
          "type": "string",
          "mutable": false,
          "attr": "sync-id",
          "reflectToAttr": false,
          "docs": "Pass the same string to multiple tab navs to keep them all in sync if one changes",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteTabChange",
          "detail": "TabChangeEventDetail",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the active tab changes",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "calciteTabsFocusPrevious",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabsFocusNext",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabsActivate",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabTitleRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabChange",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-tab-nav"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tab-title/calcite-tab-title.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tab-title",
      "readme": "# calcite-tab-title\n\nThe tab-title is the link that switches between panes in [calcite-tabs](../calcite-tabs).\n",
      "docs": "The tab-title is the link that switches between panes in [calcite-tabs](../calcite-tabs).",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Show this tab title as selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disable this tab title",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEnd",
          "type": "string",
          "mutable": false,
          "attr": "icon-end",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the end of a tab title - accepts calcite ui icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconFlipRtl",
          "type": "\"both\" | \"end\" | \"start\"",
          "mutable": false,
          "attr": "icon-flip-rtl",
          "reflectToAttr": true,
          "docs": "flip the icon(s) in rtl",
          "docsTags": [],
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconStart",
          "type": "string",
          "mutable": false,
          "attr": "icon-start",
          "reflectToAttr": true,
          "docs": "optionally pass an icon to display at the start of a tab title - accepts calcite ui icon names",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tab",
          "type": "string",
          "mutable": false,
          "attr": "tab",
          "reflectToAttr": true,
          "docs": "Optionally include a unique name for the tab title,\nbe sure to also set this name on the associated tab.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getTabIndex",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "signature": "getTabIndex() => Promise<number>",
          "parameters": [],
          "docs": "Return the index of this title within the nav",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteTabsActivate",
          "detail": "TabChangeEventDetail",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires when a specific tab is activated. `event.details`: [TabChangeEventDetail](../../interfaces/TabChange.ts)",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteTabChange",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-tab-title": [
          "calcite-icon"
        ],
        "calcite-color-picker": [
          "calcite-tab-title"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tabs/calcite-tabs.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tabs",
      "readme": "# calcite-tabs\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "basic": "`calcite-tabs` uses several sub-components ([calcite-tab-nav](../calcite-tab-nav), [calcite-tab](../calcite-tab), [calcite-tab-title](../calcite-tab-title)) to create a tabbed interface with optional client side storage. Place your content inside of the `<calcite-tab>` element:\n\n```html\n<calcite-tabs>\n  <calcite-tab-nav slot=\"tab-nav\">\n    <calcite-tab-title active>Tab 1 Title</calcite-tab-title>\n    <calcite-tab-title>Tab 2 Title</calcite-tab-title>\n  </calcite-tab-nav>\n\n  <calcite-tab active>Tab 1 Content</calcite-tab>\n  <calcite-tab>Tab 2 Content</calcite-tab>\n</calcite-tabs>\n```\n"
      },
      "props": [
        {
          "name": "layout",
          "type": "\"center\" | \"inline\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Align tab titles to the edge or fully justify them across the tab nav (\"center\")",
          "docsTags": [],
          "default": "\"inline\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "inline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"above\" | \"below\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "Display the tabs above (default) or below the tab content",
          "docsTags": [],
          "default": "\"above\"",
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "below",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "calciteTabTitleRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabTitleUnregister",
          "target": "body",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabRegister",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTabUnregister",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-color-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-color-picker": [
          "calcite-tabs"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tile/calcite-tile.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tile",
      "readme": "# calcite-tile\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "The active state of the tile.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "The description text that appears beneath the heading of the tile.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "embed",
          "type": "boolean",
          "mutable": false,
          "attr": "embed",
          "reflectToAttr": true,
          "docs": "The embed mode of the tile.  When true, renders without a border and padding for use by other components.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focused",
          "type": "boolean",
          "mutable": false,
          "attr": "focused",
          "reflectToAttr": true,
          "docs": "The focused state of the tile.",
          "docsTags": [
            {
              "name": "private"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": true,
          "docs": "The heading text that appears between the icon and description of the tile.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "The hidden state of the tile.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "The (optional) url for the tile. (Only applies when embed is set to false)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "The icon that appears at the top of the tile.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-tile-select"
      ],
      "dependencies": [
        "calcite-icon",
        "calcite-link"
      ],
      "dependencyGraph": {
        "calcite-tile": [
          "calcite-icon",
          "calcite-link"
        ],
        "calcite-link": [
          "calcite-icon"
        ],
        "calcite-tile-select": [
          "calcite-tile"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tile-select/calcite-tile-select.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tile-select",
      "readme": "# calcite-tile-select\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "The checked state of the tile select.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "The description text that appears beneath the heading of the tile.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "The disabled state of the tile select.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": true,
          "docs": "The heading text that appears between the icon and description of the tile.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": true,
          "docs": "The hidden state of the tile select.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "The icon that appears at the top of the tile.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputAlignment",
          "type": "\"end\" | \"start\"",
          "mutable": false,
          "attr": "input-alignment",
          "reflectToAttr": true,
          "docs": "The side of the tile that the radio or checkbox appears on when inputEnabled is true.",
          "docsTags": [],
          "default": "\"start\"",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputEnabled",
          "type": "boolean",
          "mutable": false,
          "attr": "input-enabled",
          "reflectToAttr": true,
          "docs": "Display an interactive radio or checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name of the tile select.  This name will appear in form submissions as either a radio or checkbox identifier based on the `type` property.",
          "docsTags": [],
          "default": "\"\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"checkbox\" | \"radio\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The selection mode of the tile select: radio (single) or checkbox (multiple).",
          "docsTags": [],
          "default": "\"radio\"",
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the tile select.  This value will appear in form submissions when this tile select is checked.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "width",
          "type": "\"auto\" | \"full\"",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "specify the width of the tile, defaults to auto",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "calciteCheckboxChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteCheckboxFocusedChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteRadioButtonCheckedChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteRadioButtonFocusedChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-tile"
      ],
      "dependencyGraph": {
        "calcite-tile-select": [
          "calcite-tile"
        ],
        "calcite-tile": [
          "calcite-icon",
          "calcite-link"
        ],
        "calcite-link": [
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tile-select-group/calcite-tile-select-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tile-select-group",
      "readme": "# calcite-tile-select-group\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "layout",
          "type": "\"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": true,
          "docs": "Tiles by default move horizontally, stacking with each row, vertical allows single-column layouts",
          "docsTags": [],
          "default": "\"horizontal\"",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-time-picker/calcite-time-picker.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-time-picker",
      "readme": "# calcite-time-picker\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "hour",
          "type": "string",
          "mutable": true,
          "attr": "hour",
          "reflectToAttr": false,
          "docs": "The hour value (24-hour format)",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hourDisplayFormat",
          "type": "\"12\" | \"24\"",
          "mutable": false,
          "attr": "hour-display-format",
          "reflectToAttr": true,
          "docs": "Format of the hour value (12-hour or 24-hour) (this will be replaced by locale eventually)",
          "docsTags": [],
          "default": "\"12\"",
          "values": [
            {
              "value": "12",
              "type": "string"
            },
            {
              "value": "24",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlHour",
          "type": "string",
          "mutable": false,
          "attr": "intl-hour",
          "reflectToAttr": false,
          "docs": "aria-label for the hour input",
          "docsTags": [],
          "default": "TEXT.hour",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlHourDown",
          "type": "string",
          "mutable": false,
          "attr": "intl-hour-down",
          "reflectToAttr": false,
          "docs": "aria-label for the hour down button",
          "docsTags": [],
          "default": "TEXT.hourDown",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlHourUp",
          "type": "string",
          "mutable": false,
          "attr": "intl-hour-up",
          "reflectToAttr": false,
          "docs": "aria-label for the hour up button",
          "docsTags": [],
          "default": "TEXT.hourUp",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlMeridiem",
          "type": "string",
          "mutable": false,
          "attr": "intl-meridiem",
          "reflectToAttr": false,
          "docs": "aria-label for the meridiem (am/pm) input",
          "docsTags": [],
          "default": "TEXT.meridiem",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlMeridiemDown",
          "type": "string",
          "mutable": false,
          "attr": "intl-meridiem-down",
          "reflectToAttr": false,
          "docs": "aria-label for the meridiem (am/pm) down button",
          "docsTags": [],
          "default": "TEXT.meridiemDown",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlMeridiemUp",
          "type": "string",
          "mutable": false,
          "attr": "intl-meridiem-up",
          "reflectToAttr": false,
          "docs": "aria-label for the meridiem (am/pm) up button",
          "docsTags": [],
          "default": "TEXT.meridiemUp",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlMinute",
          "type": "string",
          "mutable": false,
          "attr": "intl-minute",
          "reflectToAttr": false,
          "docs": "aria-label for the minute input",
          "docsTags": [],
          "default": "TEXT.minute",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlMinuteDown",
          "type": "string",
          "mutable": false,
          "attr": "intl-minute-down",
          "reflectToAttr": false,
          "docs": "aria-label for the minute down button",
          "docsTags": [],
          "default": "TEXT.minuteDown",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlMinuteUp",
          "type": "string",
          "mutable": false,
          "attr": "intl-minute-up",
          "reflectToAttr": false,
          "docs": "aria-label for the minute up button",
          "docsTags": [],
          "default": "TEXT.minuteUp",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlSecond",
          "type": "string",
          "mutable": false,
          "attr": "intl-second",
          "reflectToAttr": false,
          "docs": "aria-label for the second input",
          "docsTags": [],
          "default": "TEXT.second",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlSecondDown",
          "type": "string",
          "mutable": false,
          "attr": "intl-second-down",
          "reflectToAttr": false,
          "docs": "aria-label for the second down button",
          "docsTags": [],
          "default": "TEXT.secondDown",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlSecondUp",
          "type": "string",
          "mutable": false,
          "attr": "intl-second-up",
          "reflectToAttr": false,
          "docs": "aria-label for the second up button",
          "docsTags": [],
          "default": "TEXT.secondUp",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minute",
          "type": "string",
          "mutable": true,
          "attr": "minute",
          "reflectToAttr": false,
          "docs": "The minute value",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"l\" | \"m\" | \"s\"",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "The scale (size) of the time picker",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "second",
          "type": "string",
          "mutable": true,
          "attr": "second",
          "reflectToAttr": false,
          "docs": "The second value",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "number that specifies the granularity that the value must adhere to",
          "docsTags": [],
          "default": "60",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(target: TimeFocusId) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "blur",
          "capture": false,
          "passive": false
        },
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "calcite-input-time-picker"
      ],
      "dependencies": [
        "calcite-icon"
      ],
      "dependencyGraph": {
        "calcite-time-picker": [
          "calcite-icon"
        ],
        "calcite-input-time-picker": [
          "calcite-time-picker"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tip/calcite-tip.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tip",
      "readme": "# calcite-tip\n\nThe `calcite-tip` component can comprise of an image, text and hyperlink to give helpful hints to a user about using the platform.\n",
      "docs": "The `calcite-tip` component can comprise of an image, text and hyperlink to give helpful hints to a user about using the platform.",
      "docsTags": [
        {
          "text": "thumbnail - A slot for adding an HTML image element to the tip.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Basic\n\nRenders a non-dismissible tip with a heading, thumbnail, info and a link.\n\n```html\n<calcite-tip non-dismissible heading=\"Celestial Bodies!\">\n  <img slot=\"thumbnail\" src=\"https://placeimg.com/1000/600\" alt=\"This is an image of nature.\" />\n  <p>Normal tip with a landscape or square image and a small amount of text in the \"info\" slot.</p>\n  <a href=\"http://www.esri.com\">Put a link hurr!</a>\n</calcite-tip>\n```\n"
      },
      "props": [
        {
          "name": "dismissed",
          "type": "boolean",
          "mutable": true,
          "attr": "dismissed",
          "reflectToAttr": true,
          "docs": "No longer displays the tip.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The heading of the tip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlClose",
          "type": "string",
          "mutable": false,
          "attr": "intl-close",
          "reflectToAttr": false,
          "docs": "Alternate text for closing the tip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "nonDismissible",
          "type": "boolean",
          "mutable": false,
          "attr": "non-dismissible",
          "reflectToAttr": true,
          "docs": "Indicates whether the tip can be dismissed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "The selected state of the tip if it is being used inside a `calcite-tip-manager`.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteTipDismiss",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the component has been dismissed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "thumbnail",
          "docs": "A slot for adding an HTML image element to the tip."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-tip": [
          "calcite-action"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tip-group/calcite-tip-group.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tip-group",
      "readme": "# calcite-tip-group\n\n`calcite-tip-group` is a wrapper for multiple `calcite-tip`s and is housed in `calcite-tip-manager`.\n",
      "docs": "`calcite-tip-group` is a wrapper for multiple `calcite-tip`s and is housed in `calcite-tip-manager`.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "groupTitle",
          "type": "string",
          "mutable": false,
          "attr": "group-title",
          "reflectToAttr": false,
          "docs": "The title used for all nested tips.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-tip-manager/calcite-tip-manager.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tip-manager",
      "readme": "# calcite-tip-manager\n\nThe `calcite-tip-manager` component contains multiple `calcite-tip`s that a user can view through via interactive arrows to go back and forth through the tips in the deck.\n",
      "docs": "The `calcite-tip-manager` component contains multiple `calcite-tip`s that a user can view through via interactive arrows to go back and forth through the tips in the deck.",
      "docsTags": [
        {
          "text": "- A slot for adding `calcite-tip`s.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Basic\n\nRenders a tip manager using a group of tips as well as a single tip.\n\n```html\n<calcite-tip-manager>\n  <calcite-tip-group group-title=\"Greek Myth Stuff\">\n    <calcite-tip\n      heading=\"Pegasus\"\n      thumbnail=\"https://placeimg.com/1000/600\"\n      text-thumbnail=\"This is an image of a horse with wings.\"\n    >\n      <p slot=\"info\">\n        Usually depicted as pure white, Pegasus is the offspring of the Olympian god Poseidon. He was foaled by the\n        Gorgon Medusa upon her death, when the hero Perseus decapitated her.\n      </p>\n      <a slot=\"link\" href=\"http://www.wingeddivinehorse.com\">Magical flying horsey</a>\n    </calcite-tip>\n    <calcite-tip\n      heading=\"Minotaur\"\n      thumbnail=\"https://placeimg.com/600/1000\"\n      text-thumbnail=\"This is an image of a man with a bull head and tail.\"\n    >\n      <p slot=\"info\">\n        The creature resided in the twisting maze of the labyrinth where it was offfered a regular sacrifice of youths\n        and maidens to satisfy its cannibalistic hunger.\n      </p>\n      <a slot=\"link\" href=\"http://www.cannibull.com\">Bull headed man</a>\n    </calcite-tip>\n  </calcite-tip-group>\n  <calcite-tip\n    heading=\"Siren\"\n    thumbnail=\"https://placeimg.com/600/1000\"\n    text-thumbnail=\"This is an image of a half woman half bird.\"\n  >\n    <p slot=\"info\">\n      Dangerous creatures who lured nearby sailors with their enchanting music and singing voices to shipwreck on the\n      rocky coast of their island.\n    </p>\n    <a slot=\"link\" href=\"http://www.beautifulmurderer.com\">Sexy bird lady</a>\n  </calcite-tip>\n</calcite-tip-manager>\n```\n"
      },
      "props": [
        {
          "name": "closed",
          "type": "boolean",
          "mutable": true,
          "attr": "closed",
          "reflectToAttr": true,
          "docs": "Alternate text for closing the `calcite-tip-manager`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Number at which section headings should start for this component.",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intlClose",
          "type": "string",
          "mutable": false,
          "attr": "intl-close",
          "reflectToAttr": false,
          "docs": "Alternate text for closing the tip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlDefaultTitle",
          "type": "string",
          "mutable": false,
          "attr": "intl-default-title",
          "reflectToAttr": false,
          "docs": "The default group title for the `calcite-tip-manager`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlNext",
          "type": "string",
          "mutable": false,
          "attr": "intl-next",
          "reflectToAttr": false,
          "docs": "Alternate text for navigating to the next tip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlPaginationLabel",
          "type": "string",
          "mutable": false,
          "attr": "intl-pagination-label",
          "reflectToAttr": false,
          "docs": "Label that appears on hover of pagination icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "intlPrevious",
          "type": "string",
          "mutable": false,
          "attr": "intl-previous",
          "reflectToAttr": false,
          "docs": "Alternate text for navigating to the previous tip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "nextTip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "nextTip() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "previousTip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "previousTip() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteTipManagerToggle",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the `calcite-tip-manager` has been toggled open or closed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-tip`s."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-action"
      ],
      "dependencyGraph": {
        "calcite-tip-manager": [
          "calcite-action"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tooltip/calcite-tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tooltip",
      "readme": "# calcite-tooltip\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "basic": "```html\n<calcite-tooltip placement=\"auto\" reference-element=\"tooltip-button\"\n  >This is the message of the tooltip</calcite-tooltip\n>\n<calcite-tooltip-manager>\n  <p>\n    Lorem <a id=\"tooltip-button\" href=\"#\">ipsum</a> dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n    incididunt ut labore et dolore magna aliqua.\n  </p>\n</calcite-tooltip-manager>\n```\n"
      },
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Accessible name for the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "offsetDistance",
          "type": "number",
          "mutable": false,
          "attr": "offset-distance",
          "reflectToAttr": true,
          "docs": "Offset the position of the popover away from the reference element.",
          "docsTags": [],
          "default": "defaultOffsetDistance",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetSkidding",
          "type": "number",
          "mutable": false,
          "attr": "offset-skidding",
          "reflectToAttr": true,
          "docs": "Offset the position of the popover along the reference element.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": false,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Display and position the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositioning",
          "type": "\"absolute\" | \"fixed\"",
          "mutable": false,
          "attr": "overlay-positioning",
          "reflectToAttr": false,
          "docs": "Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.",
          "docsTags": [],
          "default": "\"absolute\"",
          "values": [
            {
              "value": "absolute",
              "type": "string"
            },
            {
              "value": "fixed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "Placement | PlacementRtl | VariationRtl",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": true,
          "docs": "Determines where the component will be positioned relative to the referenceElement.",
          "docsTags": [],
          "default": "\"auto\"",
          "values": [
            {
              "type": "Placement"
            },
            {
              "type": "PlacementRtl"
            },
            {
              "type": "VariationRtl"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "referenceElement",
          "type": "HTMLElement | string",
          "mutable": false,
          "attr": "reference-element",
          "reflectToAttr": false,
          "docs": "Reference HTMLElement used to position this component.",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reposition",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "reposition() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-tooltip-manager/calcite-tooltip-manager.tsx",
      "encapsulation": "none",
      "tag": "calcite-tooltip-manager",
      "readme": "# calcite-tooltip-manager\n",
      "docs": "",
      "docsTags": [
        {
          "text": "- A slot for adding elements that reference a 'calcite-tooltip' by the 'selector' property.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "selector",
          "type": "string",
          "mutable": false,
          "attr": "selector",
          "reflectToAttr": false,
          "docs": "CSS Selector to match reference elements for tooltips. Reference elements will be identified by this selector in order to open their associated tooltip.",
          "docsTags": [],
          "default": "`[${TOOLTIP_REFERENCE}]`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "keyup",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "mouseenter",
          "capture": true,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": true,
          "passive": true
        },
        {
          "event": "click",
          "capture": true,
          "passive": false
        },
        {
          "event": "focus",
          "capture": true,
          "passive": false
        },
        {
          "event": "blur",
          "capture": true,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding elements that reference a 'calcite-tooltip' by the 'selector' property."
        }
      ],
      "parts": [],
      "dependents": [
        "calcite-action-bar",
        "calcite-action-menu",
        "calcite-action-pad"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "calcite-action-bar": [
          "calcite-tooltip-manager"
        ],
        "calcite-action-menu": [
          "calcite-tooltip-manager"
        ],
        "calcite-action-pad": [
          "calcite-tooltip-manager"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-tree/calcite-tree.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tree",
      "readme": "# calcite-tree\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "basic": "`<calcite-tree>` can be used as a sidebar navigation tree with optional lines and different selection modes.\n\n```html\n<calcite-tree>\n  <calcite-tree-item>\n    <a href=\"#\">Child 1</a>\n    <calcite-tree slot=\"children\">\n      <calcite-tree-item>\n        <a href=\"#\">Grandchild 1</a>\n      </calcite-tree-item>\n      <calcite-tree-item>\n        <a href=\"#\">Grandchild 2</a>\n      </calcite-tree-item>\n    </calcite-tree>\n  </calcite-tree-item>\n</calcite-tree>\n```\n"
      },
      "props": [
        {
          "name": "inputEnabled",
          "type": "boolean",
          "mutable": true,
          "attr": "input-enabled",
          "reflectToAttr": false,
          "docs": "Display input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lines",
          "type": "boolean",
          "mutable": true,
          "attr": "lines",
          "reflectToAttr": true,
          "docs": "Display indentation guide lines",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "\"m\" | \"s\"",
          "mutable": true,
          "attr": "scale",
          "reflectToAttr": true,
          "docs": "Specify the scale of the tree, defaults to m",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "TreeSelectionMode.Ancestors | TreeSelectionMode.Children | TreeSelectionMode.Multi | TreeSelectionMode.MultiChildren | TreeSelectionMode.Single",
          "mutable": true,
          "attr": "selection-mode",
          "reflectToAttr": true,
          "docs": "Customize how tree selection works (single, multi, children, multi-children)",
          "docsTags": [],
          "default": "TreeSelectionMode.Single",
          "values": [
            {
              "type": "TreeSelectionMode.Ancestors"
            },
            {
              "type": "TreeSelectionMode.Children"
            },
            {
              "type": "TreeSelectionMode.Multi"
            },
            {
              "type": "TreeSelectionMode.MultiChildren"
            },
            {
              "type": "TreeSelectionMode.Single"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "calciteTreeSelect",
          "detail": "TreeSelectDetail",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when user selects/deselects tree items. An object including an array of selected items will be passed in the event's `detail` property.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteTreeItemSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/calcite-tree-item/calcite-tree-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-tree-item",
      "readme": "# calcite-tree-item\n\n`<calcite-tree-item>` is used to represent a single item in a `<calcite-tree>`.\n",
      "docs": "`<calcite-tree-item>` is used to represent a single item in a `<calcite-tree>`.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "True if the item is in an expanded state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Is the item currently selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-checkbox"
      ],
      "dependencyGraph": {
        "calcite-tree-item": [
          "calcite-icon",
          "calcite-checkbox"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-value-list/calcite-value-list.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-value-list",
      "readme": "# calcite-value-list\n\n`calcite-value-list` is housed in a panel and contains `calcite-value-list-item`s. The value list has options for drag and drop, label editing, and single or multi-select of items which can be done through shift+click.\n",
      "docs": "`calcite-value-list` is housed in a panel and contains `calcite-value-list-item`s. The value list has options for drag and drop, label editing, and single or multi-select of items which can be done through shift+click.",
      "docsTags": [
        {
          "text": "- A slot for adding `calcite-pick-list-item` elements or `calcite-pick-list-group` elements. Items are displayed as a vertical list.",
          "name": "slot"
        },
        {
          "text": "menu-actions - A slot for adding a button + menu combo for performing actions like sorting.",
          "name": "slot"
        }
      ],
      "usage": {
        "basic": "#### Basic\n\nRenders a value list with multiple items able to be selected and a filter.\n\n```html\n<calcite-value-list multiple filter-enabled>\n  <calcite-value-list-item label=\"Dogs\" description=\"Man's best friend\" value=\"dogs\">\n    <calcite-action slot=\"actions-end\" icon=\"plus\"></calcite-action>\n  </calcite-value-list-item>\n  <calcite-value-list-item label=\"Cats\" description=\"Independent and fluffy\" value=\"cats\">\n    <calcite-action slot=\"actions-end\" icon=\"plus\"></calcite-action>\n  </calcite-value-list-item>\n  <calcite-value-list-item\n    label=\"Fish. But not just any fish, a tiger fish caught live in the Atlantic Ocean while on vacation.\"\n    description=\"Easy to care for.\"\n    value=\"fish\"\n  >\n    <calcite-action slot=\"actions-end\" icon=\"plus\"></calcite-action>\n  </calcite-value-list-item>\n</calcite-value-list>\n```\n\n#### Drag and drop\n\nRenders a value list with drag and drop capability between the items.\n\n```html\n<calcite-value-list drag-enabled>\n  <calcite-value-list-item label=\"Rent\" description=\"Mortgage + housing costs\" value=\"rent\"> </calcite-value-list-item>\n  <calcite-value-list-item label=\"Food\" description=\"its what you eat.\" value=\"food\"> </calcite-value-list-item>\n  <calcite-value-list-item label=\"Utilities\" value=\"utilities\"> </calcite-value-list-item>\n  <calcite-value-list-item label=\"Entertainment\" description=\"Toys and leisure\" value=\"entertainment\">\n  </calcite-value-list-item>\n</calcite-value-list>\n```\n\n#### Label editing and single select\n\nRenders a value list with label editing and single select.\n\n```html\n<calcite-value-list label-editing-enabled>\n  <calcite-value-list-item\n    label=\"2018 Generation Alpha Population (Born 2017 or Later) [updated 2019-09-18]\"\n    description=\"GENALPHACY\"\n    value=\"GENALPHACY\"\n  >\n  </calcite-value-list-item>\n  <calcite-value-list-item\n    label=\"2010-2018 Households: Annual Growth Rate (Esri)\"\n    description=\"HHGRW10CY-2019-09-18.001ZZYLKJ\"\n    value=\"HHGRW10CY\"\n  >\n  </calcite-value-list-item>\n  <calcite-value-list-item\n    label=\"2010-2018 Households: Annual Growth Rate (Esri)\"\n    description=\"HHGRW10CY-2019-09-18.001ZZYYZLKJ\"\n    value=\"HHGRW10CY2\"\n  >\n  </calcite-value-list-item>\n</calcite-value-list>\n```\n"
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, disabled prevents interaction. This state shows items with lower opacity/grayed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragEnabled",
          "type": "boolean",
          "mutable": false,
          "attr": "drag-enabled",
          "reflectToAttr": true,
          "docs": "When true, the items will be sortable via drag and drop.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterEnabled",
          "type": "boolean",
          "mutable": false,
          "attr": "filter-enabled",
          "reflectToAttr": true,
          "docs": "When true, an input appears at the top of the list that can be used by end users to filter items in the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterPlaceholder",
          "type": "string",
          "mutable": false,
          "attr": "filter-placeholder",
          "reflectToAttr": true,
          "docs": "Placeholder text for the filter input field.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "group",
          "type": "string",
          "mutable": false,
          "attr": "group",
          "reflectToAttr": false,
          "docs": "If this is set and drag is enabled, items can be dropped between lists of the same group.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "When true, content is waiting to be loaded. This state shows a busy indicator.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": true,
          "docs": "Multiple Works similar to standard radio buttons and checkboxes.\nWhen true, a user can select multiple items at a time.\nWhen false, only a single item can be selected at a time\nand selecting a new item will deselect any other selected items.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedItems",
          "returns": {
            "type": "Promise<Map<string, HTMLCalciteValueListItemElement>>",
            "docs": ""
          },
          "signature": "getSelectedItems() => Promise<Map<string, HTMLCalciteValueListItemElement>>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus(focusId?: ListFocusId) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteListChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when any of the item selections have changed.",
          "docsTags": []
        },
        {
          "event": "calciteListOrderChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the order of the list has changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteListItemRemove",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemPropsChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "calciteListItemValueChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "A slot for adding `calcite-pick-list-item` elements or `calcite-pick-list-group` elements. Items are displayed as a vertical list."
        },
        {
          "name": "menu-actions",
          "docs": "A slot for adding a button + menu combo for performing actions like sorting."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-filter",
        "calcite-scrim"
      ],
      "dependencyGraph": {
        "calcite-value-list": [
          "calcite-filter",
          "calcite-scrim"
        ],
        "calcite-filter": [
          "calcite-scrim",
          "calcite-icon"
        ],
        "calcite-scrim": [
          "calcite-loader"
        ]
      }
    },
    {
      "filePath": "./src/components/calcite-value-list-item/calcite-value-list-item.tsx",
      "encapsulation": "shadow",
      "tag": "calcite-value-list-item",
      "readme": "# calcite-value-list-item\n\n`calcite-value-list-item`s are cards contained in a `calcite-value-list`. They each can have a label and description, an icon and can have their label's be editable (inherited from `calcite-value-list`). The developer can disable or preselect each list item and give it a value.\n",
      "docs": "`calcite-value-list-item`s are cards contained in a `calcite-value-list`. They each can have a label and description, an icon and can have their label's be editable (inherited from `calcite-value-list`). The developer can disable or preselect each list item and give it a value.",
      "docsTags": [
        {
          "text": "actions-end - A slot for adding actions or content to the end side of the item.",
          "name": "slot"
        },
        {
          "text": "actions-start - A slot for adding actions or content to the start side of the item.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "An optional description for this item. Will appear below the label text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "When true, the item cannot be clicked and is visually muted",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "ICON_TYPES.circle | ICON_TYPES.grip | ICON_TYPES.square",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Determines the icon SVG symbol that will be shown. Options are circle, square, grid or null.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "ICON_TYPES.circle"
            },
            {
              "type": "ICON_TYPES.grip"
            },
            {
              "type": "ICON_TYPES.square"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "The main label for this item. Appears next to the icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "metadata",
          "type": "{ [x: string]: unknown; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Used to provide additional metadata to an item, primarily used when the parent list has a filter.",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: unknown; }"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "removable",
          "type": "boolean",
          "mutable": false,
          "attr": "removable",
          "reflectToAttr": true,
          "docs": "Set this to true to display a remove action that removes the item from the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Set this to true to pre-select an item. Toggles when an item is checked/unchecked.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The item's associated value.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "toggleSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggleSelected(coerce?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "calciteListItemRemove",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted whenever the remove button is pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "calciteListItemChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "actions-end",
          "docs": "A slot for adding actions or content to the end side of the item."
        },
        {
          "name": "actions-start",
          "docs": "A slot for adding actions or content to the start side of the item."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "calcite-icon",
        "calcite-pick-list-item"
      ],
      "dependencyGraph": {
        "calcite-value-list-item": [
          "calcite-icon",
          "calcite-pick-list-item"
        ],
        "calcite-pick-list-item": [
          "calcite-icon",
          "calcite-action"
        ],
        "calcite-action": [
          "calcite-loader",
          "calcite-icon"
        ]
      }
    }
  ]
}