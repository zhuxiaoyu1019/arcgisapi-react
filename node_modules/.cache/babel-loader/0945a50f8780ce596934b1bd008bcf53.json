{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { _ as e } from \"../../../chunks/tslib.es6.js\";\nimport { R as r } from \"../../../chunks/RealisticAtmosphere.glsl.js\";\nimport { ReloadableShaderModule as i } from \"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js\";\nimport { ShaderTechnique as t } from \"../webgl-engine/core/shaderTechnique/ShaderTechnique.js\";\nimport { ShaderTechniqueConfiguration as o, parameter as n } from \"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js\";\nimport { Default3D as s } from \"../webgl-engine/lib/DefaultVertexAttributeLocations.js\";\nimport { Program as a } from \"../webgl-engine/lib/Program.js\";\nimport { makePipelineState as l, separateBlendingParams as h, defaultColorWriteParams as c } from \"../../webgl/renderState.js\";\n\nclass g extends t {\n  initializeProgram(e) {\n    const r = g.shader.get(),\n          i = this.configuration,\n          t = r.build({\n      haze: i.haze\n    });\n    return new a(e.rctx, t, s);\n  }\n\n  initializePipeline() {\n    return this.configuration.haze ? l({\n      blending: h(1, 0, 769, 1),\n      colorWrite: c\n    }) : l({\n      blending: h(770, 1, 771, 771),\n      depthTest: {\n        func: 515\n      },\n      colorWrite: c\n    });\n  }\n\n}\n\ng.shader = new i(r, () => import(\"./RealisticAtmosphere.glsl.js\"));\n\nclass m extends o {\n  constructor() {\n    super(...arguments), this.haze = !1;\n  }\n\n}\n\ne([n()], m.prototype, \"haze\", void 0);\nexport { g as RealisticAtmosphereTechnique, m as RealisticAtmosphereTechniqueConfiguration };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/views/3d/environment/RealisticAtmosphereTechnique.js"],"names":["_","e","R","r","ReloadableShaderModule","i","ShaderTechnique","t","ShaderTechniqueConfiguration","o","parameter","n","Default3D","s","Program","a","makePipelineState","l","separateBlendingParams","h","defaultColorWriteParams","c","g","initializeProgram","shader","get","configuration","build","haze","rctx","initializePipeline","blending","colorWrite","depthTest","func","m","constructor","arguments","prototype","RealisticAtmosphereTechnique","RealisticAtmosphereTechniqueConfiguration"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,CAAC,IAAIC,CAAZ,QAAkB,8BAAlB;AAAiD,SAAOC,CAAC,IAAIC,CAAZ,QAAkB,6CAAlB;AAAgE,SAAOC,sBAAsB,IAAIC,CAAjC,QAAuC,gEAAvC;AAAwG,SAAOC,eAAe,IAAIC,CAA1B,QAAgC,yDAAhC;AAA0F,SAAOC,4BAA4B,IAAIC,CAAvC,EAAyCC,SAAS,IAAIC,CAAtD,QAA4D,sEAA5D;AAAmI,SAAOC,SAAS,IAAIC,CAApB,QAA0B,wDAA1B;AAAmF,SAAOC,OAAO,IAAIC,CAAlB,QAAwB,gCAAxB;AAAyD,SAAOC,iBAAiB,IAAIC,CAA5B,EAA8BC,sBAAsB,IAAIC,CAAxD,EAA0DC,uBAAuB,IAAIC,CAArF,QAA2F,4BAA3F;;AAAwH,MAAMC,CAAN,SAAgBf,CAAhB,CAAiB;AAACgB,EAAAA,iBAAiB,CAACtB,CAAD,EAAG;AAAC,UAAME,CAAC,GAACmB,CAAC,CAACE,MAAF,CAASC,GAAT,EAAR;AAAA,UAAuBpB,CAAC,GAAC,KAAKqB,aAA9B;AAAA,UAA4CnB,CAAC,GAACJ,CAAC,CAACwB,KAAF,CAAQ;AAACC,MAAAA,IAAI,EAACvB,CAAC,CAACuB;AAAR,KAAR,CAA9C;AAAqE,WAAO,IAAIb,CAAJ,CAAMd,CAAC,CAAC4B,IAAR,EAAatB,CAAb,EAAeM,CAAf,CAAP;AAAyB;;AAAAiB,EAAAA,kBAAkB,GAAE;AAAC,WAAO,KAAKJ,aAAL,CAAmBE,IAAnB,GAAwBX,CAAC,CAAC;AAACc,MAAAA,QAAQ,EAACZ,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,GAAL,EAAS,CAAT,CAAX;AAAuBa,MAAAA,UAAU,EAACX;AAAlC,KAAD,CAAzB,GAAgEJ,CAAC,CAAC;AAACc,MAAAA,QAAQ,EAACZ,CAAC,CAAC,GAAD,EAAK,CAAL,EAAO,GAAP,EAAW,GAAX,CAAX;AAA2Bc,MAAAA,SAAS,EAAC;AAACC,QAAAA,IAAI,EAAC;AAAN,OAArC;AAAgDF,MAAAA,UAAU,EAACX;AAA3D,KAAD,CAAxE;AAAwI;;AAAjR;;AAAkRC,CAAC,CAACE,MAAF,GAAS,IAAInB,CAAJ,CAAMF,CAAN,EAAS,MAAI,OAAO,+BAAP,CAAb,CAAT;;AAAgE,MAAMgC,CAAN,SAAgB1B,CAAhB,CAAiB;AAAC2B,EAAAA,WAAW,GAAE;AAAC,UAAM,GAAGC,SAAT,GAAoB,KAAKT,IAAL,GAAU,CAAC,CAA/B;AAAiC;;AAAhD;;AAAiD3B,CAAC,CAAC,CAACU,CAAC,EAAF,CAAD,EAAOwB,CAAC,CAACG,SAAT,EAAmB,MAAnB,EAA0B,KAAK,CAA/B,CAAD;AAAmC,SAAOhB,CAAC,IAAIiB,4BAAZ,EAAyCJ,CAAC,IAAIK,yCAA9C","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{_ as e}from\"../../../chunks/tslib.es6.js\";import{R as r}from\"../../../chunks/RealisticAtmosphere.glsl.js\";import{ReloadableShaderModule as i}from\"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js\";import{ShaderTechnique as t}from\"../webgl-engine/core/shaderTechnique/ShaderTechnique.js\";import{ShaderTechniqueConfiguration as o,parameter as n}from\"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js\";import{Default3D as s}from\"../webgl-engine/lib/DefaultVertexAttributeLocations.js\";import{Program as a}from\"../webgl-engine/lib/Program.js\";import{makePipelineState as l,separateBlendingParams as h,defaultColorWriteParams as c}from\"../../webgl/renderState.js\";class g extends t{initializeProgram(e){const r=g.shader.get(),i=this.configuration,t=r.build({haze:i.haze});return new a(e.rctx,t,s)}initializePipeline(){return this.configuration.haze?l({blending:h(1,0,769,1),colorWrite:c}):l({blending:h(770,1,771,771),depthTest:{func:515},colorWrite:c})}}g.shader=new i(r,(()=>import(\"./RealisticAtmosphere.glsl.js\")));class m extends o{constructor(){super(...arguments),this.haze=!1}}e([n()],m.prototype,\"haze\",void 0);export{g as RealisticAtmosphereTechnique,m as RealisticAtmosphereTechniqueConfiguration};\n"]},"metadata":{},"sourceType":"module"}