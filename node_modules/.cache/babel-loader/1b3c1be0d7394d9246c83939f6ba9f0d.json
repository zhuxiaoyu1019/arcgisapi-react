{"ast":null,"code":"var _jsxFileName = \"/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/components/MapView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport Map from '@arcgis/core/Map';\nimport promiseUtils from '@arcgis/core/core/promiseUtils';\nimport buildings from '../untils/SceneLayerConfig';\nimport sceneView from '../untils/SceneViewConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapView() {\n  _s();\n\n  const mapRef = useRef();\n  useEffect(() => {\n    const map = new Map({\n      basemap: 'satellite',\n      layers: [buildings({\n        url: \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0\"\n      })]\n    });\n    const view = sceneView({\n      ref: mapRef.current,\n      map\n    });\n    view.when().then(async () => {\n      const buildingsLV = await view.whenLayerView(buildings);\n      let highlight = null;\n      view.on(\"pointer-move\", promiseUtils.debounce(async e => {\n        const ht = await view.hitTest(e, {\n          include: [buildings]\n        });\n\n        if (highlight) {\n          highlight.remove();\n          highlight = null;\n        }\n\n        if (ht.results.length > 0) {\n          // select the first feature (closest to the camera)\n          const graphic = ht.results[0].graphic;\n\n          if (graphic) {\n            highlight = buildingsLV.highlight(graphic);\n          }\n        }\n      }));\n      view.on(\"pointer-leave\", () => {\n        if (highlight) {\n          highlight.remove();\n          highlight = null;\n        }\n      });\n    });\n    return () => {\n      view && view.destroy();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MapView, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n\n_c = MapView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/components/MapView.js"],"names":["React","useRef","useEffect","Map","promiseUtils","buildings","sceneView","MapView","mapRef","map","basemap","layers","url","view","ref","current","when","then","buildingsLV","whenLayerView","highlight","on","debounce","e","ht","hitTest","include","remove","results","length","graphic","destroy","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAC9B,QAAMC,MAAM,GAAGP,MAAM,EAArB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,GAAG,GAAG,IAAIN,GAAJ,CAAQ;AAChBO,MAAAA,OAAO,EAAE,WADO;AAEhBC,MAAAA,MAAM,EAAE,CAACN,SAAS,CAAC;AAAEO,QAAAA,GAAG,EAAE;AAAP,OAAD,CAAV;AAFQ,KAAR,CAAZ;AAKA,UAAMC,IAAI,GAAGP,SAAS,CAAC;AAAEQ,MAAAA,GAAG,EAAEN,MAAM,CAACO,OAAd;AAAuBN,MAAAA;AAAvB,KAAD,CAAtB;AAEAI,IAAAA,IAAI,CAACG,IAAL,GAAYC,IAAZ,CAAiB,YAAY;AACzB,YAAMC,WAAW,GAAG,MAAML,IAAI,CAACM,aAAL,CAAmBd,SAAnB,CAA1B;AACA,UAAIe,SAAS,GAAG,IAAhB;AACAP,MAAAA,IAAI,CAACQ,EAAL,CACI,cADJ,EAEIjB,YAAY,CAACkB,QAAb,CAAsB,MAAOC,CAAP,IAAa;AAC/B,cAAMC,EAAE,GAAG,MAAMX,IAAI,CAACY,OAAL,CAAaF,CAAb,EAAgB;AAC7BG,UAAAA,OAAO,EAAE,CAACrB,SAAD;AADoB,SAAhB,CAAjB;;AAGA,YAAIe,SAAJ,EAAe;AACXA,UAAAA,SAAS,CAACO,MAAV;AACAP,UAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,YAAII,EAAE,CAACI,OAAH,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AACvB;AACA,gBAAMC,OAAO,GAAGN,EAAE,CAACI,OAAH,CAAW,CAAX,EAAcE,OAA9B;;AACA,cAAIA,OAAJ,EAAa;AACTV,YAAAA,SAAS,GAAGF,WAAW,CAACE,SAAZ,CAAsBU,OAAtB,CAAZ;AACH;AACJ;AACJ,OAfD,CAFJ;AAmBAjB,MAAAA,IAAI,CAACQ,EAAL,CAAQ,eAAR,EAAyB,MAAM;AAC3B,YAAID,SAAJ,EAAe;AACXA,UAAAA,SAAS,CAACO,MAAV;AACAP,UAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,OALD;AAMH,KA5BD;AA8BA,WAAO,MAAM;AAAEP,MAAAA,IAAI,IAAIA,IAAI,CAACkB,OAAL,EAAR;AAAwB,KAAvC;AACH,GAvCQ,EAuCN,EAvCM,CAAT;AAyCA,sBACI;AAAK,IAAA,GAAG,EAAEvB,MAAV;AAAkB,IAAA,KAAK,EAAE;AAAEwB,MAAAA,MAAM,EAAE;AAAV;AAAzB;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GA/CuBzB,O;;KAAAA,O","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport Map from '@arcgis/core/Map'\nimport promiseUtils from '@arcgis/core/core/promiseUtils'\n\nimport buildings from '../untils/SceneLayerConfig'\nimport sceneView from '../untils/SceneViewConfig'\n\nexport default function MapView() {\n    const mapRef = useRef()\n\n    useEffect(() => {\n        const map = new Map({\n            basemap: 'satellite',\n            layers: [buildings({ url: \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0\" })]\n        })\n\n        const view = sceneView({ ref: mapRef.current, map })\n\n        view.when().then(async () => {\n            const buildingsLV = await view.whenLayerView(buildings);\n            let highlight = null;\n            view.on(\n                \"pointer-move\",\n                promiseUtils.debounce(async (e) => {\n                    const ht = await view.hitTest(e, {\n                        include: [buildings]\n                    });\n                    if (highlight) {\n                        highlight.remove();\n                        highlight = null;\n                    }\n                    if (ht.results.length > 0) {\n                        // select the first feature (closest to the camera)\n                        const graphic = ht.results[0].graphic;\n                        if (graphic) {\n                            highlight = buildingsLV.highlight(graphic);\n                        }\n                    }\n                })\n            );\n            view.on(\"pointer-leave\", () => {\n                if (highlight) {\n                    highlight.remove();\n                    highlight = null;\n                }\n            });\n        });\n\n        return () => { view && view.destroy() }\n    }, [])\n\n    return (\n        <div ref={mapRef} style={{ height: '100vh' }} />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}