{"ast":null,"code":"import Map from '@arcgis/core/Map';\nimport Color from \"@arcgis/core/Color\";\nimport SceneView from \"@arcgis/core/views/SceneView\";\nimport SceneLayer from '@arcgis/core/layers/SceneLayer'; // import FeatureLayer from '@arcgis/core/layers/FeatureLayer'\n\nimport MeshSymbol3D from '@arcgis/core/symbols/MeshSymbol3D';\nimport * as promiseUtils from '@arcgis/core/core/promiseUtils';\nimport SolidEdges3D from '@arcgis/core/symbols/edges/SolidEdges3D';\nimport SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer';\nimport FillSymbol3DLayer from '@arcgis/core/symbols/FillSymbol3DLayer';\nimport Search from '@arcgis/core/widgets/Search';\n\nconst ArcGISMap = (basemap, ref) => {\n  const template = {\n    title: \"{NAME}\",\n    content: [{\n      type: \"fields\",\n      fieldInfos: [{\n        fieldName: \"ElectricUse\",\n        label: \"Electricity Use kBTU\",\n        format: {\n          digitSeparator: true,\n          places: 0\n        }\n      }, {\n        fieldName: \"StarScore\",\n        label: \"Energy Star Score\"\n      }]\n    }]\n  };\n  const buildings = new SceneLayer({\n    url: 'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC_EnergyUse/SceneServer/layers/0',\n    opacity: 1,\n    popupEnabled: true,\n    popupTemplate: template,\n    renderer: new SimpleRenderer({\n      symbol: new MeshSymbol3D({\n        symbolLayers: [new FillSymbol3DLayer({\n          material: {\n            color: new Color([200, 200, 200]),\n            colorMixMode: \"replace\"\n          },\n          edges: new SolidEdges3D({\n            color: new Color([100, 100, 100, 0.5])\n          })\n        })]\n      })\n    })\n  }); // const infoLayer = new FeatureLayer({\n  //     url: 'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC_EnergyUse/FeatureServer/0',\n  // })\n\n  const map = new Map({\n    basemap,\n    layers: [buildings]\n  });\n  const view = new SceneView({\n    container: ref,\n    map,\n    qualityProfile: \"high\",\n    camera: {\n      position: [-73.98564294432742, 40.748586782824624, 601.67648],\n      heading: 330.47,\n      tilt: 64.02\n    },\n    environment: {\n      lighting: {\n        directShadowsEnabled: true\n      }\n    }\n  });\n  const search = new Search({\n    view // sources: [buildings],\n    // popupTemplate: template\n\n  });\n  view.ui.add(search, \"top-right\"); // async function getInfo(building) {\n  //     const objectId = building.getObjectId();\n  //     const query = infoLayer.createQuery();\n  //     query.objectIds = [objectId];\n  //     const result = await infoLayer.queryFeatures(query);\n  //     console.log(result.features[0])\n  // }\n\n  view.when().then(async () => {\n    const buildingsLV = await view.whenLayerView(buildings);\n    let highlight = null;\n    view.on(\"click\", promiseUtils.debounce(async e => {\n      const ht = await view.hitTest(e, {\n        include: [buildings]\n      });\n\n      if (highlight) {\n        highlight.remove();\n        highlight = null;\n      }\n\n      if (ht.results.length > 0) {\n        const graphic = ht.results[0].graphic;\n\n        if (graphic) {\n          highlight = buildingsLV.highlight(graphic);\n        }\n\n        console.log(graphic); // await getInfo(graphic);\n      }\n    }));\n  });\n  return view;\n};\n\n_c = ArcGISMap;\nexport default ArcGISMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArcGISMap\");","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/untils/ArcGISMap.js"],"names":["Map","Color","SceneView","SceneLayer","MeshSymbol3D","promiseUtils","SolidEdges3D","SimpleRenderer","FillSymbol3DLayer","Search","ArcGISMap","basemap","ref","template","title","content","type","fieldInfos","fieldName","label","format","digitSeparator","places","buildings","url","opacity","popupEnabled","popupTemplate","renderer","symbol","symbolLayers","material","color","colorMixMode","edges","map","layers","view","container","qualityProfile","camera","position","heading","tilt","environment","lighting","directShadowsEnabled","search","ui","add","when","then","buildingsLV","whenLayerView","highlight","on","debounce","e","ht","hitTest","include","remove","results","length","graphic","console","log"],"mappings":"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","sourcesContent":["import Map from '@arcgis/core/Map'\nimport Color from \"@arcgis/core/Color\"\nimport SceneView from \"@arcgis/core/views/SceneView\"\nimport SceneLayer from '@arcgis/core/layers/SceneLayer'\n// import FeatureLayer from '@arcgis/core/layers/FeatureLayer'\nimport MeshSymbol3D from '@arcgis/core/symbols/MeshSymbol3D'\nimport * as promiseUtils from '@arcgis/core/core/promiseUtils'\nimport SolidEdges3D from '@arcgis/core/symbols/edges/SolidEdges3D'\nimport SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer'\nimport FillSymbol3DLayer from '@arcgis/core/symbols/FillSymbol3DLayer'\n\nimport Search from '@arcgis/core/widgets/Search'\n\nconst ArcGISMap = (basemap, ref) => {\n    const template = {\n        title: \"{NAME}\",\n        content: [\n            {\n                type: \"fields\",\n                fieldInfos: [\n                    {\n                        fieldName: \"ElectricUse\",\n                        label: \"Electricity Use kBTU\",\n                        format: {\n                            digitSeparator: true,\n                            places: 0\n                        }\n                    },\n                    {\n                        fieldName: \"StarScore\",\n                        label: \"Energy Star Score\"\n                    }\n                ]\n            }\n        ]\n    };\n\n    const buildings = new SceneLayer({\n        url: 'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC_EnergyUse/SceneServer/layers/0',\n        opacity: 1,\n        popupEnabled: true,\n        popupTemplate: template,\n        renderer: new SimpleRenderer({\n            symbol: new MeshSymbol3D({\n                symbolLayers: [\n                    new FillSymbol3DLayer({\n                        material: {\n                            color: new Color([200, 200, 200]),\n                            colorMixMode: \"replace\"\n                        },\n                        edges: new SolidEdges3D({\n                            color: new Color([100, 100, 100, 0.5])\n                        })\n                    })\n                ]\n            })\n        })\n    });\n\n    // const infoLayer = new FeatureLayer({\n    //     url: 'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC_EnergyUse/FeatureServer/0',\n    // })\n\n    const map = new Map({\n        basemap,\n        layers: [buildings]\n    });\n\n    const view = new SceneView({\n        container: ref,\n        map,\n        qualityProfile: \"high\",\n        camera: {\n            position: [-73.98564294432742, 40.748586782824624, 601.67648],\n            heading: 330.47,\n            tilt: 64.02\n        },\n        environment: {\n            lighting: {\n                directShadowsEnabled: true\n            }\n        },\n    })\n\n    const search = new Search({\n        view,\n        // sources: [buildings],\n        // popupTemplate: template\n    });\n\n    view.ui.add(search, \"top-right\");\n\n    // async function getInfo(building) {\n    //     const objectId = building.getObjectId();\n    //     const query = infoLayer.createQuery();\n    //     query.objectIds = [objectId];\n\n    //     const result = await infoLayer.queryFeatures(query);\n    //     console.log(result.features[0])\n    // }\n\n    view.when().then(async () => {\n        const buildingsLV = await view.whenLayerView(buildings);\n        let highlight = null;\n        view.on(\n            \"click\",\n            promiseUtils.debounce(async (e) => {\n                const ht = await view.hitTest(e, {\n                    include: [buildings]\n                });\n                if (highlight) {\n                    highlight.remove();\n                    highlight = null;\n                }\n                if (ht.results.length > 0) {\n                    const graphic = ht.results[0].graphic;\n                    if (graphic) {\n                        highlight = buildingsLV.highlight(graphic);\n                    }\n                    console.log(graphic)\n                    // await getInfo(graphic);\n                }\n            })\n        );\n    });\n\n    return view\n}\n\nexport default ArcGISMap\n"]},"metadata":{},"sourceType":"module"}