{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { sign as t, acosClamped as e, reciprocalClamped as i } from \"../../../../core/mathUtils.js\";\nimport { s } from \"../../../../chunks/mat2.js\";\nimport { c as r } from \"../../../../chunks/mat2f64.js\";\nimport { t as o, i as h, c as n } from \"../../../../chunks/mat4.js\";\nimport { c as a } from \"../../../../chunks/mat4f64.js\";\nimport { s as l, h as u, o as p, a as f, b as c, i as x, f as d, l as v } from \"../../../../chunks/vec2.js\";\nimport { a as m, b as g, f as V } from \"../../../../chunks/vec2f64.js\";\nimport { d as b, g as A, b as C, n as D, a as I, f as N, c as R, o as S, s as U, l as P, m as _ } from \"../../../../chunks/vec3.js\";\nimport { c as y } from \"../../../../chunks/vec3f64.js\";\nimport { create as T, fromPositionAndNormal as k, intersectRay as L } from \"../../../../geometry/support/plane.js\";\nimport { wrap as B } from \"../../../../geometry/support/ray.js\";\nimport F from \"./GeometryUtil.js\";\nimport { intersectTriangles as M } from \"../materials/internal/MaterialUtil.js\";\n\nfunction w() {\n  return {\n    up: y(),\n    right: y()\n  };\n}\n\nfunction G(t, e, i) {\n  _(t.up, e.up, i), _(t.right, e.right, i);\n}\n\nfunction j(t, e, i) {\n  t[0] = i[0] * e.right[0] + i[1] * e.up[0], t[1] = i[0] * e.right[1] + i[1] * e.up[1], t[2] = i[0] * e.right[2] + i[1] * e.up[2];\n}\n\nfunction z(t, e, i) {\n  l(t, b(i, e.right), b(i, e.up));\n}\n\nclass E {\n  constructor() {\n    this.pos = y(), this.posES = y(), this.posGS = y(), this.vRight = y(), this.vLeft = y(), this.frame = w(), this.rotationFrame = w(), this.rotationRight = m(), this.rotationAngle = 0, this.miterStretch = r();\n  }\n\n  setFrameFromUpVector(t) {\n    A(this.frame.up, t), C(lt, this.vLeft, this.vRight), D(lt, lt), I(at, this.frame.up, b(lt, this.frame.up)), N(ft, lt, at), D(ft, ft), R(this.frame.right, ft, this.frame.up);\n  }\n\n  computeRotationAxisAndAngleFromUpVector() {\n    A(this.rotationFrame.up, this.frame.up), A(this.rotationFrame.right, this.frame.right), l(this.rotationRight, 1, 0), I(at, this.frame.up, b(this.frame.up, this.vLeft)), N(at, this.vLeft, at), S(at, at), D(at, at), I(lt, this.frame.up, b(this.frame.up, this.vRight)), N(lt, this.vRight, lt), D(lt, lt), R(ut, this.rotationFrame.up, this.vLeft);\n    const r = t(b(ut, this.vRight));\n\n    if (this.rotationAngle = r * (Math.PI - e(b(at, lt))), Math.abs(this.rotationAngle) > 0) {\n      const t = i(Math.cos(.5 * this.rotationAngle));\n      s(this.miterStretch, t - 1 + 1, 0, 0, 1);\n    }\n\n    const o = Math.PI - this.rotationAngle;\n    this.maxStretchDistance = Math.abs(Math.min(this.vLeftLength, this.vRightLength) / Math.cos(.5 * o));\n  }\n\n}\n\nclass O {\n  constructor() {\n    this.vertices = [], this.vertexIndices = [], this.vertexNormals = [], this.poles = [], this.poleIndices = [], this.uvs = null, this.uvIndices = null;\n  }\n\n  addVertex(t, e) {\n    return this.vertices.push(g(t)), this.vertexNormals.push(g(e)), this.vertices.length - 1;\n  }\n\n  addUV(t) {\n    return this.uvs || (this.uvs = [], this.uvIndices = []), this.uvs.push(t), this.uvs.length - 1;\n  }\n\n  addPole(t, e = null) {\n    return this.poles.push({\n      position: g(t),\n      normal: e ? g(e) : null\n    }), this.poles.length - 1;\n  }\n\n  addSegment(t, e = null, i = null) {\n    this.vertexIndices.push(t.v0), this.vertexIndices.push(t.v1), e && (this.uvIndices.push(e.v0), this.uvIndices.push(e.v1)), i && (this.poleIndices.push(i.v0), this.poleIndices.push(i.v1));\n  }\n\n  get numSegments() {\n    return this.vertexIndices.length / 2;\n  }\n\n  hasUV() {\n    return null != this.uvs;\n  }\n\n  translate(t, e) {\n    for (const i of this.vertices) i[0] += t, i[1] += e;\n\n    for (const i of this.poles) i.position[0] += t, i.position[1] += e;\n  }\n\n  static circle(t = 20) {\n    const e = .5,\n          i = new O(),\n          s = {\n      v0: 0,\n      v1: 0\n    };\n    i.addPole(V(0, 0));\n\n    for (let h = 0; h < t; ++h) {\n      const s = 2 * h * Math.PI / t,\n            r = Math.cos(s),\n            o = Math.sin(s),\n            n = V(r * e, o * e),\n            a = V(r, o);\n      i.addVertex(n, a), i.addUV(h / t);\n    }\n\n    i.addUV(1);\n\n    for (let h = 0; h < t - 1; ++h) {\n      const t = {\n        v0: h,\n        v1: h + 1\n      },\n            e = t;\n      i.addSegment(t, e, s);\n    }\n\n    const r = {\n      v0: t - 1,\n      v1: 0\n    },\n          o = {\n      v0: t - 1,\n      v1: t\n    };\n    return i.addSegment(r, o, s), i;\n  }\n\n  static rect() {\n    const t = 1,\n          e = 1,\n          i = new O(),\n          s = V(.5 * -t, .5 * -e),\n          r = V(.5 * t, .5 * -e),\n          o = V(.5 * t, .5 * e),\n          h = V(.5 * -t, .5 * e),\n          n = V(0, -1),\n          a = V(1, 0),\n          l = V(0, 1),\n          u = V(-1, 0);\n    i.addUV(0), i.addUV(1), i.addPole(V(0, .5 * e), l), i.addPole(V(0, .5 * e)), i.addPole(V(0, .5 * -e)), i.addPole(V(0, .5 * -e), n);\n    const p = {\n      v0: 0,\n      v1: 1\n    };\n    return i.addVertex(s, n), i.addVertex(r, n), i.addSegment({\n      v0: 0,\n      v1: 1\n    }, p, {\n      v0: 3,\n      v1: 3\n    }), i.addVertex(r, a), i.addVertex(o, a), i.addSegment({\n      v0: 2,\n      v1: 3\n    }, p, {\n      v0: 2,\n      v1: 1\n    }), i.addVertex(o, l), i.addVertex(h, l), i.addSegment({\n      v0: 4,\n      v1: 5\n    }, p, {\n      v0: 0,\n      v1: 0\n    }), i.addVertex(h, u), i.addVertex(s, u), i.addSegment({\n      v0: 6,\n      v1: 7\n    }, p, {\n      v0: 1,\n      v1: 2\n    }), i;\n  }\n\n}\n\nclass J {\n  constructor(t) {\n    this.vertices = [], this.offset = y(), this.xform = a(), this.vertices = t;\n    const e = Math.floor((t.length - 1) / 2);\n    A(this.offset, this.vertices[e].pos);\n\n    for (const i of this.vertices) N(i.pos, i.pos, this.offset);\n\n    o(this.xform, this.xform, this.offset), this.updatePathVertexInformation();\n  }\n\n  updatePathVertexInformation() {\n    const t = this.vertices.length;\n    let e = this.vertices[0];\n    e.index = 0, U(e.vLeft, 0, 0, 0), e.vLeftLength = 0, N(e.vRight, this.vertices[1].pos, e.pos), e.vRightLength = P(e.vRight), D(e.vRight, e.vRight);\n    let i = e;\n\n    for (let s = 1; s < t; ++s) e = this.vertices[s], e.index = s, A(e.vLeft, i.vRight), e.vLeftLength = i.vRightLength, s < t - 1 ? (N(e.vRight, this.vertices[s + 1].pos, e.pos), e.vRightLength = P(e.vRight), D(e.vRight, e.vRight)) : (A(e.vRight, e.vLeft), e.vRightLength = e.vLeftLength), i = e;\n  }\n\n}\n\nfunction q(t, e) {\n  let i = null;\n  const s = t.vertices.length,\n        r = .99619469809,\n        o = y(),\n        h = y(),\n        n = y(),\n        a = y(),\n        l = y(),\n        u = y(),\n        p = T();\n  let f = t.vertices[0];\n  A(h, e), U(o, 0, 1, 0), F.makeOrthoBasisDirUpFallback(f.vRight, h, o, o, n, h, r), A(f.frame.up, h), A(f.frame.right, n), i = f;\n\n  for (let c = 1; c < s; ++c) {\n    f = t.vertices[c], C(l, f.vLeft, f.vRight);\n    let e = P(l);\n    e > 0 ? (e = 1 / Math.sqrt(e), l[0] = l[0] * e, l[1] = l[1] * e, l[2] = l[2] * e) : (l[0] = f.vRight[0], l[1] = f.vRight[1], l[2] = f.vRight[2]), C(u, i.pos, i.frame.up), k(f.pos, l, p);\n    L(p, B(u, f.vLeft), a) ? (N(a, a, f.pos), D(h, a), R(n, l, h), D(n, n)) : F.makeOrthoBasisDirUpFallback(l, i.frame.up, i.frame.right, o, n, h, r), A(f.frame.up, h), A(f.frame.right, n), i = f;\n  }\n}\n\nclass H {}\n\nclass K {\n  numProfilesPerJoin() {\n    return 1;\n  }\n\n  extrude(t, e, i) {\n    for (let s = 0; s < e.vertices.length; ++s) i(t.index, t.frame, e.vertices[s], e.vertexNormals[s], !1);\n  }\n\n}\n\nclass Q {\n  constructor(t = .8 * Math.PI, e = 1) {\n    this.cutoffAngle = t, this.numBendSubdivisions = e;\n  }\n\n  numProfilesPerJoin() {\n    return this.numBendSubdivisions + 1;\n  }\n\n  extrude(t, e, i) {\n    const s = ct;\n    if (Math.abs(t.rotationAngle) >= this.cutoffAngle) for (let r = 0; r < this.numBendSubdivisions + 1; ++r) {\n      h(xt), n(xt, xt, .5 * -t.rotationAngle + r * t.rotationAngle / this.numBendSubdivisions, t.rotationFrame.up), G(s, t.frame, xt);\n\n      for (let r = 0; r < e.vertices.length; ++r) {\n        u(e.vertices[r], t.rotationRight) * t.rotationAngle >= 0 ? i(t.index, s, e.vertices[r], e.vertexNormals[r], !1) : (p(ot, e.vertices[r], t.miterStretch), i(t.index, t.frame, ot, e.vertexNormals[r], !0));\n      }\n    } else for (let r = 0; r < this.numBendSubdivisions + 1; ++r) for (let s = 0; s < e.vertices.length; ++s) {\n      const r = u(e.vertices[s], t.rotationRight) * t.rotationAngle >= 0;\n      p(ot, e.vertices[s], t.miterStretch), i(t.index, t.frame, ot, e.vertexNormals[s], !r);\n    }\n  }\n\n}\n\nconst W = {\n  generateUV: !1\n};\n\nclass X {\n  rebuildConnectingProfileGeometry(t, e, i) {\n    for (let s = 0; s < e.vertices.length; ++s) i(t.index, t.frame, e.vertices[s], e.vertexNormals[s], 0, 0);\n  }\n\n}\n\nclass Y extends X {\n  constructor() {\n    super();\n  }\n\n  getNumVertices() {\n    return 0;\n  }\n\n  getNumIndices() {\n    return 0;\n  }\n\n  rebuildCapGeometry() {}\n\n  buildTopology() {}\n\n}\n\nclass Z extends X {\n  constructor(t, e = 0, i = !1) {\n    super(), this.profile = t, this.profilePlaneOffset = e, this.flip = i;\n  }\n\n  getNumVertices() {\n    return this.profile.vertices.length;\n  }\n\n  getNumIndices() {\n    return 3 * this.profile.numSegments;\n  }\n\n  rebuildConnectingProfileGeometry(t, e, i) {\n    for (let s = 0; s < e.vertices.length; ++s) i(t.index, t.frame, e.vertices[s], e.vertexNormals[s], this.profilePlaneOffset, 0);\n  }\n\n  rebuildCapGeometry(t, e) {\n    const i = ht;\n    l(i, 0, 0);\n    const s = this.flip ? 1 : -1;\n\n    for (let r = 0; r < this.profile.vertices.length; ++r) e(t.index, t.frame, this.profile.vertices[r], i, this.profilePlaneOffset, s);\n  }\n\n  buildTopology(t, e) {\n    const i = this.vertexBufferStart + this.profile.vertexIndices[0];\n\n    for (let s = 1; s < this.profile.numSegments; ++s) {\n      const t = this.profile.vertexIndices[2 * s + 0],\n            r = this.profile.vertexIndices[2 * s + 1],\n            o = this.vertexBufferStart + t,\n            h = this.vertexBufferStart + r;\n      this.flip ? e(h, o, i) : e(i, o, h);\n    }\n  }\n\n}\n\nclass $ extends X {\n  constructor(t) {\n    super(), this.flip = !1, this.sign = 0, this.breakNormals = !1, this.numSegments = 3, this.profile = t.profile, this.flip = t.flip, this.sign = this.flip ? 1 : -1, this.breakNormals = t.breakNormals, this.numSegments = t.subdivisions;\n  }\n\n  getNumVertices() {\n    let t = 0;\n    return t = this.profile.vertices.length * (this.numSegments - 1), this.breakNormals && (t += this.profile.vertices.length), t += this.profile.poles.length, t;\n  }\n\n  getNumIndices() {\n    let t = 0;\n    t += 2 * this.profile.numSegments * (this.numSegments - 1);\n\n    for (let e = 0; e < this.profile.numSegments; ++e) {\n      const i = this.profile.vertexIndices[2 * e + 0],\n            s = this.profile.vertexIndices[2 * e + 1];\n      this.profile.poleIndices[i] === this.profile.poleIndices[s] ? t += 1 : t += 2;\n    }\n\n    return 3 * t;\n  }\n\n  rebuildCapGeometry(t, e) {\n    const i = t.frame,\n          s = .5 * this.sign,\n          r = ot,\n          o = ht;\n    l(o, 0, 0);\n\n    for (let h = 0; h < this.profile.poles.length; ++h) {\n      const r = this.profile.poles[h];\n      r.normal ? e(t.index, i, r.position, r.normal, s, 0) : e(t.index, i, r.position, o, s, this.sign);\n    }\n\n    if (this.breakNormals) for (let h = 0; h < this.profile.vertices.length; ++h) e(t.index, i, this.profile.vertices[h], this.profile.vertexNormals[h], 0, 0);\n\n    for (let h = 0; h < this.numSegments - 1; ++h) {\n      const n = (1 - (h + 1) / this.numSegments) * Math.PI * .5,\n            a = Math.sin(n),\n            l = Math.cos(n);\n\n      for (let h = 0; h < this.profile.vertices.length; ++h) {\n        const n = this.profile.poles[this.profile.poleIndices[h]];\n        f(r, this.profile.vertices[h], n.position), c(r, r, a), n.normal ? (x(r, r, n.position), e(t.index, i, r, n.normal, s * l, 0)) : (d(o, r), c(o, o, a), x(r, r, n.position), e(t.index, i, r, o, s * l, this.sign * l));\n      }\n    }\n  }\n\n  buildTopology(t, e) {\n    const i = this.breakNormals ? this.vertexBufferStart + this.profile.poles.length : this.firstProfileVertexIndex,\n          s = this.breakNormals ? this.vertexBufferStart + this.profile.poles.length + this.profile.vertices.length : this.vertexBufferStart + this.profile.poles.length;\n\n    for (let r = 0; r < this.profile.numSegments; ++r) {\n      const t = this.profile.vertexIndices[2 * r + 0],\n            o = this.profile.vertexIndices[2 * r + 1],\n            h = this.vertexBufferStart + this.profile.poleIndices[t],\n            n = this.vertexBufferStart + this.profile.poleIndices[o];\n      let a = i + t,\n          l = i + o;\n\n      for (let i = 0; i < this.numSegments - 1; ++i) {\n        const r = s + i * this.profile.vertices.length + t,\n              h = s + i * this.profile.vertices.length + o;\n        this.flip ? (e(r, l, a), e(l, r, h)) : (e(a, l, r), e(h, r, l)), a = r, l = h;\n      }\n\n      this.flip ? (e(h, l, a), h !== n && e(h, n, l)) : (e(a, l, h), h !== n && e(l, n, h));\n    }\n  }\n\n}\n\nclass tt {\n  constructor(t, e, i, s, r, o = W) {\n    this.options = o, this._extrusionVertexCount = 0, this._triangleCount = 0, this.numExtrusionProfiles = 0, this.numVerticesTotal = 0, this.numNormalsTotal = 0, this.numUVTotal = 0, this.profile = e, this.path = t, this.extruder = i, this.startCap = s, this.endCap = r;\n    const h = this.path.vertices.length - 2;\n    this.numExtrusionProfiles = i.numProfilesPerJoin() * h + 2, this.numVerticesTotal = e.vertices.length * this.numExtrusionProfiles, this.numNormalsTotal = this.numVerticesTotal, this.startCap.vertexBufferStart = this.numVerticesTotal;\n    const n = this.startCap.getNumVertices();\n    this.numVerticesTotal += n, this.numNormalsTotal += n, this.endCap.vertexBufferStart = this.numVerticesTotal;\n    const a = this.endCap.getNumVertices();\n    this.numVerticesTotal += a, this.numNormalsTotal += a, this.pathVertexData = new Float32Array(1 * this.numVerticesTotal), this.profileRightAxisData = new Float32Array(4 * this.numVerticesTotal), this.profileUpAxisData = new Float32Array(4 * this.numVerticesTotal), this.profileVertexAndNormalData = new Float32Array(4 * this.numVerticesTotal), this.profile.hasUV() && this.options.generateUV && (this.numUVTotal = this.profile.uvs.length, this.uvData = new Float32Array(2 * this.numUVTotal)), this.originData = new Float32Array(3 * this.path.vertices.length), this.rebuildGeometry(), this.buildTopology();\n  }\n\n  emitVertex(t, e, i, s, r) {\n    if (this.profileRightAxisData[4 * this._extrusionVertexCount + 0] = e.right[0], this.profileRightAxisData[4 * this._extrusionVertexCount + 1] = e.right[1], this.profileRightAxisData[4 * this._extrusionVertexCount + 2] = e.right[2], this.profileUpAxisData[4 * this._extrusionVertexCount + 0] = e.up[0], this.profileUpAxisData[4 * this._extrusionVertexCount + 1] = e.up[1], this.profileUpAxisData[4 * this._extrusionVertexCount + 2] = e.up[2], this.profileVertexAndNormalData[4 * this._extrusionVertexCount + 0] = i[0], this.profileVertexAndNormalData[4 * this._extrusionVertexCount + 1] = i[1], this.profileVertexAndNormalData[4 * this._extrusionVertexCount + 2] = s[0], this.profileVertexAndNormalData[4 * this._extrusionVertexCount + 3] = s[1], this.pathVertexData[this._extrusionVertexCount] = t, r) {\n      const e = this.path.vertices[t];\n      this.profileRightAxisData[4 * this._extrusionVertexCount + 3] = e.rotationRight[0] * e.maxStretchDistance, this.profileUpAxisData[4 * this._extrusionVertexCount + 3] = e.rotationRight[1] * e.maxStretchDistance;\n    } else this.profileRightAxisData[4 * this._extrusionVertexCount + 3] = 0, this.profileUpAxisData[4 * this._extrusionVertexCount + 3] = 0;\n\n    ++this._extrusionVertexCount;\n  }\n\n  emitCapVertex(t, e, i, s, r, o) {\n    this.profileRightAxisData[4 * this._extrusionVertexCount + 0] = e.right[0], this.profileRightAxisData[4 * this._extrusionVertexCount + 1] = e.right[1], this.profileRightAxisData[4 * this._extrusionVertexCount + 2] = e.right[2], this.profileUpAxisData[4 * this._extrusionVertexCount + 0] = e.up[0], this.profileUpAxisData[4 * this._extrusionVertexCount + 1] = e.up[1], this.profileUpAxisData[4 * this._extrusionVertexCount + 2] = e.up[2], this.profileVertexAndNormalData[4 * this._extrusionVertexCount + 0] = i[0], this.profileVertexAndNormalData[4 * this._extrusionVertexCount + 1] = i[1], this.profileVertexAndNormalData[4 * this._extrusionVertexCount + 2] = s[0], this.profileVertexAndNormalData[4 * this._extrusionVertexCount + 3] = s[1], this.pathVertexData[this._extrusionVertexCount] = t, this.profileRightAxisData[4 * this._extrusionVertexCount + 3] = r, this.profileUpAxisData[4 * this._extrusionVertexCount + 3] = o, ++this._extrusionVertexCount;\n  }\n\n  emitTriangle(t, e, i) {\n    this.vertexIndices[3 * this._triangleCount + 0] = t, this.vertexIndices[3 * this._triangleCount + 1] = e, this.vertexIndices[3 * this._triangleCount + 2] = i, this.pathVertexIndices[3 * this._triangleCount + 0] = this.pathVertexData[t], this.pathVertexIndices[3 * this._triangleCount + 1] = this.pathVertexData[e], this.pathVertexIndices[3 * this._triangleCount + 2] = this.pathVertexData[i], this.normalIndices[3 * this._triangleCount + 0] = t, this.normalIndices[3 * this._triangleCount + 1] = e, this.normalIndices[3 * this._triangleCount + 2] = i, ++this._triangleCount;\n  }\n\n  rebuildGeometry() {\n    const t = (t, e, i, s, r) => this.emitVertex(t, e, i, s, r),\n          e = (t, e, i, s, r, o) => this.emitCapVertex(t, e, i, s, r, o);\n\n    this._extrusionVertexCount = 0;\n\n    for (const i of this.path.vertices) this.originData[3 * i.index + 0] = i.pos[0], this.originData[3 * i.index + 1] = i.pos[1], this.originData[3 * i.index + 2] = i.pos[2];\n\n    this.startCap.rebuildConnectingProfileGeometry(this.path.vertices[0], this.profile, e);\n\n    for (let i = 1; i < this.path.vertices.length - 1; ++i) this.extruder.extrude(this.path.vertices[i], this.profile, t);\n\n    if (this.endCap.rebuildConnectingProfileGeometry(this.path.vertices[this.path.vertices.length - 1], this.profile, e), this.startCap.rebuildCapGeometry(this.path.vertices[0], e), this.endCap.rebuildCapGeometry(this.path.vertices[this.path.vertices.length - 1], e), this.profile.hasUV() && this.options.generateUV) for (let i = 0; i < this.profile.uvs.length; ++i) this.uvData[2 * i + 0] = this.profile.uvs[i], this.uvData[2 * i + 1] = 0;\n  }\n\n  buildTopology() {\n    const t = (t, e, i) => this.emitTriangle(t, e, i);\n\n    this._triangleCount = 0;\n    const e = this.profile.vertices.length,\n          i = this.profile.numSegments,\n          s = this.numExtrusionProfiles - 1;\n    let r = 3 * (2 * (i * s));\n    this.startCap.indexBufferStart = r, this.startCap.firstProfileVertexIndex = 0, r += this.startCap.getNumIndices(), this.endCap.indexBufferStart = r, this.endCap.firstProfileVertexIndex = e * (this.numExtrusionProfiles - 1), r += this.endCap.getNumIndices(), this.vertexIndices = new Uint32Array(r), this.normalIndices = new Uint32Array(r), this.pathVertexIndices = new Uint32Array(r), this.profile.hasUV() && this.options.generateUV && (this.uvIndices = new Uint32Array(r));\n\n    for (let o = 0; o < i; ++o) {\n      const i = this.profile.vertexIndices[2 * o],\n            r = this.profile.vertexIndices[2 * o + 1];\n\n      for (let o = 0; o < s; ++o) {\n        const s = o * e + i,\n              h = (o + 1) * e + r,\n              n = o * e + r;\n        t(s, (o + 1) * e + i, h), t(s, h, n);\n      }\n    }\n\n    this.startCap.buildTopology(this.path.vertices[0], t), this.endCap.buildTopology(this.path.vertices[this.path.vertices.length - 1], t);\n  }\n\n  onPathChanged() {\n    this.rebuildGeometry();\n  }\n\n}\n\nclass et {\n  constructor(t) {\n    this.builder = t;\n  }\n\n  get xform() {\n    return this.builder.path.xform;\n  }\n\n  onPathChanged() {\n    this.builder.onPathChanged();\n  }\n\n}\n\nclass it extends et {\n  constructor(t) {\n    super(t), this.vertexAttributePosition = null, this.vertexAttributeNormal = null, this.vertexAttributeColor = null, this.vertexAttributePosition = new Float32Array(3 * this.builder.numVerticesTotal), this.vertexAttributeNormal = new Float32Array(3 * this.builder.numNormalsTotal), this.vertexAttributeColor = new Uint8Array(4), this.vertexAttributeColor[0] = 255, this.vertexAttributeColor[1] = 255, this.vertexAttributeColor[2] = 255, this.vertexAttributeColor[3] = 255;\n  }\n\n  bakeVertexColors(t) {\n    this.vertexAttributeColor[0] = 255 * t[0], this.vertexAttributeColor[1] = 255 * t[1], this.vertexAttributeColor[2] = 255 * t[2], this.vertexAttributeColor[3] = 255 * (t.length > 3 ? t[3] : 1);\n  }\n\n  bake(e) {\n    this.size = e;\n\n    for (let i = 0; i < this.builder.numVerticesTotal; ++i) {\n      let s = this.builder.pathVertexData[i];\n      const r = 0 === s || s === this.builder.path.vertices.length - 1;\n      s *= 3;\n      const o = rt;\n      U(o, this.builder.originData[s++], this.builder.originData[s++], this.builder.originData[s]);\n      const h = 4 * i,\n            n = at,\n            a = ot,\n            p = lt,\n            f = ut,\n            m = pt;\n      let g = 0,\n          V = 0;\n      if (U(f, this.builder.profileRightAxisData[h], this.builder.profileRightAxisData[h + 1], this.builder.profileRightAxisData[h + 2]), U(m, this.builder.profileUpAxisData[h], this.builder.profileUpAxisData[h + 1], this.builder.profileUpAxisData[h + 2]), l(a, this.builder.profileVertexAndNormalData[h] * e[0], this.builder.profileVertexAndNormalData[h + 1] * e[1]), r) R(p, m, f), g = this.builder.profileRightAxisData[h + 3] * e[0], V = this.builder.profileUpAxisData[h + 3];else {\n        const e = ht,\n              i = nt;\n        l(e, this.builder.profileRightAxisData[h + 3], this.builder.profileUpAxisData[h + 3]);\n        const s = v(e);\n        d(e, e);\n        const r = u(a, e);\n\n        if (Math.abs(r) > s) {\n          l(i, -e[1], e[0]);\n          const o = u(a, i);\n          c(e, e, s * t(r)), c(i, i, o), x(a, e, i);\n        }\n\n        U(p, 0, 0, 0);\n      }\n      U(n, f[0] * a[0] + m[0] * a[1], f[1] * a[0] + m[1] * a[1], f[2] * a[0] + m[2] * a[1]), this.vertexAttributePosition[3 * i + 0] = o[0] + n[0] + p[0] * g, this.vertexAttributePosition[3 * i + 1] = o[1] + n[1] + p[1] * g, this.vertexAttributePosition[3 * i + 2] = o[2] + n[2] + p[2] * g;\n      const b = ot;\n      l(b, this.builder.profileVertexAndNormalData[h + 2], this.builder.profileVertexAndNormalData[h + 3]), this.vertexAttributeNormal[3 * i + 0] = f[0] * b[0] + m[0] * b[1] + p[0] * V, this.vertexAttributeNormal[3 * i + 1] = f[1] * b[0] + m[1] * b[1] + p[1] * V, this.vertexAttributeNormal[3 * i + 2] = f[2] * b[0] + m[2] * b[1] + p[2] * V;\n    }\n  }\n\n  createGeometryData() {\n    const t = [[\"position\", this.builder.vertexIndices], [\"normal\", this.builder.normalIndices]],\n          e = [[\"position\", {\n      size: 3,\n      data: this.vertexAttributePosition,\n      exclusive: !0\n    }], [\"normal\", {\n      size: 3,\n      data: this.vertexAttributeNormal,\n      exclusive: !0\n    }]];\n\n    if (this.vertexAttributeColor) {\n      const i = this.builder.vertexIndices.length;\n      t.push([\"color\", new Uint32Array(i)]), e.push([\"color\", {\n        size: 4,\n        data: this.vertexAttributeColor\n      }]);\n    }\n\n    return {\n      vertexAttributes: e,\n      indices: t\n    };\n  }\n\n  onPathChanged() {\n    super.onPathChanged(), this.bake(this.size);\n  }\n\n  intersect(t, e, i) {\n    const s = this.builder.vertexIndices,\n          r = {\n      size: 3,\n      data: this.vertexAttributePosition\n    },\n          o = s.length / 3;\n    M(t, e, 0, o, s, r, void 0, void 0, i);\n  }\n\n}\n\nclass st extends et {\n  constructor(t, e, i, s) {\n    super(t), this.sizeAttributeValue = e, this.colorAttributeValue = i, this.opacityAttributeValue = s, this.vvData = null, this.baked = new it(t), this.vvData = new Float32Array(4 * this.builder.path.vertices.length);\n\n    for (let r = 0; r < this.builder.path.vertices.length; ++r) {\n      this.vvData[4 * r + 0] = e, this.vvData[4 * r + 1] = i, this.vvData[4 * r + 2] = s;\n      const t = 0 === r || r === this.builder.path.vertices.length - 1;\n      this.vvData[4 * r + 3] = t ? 1 : 0;\n    }\n  }\n\n  createGeometryData() {\n    return {\n      vertexAttributes: [[\"position\", {\n        size: 3,\n        data: this.builder.originData,\n        exclusive: !0\n      }], [\"profileRight\", {\n        size: 4,\n        data: this.builder.profileRightAxisData,\n        exclusive: !0\n      }], [\"profileUp\", {\n        size: 4,\n        data: this.builder.profileUpAxisData,\n        exclusive: !0\n      }], [\"profileVertexAndNormal\", {\n        size: 4,\n        data: this.builder.profileVertexAndNormalData,\n        exclusive: !0\n      }], [\"featureValue\", {\n        size: 4,\n        data: this.vvData,\n        exclusive: !0\n      }]],\n      indices: [[\"position\", this.builder.pathVertexIndices], [\"profileRight\", this.builder.vertexIndices], [\"profileUp\", this.builder.vertexIndices], [\"profileVertexAndNormal\", this.builder.vertexIndices], [\"featureValue\", this.builder.pathVertexIndices]]\n    };\n  }\n\n}\n\nconst rt = y(),\n      ot = m(),\n      ht = m(),\n      nt = m(),\n      at = y(),\n      lt = y(),\n      ut = y(),\n      pt = y(),\n      ft = y(),\n      ct = w(),\n      xt = a();\nexport { tt as Builder, X as CapBuilder, H as Extruder, st as FastUpdatePathGeometry, Q as MiterExtruder, Y as NoCapBuilder, J as Path, et as PathGeometryData, E as PathVertex, O as Profile, $ as RoundCapBuilder, K as SimpleExtruder, it as StaticPathGeometry, Z as TriangulationCapBuilder, q as computeMinimumRotationTangentFrame, w as makeFrame, j as profileSpaceToVertexSpace, z as vertexSpaceToProfileSpace };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/views/3d/webgl-engine/lib/pathGeometryUtils.js"],"names":["sign","t","acosClamped","e","reciprocalClamped","i","s","c","r","o","h","n","a","l","u","p","f","b","x","d","v","m","g","V","A","C","D","I","N","R","S","U","P","_","y","create","T","fromPositionAndNormal","k","intersectRay","L","wrap","B","F","intersectTriangles","M","w","up","right","G","j","z","E","constructor","pos","posES","posGS","vRight","vLeft","frame","rotationFrame","rotationRight","rotationAngle","miterStretch","setFrameFromUpVector","lt","at","ft","computeRotationAxisAndAngleFromUpVector","ut","Math","PI","abs","cos","maxStretchDistance","min","vLeftLength","vRightLength","O","vertices","vertexIndices","vertexNormals","poles","poleIndices","uvs","uvIndices","addVertex","push","length","addUV","addPole","position","normal","addSegment","v0","v1","numSegments","hasUV","translate","circle","sin","rect","J","offset","xform","floor","updatePathVertexInformation","index","q","makeOrthoBasisDirUpFallback","sqrt","H","K","numProfilesPerJoin","extrude","Q","cutoffAngle","numBendSubdivisions","ct","xt","ot","W","generateUV","X","rebuildConnectingProfileGeometry","Y","getNumVertices","getNumIndices","rebuildCapGeometry","buildTopology","Z","profile","profilePlaneOffset","flip","ht","vertexBufferStart","$","breakNormals","subdivisions","firstProfileVertexIndex","tt","options","_extrusionVertexCount","_triangleCount","numExtrusionProfiles","numVerticesTotal","numNormalsTotal","numUVTotal","path","extruder","startCap","endCap","pathVertexData","Float32Array","profileRightAxisData","profileUpAxisData","profileVertexAndNormalData","uvData","originData","rebuildGeometry","emitVertex","emitCapVertex","emitTriangle","pathVertexIndices","normalIndices","indexBufferStart","Uint32Array","onPathChanged","et","builder","it","vertexAttributePosition","vertexAttributeNormal","vertexAttributeColor","Uint8Array","bakeVertexColors","bake","size","rt","pt","nt","createGeometryData","data","exclusive","vertexAttributes","indices","intersect","st","sizeAttributeValue","colorAttributeValue","opacityAttributeValue","vvData","baked","Builder","CapBuilder","Extruder","FastUpdatePathGeometry","MiterExtruder","NoCapBuilder","Path","PathGeometryData","PathVertex","Profile","RoundCapBuilder","SimpleExtruder","StaticPathGeometry","TriangulationCapBuilder","computeMinimumRotationTangentFrame","makeFrame","profileSpaceToVertexSpace","vertexSpaceToProfileSpace"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{sign as t,acosClamped as e,reciprocalClamped as i}from\"../../../../core/mathUtils.js\";import{s}from\"../../../../chunks/mat2.js\";import{c as r}from\"../../../../chunks/mat2f64.js\";import{t as o,i as h,c as n}from\"../../../../chunks/mat4.js\";import{c as a}from\"../../../../chunks/mat4f64.js\";import{s as l,h as u,o as p,a as f,b as c,i as x,f as d,l as v}from\"../../../../chunks/vec2.js\";import{a as m,b as g,f as V}from\"../../../../chunks/vec2f64.js\";import{d as b,g as A,b as C,n as D,a as I,f as N,c as R,o as S,s as U,l as P,m as _}from\"../../../../chunks/vec3.js\";import{c as y}from\"../../../../chunks/vec3f64.js\";import{create as T,fromPositionAndNormal as k,intersectRay as L}from\"../../../../geometry/support/plane.js\";import{wrap as B}from\"../../../../geometry/support/ray.js\";import F from\"./GeometryUtil.js\";import{intersectTriangles as M}from\"../materials/internal/MaterialUtil.js\";function w(){return{up:y(),right:y()}}function G(t,e,i){_(t.up,e.up,i),_(t.right,e.right,i)}function j(t,e,i){t[0]=i[0]*e.right[0]+i[1]*e.up[0],t[1]=i[0]*e.right[1]+i[1]*e.up[1],t[2]=i[0]*e.right[2]+i[1]*e.up[2]}function z(t,e,i){l(t,b(i,e.right),b(i,e.up))}class E{constructor(){this.pos=y(),this.posES=y(),this.posGS=y(),this.vRight=y(),this.vLeft=y(),this.frame=w(),this.rotationFrame=w(),this.rotationRight=m(),this.rotationAngle=0,this.miterStretch=r()}setFrameFromUpVector(t){A(this.frame.up,t),C(lt,this.vLeft,this.vRight),D(lt,lt),I(at,this.frame.up,b(lt,this.frame.up)),N(ft,lt,at),D(ft,ft),R(this.frame.right,ft,this.frame.up)}computeRotationAxisAndAngleFromUpVector(){A(this.rotationFrame.up,this.frame.up),A(this.rotationFrame.right,this.frame.right),l(this.rotationRight,1,0),I(at,this.frame.up,b(this.frame.up,this.vLeft)),N(at,this.vLeft,at),S(at,at),D(at,at),I(lt,this.frame.up,b(this.frame.up,this.vRight)),N(lt,this.vRight,lt),D(lt,lt),R(ut,this.rotationFrame.up,this.vLeft);const r=t(b(ut,this.vRight));if(this.rotationAngle=r*(Math.PI-e(b(at,lt))),Math.abs(this.rotationAngle)>0){const t=i(Math.cos(.5*this.rotationAngle));s(this.miterStretch,t-1+1,0,0,1)}const o=Math.PI-this.rotationAngle;this.maxStretchDistance=Math.abs(Math.min(this.vLeftLength,this.vRightLength)/Math.cos(.5*o))}}class O{constructor(){this.vertices=[],this.vertexIndices=[],this.vertexNormals=[],this.poles=[],this.poleIndices=[],this.uvs=null,this.uvIndices=null}addVertex(t,e){return this.vertices.push(g(t)),this.vertexNormals.push(g(e)),this.vertices.length-1}addUV(t){return this.uvs||(this.uvs=[],this.uvIndices=[]),this.uvs.push(t),this.uvs.length-1}addPole(t,e=null){return this.poles.push({position:g(t),normal:e?g(e):null}),this.poles.length-1}addSegment(t,e=null,i=null){this.vertexIndices.push(t.v0),this.vertexIndices.push(t.v1),e&&(this.uvIndices.push(e.v0),this.uvIndices.push(e.v1)),i&&(this.poleIndices.push(i.v0),this.poleIndices.push(i.v1))}get numSegments(){return this.vertexIndices.length/2}hasUV(){return null!=this.uvs}translate(t,e){for(const i of this.vertices)i[0]+=t,i[1]+=e;for(const i of this.poles)i.position[0]+=t,i.position[1]+=e}static circle(t=20){const e=.5,i=new O,s={v0:0,v1:0};i.addPole(V(0,0));for(let h=0;h<t;++h){const s=2*h*Math.PI/t,r=Math.cos(s),o=Math.sin(s),n=V(r*e,o*e),a=V(r,o);i.addVertex(n,a),i.addUV(h/t)}i.addUV(1);for(let h=0;h<t-1;++h){const t={v0:h,v1:h+1},e=t;i.addSegment(t,e,s)}const r={v0:t-1,v1:0},o={v0:t-1,v1:t};return i.addSegment(r,o,s),i}static rect(){const t=1,e=1,i=new O,s=V(.5*-t,.5*-e),r=V(.5*t,.5*-e),o=V(.5*t,.5*e),h=V(.5*-t,.5*e),n=V(0,-1),a=V(1,0),l=V(0,1),u=V(-1,0);i.addUV(0),i.addUV(1),i.addPole(V(0,.5*e),l),i.addPole(V(0,.5*e)),i.addPole(V(0,.5*-e)),i.addPole(V(0,.5*-e),n);const p={v0:0,v1:1};return i.addVertex(s,n),i.addVertex(r,n),i.addSegment({v0:0,v1:1},p,{v0:3,v1:3}),i.addVertex(r,a),i.addVertex(o,a),i.addSegment({v0:2,v1:3},p,{v0:2,v1:1}),i.addVertex(o,l),i.addVertex(h,l),i.addSegment({v0:4,v1:5},p,{v0:0,v1:0}),i.addVertex(h,u),i.addVertex(s,u),i.addSegment({v0:6,v1:7},p,{v0:1,v1:2}),i}}class J{constructor(t){this.vertices=[],this.offset=y(),this.xform=a(),this.vertices=t;const e=Math.floor((t.length-1)/2);A(this.offset,this.vertices[e].pos);for(const i of this.vertices)N(i.pos,i.pos,this.offset);o(this.xform,this.xform,this.offset),this.updatePathVertexInformation()}updatePathVertexInformation(){const t=this.vertices.length;let e=this.vertices[0];e.index=0,U(e.vLeft,0,0,0),e.vLeftLength=0,N(e.vRight,this.vertices[1].pos,e.pos),e.vRightLength=P(e.vRight),D(e.vRight,e.vRight);let i=e;for(let s=1;s<t;++s)e=this.vertices[s],e.index=s,A(e.vLeft,i.vRight),e.vLeftLength=i.vRightLength,s<t-1?(N(e.vRight,this.vertices[s+1].pos,e.pos),e.vRightLength=P(e.vRight),D(e.vRight,e.vRight)):(A(e.vRight,e.vLeft),e.vRightLength=e.vLeftLength),i=e}}function q(t,e){let i=null;const s=t.vertices.length,r=.99619469809,o=y(),h=y(),n=y(),a=y(),l=y(),u=y(),p=T();let f=t.vertices[0];A(h,e),U(o,0,1,0),F.makeOrthoBasisDirUpFallback(f.vRight,h,o,o,n,h,r),A(f.frame.up,h),A(f.frame.right,n),i=f;for(let c=1;c<s;++c){f=t.vertices[c],C(l,f.vLeft,f.vRight);let e=P(l);e>0?(e=1/Math.sqrt(e),l[0]=l[0]*e,l[1]=l[1]*e,l[2]=l[2]*e):(l[0]=f.vRight[0],l[1]=f.vRight[1],l[2]=f.vRight[2]),C(u,i.pos,i.frame.up),k(f.pos,l,p);L(p,B(u,f.vLeft),a)?(N(a,a,f.pos),D(h,a),R(n,l,h),D(n,n)):F.makeOrthoBasisDirUpFallback(l,i.frame.up,i.frame.right,o,n,h,r),A(f.frame.up,h),A(f.frame.right,n),i=f}}class H{}class K{numProfilesPerJoin(){return 1}extrude(t,e,i){for(let s=0;s<e.vertices.length;++s)i(t.index,t.frame,e.vertices[s],e.vertexNormals[s],!1)}}class Q{constructor(t=.8*Math.PI,e=1){this.cutoffAngle=t,this.numBendSubdivisions=e}numProfilesPerJoin(){return this.numBendSubdivisions+1}extrude(t,e,i){const s=ct;if(Math.abs(t.rotationAngle)>=this.cutoffAngle)for(let r=0;r<this.numBendSubdivisions+1;++r){h(xt),n(xt,xt,.5*-t.rotationAngle+r*t.rotationAngle/this.numBendSubdivisions,t.rotationFrame.up),G(s,t.frame,xt);for(let r=0;r<e.vertices.length;++r){u(e.vertices[r],t.rotationRight)*t.rotationAngle>=0?i(t.index,s,e.vertices[r],e.vertexNormals[r],!1):(p(ot,e.vertices[r],t.miterStretch),i(t.index,t.frame,ot,e.vertexNormals[r],!0))}}else for(let r=0;r<this.numBendSubdivisions+1;++r)for(let s=0;s<e.vertices.length;++s){const r=u(e.vertices[s],t.rotationRight)*t.rotationAngle>=0;p(ot,e.vertices[s],t.miterStretch),i(t.index,t.frame,ot,e.vertexNormals[s],!r)}}}const W={generateUV:!1};class X{rebuildConnectingProfileGeometry(t,e,i){for(let s=0;s<e.vertices.length;++s)i(t.index,t.frame,e.vertices[s],e.vertexNormals[s],0,0)}}class Y extends X{constructor(){super()}getNumVertices(){return 0}getNumIndices(){return 0}rebuildCapGeometry(){}buildTopology(){}}class Z extends X{constructor(t,e=0,i=!1){super(),this.profile=t,this.profilePlaneOffset=e,this.flip=i}getNumVertices(){return this.profile.vertices.length}getNumIndices(){return 3*this.profile.numSegments}rebuildConnectingProfileGeometry(t,e,i){for(let s=0;s<e.vertices.length;++s)i(t.index,t.frame,e.vertices[s],e.vertexNormals[s],this.profilePlaneOffset,0)}rebuildCapGeometry(t,e){const i=ht;l(i,0,0);const s=this.flip?1:-1;for(let r=0;r<this.profile.vertices.length;++r)e(t.index,t.frame,this.profile.vertices[r],i,this.profilePlaneOffset,s)}buildTopology(t,e){const i=this.vertexBufferStart+this.profile.vertexIndices[0];for(let s=1;s<this.profile.numSegments;++s){const t=this.profile.vertexIndices[2*s+0],r=this.profile.vertexIndices[2*s+1],o=this.vertexBufferStart+t,h=this.vertexBufferStart+r;this.flip?e(h,o,i):e(i,o,h)}}}class $ extends X{constructor(t){super(),this.flip=!1,this.sign=0,this.breakNormals=!1,this.numSegments=3,this.profile=t.profile,this.flip=t.flip,this.sign=this.flip?1:-1,this.breakNormals=t.breakNormals,this.numSegments=t.subdivisions}getNumVertices(){let t=0;return t=this.profile.vertices.length*(this.numSegments-1),this.breakNormals&&(t+=this.profile.vertices.length),t+=this.profile.poles.length,t}getNumIndices(){let t=0;t+=2*this.profile.numSegments*(this.numSegments-1);for(let e=0;e<this.profile.numSegments;++e){const i=this.profile.vertexIndices[2*e+0],s=this.profile.vertexIndices[2*e+1];this.profile.poleIndices[i]===this.profile.poleIndices[s]?t+=1:t+=2}return 3*t}rebuildCapGeometry(t,e){const i=t.frame,s=.5*this.sign,r=ot,o=ht;l(o,0,0);for(let h=0;h<this.profile.poles.length;++h){const r=this.profile.poles[h];r.normal?e(t.index,i,r.position,r.normal,s,0):e(t.index,i,r.position,o,s,this.sign)}if(this.breakNormals)for(let h=0;h<this.profile.vertices.length;++h)e(t.index,i,this.profile.vertices[h],this.profile.vertexNormals[h],0,0);for(let h=0;h<this.numSegments-1;++h){const n=(1-(h+1)/this.numSegments)*Math.PI*.5,a=Math.sin(n),l=Math.cos(n);for(let h=0;h<this.profile.vertices.length;++h){const n=this.profile.poles[this.profile.poleIndices[h]];f(r,this.profile.vertices[h],n.position),c(r,r,a),n.normal?(x(r,r,n.position),e(t.index,i,r,n.normal,s*l,0)):(d(o,r),c(o,o,a),x(r,r,n.position),e(t.index,i,r,o,s*l,this.sign*l))}}}buildTopology(t,e){const i=this.breakNormals?this.vertexBufferStart+this.profile.poles.length:this.firstProfileVertexIndex,s=this.breakNormals?this.vertexBufferStart+this.profile.poles.length+this.profile.vertices.length:this.vertexBufferStart+this.profile.poles.length;for(let r=0;r<this.profile.numSegments;++r){const t=this.profile.vertexIndices[2*r+0],o=this.profile.vertexIndices[2*r+1],h=this.vertexBufferStart+this.profile.poleIndices[t],n=this.vertexBufferStart+this.profile.poleIndices[o];let a=i+t,l=i+o;for(let i=0;i<this.numSegments-1;++i){const r=s+i*this.profile.vertices.length+t,h=s+i*this.profile.vertices.length+o;this.flip?(e(r,l,a),e(l,r,h)):(e(a,l,r),e(h,r,l)),a=r,l=h}this.flip?(e(h,l,a),h!==n&&e(h,n,l)):(e(a,l,h),h!==n&&e(l,n,h))}}}class tt{constructor(t,e,i,s,r,o=W){this.options=o,this._extrusionVertexCount=0,this._triangleCount=0,this.numExtrusionProfiles=0,this.numVerticesTotal=0,this.numNormalsTotal=0,this.numUVTotal=0,this.profile=e,this.path=t,this.extruder=i,this.startCap=s,this.endCap=r;const h=this.path.vertices.length-2;this.numExtrusionProfiles=i.numProfilesPerJoin()*h+2,this.numVerticesTotal=e.vertices.length*this.numExtrusionProfiles,this.numNormalsTotal=this.numVerticesTotal,this.startCap.vertexBufferStart=this.numVerticesTotal;const n=this.startCap.getNumVertices();this.numVerticesTotal+=n,this.numNormalsTotal+=n,this.endCap.vertexBufferStart=this.numVerticesTotal;const a=this.endCap.getNumVertices();this.numVerticesTotal+=a,this.numNormalsTotal+=a,this.pathVertexData=new Float32Array(1*this.numVerticesTotal),this.profileRightAxisData=new Float32Array(4*this.numVerticesTotal),this.profileUpAxisData=new Float32Array(4*this.numVerticesTotal),this.profileVertexAndNormalData=new Float32Array(4*this.numVerticesTotal),this.profile.hasUV()&&this.options.generateUV&&(this.numUVTotal=this.profile.uvs.length,this.uvData=new Float32Array(2*this.numUVTotal)),this.originData=new Float32Array(3*this.path.vertices.length),this.rebuildGeometry(),this.buildTopology()}emitVertex(t,e,i,s,r){if(this.profileRightAxisData[4*this._extrusionVertexCount+0]=e.right[0],this.profileRightAxisData[4*this._extrusionVertexCount+1]=e.right[1],this.profileRightAxisData[4*this._extrusionVertexCount+2]=e.right[2],this.profileUpAxisData[4*this._extrusionVertexCount+0]=e.up[0],this.profileUpAxisData[4*this._extrusionVertexCount+1]=e.up[1],this.profileUpAxisData[4*this._extrusionVertexCount+2]=e.up[2],this.profileVertexAndNormalData[4*this._extrusionVertexCount+0]=i[0],this.profileVertexAndNormalData[4*this._extrusionVertexCount+1]=i[1],this.profileVertexAndNormalData[4*this._extrusionVertexCount+2]=s[0],this.profileVertexAndNormalData[4*this._extrusionVertexCount+3]=s[1],this.pathVertexData[this._extrusionVertexCount]=t,r){const e=this.path.vertices[t];this.profileRightAxisData[4*this._extrusionVertexCount+3]=e.rotationRight[0]*e.maxStretchDistance,this.profileUpAxisData[4*this._extrusionVertexCount+3]=e.rotationRight[1]*e.maxStretchDistance}else this.profileRightAxisData[4*this._extrusionVertexCount+3]=0,this.profileUpAxisData[4*this._extrusionVertexCount+3]=0;++this._extrusionVertexCount}emitCapVertex(t,e,i,s,r,o){this.profileRightAxisData[4*this._extrusionVertexCount+0]=e.right[0],this.profileRightAxisData[4*this._extrusionVertexCount+1]=e.right[1],this.profileRightAxisData[4*this._extrusionVertexCount+2]=e.right[2],this.profileUpAxisData[4*this._extrusionVertexCount+0]=e.up[0],this.profileUpAxisData[4*this._extrusionVertexCount+1]=e.up[1],this.profileUpAxisData[4*this._extrusionVertexCount+2]=e.up[2],this.profileVertexAndNormalData[4*this._extrusionVertexCount+0]=i[0],this.profileVertexAndNormalData[4*this._extrusionVertexCount+1]=i[1],this.profileVertexAndNormalData[4*this._extrusionVertexCount+2]=s[0],this.profileVertexAndNormalData[4*this._extrusionVertexCount+3]=s[1],this.pathVertexData[this._extrusionVertexCount]=t,this.profileRightAxisData[4*this._extrusionVertexCount+3]=r,this.profileUpAxisData[4*this._extrusionVertexCount+3]=o,++this._extrusionVertexCount}emitTriangle(t,e,i){this.vertexIndices[3*this._triangleCount+0]=t,this.vertexIndices[3*this._triangleCount+1]=e,this.vertexIndices[3*this._triangleCount+2]=i,this.pathVertexIndices[3*this._triangleCount+0]=this.pathVertexData[t],this.pathVertexIndices[3*this._triangleCount+1]=this.pathVertexData[e],this.pathVertexIndices[3*this._triangleCount+2]=this.pathVertexData[i],this.normalIndices[3*this._triangleCount+0]=t,this.normalIndices[3*this._triangleCount+1]=e,this.normalIndices[3*this._triangleCount+2]=i,++this._triangleCount}rebuildGeometry(){const t=(t,e,i,s,r)=>this.emitVertex(t,e,i,s,r),e=(t,e,i,s,r,o)=>this.emitCapVertex(t,e,i,s,r,o);this._extrusionVertexCount=0;for(const i of this.path.vertices)this.originData[3*i.index+0]=i.pos[0],this.originData[3*i.index+1]=i.pos[1],this.originData[3*i.index+2]=i.pos[2];this.startCap.rebuildConnectingProfileGeometry(this.path.vertices[0],this.profile,e);for(let i=1;i<this.path.vertices.length-1;++i)this.extruder.extrude(this.path.vertices[i],this.profile,t);if(this.endCap.rebuildConnectingProfileGeometry(this.path.vertices[this.path.vertices.length-1],this.profile,e),this.startCap.rebuildCapGeometry(this.path.vertices[0],e),this.endCap.rebuildCapGeometry(this.path.vertices[this.path.vertices.length-1],e),this.profile.hasUV()&&this.options.generateUV)for(let i=0;i<this.profile.uvs.length;++i)this.uvData[2*i+0]=this.profile.uvs[i],this.uvData[2*i+1]=0}buildTopology(){const t=(t,e,i)=>this.emitTriangle(t,e,i);this._triangleCount=0;const e=this.profile.vertices.length,i=this.profile.numSegments,s=this.numExtrusionProfiles-1;let r=3*(2*(i*s));this.startCap.indexBufferStart=r,this.startCap.firstProfileVertexIndex=0,r+=this.startCap.getNumIndices(),this.endCap.indexBufferStart=r,this.endCap.firstProfileVertexIndex=e*(this.numExtrusionProfiles-1),r+=this.endCap.getNumIndices(),this.vertexIndices=new Uint32Array(r),this.normalIndices=new Uint32Array(r),this.pathVertexIndices=new Uint32Array(r),this.profile.hasUV()&&this.options.generateUV&&(this.uvIndices=new Uint32Array(r));for(let o=0;o<i;++o){const i=this.profile.vertexIndices[2*o],r=this.profile.vertexIndices[2*o+1];for(let o=0;o<s;++o){const s=o*e+i,h=(o+1)*e+r,n=o*e+r;t(s,(o+1)*e+i,h),t(s,h,n)}}this.startCap.buildTopology(this.path.vertices[0],t),this.endCap.buildTopology(this.path.vertices[this.path.vertices.length-1],t)}onPathChanged(){this.rebuildGeometry()}}class et{constructor(t){this.builder=t}get xform(){return this.builder.path.xform}onPathChanged(){this.builder.onPathChanged()}}class it extends et{constructor(t){super(t),this.vertexAttributePosition=null,this.vertexAttributeNormal=null,this.vertexAttributeColor=null,this.vertexAttributePosition=new Float32Array(3*this.builder.numVerticesTotal),this.vertexAttributeNormal=new Float32Array(3*this.builder.numNormalsTotal),this.vertexAttributeColor=new Uint8Array(4),this.vertexAttributeColor[0]=255,this.vertexAttributeColor[1]=255,this.vertexAttributeColor[2]=255,this.vertexAttributeColor[3]=255}bakeVertexColors(t){this.vertexAttributeColor[0]=255*t[0],this.vertexAttributeColor[1]=255*t[1],this.vertexAttributeColor[2]=255*t[2],this.vertexAttributeColor[3]=255*(t.length>3?t[3]:1)}bake(e){this.size=e;for(let i=0;i<this.builder.numVerticesTotal;++i){let s=this.builder.pathVertexData[i];const r=0===s||s===this.builder.path.vertices.length-1;s*=3;const o=rt;U(o,this.builder.originData[s++],this.builder.originData[s++],this.builder.originData[s]);const h=4*i,n=at,a=ot,p=lt,f=ut,m=pt;let g=0,V=0;if(U(f,this.builder.profileRightAxisData[h],this.builder.profileRightAxisData[h+1],this.builder.profileRightAxisData[h+2]),U(m,this.builder.profileUpAxisData[h],this.builder.profileUpAxisData[h+1],this.builder.profileUpAxisData[h+2]),l(a,this.builder.profileVertexAndNormalData[h]*e[0],this.builder.profileVertexAndNormalData[h+1]*e[1]),r)R(p,m,f),g=this.builder.profileRightAxisData[h+3]*e[0],V=this.builder.profileUpAxisData[h+3];else{const e=ht,i=nt;l(e,this.builder.profileRightAxisData[h+3],this.builder.profileUpAxisData[h+3]);const s=v(e);d(e,e);const r=u(a,e);if(Math.abs(r)>s){l(i,-e[1],e[0]);const o=u(a,i);c(e,e,s*t(r)),c(i,i,o),x(a,e,i)}U(p,0,0,0)}U(n,f[0]*a[0]+m[0]*a[1],f[1]*a[0]+m[1]*a[1],f[2]*a[0]+m[2]*a[1]),this.vertexAttributePosition[3*i+0]=o[0]+n[0]+p[0]*g,this.vertexAttributePosition[3*i+1]=o[1]+n[1]+p[1]*g,this.vertexAttributePosition[3*i+2]=o[2]+n[2]+p[2]*g;const b=ot;l(b,this.builder.profileVertexAndNormalData[h+2],this.builder.profileVertexAndNormalData[h+3]),this.vertexAttributeNormal[3*i+0]=f[0]*b[0]+m[0]*b[1]+p[0]*V,this.vertexAttributeNormal[3*i+1]=f[1]*b[0]+m[1]*b[1]+p[1]*V,this.vertexAttributeNormal[3*i+2]=f[2]*b[0]+m[2]*b[1]+p[2]*V}}createGeometryData(){const t=[[\"position\",this.builder.vertexIndices],[\"normal\",this.builder.normalIndices]],e=[[\"position\",{size:3,data:this.vertexAttributePosition,exclusive:!0}],[\"normal\",{size:3,data:this.vertexAttributeNormal,exclusive:!0}]];if(this.vertexAttributeColor){const i=this.builder.vertexIndices.length;t.push([\"color\",new Uint32Array(i)]),e.push([\"color\",{size:4,data:this.vertexAttributeColor}])}return{vertexAttributes:e,indices:t}}onPathChanged(){super.onPathChanged(),this.bake(this.size)}intersect(t,e,i){const s=this.builder.vertexIndices,r={size:3,data:this.vertexAttributePosition},o=s.length/3;M(t,e,0,o,s,r,void 0,void 0,i)}}class st extends et{constructor(t,e,i,s){super(t),this.sizeAttributeValue=e,this.colorAttributeValue=i,this.opacityAttributeValue=s,this.vvData=null,this.baked=new it(t),this.vvData=new Float32Array(4*this.builder.path.vertices.length);for(let r=0;r<this.builder.path.vertices.length;++r){this.vvData[4*r+0]=e,this.vvData[4*r+1]=i,this.vvData[4*r+2]=s;const t=0===r||r===this.builder.path.vertices.length-1;this.vvData[4*r+3]=t?1:0}}createGeometryData(){return{vertexAttributes:[[\"position\",{size:3,data:this.builder.originData,exclusive:!0}],[\"profileRight\",{size:4,data:this.builder.profileRightAxisData,exclusive:!0}],[\"profileUp\",{size:4,data:this.builder.profileUpAxisData,exclusive:!0}],[\"profileVertexAndNormal\",{size:4,data:this.builder.profileVertexAndNormalData,exclusive:!0}],[\"featureValue\",{size:4,data:this.vvData,exclusive:!0}]],indices:[[\"position\",this.builder.pathVertexIndices],[\"profileRight\",this.builder.vertexIndices],[\"profileUp\",this.builder.vertexIndices],[\"profileVertexAndNormal\",this.builder.vertexIndices],[\"featureValue\",this.builder.pathVertexIndices]]}}}const rt=y(),ot=m(),ht=m(),nt=m(),at=y(),lt=y(),ut=y(),pt=y(),ft=y(),ct=w(),xt=a();export{tt as Builder,X as CapBuilder,H as Extruder,st as FastUpdatePathGeometry,Q as MiterExtruder,Y as NoCapBuilder,J as Path,et as PathGeometryData,E as PathVertex,O as Profile,$ as RoundCapBuilder,K as SimpleExtruder,it as StaticPathGeometry,Z as TriangulationCapBuilder,q as computeMinimumRotationTangentFrame,w as makeFrame,j as profileSpaceToVertexSpace,z as vertexSpaceToProfileSpace};\n"]},"metadata":{},"sourceType":"module"}