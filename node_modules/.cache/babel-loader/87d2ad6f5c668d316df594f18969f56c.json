{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { c as e } from \"./vec2.js\";\nimport { a as o } from \"./vec2f64.js\";\nimport { Z as i } from \"./vec4f64.js\";\nimport { Slice as r } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { AlignPixel as l } from \"../views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js\";\nimport { HUD as t } from \"../views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js\";\nimport { HUDOcclusionPass as a } from \"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js\";\nimport { OutputHighlight as s } from \"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";\nimport { VisualVariables as n } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { symbolAlphaCutoff as c, defaultMaskAlphaCutoff as d } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";\nimport { ColorConversion as u } from \"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";\nimport { RgbaFloatEncoding as v } from \"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";\nimport { ScreenSizePerspective as f } from \"../views/3d/webgl-engine/core/shaderLibrary/util/ScreenSizePerspective.glsl.js\";\nimport { glsl as p } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as g } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\n\nfunction m(e) {\n  const o = new g(),\n        i = e.signedDistanceFieldEnabled;\n  if (o.include(l), o.include(t, e), o.include(r, e), 6 === e.output) return o.include(a, e), o;\n  o.include(f), o.fragment.include(v), o.fragment.include(u), o.include(n, e), o.varyings.add(\"vcolor\", \"vec4\"), o.varyings.add(\"vtc\", \"vec2\"), o.varyings.add(\"vsize\", \"vec2\"), e.binaryHighlightOcclusionEnabled && o.varyings.add(\"voccluded\", \"float\"), o.vertex.uniforms.add(\"screenOffset\", \"vec2\").add(\"anchorPos\", \"vec2\").add(\"textureCoordinateScaleFactor\", \"vec2\").add(\"materialColor\", \"vec4\"), i && o.vertex.uniforms.add(\"outlineColor\", \"vec4\"), e.screenSizePerspectiveEnabled && o.vertex.uniforms.add(\"screenSizePerspective\", \"vec4\"), (e.debugDrawBorder || e.binaryHighlightOcclusionEnabled) && o.varyings.add(\"debugBorderCoords\", \"vec4\"), o.attributes.add(\"uv0\", \"vec2\"), o.attributes.add(\"color\", \"vec4\"), o.attributes.add(\"size\", \"vec2\"), o.attributes.add(\"auxpos2\", \"vec4\"), o.vertex.code.add(p`\n    void main(void) {\n      ProjectHUDAux projectAux;\n      vec4 posProj = projectPositionHUD(projectAux);\n\n      if (rejectBySlice(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n      vec2 inputSize;\n      ${e.screenSizePerspectiveEnabled ? p`\n      inputSize = screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);\n      vec2 screenOffsetScaled = screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);\n         ` : p`\n      inputSize = size;\n      vec2 screenOffsetScaled = screenOffset;`}\n\n      ${e.vvSize ? \"inputSize *= vvScale(auxpos2).xx;\" : \"\"}\n\n      vec2 combinedSize = inputSize * pixelRatio;\n      vec4 quadOffset = vec4(0.0);\n\n      ${e.occlusionTestEnabled || e.binaryHighlightOcclusionEnabled ? \"bool visible = testVisibilityHUD(posProj);\" : \"\"}\n\n      ${e.binaryHighlightOcclusionEnabled ? \"voccluded = visible ? 0.0 : 1.0;\" : \"\"}\n    `);\n  const m = p`vec2 uv01 = floor(uv0);\nvec2 uv = uv0 - uv01;\nquadOffset.xy = ((uv01 - anchorPos) * 2.0 * combinedSize + screenOffsetScaled) / viewport.zw * posProj.w;`,\n        b = e.pixelSnappingEnabled ? i ? p`posProj = alignToPixelOrigin(posProj, viewport.zw) + quadOffset;` : p`posProj += quadOffset;\nif (inputSize.x == size.x) {\nposProj = alignToPixelOrigin(posProj, viewport.zw);\n}` : p`posProj += quadOffset;`;\n  o.vertex.code.add(p`\n      ${e.occlusionTestEnabled ? \"if (visible) {\" : \"\"}\n      ${m}\n      ${e.vvColor ? \"vcolor = vvGetColor(auxpos2, vvColorValues, vvColorColors) * materialColor;\" : \"vcolor = color / 255.0 * materialColor;\"}\n\n      bool alphaDiscard = vcolor.a < ${p.float(c)};\n      ${i ? `alphaDiscard = alphaDiscard && outlineColor.a < ${p.float(c)};` : \"\"}\n      if (alphaDiscard) {\n        // \"early discard\" if both symbol color (= fill) and outline color (if applicable) are transparent\n        gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        return;\n      } else {\n        ${b}\n        gl_Position = posProj;\n      }\n\n      vtc = uv * textureCoordinateScaleFactor;\n\n      ${e.debugDrawBorder ? \"debugBorderCoords = vec4(uv01, 1.5 / combinedSize);\" : \"\"}\n      vsize = inputSize;\n      ${e.occlusionTestEnabled ? p`} else { vtc = vec2(0.0);\n        ${e.debugDrawBorder ? \"debugBorderCoords = vec4(0.5, 0.5, 1.5 / combinedSize);}\" : \"}\"}` : \"\"}\n    }\n    `), o.fragment.uniforms.add(\"tex\", \"sampler2D\"), i && (o.fragment.uniforms.add(\"outlineColor\", \"vec4\"), o.fragment.uniforms.add(\"outlineSize\", \"float\"));\n  const x = e.debugDrawBorder ? p`(isBorder > 0.0 ? 0.0 : ${p.float(d)})` : p.float(d),\n        h = p`\n    ${e.debugDrawBorder ? p`\n      float isBorder = float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));` : \"\"}\n\n    ${i ? p`\n      vec4 fillPixelColor = vcolor;\n\n      // Attempt to sample texel centers to avoid that thin cross outlines\n      // disappear with large symbol sizes.\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/7058#issuecomment-603041\n      const float txSize = 128.0;\n      const float texelSize = 1.0 / txSize;\n      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel\n      vec2 scaleFactor = (vsize - txSize) * texelSize;\n      vec2 samplePos = vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;\n\n      // Get distance and map it into [-0.5, 0.5]\n      float d = rgba2float(texture2D(tex, samplePos)) - 0.5;\n\n      // Distance in output units (i.e. pixels)\n      float dist = d * vsize.x;\n\n      // Create smooth transition from the icon into its outline\n      float fillAlphaFactor = clamp(0.5 - dist, 0.0, 1.0);\n      fillPixelColor.a *= fillAlphaFactor;\n\n      if (outlineSize > 0.25) {\n        vec4 outlinePixelColor = outlineColor;\n        float clampedOutlineSize = min(outlineSize, 0.5*vsize.x);\n\n        // Create smooth transition around outline\n        float outlineAlphaFactor = clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);\n        outlinePixelColor.a *= outlineAlphaFactor;\n\n        if (\n          outlineAlphaFactor + fillAlphaFactor < ${x} ||\n          fillPixelColor.a + outlinePixelColor.a < ${p.float(c)}\n        ) {\n          discard;\n        }\n\n        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)\n        float compositeAlpha = outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);\n        vec3 compositeColor = vec3(outlinePixelColor) * outlinePixelColor.a +\n          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);\n\n        gl_FragColor = vec4(compositeColor, compositeAlpha);\n      } else {\n        if (fillAlphaFactor < ${x}) {\n          discard;\n        }\n\n        gl_FragColor = premultiplyAlpha(fillPixelColor);\n      }\n\n      // visualize SDF:\n      // gl_FragColor = vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);\n      ` : p`\n          vec4 texColor = texture2D(tex, vtc, -0.5);\n          if (texColor.a < ${x}) {\n            discard;\n          }\n          gl_FragColor = texColor * premultiplyAlpha(vcolor);\n          `}\n\n    ${e.debugDrawBorder ? p`gl_FragColor = mix(gl_FragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder);` : \"\"}\n  `;\n  return 7 === e.output && o.fragment.code.add(p`\n      void main() {\n        ${h}\n        gl_FragColor = vec4(gl_FragColor.a);\n      }\n      `), 0 === e.output && o.fragment.code.add(p`\n    void main() {\n      ${h}\n      ${e.FrontFacePass ? \"gl_FragColor.rgb /= gl_FragColor.a;\" : \"\"}\n    }\n    `), 4 === e.output && (o.include(s), o.fragment.code.add(p`\n    void main() {\n      ${h}\n      ${e.binaryHighlightOcclusionEnabled ? p`\n          if (voccluded == 1.0) {\n            gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n          } else {\n            gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);\n          }` : \"outputHighlight();\"}\n    }\n    `)), o;\n}\n\nfunction b(e, o, r) {\n  e.setUniform4fv(\"materialColor\", o.color), o.textureIsSignedDistanceField && (o.outlineColor[3] <= 0 || o.outlineSize <= 0 ? (e.setUniform4fv(\"outlineColor\", i), e.setUniform1f(\"outlineSize\", 0)) : (e.setUniform4fv(\"outlineColor\", o.outlineColor), e.setUniform1f(\"outlineSize\", o.outlineSize))), e.setUniform2f(\"screenOffset\", 2 * o.screenOffset[0] * r, 2 * o.screenOffset[1] * r), e.setUniform2fv(\"anchorPos\", x(o));\n}\n\nfunction x(o, i = C) {\n  return o.textureIsSignedDistanceField ? h(o.anchorPos, o.distanceFieldBoundingBox, i) : e(i, o.anchorPos), i;\n}\n\nfunction h(e, o, i) {\n  i[0] = e[0] * (o[2] - o[0]) + o[0], i[1] = e[1] * (o[3] - o[1]) + o[1];\n}\n\nconst C = o();\nvar z = Object.freeze({\n  __proto__: null,\n  build: m,\n  bindHUDMaterialUniforms: b,\n  calculateAnchorPosForRendering: x\n});\nexport { z as H, m as a, b, x as c };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/chunks/HUDMaterial.glsl.js"],"names":["c","e","a","o","Z","i","Slice","r","AlignPixel","l","HUD","t","HUDOcclusionPass","OutputHighlight","s","VisualVariables","n","symbolAlphaCutoff","defaultMaskAlphaCutoff","d","ColorConversion","u","RgbaFloatEncoding","v","ScreenSizePerspective","f","glsl","p","ShaderBuilder","g","m","signedDistanceFieldEnabled","include","output","fragment","varyings","add","binaryHighlightOcclusionEnabled","vertex","uniforms","screenSizePerspectiveEnabled","debugDrawBorder","attributes","code","vvSize","occlusionTestEnabled","b","pixelSnappingEnabled","vvColor","float","x","h","FrontFacePass","setUniform4fv","color","textureIsSignedDistanceField","outlineColor","outlineSize","setUniform1f","setUniform2f","screenOffset","setUniform2fv","C","anchorPos","distanceFieldBoundingBox","z","Object","freeze","__proto__","build","bindHUDMaterialUniforms","calculateAnchorPosForRendering","H"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{c as e}from\"./vec2.js\";import{a as o}from\"./vec2f64.js\";import{Z as i}from\"./vec4f64.js\";import{Slice as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{AlignPixel as l}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js\";import{HUD as t}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js\";import{HUDOcclusionPass as a}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js\";import{OutputHighlight as s}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{VisualVariables as n}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as c,defaultMaskAlphaCutoff as d}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{ColorConversion as u}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{RgbaFloatEncoding as v}from\"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{ScreenSizePerspective as f}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ScreenSizePerspective.glsl.js\";import{glsl as p}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as g}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";function m(e){const o=new g,i=e.signedDistanceFieldEnabled;if(o.include(l),o.include(t,e),o.include(r,e),6===e.output)return o.include(a,e),o;o.include(f),o.fragment.include(v),o.fragment.include(u),o.include(n,e),o.varyings.add(\"vcolor\",\"vec4\"),o.varyings.add(\"vtc\",\"vec2\"),o.varyings.add(\"vsize\",\"vec2\"),e.binaryHighlightOcclusionEnabled&&o.varyings.add(\"voccluded\",\"float\"),o.vertex.uniforms.add(\"screenOffset\",\"vec2\").add(\"anchorPos\",\"vec2\").add(\"textureCoordinateScaleFactor\",\"vec2\").add(\"materialColor\",\"vec4\"),i&&o.vertex.uniforms.add(\"outlineColor\",\"vec4\"),e.screenSizePerspectiveEnabled&&o.vertex.uniforms.add(\"screenSizePerspective\",\"vec4\"),(e.debugDrawBorder||e.binaryHighlightOcclusionEnabled)&&o.varyings.add(\"debugBorderCoords\",\"vec4\"),o.attributes.add(\"uv0\",\"vec2\"),o.attributes.add(\"color\",\"vec4\"),o.attributes.add(\"size\",\"vec2\"),o.attributes.add(\"auxpos2\",\"vec4\"),o.vertex.code.add(p`\n    void main(void) {\n      ProjectHUDAux projectAux;\n      vec4 posProj = projectPositionHUD(projectAux);\n\n      if (rejectBySlice(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n      vec2 inputSize;\n      ${e.screenSizePerspectiveEnabled?p`\n      inputSize = screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);\n      vec2 screenOffsetScaled = screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);\n         `:p`\n      inputSize = size;\n      vec2 screenOffsetScaled = screenOffset;`}\n\n      ${e.vvSize?\"inputSize *= vvScale(auxpos2).xx;\":\"\"}\n\n      vec2 combinedSize = inputSize * pixelRatio;\n      vec4 quadOffset = vec4(0.0);\n\n      ${e.occlusionTestEnabled||e.binaryHighlightOcclusionEnabled?\"bool visible = testVisibilityHUD(posProj);\":\"\"}\n\n      ${e.binaryHighlightOcclusionEnabled?\"voccluded = visible ? 0.0 : 1.0;\":\"\"}\n    `);const m=p`vec2 uv01 = floor(uv0);\nvec2 uv = uv0 - uv01;\nquadOffset.xy = ((uv01 - anchorPos) * 2.0 * combinedSize + screenOffsetScaled) / viewport.zw * posProj.w;`,b=e.pixelSnappingEnabled?i?p`posProj = alignToPixelOrigin(posProj, viewport.zw) + quadOffset;`:p`posProj += quadOffset;\nif (inputSize.x == size.x) {\nposProj = alignToPixelOrigin(posProj, viewport.zw);\n}`:p`posProj += quadOffset;`;o.vertex.code.add(p`\n      ${e.occlusionTestEnabled?\"if (visible) {\":\"\"}\n      ${m}\n      ${e.vvColor?\"vcolor = vvGetColor(auxpos2, vvColorValues, vvColorColors) * materialColor;\":\"vcolor = color / 255.0 * materialColor;\"}\n\n      bool alphaDiscard = vcolor.a < ${p.float(c)};\n      ${i?`alphaDiscard = alphaDiscard && outlineColor.a < ${p.float(c)};`:\"\"}\n      if (alphaDiscard) {\n        // \"early discard\" if both symbol color (= fill) and outline color (if applicable) are transparent\n        gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        return;\n      } else {\n        ${b}\n        gl_Position = posProj;\n      }\n\n      vtc = uv * textureCoordinateScaleFactor;\n\n      ${e.debugDrawBorder?\"debugBorderCoords = vec4(uv01, 1.5 / combinedSize);\":\"\"}\n      vsize = inputSize;\n      ${e.occlusionTestEnabled?p`} else { vtc = vec2(0.0);\n        ${e.debugDrawBorder?\"debugBorderCoords = vec4(0.5, 0.5, 1.5 / combinedSize);}\":\"}\"}`:\"\"}\n    }\n    `),o.fragment.uniforms.add(\"tex\",\"sampler2D\"),i&&(o.fragment.uniforms.add(\"outlineColor\",\"vec4\"),o.fragment.uniforms.add(\"outlineSize\",\"float\"));const x=e.debugDrawBorder?p`(isBorder > 0.0 ? 0.0 : ${p.float(d)})`:p.float(d),h=p`\n    ${e.debugDrawBorder?p`\n      float isBorder = float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));`:\"\"}\n\n    ${i?p`\n      vec4 fillPixelColor = vcolor;\n\n      // Attempt to sample texel centers to avoid that thin cross outlines\n      // disappear with large symbol sizes.\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/7058#issuecomment-603041\n      const float txSize = 128.0;\n      const float texelSize = 1.0 / txSize;\n      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel\n      vec2 scaleFactor = (vsize - txSize) * texelSize;\n      vec2 samplePos = vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;\n\n      // Get distance and map it into [-0.5, 0.5]\n      float d = rgba2float(texture2D(tex, samplePos)) - 0.5;\n\n      // Distance in output units (i.e. pixels)\n      float dist = d * vsize.x;\n\n      // Create smooth transition from the icon into its outline\n      float fillAlphaFactor = clamp(0.5 - dist, 0.0, 1.0);\n      fillPixelColor.a *= fillAlphaFactor;\n\n      if (outlineSize > 0.25) {\n        vec4 outlinePixelColor = outlineColor;\n        float clampedOutlineSize = min(outlineSize, 0.5*vsize.x);\n\n        // Create smooth transition around outline\n        float outlineAlphaFactor = clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);\n        outlinePixelColor.a *= outlineAlphaFactor;\n\n        if (\n          outlineAlphaFactor + fillAlphaFactor < ${x} ||\n          fillPixelColor.a + outlinePixelColor.a < ${p.float(c)}\n        ) {\n          discard;\n        }\n\n        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)\n        float compositeAlpha = outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);\n        vec3 compositeColor = vec3(outlinePixelColor) * outlinePixelColor.a +\n          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);\n\n        gl_FragColor = vec4(compositeColor, compositeAlpha);\n      } else {\n        if (fillAlphaFactor < ${x}) {\n          discard;\n        }\n\n        gl_FragColor = premultiplyAlpha(fillPixelColor);\n      }\n\n      // visualize SDF:\n      // gl_FragColor = vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);\n      `:p`\n          vec4 texColor = texture2D(tex, vtc, -0.5);\n          if (texColor.a < ${x}) {\n            discard;\n          }\n          gl_FragColor = texColor * premultiplyAlpha(vcolor);\n          `}\n\n    ${e.debugDrawBorder?p`gl_FragColor = mix(gl_FragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder);`:\"\"}\n  `;return 7===e.output&&o.fragment.code.add(p`\n      void main() {\n        ${h}\n        gl_FragColor = vec4(gl_FragColor.a);\n      }\n      `),0===e.output&&o.fragment.code.add(p`\n    void main() {\n      ${h}\n      ${e.FrontFacePass?\"gl_FragColor.rgb /= gl_FragColor.a;\":\"\"}\n    }\n    `),4===e.output&&(o.include(s),o.fragment.code.add(p`\n    void main() {\n      ${h}\n      ${e.binaryHighlightOcclusionEnabled?p`\n          if (voccluded == 1.0) {\n            gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n          } else {\n            gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);\n          }`:\"outputHighlight();\"}\n    }\n    `)),o}function b(e,o,r){e.setUniform4fv(\"materialColor\",o.color),o.textureIsSignedDistanceField&&(o.outlineColor[3]<=0||o.outlineSize<=0?(e.setUniform4fv(\"outlineColor\",i),e.setUniform1f(\"outlineSize\",0)):(e.setUniform4fv(\"outlineColor\",o.outlineColor),e.setUniform1f(\"outlineSize\",o.outlineSize))),e.setUniform2f(\"screenOffset\",2*o.screenOffset[0]*r,2*o.screenOffset[1]*r),e.setUniform2fv(\"anchorPos\",x(o))}function x(o,i=C){return o.textureIsSignedDistanceField?h(o.anchorPos,o.distanceFieldBoundingBox,i):e(i,o.anchorPos),i}function h(e,o,i){i[0]=e[0]*(o[2]-o[0])+o[0],i[1]=e[1]*(o[3]-o[1])+o[1]}const C=o();var z=Object.freeze({__proto__:null,build:m,bindHUDMaterialUniforms:b,calculateAnchorPosForRendering:x});export{z as H,m as a,b,x as c};\n"]},"metadata":{},"sourceType":"module"}