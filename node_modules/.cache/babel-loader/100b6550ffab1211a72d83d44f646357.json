{"ast":null,"code":"var _jsxFileName = \"/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/components/MapView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport Map from '@arcgis/core/Map';\nimport * as promiseUtils from '@arcgis/core/core/promiseUtils';\nimport buildings from '../untils/SceneLayerConfig';\nimport sceneView from '../untils/SceneViewConfig';\nimport map from '../untils/map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapView() {\n  _s();\n\n  const mapRef = useRef();\n  useEffect(() => {\n    // const map = new Map({\n    //     basemap: 'satellite',\n    //     layers: [buildings({ url: \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0\" })]\n    // })\n    const view = map(\"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0\", 'topo-vector', mapRef.current);\n    return () => {\n      view && view.destroy();\n    };\n  }, []); // view.when().then(async () => {\n  //     const buildingsLV = await view.whenLayerView(buildings);\n  //     let highlight = null;\n  //     view.on(\n  //         \"pointer-move\",\n  //         promiseUtils.debounce(async (e) => {\n  //             const ht = await view.hitTest(e, {\n  //                 include: [buildings]\n  //             });\n  //             if (highlight) {\n  //                 highlight.remove();\n  //                 highlight = null;\n  //             }\n  //             if (ht.results.length > 0) {\n  //                 // select the first feature (closest to the camera)\n  //                 const graphic = ht.results[0].graphic;\n  //                 if (graphic) {\n  //                     highlight = buildingsLV.highlight(graphic);\n  //                 }\n  //             }\n  //         })\n  //     );\n  //     view.on(\"pointer-leave\", () => {\n  //         if (highlight) {\n  //             highlight.remove();\n  //             highlight = null;\n  //         }\n  //     });\n  // });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MapView, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n\n_c = MapView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/components/MapView.js"],"names":["React","useRef","useEffect","Map","promiseUtils","buildings","sceneView","map","MapView","mapRef","view","current","destroy","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,KAAKC,YAAZ,MAA8B,gCAA9B;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,eAAhB;;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAC9B,QAAMC,MAAM,GAAGR,MAAM,EAArB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA;AACA;AAEA,UAAMQ,IAAI,GAAGH,GAAG,CAAC,4FAAD,EAA+F,aAA/F,EAA8GE,MAAM,CAACE,OAArH,CAAhB;AAEA,WAAO,MAAM;AAAED,MAAAA,IAAI,IAAIA,IAAI,CAACE,OAAL,EAAR;AAAwB,KAAvC;AACH,GATQ,EASN,EATM,CAAT,CAH8B,CAc9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,GAAG,EAAEH,MAAV;AAAkB,IAAA,KAAK,EAAE;AAAEI,MAAAA,MAAM,EAAE;AAAV;AAAzB;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GA/CuBL,O;;KAAAA,O","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport Map from '@arcgis/core/Map'\nimport * as promiseUtils from '@arcgis/core/core/promiseUtils'\n\nimport buildings from '../untils/SceneLayerConfig'\nimport sceneView from '../untils/SceneViewConfig'\nimport map from '../untils/map'\n\nexport default function MapView() {\n    const mapRef = useRef()\n\n    useEffect(() => {\n        // const map = new Map({\n        //     basemap: 'satellite',\n        //     layers: [buildings({ url: \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0\" })]\n        // })\n\n        const view = map(\"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0\", 'topo-vector', mapRef.current)\n\n        return () => { view && view.destroy() }\n    }, [])\n\n    // view.when().then(async () => {\n    //     const buildingsLV = await view.whenLayerView(buildings);\n    //     let highlight = null;\n    //     view.on(\n    //         \"pointer-move\",\n    //         promiseUtils.debounce(async (e) => {\n    //             const ht = await view.hitTest(e, {\n    //                 include: [buildings]\n    //             });\n    //             if (highlight) {\n    //                 highlight.remove();\n    //                 highlight = null;\n    //             }\n    //             if (ht.results.length > 0) {\n    //                 // select the first feature (closest to the camera)\n    //                 const graphic = ht.results[0].graphic;\n    //                 if (graphic) {\n    //                     highlight = buildingsLV.highlight(graphic);\n    //                 }\n    //             }\n    //         })\n    //     );\n    //     view.on(\"pointer-leave\", () => {\n    //         if (highlight) {\n    //             highlight.remove();\n    //             highlight = null;\n    //         }\n    //     });\n    // });\n\n    return (\n        <div ref={mapRef} style={{ height: '100vh' }} />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}