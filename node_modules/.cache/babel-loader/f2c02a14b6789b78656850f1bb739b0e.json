{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport \"./has.js\";\nimport { strict as e } from \"./jsonMap.js\";\nimport { getReferenceEllipsoid as s } from \"../geometry/projectionEllipsoid.js\";\nimport r from \"../geometry/SpatialReference.js\";\nimport { earth as t, mars as i, moon as n } from \"../geometry/support/Ellipsoid.js\";\nimport { isEarth as a, isWKIDFromMars as u, isWKIDFromMoon as c } from \"../geometry/support/spatialReferenceUtils.js\";\nimport o from \"../geometry/support/WKIDUnitConversion.js\";\n\nconst l = 39.37,\n      m = t.radius * Math.PI / 200,\n      f = /UNIT\\[([^\\]]+)\\]\\]$/i,\n      d = o,\n      U = /UNIT\\[([^\\]]+)\\]/i,\n      q = new Set([4261, 4305, 4807, 4810, 4811, 4812, 4816, 4819, 4821, 4901, 4902, 37225, 104139, 104140]),\n      p = e()({\n  meter: \"meters\",\n  foot: \"feet\",\n  foot_us: \"us-feet\",\n  foot_clarke: \"clarke-feet\",\n  yard_clarke: \"clarke-yards\",\n  link_clarke: \"clarke-links\",\n  yard_sears: \"sears-yards\",\n  foot_sears: \"sears-feet\",\n  chain_sears: \"sears-chains\",\n  chain_benoit_1895_b: \"benoit-1895-b-chains\",\n  yard_indian: \"indian-yards\",\n  yard_indian_1937: \"indian-1937-yards\",\n  foot_gold_coast: \"gold-coast-feet\",\n  chain_sears_1922_truncated: \"sears-1922-truncated-chains\",\n  \"50_kilometers\": \"50-kilometers\",\n  \"150_kilometers\": \"150-kilometers\"\n}),\n      B = e => e * e,\n      h = e => e * e * e,\n      k = {\n  length: {\n    baseUnit: \"meters\",\n    units: {\n      millimeters: {\n        inBaseUnits: .001\n      },\n      centimeters: {\n        inBaseUnits: .01\n      },\n      decimeters: {\n        inBaseUnits: .1\n      },\n      meters: {\n        inBaseUnits: 1\n      },\n      kilometers: {\n        inBaseUnits: 1e3\n      },\n      inches: {\n        inBaseUnits: .0254\n      },\n      feet: {\n        inBaseUnits: .3048\n      },\n      yards: {\n        inBaseUnits: .9144\n      },\n      miles: {\n        inBaseUnits: 1609.344\n      },\n      \"nautical-miles\": {\n        inBaseUnits: 1852\n      },\n      \"us-feet\": {\n        inBaseUnits: 1200 / 3937\n      }\n    }\n  },\n  area: {\n    baseUnit: \"square-meters\",\n    units: {\n      \"square-millimeters\": {\n        inBaseUnits: B(.001)\n      },\n      \"square-centimeters\": {\n        inBaseUnits: B(.01)\n      },\n      \"square-decimeters\": {\n        inBaseUnits: B(.1)\n      },\n      \"square-meters\": {\n        inBaseUnits: 1\n      },\n      \"square-kilometers\": {\n        inBaseUnits: B(1e3)\n      },\n      \"square-inches\": {\n        inBaseUnits: B(.0254)\n      },\n      \"square-feet\": {\n        inBaseUnits: B(.3048)\n      },\n      \"square-yards\": {\n        inBaseUnits: B(.9144)\n      },\n      \"square-miles\": {\n        inBaseUnits: B(1609.344)\n      },\n      \"square-us-feet\": {\n        inBaseUnits: B(1200 / 3937)\n      },\n      acres: {\n        inBaseUnits: .0015625 * B(1609.344)\n      },\n      ares: {\n        inBaseUnits: 100\n      },\n      hectares: {\n        inBaseUnits: 1e4\n      }\n    }\n  },\n  volume: {\n    baseUnit: \"liters\",\n    units: {\n      liters: {\n        inBaseUnits: 1\n      },\n      \"cubic-millimeters\": {\n        inBaseUnits: 1e3 * h(.001)\n      },\n      \"cubic-centimeters\": {\n        inBaseUnits: 1e3 * h(.01)\n      },\n      \"cubic-decimeters\": {\n        inBaseUnits: 1e3 * h(.1)\n      },\n      \"cubic-meters\": {\n        inBaseUnits: 1e3\n      },\n      \"cubic-kilometers\": {\n        inBaseUnits: 1e3 * h(1e3)\n      },\n      \"cubic-inches\": {\n        inBaseUnits: 1e3 * h(.0254)\n      },\n      \"cubic-feet\": {\n        inBaseUnits: 1e3 * h(.3048)\n      },\n      \"cubic-yards\": {\n        inBaseUnits: 1e3 * h(.9144)\n      },\n      \"cubic-miles\": {\n        inBaseUnits: 1e3 * h(1609.344)\n      }\n    }\n  },\n  angle: {\n    baseUnit: \"radians\",\n    units: {\n      radians: {\n        inBaseUnits: 1\n      },\n      degrees: {\n        inBaseUnits: Math.PI / 180\n      }\n    }\n  }\n},\n      y = function () {\n  const e = {};\n\n  for (const s in k) for (const r in k[s].units) e[r] = s;\n\n  return e;\n}();\n\nfunction b(e, s, r) {\n  return e * k[r].units[s].inBaseUnits;\n}\n\nfunction _(e, s, r) {\n  return e / k[r].units[s].inBaseUnits;\n}\n\nconst g = [\"metric\", \"imperial\", \"square-inches\", \"square-feet\", \"square-yards\", \"square-miles\", \"square-us-feet\", \"square-meters\", \"square-kilometers\", \"acres\", \"ares\", \"hectares\"],\n      S = [\"metric\", \"imperial\", \"inches\", \"feet\", \"yards\", \"miles\", \"nautical-miles\", \"us-feet\", \"meters\", \"kilometers\"];\n\nfunction w(e) {\n  return \"imperial\" === e || \"metric\" === e;\n}\n\nfunction j(e) {\n  const s = y[e];\n  if (s) return s;\n  throw new Error(\"unknown measure\");\n}\n\nfunction M(e) {\n  return k[e].baseUnit;\n}\n\nfunction P(e) {\n  return M(j(e));\n}\n\nfunction C(e, s = null) {\n  return s = s || j(e), k[s].baseUnit === e;\n}\n\nfunction I(e, s, r) {\n  if (s === r) return e;\n  const t = j(s);\n  if (t !== j(r)) throw new Error(\"incompatible units\");\n  const i = C(s, t) ? e : b(e, s, t);\n  return C(r, t) ? i : _(i, r, t);\n}\n\nfunction D(e, s, r) {\n  switch (r) {\n    case \"metric\":\n      return E(e, s);\n\n    case \"imperial\":\n      return N(e, s);\n\n    default:\n      return r;\n  }\n}\n\nfunction x(e, s, r) {\n  switch (r) {\n    case \"metric\":\n      return F(e, s);\n\n    case \"imperial\":\n      return O(e, s);\n\n    default:\n      return r;\n  }\n}\n\nfunction E(e, s) {\n  return I(e, s, \"meters\") < 3e3 ? \"meters\" : \"kilometers\";\n}\n\nfunction F(e, s) {\n  return I(e, s, \"meters\") < 1e5 ? \"meters\" : \"kilometers\";\n}\n\nfunction N(e, s) {\n  return I(e, s, \"feet\") < 1e3 ? \"feet\" : \"miles\";\n}\n\nfunction O(e, s) {\n  return I(e, s, \"feet\") < 1e5 ? \"feet\" : \"miles\";\n}\n\nfunction v(e, s) {\n  return I(e, s, \"square-meters\") < 3e6 ? \"square-meters\" : \"square-kilometers\";\n}\n\nfunction J(e, s) {\n  return I(e, s, \"square-feet\") < 1e6 ? \"square-feet\" : \"square-miles\";\n}\n\nfunction R(e, s, r) {\n  return I(e, s, \"meters\") / (r * Math.PI / 180);\n}\n\nfunction K(e) {\n  return p.fromJSON(e.toLowerCase()) || null;\n}\n\nfunction A(e) {\n  return p.toJSON(e) || null;\n}\n\nfunction T(e) {\n  if (e && \"object\" == typeof e && !a(e)) return 1;\n  const s = G(e);\n  return s > 1e5 ? 1 : s;\n}\n\nfunction Y(e) {\n  return G(e) >= (e instanceof r ? s(e).metersPerDegree : 1e5) ? \"meters\" : L(e);\n}\n\nfunction G(e, s = t.metersPerDegree) {\n  return H(e, !0) || s;\n}\n\nfunction H(e, s = !1) {\n  let r,\n      t,\n      a = null;\n\n  if (null != e && (\"object\" == typeof e ? (r = e.wkid, t = e.wkt) : \"number\" == typeof e ? r = e : \"string\" == typeof e && (t = e)), r) {\n    if (u(r)) return i.metersPerDegree;\n    if (c(r)) return n.metersPerDegree;\n    a = d.values[d[r]], !a && s && q.has(r) && (a = m);\n  } else if (t) if (-1 !== t.search(/^PROJCS/i)) {\n    const e = f.exec(t);\n    e && e[1] && (a = parseFloat(e[1].split(\",\")[1]));\n  } else if (-1 !== t.search(/^GEOCCS/i)) {\n    const e = U.exec(t);\n    e && e[1] && (a = parseFloat(e[1].split(\",\")[1]));\n  }\n\n  return a;\n}\n\nfunction L(e) {\n  let s,\n      r,\n      t = null;\n  if (null != e && (\"object\" == typeof e ? (s = e.wkid, r = e.wkt) : \"number\" == typeof e ? s = e : \"string\" == typeof e && (r = e)), s) t = d.units[d[s]];else if (r && -1 !== r.search(/^PROJCS/i)) {\n    let e = f.exec(r);\n    e && e[1] && (e = /[\\\\\"\\\\']{1}([^\\\\\"\\\\']+)/.exec(e[1]), t = e && e[1]);\n  }\n  return t ? K(t) : null;\n}\n\nfunction W(e) {\n  if (!e) return null;\n\n  switch (L(e)) {\n    case \"feet\":\n    case \"us-feet\":\n    case \"clarke-feet\":\n    case \"clarke-yards\":\n    case \"clarke-links\":\n    case \"sears-yards\":\n    case \"sears-feet\":\n    case \"sears-chains\":\n    case \"benoit-1895-b-chains\":\n    case \"indian-yards\":\n    case \"indian-1937-yards\":\n    case \"gold-coast-feet\":\n    case \"sears-1922-truncated-chains\":\n      return \"imperial\";\n\n    case \"50-kilometers\":\n    case \"150-kilometers\":\n    case \"meters\":\n      return \"metric\";\n\n    case null:\n    case void 0:\n      return null;\n  }\n\n  return null;\n}\n\nconst $ = {\n  esriAcres: \"acres\",\n  esriAres: \"ares\",\n  esriHectares: \"hectares\",\n  esriSquareCentimeters: \"square-centimeters\",\n  esriSquareDecimeters: \"square-decimeters\",\n  esriSquareFeet: \"square-feet\",\n  esriSquareInches: \"square-inches\",\n  esriSquareKilometers: \"square-kilometers\",\n  esriSquareMeters: \"square-meters\",\n  esriSquareMiles: \"square-miles\",\n  esriSquareMillimeters: \"square-millimeters\",\n  esriSquareUsFeet: \"square-us-feet\",\n  esriSquareYards: \"square-yards\"\n},\n      z = {\n  esriCentimeters: \"centimeters\",\n  esriDecimeters: \"decimeters\",\n  esriFeet: \"feet\",\n  esriInches: \"inches\",\n  esriKilometers: \"kilometers\",\n  esriMeters: \"meters\",\n  esriMiles: \"miles\",\n  esriMillimeters: \"millimeters\",\n  esriNauticalMiles: \"nautical-miles\",\n  esriYards: \"yards\"\n},\n      Q = e()($),\n      V = e()(z),\n      X = e()({ ...$,\n  ...z\n});\nexport { Q as areaUnitsJSONMap, M as baseUnitForMeasure, P as baseUnitForUnit, I as convertUnit, W as getDefaultUnitSystem, H as getMetersPerUnit, G as getMetersPerUnitForSR, T as getMetersPerVerticalUnitForSR, L as getUnitString, Y as getVerticalUnitStringForSR, l as inchesPerMeter, C as isBaseUnit, w as isMeasurementSystem, R as lengthToDegrees, V as lengthUnitsJSONMap, j as measureForUnit, g as measurementAreaUnits, S as measurementLengthUnits, J as preferredImperialAreaUnit, N as preferredImperialLengthUnit, O as preferredImperialVerticalLengthUnit, D as preferredLengthUnit, v as preferredMetricAreaUnit, E as preferredMetricLengthUnit, F as preferredMetricVerticalLengthUnit, x as preferredVerticalLengthUnit, K as unitFromRESTJSON, A as unitToRESTJSON, X as unitsJSONMap };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/core/unitUtils.js"],"names":["strict","e","getReferenceEllipsoid","s","r","earth","t","mars","i","moon","n","isEarth","a","isWKIDFromMars","u","isWKIDFromMoon","c","o","l","m","radius","Math","PI","f","d","U","q","Set","p","meter","foot","foot_us","foot_clarke","yard_clarke","link_clarke","yard_sears","foot_sears","chain_sears","chain_benoit_1895_b","yard_indian","yard_indian_1937","foot_gold_coast","chain_sears_1922_truncated","B","h","k","length","baseUnit","units","millimeters","inBaseUnits","centimeters","decimeters","meters","kilometers","inches","feet","yards","miles","area","acres","ares","hectares","volume","liters","angle","radians","degrees","y","b","_","g","S","w","j","Error","M","P","C","I","D","E","N","x","F","O","v","J","R","K","fromJSON","toLowerCase","A","toJSON","T","G","Y","metersPerDegree","L","H","wkid","wkt","values","has","search","exec","parseFloat","split","W","$","esriAcres","esriAres","esriHectares","esriSquareCentimeters","esriSquareDecimeters","esriSquareFeet","esriSquareInches","esriSquareKilometers","esriSquareMeters","esriSquareMiles","esriSquareMillimeters","esriSquareUsFeet","esriSquareYards","z","esriCentimeters","esriDecimeters","esriFeet","esriInches","esriKilometers","esriMeters","esriMiles","esriMillimeters","esriNauticalMiles","esriYards","Q","V","X","areaUnitsJSONMap","baseUnitForMeasure","baseUnitForUnit","convertUnit","getDefaultUnitSystem","getMetersPerUnit","getMetersPerUnitForSR","getMetersPerVerticalUnitForSR","getUnitString","getVerticalUnitStringForSR","inchesPerMeter","isBaseUnit","isMeasurementSystem","lengthToDegrees","lengthUnitsJSONMap","measureForUnit","measurementAreaUnits","measurementLengthUnits","preferredImperialAreaUnit","preferredImperialLengthUnit","preferredImperialVerticalLengthUnit","preferredLengthUnit","preferredMetricAreaUnit","preferredMetricLengthUnit","preferredMetricVerticalLengthUnit","preferredVerticalLengthUnit","unitFromRESTJSON","unitToRESTJSON","unitsJSONMap"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAM,UAAN;AAAiB,SAAOA,MAAM,IAAIC,CAAjB,QAAuB,cAAvB;AAAsC,SAAOC,qBAAqB,IAAIC,CAAhC,QAAsC,oCAAtC;AAA2E,OAAOC,CAAP,MAAa,iCAAb;AAA+C,SAAOC,KAAK,IAAIC,CAAhB,EAAkBC,IAAI,IAAIC,CAA1B,EAA4BC,IAAI,IAAIC,CAApC,QAA0C,kCAA1C;AAA6E,SAAOC,OAAO,IAAIC,CAAlB,EAAoBC,cAAc,IAAIC,CAAtC,EAAwCC,cAAc,IAAIC,CAA1D,QAAgE,8CAAhE;AAA+G,OAAOC,CAAP,MAAa,2CAAb;;AAAyD,MAAMC,CAAC,GAAC,KAAR;AAAA,MAAcC,CAAC,GAACb,CAAC,CAACc,MAAF,GAASC,IAAI,CAACC,EAAd,GAAiB,GAAjC;AAAA,MAAqCC,CAAC,GAAC,sBAAvC;AAAA,MAA8DC,CAAC,GAACP,CAAhE;AAAA,MAAkEQ,CAAC,GAAC,mBAApE;AAAA,MAAwFC,CAAC,GAAC,IAAIC,GAAJ,CAAQ,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,EAA8C,IAA9C,EAAmD,IAAnD,EAAwD,KAAxD,EAA8D,MAA9D,EAAqE,MAArE,CAAR,CAA1F;AAAA,MAAgLC,CAAC,GAAC3B,CAAC,GAAG;AAAC4B,EAAAA,KAAK,EAAC,QAAP;AAAgBC,EAAAA,IAAI,EAAC,MAArB;AAA4BC,EAAAA,OAAO,EAAC,SAApC;AAA8CC,EAAAA,WAAW,EAAC,aAA1D;AAAwEC,EAAAA,WAAW,EAAC,cAApF;AAAmGC,EAAAA,WAAW,EAAC,cAA/G;AAA8HC,EAAAA,UAAU,EAAC,aAAzI;AAAuJC,EAAAA,UAAU,EAAC,YAAlK;AAA+KC,EAAAA,WAAW,EAAC,cAA3L;AAA0MC,EAAAA,mBAAmB,EAAC,sBAA9N;AAAqPC,EAAAA,WAAW,EAAC,cAAjQ;AAAgRC,EAAAA,gBAAgB,EAAC,mBAAjS;AAAqTC,EAAAA,eAAe,EAAC,iBAArU;AAAuVC,EAAAA,0BAA0B,EAAC,6BAAlX;AAAgZ,mBAAgB,eAAha;AAAgb,oBAAiB;AAAjc,CAAH,CAAnL;AAAA,MAA0oBC,CAAC,GAAC1C,CAAC,IAAEA,CAAC,GAACA,CAAjpB;AAAA,MAAmpB2C,CAAC,GAAC3C,CAAC,IAAEA,CAAC,GAACA,CAAF,GAAIA,CAA5pB;AAAA,MAA8pB4C,CAAC,GAAC;AAACC,EAAAA,MAAM,EAAC;AAACC,IAAAA,QAAQ,EAAC,QAAV;AAAmBC,IAAAA,KAAK,EAAC;AAACC,MAAAA,WAAW,EAAC;AAACC,QAAAA,WAAW,EAAC;AAAb,OAAb;AAAgCC,MAAAA,WAAW,EAAC;AAACD,QAAAA,WAAW,EAAC;AAAb,OAA5C;AAA8DE,MAAAA,UAAU,EAAC;AAACF,QAAAA,WAAW,EAAC;AAAb,OAAzE;AAA0FG,MAAAA,MAAM,EAAC;AAACH,QAAAA,WAAW,EAAC;AAAb,OAAjG;AAAiHI,MAAAA,UAAU,EAAC;AAACJ,QAAAA,WAAW,EAAC;AAAb,OAA5H;AAA8IK,MAAAA,MAAM,EAAC;AAACL,QAAAA,WAAW,EAAC;AAAb,OAArJ;AAAyKM,MAAAA,IAAI,EAAC;AAACN,QAAAA,WAAW,EAAC;AAAb,OAA9K;AAAkMO,MAAAA,KAAK,EAAC;AAACP,QAAAA,WAAW,EAAC;AAAb,OAAxM;AAA4NQ,MAAAA,KAAK,EAAC;AAACR,QAAAA,WAAW,EAAC;AAAb,OAAlO;AAAyP,wBAAiB;AAACA,QAAAA,WAAW,EAAC;AAAb,OAA1Q;AAA6R,iBAAU;AAACA,QAAAA,WAAW,EAAC,OAAK;AAAlB;AAAvS;AAAzB,GAAR;AAAkWS,EAAAA,IAAI,EAAC;AAACZ,IAAAA,QAAQ,EAAC,eAAV;AAA0BC,IAAAA,KAAK,EAAC;AAAC,4BAAqB;AAACE,QAAAA,WAAW,EAACP,CAAC,CAAC,IAAD;AAAd,OAAtB;AAA4C,4BAAqB;AAACO,QAAAA,WAAW,EAACP,CAAC,CAAC,GAAD;AAAd,OAAjE;AAAsF,2BAAoB;AAACO,QAAAA,WAAW,EAACP,CAAC,CAAC,EAAD;AAAd,OAA1G;AAA8H,uBAAgB;AAACO,QAAAA,WAAW,EAAC;AAAb,OAA9I;AAA8J,2BAAoB;AAACA,QAAAA,WAAW,EAACP,CAAC,CAAC,GAAD;AAAd,OAAlL;AAAuM,uBAAgB;AAACO,QAAAA,WAAW,EAACP,CAAC,CAAC,KAAD;AAAd,OAAvN;AAA8O,qBAAc;AAACO,QAAAA,WAAW,EAACP,CAAC,CAAC,KAAD;AAAd,OAA5P;AAAmR,sBAAe;AAACO,QAAAA,WAAW,EAACP,CAAC,CAAC,KAAD;AAAd,OAAlS;AAAyT,sBAAe;AAACO,QAAAA,WAAW,EAACP,CAAC,CAAC,QAAD;AAAd,OAAxU;AAAkW,wBAAiB;AAACO,QAAAA,WAAW,EAACP,CAAC,CAAC,OAAK,IAAN;AAAd,OAAnX;AAA8YiB,MAAAA,KAAK,EAAC;AAACV,QAAAA,WAAW,EAAC,WAASP,CAAC,CAAC,QAAD;AAAvB,OAApZ;AAAubkB,MAAAA,IAAI,EAAC;AAACX,QAAAA,WAAW,EAAC;AAAb,OAA5b;AAA8cY,MAAAA,QAAQ,EAAC;AAACZ,QAAAA,WAAW,EAAC;AAAb;AAAvd;AAAhC,GAAvW;AAAk3Ba,EAAAA,MAAM,EAAC;AAAChB,IAAAA,QAAQ,EAAC,QAAV;AAAmBC,IAAAA,KAAK,EAAC;AAACgB,MAAAA,MAAM,EAAC;AAACd,QAAAA,WAAW,EAAC;AAAb,OAAR;AAAwB,2BAAoB;AAACA,QAAAA,WAAW,EAAC,MAAIN,CAAC,CAAC,IAAD;AAAlB,OAA5C;AAAsE,2BAAoB;AAACM,QAAAA,WAAW,EAAC,MAAIN,CAAC,CAAC,GAAD;AAAlB,OAA1F;AAAmH,0BAAmB;AAACM,QAAAA,WAAW,EAAC,MAAIN,CAAC,CAAC,EAAD;AAAlB,OAAtI;AAA8J,sBAAe;AAACM,QAAAA,WAAW,EAAC;AAAb,OAA7K;AAA+L,0BAAmB;AAACA,QAAAA,WAAW,EAAC,MAAIN,CAAC,CAAC,GAAD;AAAlB,OAAlN;AAA2O,sBAAe;AAACM,QAAAA,WAAW,EAAC,MAAIN,CAAC,CAAC,KAAD;AAAlB,OAA1P;AAAqR,oBAAa;AAACM,QAAAA,WAAW,EAAC,MAAIN,CAAC,CAAC,KAAD;AAAlB,OAAlS;AAA6T,qBAAc;AAACM,QAAAA,WAAW,EAAC,MAAIN,CAAC,CAAC,KAAD;AAAlB,OAA3U;AAAsW,qBAAc;AAACM,QAAAA,WAAW,EAAC,MAAIN,CAAC,CAAC,QAAD;AAAlB;AAApX;AAAzB,GAAz3B;AAAsyCqB,EAAAA,KAAK,EAAC;AAAClB,IAAAA,QAAQ,EAAC,SAAV;AAAoBC,IAAAA,KAAK,EAAC;AAACkB,MAAAA,OAAO,EAAC;AAAChB,QAAAA,WAAW,EAAC;AAAb,OAAT;AAAyBiB,MAAAA,OAAO,EAAC;AAACjB,QAAAA,WAAW,EAAC7B,IAAI,CAACC,EAAL,GAAQ;AAArB;AAAjC;AAA1B;AAA5yC,CAAhqB;AAAA,MAAoiE8C,CAAC,GAAC,YAAU;AAAC,QAAMnE,CAAC,GAAC,EAAR;;AAAW,OAAI,MAAME,CAAV,IAAe0C,CAAf,EAAiB,KAAI,MAAMzC,CAAV,IAAeyC,CAAC,CAAC1C,CAAD,CAAD,CAAK6C,KAApB,EAA0B/C,CAAC,CAACG,CAAD,CAAD,GAAKD,CAAL;;AAAO,SAAOF,CAAP;AAAS,CAAjF,EAAtiE;;AAA0nE,SAASoE,CAAT,CAAWpE,CAAX,EAAaE,CAAb,EAAeC,CAAf,EAAiB;AAAC,SAAOH,CAAC,GAAC4C,CAAC,CAACzC,CAAD,CAAD,CAAK4C,KAAL,CAAW7C,CAAX,EAAc+C,WAAvB;AAAmC;;AAAA,SAASoB,CAAT,CAAWrE,CAAX,EAAaE,CAAb,EAAeC,CAAf,EAAiB;AAAC,SAAOH,CAAC,GAAC4C,CAAC,CAACzC,CAAD,CAAD,CAAK4C,KAAL,CAAW7C,CAAX,EAAc+C,WAAvB;AAAmC;;AAAA,MAAMqB,CAAC,GAAC,CAAC,QAAD,EAAU,UAAV,EAAqB,eAArB,EAAqC,aAArC,EAAmD,cAAnD,EAAkE,cAAlE,EAAiF,gBAAjF,EAAkG,eAAlG,EAAkH,mBAAlH,EAAsI,OAAtI,EAA8I,MAA9I,EAAqJ,UAArJ,CAAR;AAAA,MAAyKC,CAAC,GAAC,CAAC,QAAD,EAAU,UAAV,EAAqB,QAArB,EAA8B,MAA9B,EAAqC,OAArC,EAA6C,OAA7C,EAAqD,gBAArD,EAAsE,SAAtE,EAAgF,QAAhF,EAAyF,YAAzF,CAA3K;;AAAkR,SAASC,CAAT,CAAWxE,CAAX,EAAa;AAAC,SAAM,eAAaA,CAAb,IAAgB,aAAWA,CAAjC;AAAmC;;AAAA,SAASyE,CAAT,CAAWzE,CAAX,EAAa;AAAC,QAAME,CAAC,GAACiE,CAAC,CAACnE,CAAD,CAAT;AAAa,MAAGE,CAAH,EAAK,OAAOA,CAAP;AAAS,QAAM,IAAIwE,KAAJ,CAAU,iBAAV,CAAN;AAAmC;;AAAA,SAASC,CAAT,CAAW3E,CAAX,EAAa;AAAC,SAAO4C,CAAC,CAAC5C,CAAD,CAAD,CAAK8C,QAAZ;AAAqB;;AAAA,SAAS8B,CAAT,CAAW5E,CAAX,EAAa;AAAC,SAAO2E,CAAC,CAACF,CAAC,CAACzE,CAAD,CAAF,CAAR;AAAe;;AAAA,SAAS6E,CAAT,CAAW7E,CAAX,EAAaE,CAAC,GAAC,IAAf,EAAoB;AAAC,SAAOA,CAAC,GAACA,CAAC,IAAEuE,CAAC,CAACzE,CAAD,CAAN,EAAU4C,CAAC,CAAC1C,CAAD,CAAD,CAAK4C,QAAL,KAAgB9C,CAAjC;AAAmC;;AAAA,SAAS8E,CAAT,CAAW9E,CAAX,EAAaE,CAAb,EAAeC,CAAf,EAAiB;AAAC,MAAGD,CAAC,KAAGC,CAAP,EAAS,OAAOH,CAAP;AAAS,QAAMK,CAAC,GAACoE,CAAC,CAACvE,CAAD,CAAT;AAAa,MAAGG,CAAC,KAAGoE,CAAC,CAACtE,CAAD,CAAR,EAAY,MAAM,IAAIuE,KAAJ,CAAU,oBAAV,CAAN;AAAsC,QAAMnE,CAAC,GAACsE,CAAC,CAAC3E,CAAD,EAAGG,CAAH,CAAD,GAAOL,CAAP,GAASoE,CAAC,CAACpE,CAAD,EAAGE,CAAH,EAAKG,CAAL,CAAlB;AAA0B,SAAOwE,CAAC,CAAC1E,CAAD,EAAGE,CAAH,CAAD,GAAOE,CAAP,GAAS8D,CAAC,CAAC9D,CAAD,EAAGJ,CAAH,EAAKE,CAAL,CAAjB;AAAyB;;AAAA,SAAS0E,CAAT,CAAW/E,CAAX,EAAaE,CAAb,EAAeC,CAAf,EAAiB;AAAC,UAAOA,CAAP;AAAU,SAAI,QAAJ;AAAa,aAAO6E,CAAC,CAAChF,CAAD,EAAGE,CAAH,CAAR;;AAAc,SAAI,UAAJ;AAAe,aAAO+E,CAAC,CAACjF,CAAD,EAAGE,CAAH,CAAR;;AAAc;AAAQ,aAAOC,CAAP;AAA1E;AAAoF;;AAAA,SAAS+E,CAAT,CAAWlF,CAAX,EAAaE,CAAb,EAAeC,CAAf,EAAiB;AAAC,UAAOA,CAAP;AAAU,SAAI,QAAJ;AAAa,aAAOgF,CAAC,CAACnF,CAAD,EAAGE,CAAH,CAAR;;AAAc,SAAI,UAAJ;AAAe,aAAOkF,CAAC,CAACpF,CAAD,EAAGE,CAAH,CAAR;;AAAc;AAAQ,aAAOC,CAAP;AAA1E;AAAoF;;AAAA,SAAS6E,CAAT,CAAWhF,CAAX,EAAaE,CAAb,EAAe;AAAC,SAAO4E,CAAC,CAAC9E,CAAD,EAAGE,CAAH,EAAK,QAAL,CAAD,GAAgB,GAAhB,GAAoB,QAApB,GAA6B,YAApC;AAAiD;;AAAA,SAASiF,CAAT,CAAWnF,CAAX,EAAaE,CAAb,EAAe;AAAC,SAAO4E,CAAC,CAAC9E,CAAD,EAAGE,CAAH,EAAK,QAAL,CAAD,GAAgB,GAAhB,GAAoB,QAApB,GAA6B,YAApC;AAAiD;;AAAA,SAAS+E,CAAT,CAAWjF,CAAX,EAAaE,CAAb,EAAe;AAAC,SAAO4E,CAAC,CAAC9E,CAAD,EAAGE,CAAH,EAAK,MAAL,CAAD,GAAc,GAAd,GAAkB,MAAlB,GAAyB,OAAhC;AAAwC;;AAAA,SAASkF,CAAT,CAAWpF,CAAX,EAAaE,CAAb,EAAe;AAAC,SAAO4E,CAAC,CAAC9E,CAAD,EAAGE,CAAH,EAAK,MAAL,CAAD,GAAc,GAAd,GAAkB,MAAlB,GAAyB,OAAhC;AAAwC;;AAAA,SAASmF,CAAT,CAAWrF,CAAX,EAAaE,CAAb,EAAe;AAAC,SAAO4E,CAAC,CAAC9E,CAAD,EAAGE,CAAH,EAAK,eAAL,CAAD,GAAuB,GAAvB,GAA2B,eAA3B,GAA2C,mBAAlD;AAAsE;;AAAA,SAASoF,CAAT,CAAWtF,CAAX,EAAaE,CAAb,EAAe;AAAC,SAAO4E,CAAC,CAAC9E,CAAD,EAAGE,CAAH,EAAK,aAAL,CAAD,GAAqB,GAArB,GAAyB,aAAzB,GAAuC,cAA9C;AAA6D;;AAAA,SAASqF,CAAT,CAAWvF,CAAX,EAAaE,CAAb,EAAeC,CAAf,EAAiB;AAAC,SAAO2E,CAAC,CAAC9E,CAAD,EAAGE,CAAH,EAAK,QAAL,CAAD,IAAiBC,CAAC,GAACiB,IAAI,CAACC,EAAP,GAAU,GAA3B,CAAP;AAAuC;;AAAA,SAASmE,CAAT,CAAWxF,CAAX,EAAa;AAAC,SAAO2B,CAAC,CAAC8D,QAAF,CAAWzF,CAAC,CAAC0F,WAAF,EAAX,KAA6B,IAApC;AAAyC;;AAAA,SAASC,CAAT,CAAW3F,CAAX,EAAa;AAAC,SAAO2B,CAAC,CAACiE,MAAF,CAAS5F,CAAT,KAAa,IAApB;AAAyB;;AAAA,SAAS6F,CAAT,CAAW7F,CAAX,EAAa;AAAC,MAAGA,CAAC,IAAE,YAAU,OAAOA,CAApB,IAAuB,CAACW,CAAC,CAACX,CAAD,CAA5B,EAAgC,OAAO,CAAP;AAAS,QAAME,CAAC,GAAC4F,CAAC,CAAC9F,CAAD,CAAT;AAAa,SAAOE,CAAC,GAAC,GAAF,GAAM,CAAN,GAAQA,CAAf;AAAiB;;AAAA,SAAS6F,CAAT,CAAW/F,CAAX,EAAa;AAAC,SAAO8F,CAAC,CAAC9F,CAAD,CAAD,KAAOA,CAAC,YAAYG,CAAb,GAAeD,CAAC,CAACF,CAAD,CAAD,CAAKgG,eAApB,GAAoC,GAA3C,IAAgD,QAAhD,GAAyDC,CAAC,CAACjG,CAAD,CAAjE;AAAqE;;AAAA,SAAS8F,CAAT,CAAW9F,CAAX,EAAaE,CAAC,GAACG,CAAC,CAAC2F,eAAjB,EAAiC;AAAC,SAAOE,CAAC,CAAClG,CAAD,EAAG,CAAC,CAAJ,CAAD,IAASE,CAAhB;AAAkB;;AAAA,SAASgG,CAAT,CAAWlG,CAAX,EAAaE,CAAC,GAAC,CAAC,CAAhB,EAAkB;AAAC,MAAIC,CAAJ;AAAA,MAAME,CAAN;AAAA,MAAQM,CAAC,GAAC,IAAV;;AAAe,MAAG,QAAMX,CAAN,KAAU,YAAU,OAAOA,CAAjB,IAAoBG,CAAC,GAACH,CAAC,CAACmG,IAAJ,EAAS9F,CAAC,GAACL,CAAC,CAACoG,GAAjC,IAAsC,YAAU,OAAOpG,CAAjB,GAAmBG,CAAC,GAACH,CAArB,GAAuB,YAAU,OAAOA,CAAjB,KAAqBK,CAAC,GAACL,CAAvB,CAAvE,GAAkGG,CAArG,EAAuG;AAAC,QAAGU,CAAC,CAACV,CAAD,CAAJ,EAAQ,OAAOI,CAAC,CAACyF,eAAT;AAAyB,QAAGjF,CAAC,CAACZ,CAAD,CAAJ,EAAQ,OAAOM,CAAC,CAACuF,eAAT;AAAyBrF,IAAAA,CAAC,GAACY,CAAC,CAAC8E,MAAF,CAAS9E,CAAC,CAACpB,CAAD,CAAV,CAAF,EAAiB,CAACQ,CAAD,IAAIT,CAAJ,IAAOuB,CAAC,CAAC6E,GAAF,CAAMnG,CAAN,CAAP,KAAkBQ,CAAC,GAACO,CAApB,CAAjB;AAAwC,GAAlN,MAAuN,IAAGb,CAAH,EAAK,IAAG,CAAC,CAAD,KAAKA,CAAC,CAACkG,MAAF,CAAS,UAAT,CAAR,EAA6B;AAAC,UAAMvG,CAAC,GAACsB,CAAC,CAACkF,IAAF,CAAOnG,CAAP,CAAR;AAAkBL,IAAAA,CAAC,IAAEA,CAAC,CAAC,CAAD,CAAJ,KAAUW,CAAC,GAAC8F,UAAU,CAACzG,CAAC,CAAC,CAAD,CAAD,CAAK0G,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAD,CAAtB;AAA4C,GAA5F,MAAiG,IAAG,CAAC,CAAD,KAAKrG,CAAC,CAACkG,MAAF,CAAS,UAAT,CAAR,EAA6B;AAAC,UAAMvG,CAAC,GAACwB,CAAC,CAACgF,IAAF,CAAOnG,CAAP,CAAR;AAAkBL,IAAAA,CAAC,IAAEA,CAAC,CAAC,CAAD,CAAJ,KAAUW,CAAC,GAAC8F,UAAU,CAACzG,CAAC,CAAC,CAAD,CAAD,CAAK0G,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAD,CAAtB;AAA4C;;AAAA,SAAO/F,CAAP;AAAS;;AAAA,SAASsF,CAAT,CAAWjG,CAAX,EAAa;AAAC,MAAIE,CAAJ;AAAA,MAAMC,CAAN;AAAA,MAAQE,CAAC,GAAC,IAAV;AAAe,MAAG,QAAML,CAAN,KAAU,YAAU,OAAOA,CAAjB,IAAoBE,CAAC,GAACF,CAAC,CAACmG,IAAJ,EAAShG,CAAC,GAACH,CAAC,CAACoG,GAAjC,IAAsC,YAAU,OAAOpG,CAAjB,GAAmBE,CAAC,GAACF,CAArB,GAAuB,YAAU,OAAOA,CAAjB,KAAqBG,CAAC,GAACH,CAAvB,CAAvE,GAAkGE,CAArG,EAAuGG,CAAC,GAACkB,CAAC,CAACwB,KAAF,CAAQxB,CAAC,CAACrB,CAAD,CAAT,CAAF,CAAvG,KAA4H,IAAGC,CAAC,IAAE,CAAC,CAAD,KAAKA,CAAC,CAACoG,MAAF,CAAS,UAAT,CAAX,EAAgC;AAAC,QAAIvG,CAAC,GAACsB,CAAC,CAACkF,IAAF,CAAOrG,CAAP,CAAN;AAAgBH,IAAAA,CAAC,IAAEA,CAAC,CAAC,CAAD,CAAJ,KAAUA,CAAC,GAAC,0BAA0BwG,IAA1B,CAA+BxG,CAAC,CAAC,CAAD,CAAhC,CAAF,EAAuCK,CAAC,GAACL,CAAC,IAAEA,CAAC,CAAC,CAAD,CAAvD;AAA4D;AAAA,SAAOK,CAAC,GAACmF,CAAC,CAACnF,CAAD,CAAF,GAAM,IAAd;AAAmB;;AAAA,SAASsG,CAAT,CAAW3G,CAAX,EAAa;AAAC,MAAG,CAACA,CAAJ,EAAM,OAAO,IAAP;;AAAY,UAAOiG,CAAC,CAACjG,CAAD,CAAR;AAAa,SAAI,MAAJ;AAAW,SAAI,SAAJ;AAAc,SAAI,aAAJ;AAAkB,SAAI,cAAJ;AAAmB,SAAI,cAAJ;AAAmB,SAAI,aAAJ;AAAkB,SAAI,YAAJ;AAAiB,SAAI,cAAJ;AAAmB,SAAI,sBAAJ;AAA2B,SAAI,cAAJ;AAAmB,SAAI,mBAAJ;AAAwB,SAAI,iBAAJ;AAAsB,SAAI,6BAAJ;AAAkC,aAAM,UAAN;;AAAiB,SAAI,eAAJ;AAAoB,SAAI,gBAAJ;AAAqB,SAAI,QAAJ;AAAa,aAAM,QAAN;;AAAe,SAAK,IAAL;AAAU,SAAK,KAAK,CAAV;AAAY,aAAO,IAAP;AAA9X;;AAA0Y,SAAO,IAAP;AAAY;;AAAA,MAAM4G,CAAC,GAAC;AAACC,EAAAA,SAAS,EAAC,OAAX;AAAmBC,EAAAA,QAAQ,EAAC,MAA5B;AAAmCC,EAAAA,YAAY,EAAC,UAAhD;AAA2DC,EAAAA,qBAAqB,EAAC,oBAAjF;AAAsGC,EAAAA,oBAAoB,EAAC,mBAA3H;AAA+IC,EAAAA,cAAc,EAAC,aAA9J;AAA4KC,EAAAA,gBAAgB,EAAC,eAA7L;AAA6MC,EAAAA,oBAAoB,EAAC,mBAAlO;AAAsPC,EAAAA,gBAAgB,EAAC,eAAvQ;AAAuRC,EAAAA,eAAe,EAAC,cAAvS;AAAsTC,EAAAA,qBAAqB,EAAC,oBAA5U;AAAiWC,EAAAA,gBAAgB,EAAC,gBAAlX;AAAmYC,EAAAA,eAAe,EAAC;AAAnZ,CAAR;AAAA,MAA2aC,CAAC,GAAC;AAACC,EAAAA,eAAe,EAAC,aAAjB;AAA+BC,EAAAA,cAAc,EAAC,YAA9C;AAA2DC,EAAAA,QAAQ,EAAC,MAApE;AAA2EC,EAAAA,UAAU,EAAC,QAAtF;AAA+FC,EAAAA,cAAc,EAAC,YAA9G;AAA2HC,EAAAA,UAAU,EAAC,QAAtI;AAA+IC,EAAAA,SAAS,EAAC,OAAzJ;AAAiKC,EAAAA,eAAe,EAAC,aAAjL;AAA+LC,EAAAA,iBAAiB,EAAC,gBAAjN;AAAkOC,EAAAA,SAAS,EAAC;AAA5O,CAA7a;AAAA,MAAkqBC,CAAC,GAACrI,CAAC,GAAG4G,CAAH,CAArqB;AAAA,MAA2qB0B,CAAC,GAACtI,CAAC,GAAG0H,CAAH,CAA9qB;AAAA,MAAorBa,CAAC,GAACvI,CAAC,GAAG,EAAC,GAAG4G,CAAJ;AAAM,KAAGc;AAAT,CAAH,CAAvrB;AAAusB,SAAOW,CAAC,IAAIG,gBAAZ,EAA6B7D,CAAC,IAAI8D,kBAAlC,EAAqD7D,CAAC,IAAI8D,eAA1D,EAA0E5D,CAAC,IAAI6D,WAA/E,EAA2FhC,CAAC,IAAIiC,oBAAhG,EAAqH1C,CAAC,IAAI2C,gBAA1H,EAA2I/C,CAAC,IAAIgD,qBAAhJ,EAAsKjD,CAAC,IAAIkD,6BAA3K,EAAyM9C,CAAC,IAAI+C,aAA9M,EAA4NjD,CAAC,IAAIkD,0BAAjO,EAA4PhI,CAAC,IAAIiI,cAAjQ,EAAgRrE,CAAC,IAAIsE,UAArR,EAAgS3E,CAAC,IAAI4E,mBAArS,EAAyT7D,CAAC,IAAI8D,eAA9T,EAA8Uf,CAAC,IAAIgB,kBAAnV,EAAsW7E,CAAC,IAAI8E,cAA3W,EAA0XjF,CAAC,IAAIkF,oBAA/X,EAAoZjF,CAAC,IAAIkF,sBAAzZ,EAAgbnE,CAAC,IAAIoE,yBAArb,EAA+czE,CAAC,IAAI0E,2BAApd,EAAgfvE,CAAC,IAAIwE,mCAArf,EAAyhB7E,CAAC,IAAI8E,mBAA9hB,EAAkjBxE,CAAC,IAAIyE,uBAAvjB,EAA+kB9E,CAAC,IAAI+E,yBAAplB,EAA8mB5E,CAAC,IAAI6E,iCAAnnB,EAAqpB9E,CAAC,IAAI+E,2BAA1pB,EAAsrBzE,CAAC,IAAI0E,gBAA3rB,EAA4sBvE,CAAC,IAAIwE,cAAjtB,EAAguB5B,CAAC,IAAI6B,YAAruB","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport\"./has.js\";import{strict as e}from\"./jsonMap.js\";import{getReferenceEllipsoid as s}from\"../geometry/projectionEllipsoid.js\";import r from\"../geometry/SpatialReference.js\";import{earth as t,mars as i,moon as n}from\"../geometry/support/Ellipsoid.js\";import{isEarth as a,isWKIDFromMars as u,isWKIDFromMoon as c}from\"../geometry/support/spatialReferenceUtils.js\";import o from\"../geometry/support/WKIDUnitConversion.js\";const l=39.37,m=t.radius*Math.PI/200,f=/UNIT\\[([^\\]]+)\\]\\]$/i,d=o,U=/UNIT\\[([^\\]]+)\\]/i,q=new Set([4261,4305,4807,4810,4811,4812,4816,4819,4821,4901,4902,37225,104139,104140]),p=e()({meter:\"meters\",foot:\"feet\",foot_us:\"us-feet\",foot_clarke:\"clarke-feet\",yard_clarke:\"clarke-yards\",link_clarke:\"clarke-links\",yard_sears:\"sears-yards\",foot_sears:\"sears-feet\",chain_sears:\"sears-chains\",chain_benoit_1895_b:\"benoit-1895-b-chains\",yard_indian:\"indian-yards\",yard_indian_1937:\"indian-1937-yards\",foot_gold_coast:\"gold-coast-feet\",chain_sears_1922_truncated:\"sears-1922-truncated-chains\",\"50_kilometers\":\"50-kilometers\",\"150_kilometers\":\"150-kilometers\"}),B=e=>e*e,h=e=>e*e*e,k={length:{baseUnit:\"meters\",units:{millimeters:{inBaseUnits:.001},centimeters:{inBaseUnits:.01},decimeters:{inBaseUnits:.1},meters:{inBaseUnits:1},kilometers:{inBaseUnits:1e3},inches:{inBaseUnits:.0254},feet:{inBaseUnits:.3048},yards:{inBaseUnits:.9144},miles:{inBaseUnits:1609.344},\"nautical-miles\":{inBaseUnits:1852},\"us-feet\":{inBaseUnits:1200/3937}}},area:{baseUnit:\"square-meters\",units:{\"square-millimeters\":{inBaseUnits:B(.001)},\"square-centimeters\":{inBaseUnits:B(.01)},\"square-decimeters\":{inBaseUnits:B(.1)},\"square-meters\":{inBaseUnits:1},\"square-kilometers\":{inBaseUnits:B(1e3)},\"square-inches\":{inBaseUnits:B(.0254)},\"square-feet\":{inBaseUnits:B(.3048)},\"square-yards\":{inBaseUnits:B(.9144)},\"square-miles\":{inBaseUnits:B(1609.344)},\"square-us-feet\":{inBaseUnits:B(1200/3937)},acres:{inBaseUnits:.0015625*B(1609.344)},ares:{inBaseUnits:100},hectares:{inBaseUnits:1e4}}},volume:{baseUnit:\"liters\",units:{liters:{inBaseUnits:1},\"cubic-millimeters\":{inBaseUnits:1e3*h(.001)},\"cubic-centimeters\":{inBaseUnits:1e3*h(.01)},\"cubic-decimeters\":{inBaseUnits:1e3*h(.1)},\"cubic-meters\":{inBaseUnits:1e3},\"cubic-kilometers\":{inBaseUnits:1e3*h(1e3)},\"cubic-inches\":{inBaseUnits:1e3*h(.0254)},\"cubic-feet\":{inBaseUnits:1e3*h(.3048)},\"cubic-yards\":{inBaseUnits:1e3*h(.9144)},\"cubic-miles\":{inBaseUnits:1e3*h(1609.344)}}},angle:{baseUnit:\"radians\",units:{radians:{inBaseUnits:1},degrees:{inBaseUnits:Math.PI/180}}}},y=function(){const e={};for(const s in k)for(const r in k[s].units)e[r]=s;return e}();function b(e,s,r){return e*k[r].units[s].inBaseUnits}function _(e,s,r){return e/k[r].units[s].inBaseUnits}const g=[\"metric\",\"imperial\",\"square-inches\",\"square-feet\",\"square-yards\",\"square-miles\",\"square-us-feet\",\"square-meters\",\"square-kilometers\",\"acres\",\"ares\",\"hectares\"],S=[\"metric\",\"imperial\",\"inches\",\"feet\",\"yards\",\"miles\",\"nautical-miles\",\"us-feet\",\"meters\",\"kilometers\"];function w(e){return\"imperial\"===e||\"metric\"===e}function j(e){const s=y[e];if(s)return s;throw new Error(\"unknown measure\")}function M(e){return k[e].baseUnit}function P(e){return M(j(e))}function C(e,s=null){return s=s||j(e),k[s].baseUnit===e}function I(e,s,r){if(s===r)return e;const t=j(s);if(t!==j(r))throw new Error(\"incompatible units\");const i=C(s,t)?e:b(e,s,t);return C(r,t)?i:_(i,r,t)}function D(e,s,r){switch(r){case\"metric\":return E(e,s);case\"imperial\":return N(e,s);default:return r}}function x(e,s,r){switch(r){case\"metric\":return F(e,s);case\"imperial\":return O(e,s);default:return r}}function E(e,s){return I(e,s,\"meters\")<3e3?\"meters\":\"kilometers\"}function F(e,s){return I(e,s,\"meters\")<1e5?\"meters\":\"kilometers\"}function N(e,s){return I(e,s,\"feet\")<1e3?\"feet\":\"miles\"}function O(e,s){return I(e,s,\"feet\")<1e5?\"feet\":\"miles\"}function v(e,s){return I(e,s,\"square-meters\")<3e6?\"square-meters\":\"square-kilometers\"}function J(e,s){return I(e,s,\"square-feet\")<1e6?\"square-feet\":\"square-miles\"}function R(e,s,r){return I(e,s,\"meters\")/(r*Math.PI/180)}function K(e){return p.fromJSON(e.toLowerCase())||null}function A(e){return p.toJSON(e)||null}function T(e){if(e&&\"object\"==typeof e&&!a(e))return 1;const s=G(e);return s>1e5?1:s}function Y(e){return G(e)>=(e instanceof r?s(e).metersPerDegree:1e5)?\"meters\":L(e)}function G(e,s=t.metersPerDegree){return H(e,!0)||s}function H(e,s=!1){let r,t,a=null;if(null!=e&&(\"object\"==typeof e?(r=e.wkid,t=e.wkt):\"number\"==typeof e?r=e:\"string\"==typeof e&&(t=e)),r){if(u(r))return i.metersPerDegree;if(c(r))return n.metersPerDegree;a=d.values[d[r]],!a&&s&&q.has(r)&&(a=m)}else if(t)if(-1!==t.search(/^PROJCS/i)){const e=f.exec(t);e&&e[1]&&(a=parseFloat(e[1].split(\",\")[1]))}else if(-1!==t.search(/^GEOCCS/i)){const e=U.exec(t);e&&e[1]&&(a=parseFloat(e[1].split(\",\")[1]))}return a}function L(e){let s,r,t=null;if(null!=e&&(\"object\"==typeof e?(s=e.wkid,r=e.wkt):\"number\"==typeof e?s=e:\"string\"==typeof e&&(r=e)),s)t=d.units[d[s]];else if(r&&-1!==r.search(/^PROJCS/i)){let e=f.exec(r);e&&e[1]&&(e=/[\\\\\"\\\\']{1}([^\\\\\"\\\\']+)/.exec(e[1]),t=e&&e[1])}return t?K(t):null}function W(e){if(!e)return null;switch(L(e)){case\"feet\":case\"us-feet\":case\"clarke-feet\":case\"clarke-yards\":case\"clarke-links\":case\"sears-yards\":case\"sears-feet\":case\"sears-chains\":case\"benoit-1895-b-chains\":case\"indian-yards\":case\"indian-1937-yards\":case\"gold-coast-feet\":case\"sears-1922-truncated-chains\":return\"imperial\";case\"50-kilometers\":case\"150-kilometers\":case\"meters\":return\"metric\";case null:case void 0:return null}return null}const $={esriAcres:\"acres\",esriAres:\"ares\",esriHectares:\"hectares\",esriSquareCentimeters:\"square-centimeters\",esriSquareDecimeters:\"square-decimeters\",esriSquareFeet:\"square-feet\",esriSquareInches:\"square-inches\",esriSquareKilometers:\"square-kilometers\",esriSquareMeters:\"square-meters\",esriSquareMiles:\"square-miles\",esriSquareMillimeters:\"square-millimeters\",esriSquareUsFeet:\"square-us-feet\",esriSquareYards:\"square-yards\"},z={esriCentimeters:\"centimeters\",esriDecimeters:\"decimeters\",esriFeet:\"feet\",esriInches:\"inches\",esriKilometers:\"kilometers\",esriMeters:\"meters\",esriMiles:\"miles\",esriMillimeters:\"millimeters\",esriNauticalMiles:\"nautical-miles\",esriYards:\"yards\"},Q=e()($),V=e()(z),X=e()({...$,...z});export{Q as areaUnitsJSONMap,M as baseUnitForMeasure,P as baseUnitForUnit,I as convertUnit,W as getDefaultUnitSystem,H as getMetersPerUnit,G as getMetersPerUnitForSR,T as getMetersPerVerticalUnitForSR,L as getUnitString,Y as getVerticalUnitStringForSR,l as inchesPerMeter,C as isBaseUnit,w as isMeasurementSystem,R as lengthToDegrees,V as lengthUnitsJSONMap,j as measureForUnit,g as measurementAreaUnits,S as measurementLengthUnits,J as preferredImperialAreaUnit,N as preferredImperialLengthUnit,O as preferredImperialVerticalLengthUnit,D as preferredLengthUnit,v as preferredMetricAreaUnit,E as preferredMetricLengthUnit,F as preferredMetricVerticalLengthUnit,x as preferredVerticalLengthUnit,K as unitFromRESTJSON,A as unitToRESTJSON,X as unitsJSONMap};\n"]},"metadata":{},"sourceType":"module"}