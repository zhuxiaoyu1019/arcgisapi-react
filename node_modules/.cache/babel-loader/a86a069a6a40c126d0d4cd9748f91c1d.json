{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { Slice as e } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { OutputHighlight as i } from \"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";\nimport { RgbaFloatEncoding as o } from \"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";\nimport { glsl as t } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as a } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\n\nfunction r(r) {\n  const n = new a(),\n        d = 0 === r.output,\n        c = 1 === r.output,\n        s = 4 === r.output;\n  return n.extensions.add(\"GL_OES_standard_derivatives\"), n.include(e, r), n.attributes.add(\"position\", \"vec3\"), n.attributes.add(\"color\", \"vec3\"), n.vertex.uniforms.add(\"uModelViewMatrix\", \"mat4\").add(\"uProjectionMatrix\", \"mat4\").add(\"uScreenMinMaxSize\", \"vec2\").add(\"uPointScale\", \"vec2\").add(\"uClipMin\", \"vec3\").add(\"uClipMax\", \"vec3\"), c ? (n.vertex.uniforms.add(\"nearFar\", \"vec2\"), n.varyings.add(\"depth\", \"float\")) : 4 !== r.output && n.varyings.add(\"vColor\", \"vec3\"), n.vertex.code.add(t`\n    void main(void) {\n      // Move clipped points outside of clipspace\n      if (position.x < uClipMin.x || position.y < uClipMin.y || position.z < uClipMin.z ||\n        position.x > uClipMax.x || position.y > uClipMax.y || position.z > uClipMax.z) {\n        gl_Position = vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize = 0.0;\n        return;\n      }\n\n      if (rejectBySlice(position)) {\n        gl_Position = vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize = 0.0;\n        return;\n      }\n\n      // Position in camera space\n      vec4 camera = uModelViewMatrix * vec4(position, 1.0);\n\n      float pointSize = uPointScale.x;\n      vec4 position = uProjectionMatrix * camera;\n     ${r.drawScreenSize ? t`\n      float clampedScreenSize = pointSize;` : t`\n      float pointRadius = 0.5 * pointSize;\n      vec4 cameraOffset = camera + vec4(0.0, pointRadius, 0.0, 0.0);\n      vec4 positionOffset = uProjectionMatrix * cameraOffset;\n      float radius = abs(positionOffset.y - position.y);\n      float viewHeight = uPointScale.y;\n      // screen diameter = (2 * r / w) * (h / 2)\n      float screenPointSize = (radius / position.w) * viewHeight;\n      float clampedScreenSize = clamp(screenPointSize, uScreenMinMaxSize.x, uScreenMinMaxSize.y);\n      // Shift towards camera, to move rendered point out of terrain i.e. to\n      // the camera-facing end of the virtual point when considering it as a\n      // 3D sphere.\n      camera.xyz -= normalize(camera.xyz) * pointRadius * clampedScreenSize / screenPointSize;\n      position = uProjectionMatrix * camera;`}\n\n     gl_PointSize = clampedScreenSize;\n     gl_Position = position;\n\n     ${c ? t`depth = (-camera.z - nearFar[0]) / (nearFar[1] - nearFar[0]);` : \"\"}\n     ${d ? t`vColor = color;` : \"\"}\n    }\n  `), n.fragment.include(o, r), s && n.include(i), n.fragment.code.add(t`\n    void main(void) {\n      vec2 vOffset = gl_PointCoord - vec2(0.5, 0.5);\n      float r2 = dot(vOffset, vOffset);\n\n      if (r2 > 0.25) {\n        discard;\n      }\n      ${c ? t`gl_FragColor = float2rgba(depth);` : \"\"}\n      ${s ? t`outputHighlight();` : \"\"}\n      ${d ? t`gl_FragColor = vec4(vColor, 1.0);` : \"\"}\n    }\n  `), n;\n}\n\nvar n = Object.freeze({\n  __proto__: null,\n  build: r\n});\nexport { n as P, r as b };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/chunks/PointRenderer.glsl.js"],"names":["Slice","e","OutputHighlight","i","RgbaFloatEncoding","o","glsl","t","ShaderBuilder","a","r","n","d","output","c","s","extensions","add","include","attributes","vertex","uniforms","varyings","code","drawScreenSize","fragment","Object","freeze","__proto__","build","P","b"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{Slice as e}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{OutputHighlight as i}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{RgbaFloatEncoding as o}from\"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{glsl as t}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as a}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";function r(r){const n=new a,d=0===r.output,c=1===r.output,s=4===r.output;return n.extensions.add(\"GL_OES_standard_derivatives\"),n.include(e,r),n.attributes.add(\"position\",\"vec3\"),n.attributes.add(\"color\",\"vec3\"),n.vertex.uniforms.add(\"uModelViewMatrix\",\"mat4\").add(\"uProjectionMatrix\",\"mat4\").add(\"uScreenMinMaxSize\",\"vec2\").add(\"uPointScale\",\"vec2\").add(\"uClipMin\",\"vec3\").add(\"uClipMax\",\"vec3\"),c?(n.vertex.uniforms.add(\"nearFar\",\"vec2\"),n.varyings.add(\"depth\",\"float\")):4!==r.output&&n.varyings.add(\"vColor\",\"vec3\"),n.vertex.code.add(t`\n    void main(void) {\n      // Move clipped points outside of clipspace\n      if (position.x < uClipMin.x || position.y < uClipMin.y || position.z < uClipMin.z ||\n        position.x > uClipMax.x || position.y > uClipMax.y || position.z > uClipMax.z) {\n        gl_Position = vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize = 0.0;\n        return;\n      }\n\n      if (rejectBySlice(position)) {\n        gl_Position = vec4(0.0,0.0,0.0,2.0);\n        gl_PointSize = 0.0;\n        return;\n      }\n\n      // Position in camera space\n      vec4 camera = uModelViewMatrix * vec4(position, 1.0);\n\n      float pointSize = uPointScale.x;\n      vec4 position = uProjectionMatrix * camera;\n     ${r.drawScreenSize?t`\n      float clampedScreenSize = pointSize;`:t`\n      float pointRadius = 0.5 * pointSize;\n      vec4 cameraOffset = camera + vec4(0.0, pointRadius, 0.0, 0.0);\n      vec4 positionOffset = uProjectionMatrix * cameraOffset;\n      float radius = abs(positionOffset.y - position.y);\n      float viewHeight = uPointScale.y;\n      // screen diameter = (2 * r / w) * (h / 2)\n      float screenPointSize = (radius / position.w) * viewHeight;\n      float clampedScreenSize = clamp(screenPointSize, uScreenMinMaxSize.x, uScreenMinMaxSize.y);\n      // Shift towards camera, to move rendered point out of terrain i.e. to\n      // the camera-facing end of the virtual point when considering it as a\n      // 3D sphere.\n      camera.xyz -= normalize(camera.xyz) * pointRadius * clampedScreenSize / screenPointSize;\n      position = uProjectionMatrix * camera;`}\n\n     gl_PointSize = clampedScreenSize;\n     gl_Position = position;\n\n     ${c?t`depth = (-camera.z - nearFar[0]) / (nearFar[1] - nearFar[0]);`:\"\"}\n     ${d?t`vColor = color;`:\"\"}\n    }\n  `),n.fragment.include(o,r),s&&n.include(i),n.fragment.code.add(t`\n    void main(void) {\n      vec2 vOffset = gl_PointCoord - vec2(0.5, 0.5);\n      float r2 = dot(vOffset, vOffset);\n\n      if (r2 > 0.25) {\n        discard;\n      }\n      ${c?t`gl_FragColor = float2rgba(depth);`:\"\"}\n      ${s?t`outputHighlight();`:\"\"}\n      ${d?t`gl_FragColor = vec4(vColor, 1.0);`:\"\"}\n    }\n  `),n}var n=Object.freeze({__proto__:null,build:r});export{n as P,r as b};\n"]},"metadata":{},"sourceType":"module"}