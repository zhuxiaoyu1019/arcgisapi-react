{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Map from '@arcgis/core/Map';\nimport Color from \"@arcgis/core/Color\";\nimport SceneView from \"@arcgis/core/views/SceneView\";\nimport SceneLayer from '@arcgis/core/layers/SceneLayer';\nimport MeshSymbol3D from '@arcgis/core/symbols/MeshSymbol3D';\nimport SolidEdges3D from '@arcgis/core/symbols/edges/SolidEdges3D';\nimport SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer';\nimport FillSymbol3DLayer from '@arcgis/core/symbols/FillSymbol3DLayer';\nexport default function ArcGISMap(url, basemap, ref) {\n  _s();\n\n  const buildings = new SceneLayer({\n    url,\n    opacity: 1,\n    popupEnabled: false,\n    renderer: new SimpleRenderer({\n      symbol: new MeshSymbol3D({\n        symbolLayers: [new FillSymbol3DLayer({\n          material: {\n            color: new Color([200, 200, 200]),\n            colorMixMode: \"replace\"\n          },\n          edges: new SolidEdges3D({\n            color: new Color([100, 100, 100, 0.5])\n          })\n        })]\n      })\n    })\n  });\n  const map = new Map({\n    basemap,\n    layers: [buildings]\n  });\n  const view = new SceneView({\n    container: ref,\n    map,\n    qualityProfile: \"high\",\n    camera: {\n      position: [-73.98564294432742, 40.748586782824624, 601.67648],\n      heading: 330.47,\n      tilt: 64.02\n    },\n    highlightOptions: {\n      color: new Color([255, 153, 0]),\n      fillOpacity: 0.6,\n      haloOpacity: 0\n    }\n  });\n  useEffect(() => {\n    view.when().then(async () => {\n      const buildingsLV = await view.whenLayerView(buildings);\n      let highlight = null;\n      view.on(\"pointer-move\", promiseUtils.debounce(async e => {\n        const ht = await view.hitTest(e, {\n          include: [buildings]\n        });\n\n        if (highlight) {\n          highlight.remove();\n          highlight = null;\n        }\n\n        if (ht.results.length > 0) {\n          // select the first feature (closest to the camera)\n          const graphic = ht.results[0].graphic;\n\n          if (graphic) {\n            highlight = buildingsLV.highlight(graphic);\n          }\n        }\n      }));\n      view.on(\"pointer-leave\", () => {\n        if (highlight) {\n          highlight.remove();\n          highlight = null;\n        }\n      });\n    });\n    return () => {\n      cleanup;\n    };\n  }, [input]);\n  return view;\n}\n\n_s(ArcGISMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ArcGISMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArcGISMap\");","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/untils/ArcGISMap.js"],"names":["React","useEffect","Map","Color","SceneView","SceneLayer","MeshSymbol3D","SolidEdges3D","SimpleRenderer","FillSymbol3DLayer","ArcGISMap","url","basemap","ref","buildings","opacity","popupEnabled","renderer","symbol","symbolLayers","material","color","colorMixMode","edges","map","layers","view","container","qualityProfile","camera","position","heading","tilt","highlightOptions","fillOpacity","haloOpacity","when","then","buildingsLV","whenLayerView","highlight","on","promiseUtils","debounce","e","ht","hitTest","include","remove","results","length","graphic","cleanup","input"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport Map from '@arcgis/core/Map'\nimport Color from \"@arcgis/core/Color\"\nimport SceneView from \"@arcgis/core/views/SceneView\"\nimport SceneLayer from '@arcgis/core/layers/SceneLayer'\nimport MeshSymbol3D from '@arcgis/core/symbols/MeshSymbol3D'\nimport SolidEdges3D from '@arcgis/core/symbols/edges/SolidEdges3D'\nimport SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer'\nimport FillSymbol3DLayer from '@arcgis/core/symbols/FillSymbol3DLayer'\n\nexport default function ArcGISMap(url, basemap, ref) {\n    const buildings = new SceneLayer({\n        url,\n        opacity: 1,\n        popupEnabled: false,\n        renderer: new SimpleRenderer({\n            symbol: new MeshSymbol3D({\n                symbolLayers: [\n                    new FillSymbol3DLayer({\n                        material: {\n                            color: new Color([200, 200, 200]),\n                            colorMixMode: \"replace\"\n                        },\n                        edges: new SolidEdges3D({\n                            color: new Color([100, 100, 100, 0.5])\n                        })\n                    })\n                ]\n            })\n        })\n    });\n\n    const map = new Map({\n        basemap,\n        layers: [buildings]\n    });\n\n    const view = new SceneView({\n        container: ref,\n        map,\n        qualityProfile: \"high\",\n        camera: {\n            position: [-73.98564294432742, 40.748586782824624, 601.67648],\n            heading: 330.47,\n            tilt: 64.02\n        },\n        highlightOptions: {\n            color: new Color([255, 153, 0]),\n            fillOpacity: 0.6,\n            haloOpacity: 0\n        }\n    })\n\n    useEffect(() => {\n        view.when().then(async () => {\n            const buildingsLV = await view.whenLayerView(buildings);\n            let highlight = null;\n            view.on(\n                \"pointer-move\",\n                promiseUtils.debounce(async (e) => {\n                    const ht = await view.hitTest(e, {\n                        include: [buildings]\n                    });\n                    if (highlight) {\n                        highlight.remove();\n                        highlight = null;\n                    }\n                    if (ht.results.length > 0) {\n                        // select the first feature (closest to the camera)\n                        const graphic = ht.results[0].graphic;\n                        if (graphic) {\n                            highlight = buildingsLV.highlight(graphic);\n                        }\n                    }\n                })\n            );\n            view.on(\"pointer-leave\", () => {\n                if (highlight) {\n                    highlight.remove();\n                    highlight = null;\n                }\n            });\n        });\n        return () => {\n            cleanup\n        }\n    }, [input])\n\n    return view\n}"]},"metadata":{},"sourceType":"module"}