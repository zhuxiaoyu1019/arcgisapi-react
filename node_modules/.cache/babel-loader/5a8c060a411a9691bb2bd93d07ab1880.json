{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport t from \"../../../../../core/has.js\";\n\nclass e {\n  constructor(t, r) {\n    if (!t) throw new Error(\"GLB requires a JSON gltf chunk\");\n    this.length = e.HEADER_SIZE, this.length += e.CHUNK_HEADER_SIZE;\n    const i = this.textToArrayBuffer(t);\n    if (this.length += this.alignTo(i.byteLength, 4), r && (this.length += e.CHUNK_HEADER_SIZE, this.length += r.byteLength, r.byteLength % 4)) throw new Error(\"Expected BIN chunk length to be divisible by 4 at this point\");\n    this.buffer = new ArrayBuffer(this.length), this.outView = new DataView(this.buffer), this.writeHeader();\n    const n = this.writeChunk(i, 12, 1313821514, 32);\n    r && this.writeChunk(r, n, 5130562);\n  }\n\n  writeHeader() {\n    this.outView.setUint32(0, e.MAGIC, !0), this.outView.setUint32(4, e.VERSION, !0), this.outView.setUint32(8, this.length, !0);\n  }\n\n  writeChunk(t, e, r, i = 0) {\n    const n = this.alignTo(t.byteLength, 4);\n\n    for (this.outView.setUint32(e, n, !0), this.outView.setUint32(e += 4, r, !0), this.writeArrayBuffer(this.outView.buffer, t, e += 4, 0, t.byteLength), e += t.byteLength; e % 4;) i && this.outView.setUint8(e, i), e++;\n\n    return e;\n  }\n\n  writeArrayBuffer(t, e, r, i, n) {\n    new Uint8Array(t, r, n).set(new Uint8Array(e, i, n), 0);\n  }\n\n  textToArrayBuffer(e) {\n    if (t(\"esri-text-encoder\")) return new TextEncoder().encode(e).buffer;\n    const r = new Uint8Array(e.length);\n\n    for (let t = 0; t < r.length; ++t) r[t] = e.charCodeAt(t);\n\n    return r.buffer;\n  }\n\n  alignTo(t, e) {\n    return e * Math.ceil(t / e);\n  }\n\n}\n\ne.HEADER_SIZE = 12, e.CHUNK_HEADER_SIZE = 8, e.MAGIC = 1179937895, e.VERSION = 2;\nexport { e as GLB };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/glb.js"],"names":["t","e","constructor","r","Error","length","HEADER_SIZE","CHUNK_HEADER_SIZE","i","textToArrayBuffer","alignTo","byteLength","buffer","ArrayBuffer","outView","DataView","writeHeader","n","writeChunk","setUint32","MAGIC","VERSION","writeArrayBuffer","setUint8","Uint8Array","set","TextEncoder","encode","charCodeAt","Math","ceil","GLB"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport t from\"../../../../../core/has.js\";class e{constructor(t,r){if(!t)throw new Error(\"GLB requires a JSON gltf chunk\");this.length=e.HEADER_SIZE,this.length+=e.CHUNK_HEADER_SIZE;const i=this.textToArrayBuffer(t);if(this.length+=this.alignTo(i.byteLength,4),r&&(this.length+=e.CHUNK_HEADER_SIZE,this.length+=r.byteLength,r.byteLength%4))throw new Error(\"Expected BIN chunk length to be divisible by 4 at this point\");this.buffer=new ArrayBuffer(this.length),this.outView=new DataView(this.buffer),this.writeHeader();const n=this.writeChunk(i,12,1313821514,32);r&&this.writeChunk(r,n,5130562)}writeHeader(){this.outView.setUint32(0,e.MAGIC,!0),this.outView.setUint32(4,e.VERSION,!0),this.outView.setUint32(8,this.length,!0)}writeChunk(t,e,r,i=0){const n=this.alignTo(t.byteLength,4);for(this.outView.setUint32(e,n,!0),this.outView.setUint32(e+=4,r,!0),this.writeArrayBuffer(this.outView.buffer,t,e+=4,0,t.byteLength),e+=t.byteLength;e%4;)i&&this.outView.setUint8(e,i),e++;return e}writeArrayBuffer(t,e,r,i,n){new Uint8Array(t,r,n).set(new Uint8Array(e,i,n),0)}textToArrayBuffer(e){if(t(\"esri-text-encoder\"))return(new TextEncoder).encode(e).buffer;const r=new Uint8Array(e.length);for(let t=0;t<r.length;++t)r[t]=e.charCodeAt(t);return r.buffer}alignTo(t,e){return e*Math.ceil(t/e)}}e.HEADER_SIZE=12,e.CHUNK_HEADER_SIZE=8,e.MAGIC=1179937895,e.VERSION=2;export{e as GLB};\n"]},"metadata":{},"sourceType":"module"}