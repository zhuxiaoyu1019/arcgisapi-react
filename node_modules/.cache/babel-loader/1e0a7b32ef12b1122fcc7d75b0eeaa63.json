{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nclass t {\n  constructor(t) {\n    this.data = t, this.offset4 = 0, this.dataUint32 = new Uint32Array(this.data, 0, Math.floor(this.data.byteLength / 4));\n  }\n\n  readUint32() {\n    const t = this.offset4;\n    return this.offset4 += 1, this.dataUint32[t];\n  }\n\n  readUint8Array(t) {\n    const s = 4 * this.offset4;\n    return this.offset4 += t / 4, new Uint8Array(this.data, s, t);\n  }\n\n  remainingBytes() {\n    return this.data.byteLength - 4 * this.offset4;\n  }\n\n}\n\nexport { t as BinaryStreamReader };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/views/3d/glTF/internal/BinaryStreamReader.js"],"names":["t","constructor","data","offset4","dataUint32","Uint32Array","Math","floor","byteLength","readUint32","readUint8Array","s","Uint8Array","remainingBytes","BinaryStreamReader"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,CAAN,CAAO;AAACC,EAAAA,WAAW,CAACD,CAAD,EAAG;AAAC,SAAKE,IAAL,GAAUF,CAAV,EAAY,KAAKG,OAAL,GAAa,CAAzB,EAA2B,KAAKC,UAAL,GAAgB,IAAIC,WAAJ,CAAgB,KAAKH,IAArB,EAA0B,CAA1B,EAA4BI,IAAI,CAACC,KAAL,CAAW,KAAKL,IAAL,CAAUM,UAAV,GAAqB,CAAhC,CAA5B,CAA3C;AAA2G;;AAAAC,EAAAA,UAAU,GAAE;AAAC,UAAMT,CAAC,GAAC,KAAKG,OAAb;AAAqB,WAAO,KAAKA,OAAL,IAAc,CAAd,EAAgB,KAAKC,UAAL,CAAgBJ,CAAhB,CAAvB;AAA0C;;AAAAU,EAAAA,cAAc,CAACV,CAAD,EAAG;AAAC,UAAMW,CAAC,GAAC,IAAE,KAAKR,OAAf;AAAuB,WAAO,KAAKA,OAAL,IAAcH,CAAC,GAAC,CAAhB,EAAkB,IAAIY,UAAJ,CAAe,KAAKV,IAApB,EAAyBS,CAAzB,EAA2BX,CAA3B,CAAzB;AAAuD;;AAAAa,EAAAA,cAAc,GAAE;AAAC,WAAO,KAAKX,IAAL,CAAUM,UAAV,GAAqB,IAAE,KAAKL,OAAnC;AAA2C;;AAAnW;;AAAoW,SAAOH,CAAC,IAAIc,kBAAZ","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this.data=t,this.offset4=0,this.dataUint32=new Uint32Array(this.data,0,Math.floor(this.data.byteLength/4))}readUint32(){const t=this.offset4;return this.offset4+=1,this.dataUint32[t]}readUint8Array(t){const s=4*this.offset4;return this.offset4+=t/4,new Uint8Array(this.data,s,t)}remainingBytes(){return this.data.byteLength-4*this.offset4}}export{t as BinaryStreamReader};\n"]},"metadata":{},"sourceType":"module"}