{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { glsl as e } from \"../core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as r } from \"../core/shaderModules/ShaderBuilder.js\";\n\nfunction o() {\n  const o = new r();\n  return o.attributes.add(\"position\", \"vec2\"), o.vertex.uniforms.add(\"proj\", \"mat4\"), o.vertex.uniforms.add(\"drawPosition\", \"vec4\"), o.varyings.add(\"vUV\", \"vec2\"), o.vertex.code.add(e`void main(void) {\nvUV = position;\ngl_Position = vec4(drawPosition.xy + vec2(position - 0.5) * drawPosition.zw, 0.0, 1.0);\n}`), o.fragment.uniforms.add(\"textureInput\", \"sampler2D\"), o.fragment.uniforms.add(\"textureMask\", \"sampler2D\"), o.fragment.uniforms.add(\"textureOverlay\", \"sampler2D\"), o.fragment.uniforms.add(\"maskEnabled\", \"bool\"), o.fragment.uniforms.add(\"overlayEnabled\", \"bool\"), o.fragment.code.add(e`const float barrelFactor = 1.1;\nvec2 barrel(vec2 uv) {\nvec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nfloat theta = atan(uvn.y, uvn.x);\nfloat r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main() {\nfloat mask = maskEnabled ? texture2D(textureMask, vUV).a : 1.0;\nvec4 inputColor = texture2D(textureInput, barrel(vUV)) * mask;\nvec4 overlayColor = overlayEnabled ? texture2D(textureOverlay, vUV) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * inputColor;\n}`), o;\n}\n\nexport { o as build };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/views/3d/webgl-engine/shaders/Magnifier.glsl.js"],"names":["glsl","e","ShaderBuilder","r","o","attributes","add","vertex","uniforms","varyings","code","fragment","build"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,IAAI,IAAIC,CAAf,QAAqB,qCAArB;AAA2D,SAAOC,aAAa,IAAIC,CAAxB,QAA8B,wCAA9B;;AAAuE,SAASC,CAAT,GAAY;AAAC,QAAMA,CAAC,GAAC,IAAID,CAAJ,EAAR;AAAc,SAAOC,CAAC,CAACC,UAAF,CAAaC,GAAb,CAAiB,UAAjB,EAA4B,MAA5B,GAAoCF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,GAAlB,CAAsB,MAAtB,EAA6B,MAA7B,CAApC,EAAyEF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,GAAlB,CAAsB,cAAtB,EAAqC,MAArC,CAAzE,EAAsHF,CAAC,CAACK,QAAF,CAAWH,GAAX,CAAe,KAAf,EAAqB,MAArB,CAAtH,EAAmJF,CAAC,CAACG,MAAF,CAASG,IAAT,CAAcJ,GAAd,CAAkBL,CAAE;AAC3U;AACA;AACA,EAHuT,CAAnJ,EAGhKG,CAAC,CAACO,QAAF,CAAWH,QAAX,CAAoBF,GAApB,CAAwB,cAAxB,EAAuC,WAAvC,CAHgK,EAG5GF,CAAC,CAACO,QAAF,CAAWH,QAAX,CAAoBF,GAApB,CAAwB,aAAxB,EAAsC,WAAtC,CAH4G,EAGzDF,CAAC,CAACO,QAAF,CAAWH,QAAX,CAAoBF,GAApB,CAAwB,gBAAxB,EAAyC,WAAzC,CAHyD,EAGHF,CAAC,CAACO,QAAF,CAAWH,QAAX,CAAoBF,GAApB,CAAwB,aAAxB,EAAsC,MAAtC,CAHG,EAG2CF,CAAC,CAACO,QAAF,CAAWH,QAAX,CAAoBF,GAApB,CAAwB,gBAAxB,EAAyC,MAAzC,CAH3C,EAG4FF,CAAC,CAACO,QAAF,CAAWD,IAAX,CAAgBJ,GAAhB,CAAoBL,CAAE;AACtR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAfgQ,CAH5F,EAkBhKG,CAlByJ;AAkBvJ;;AAAA,SAAOA,CAAC,IAAIQ,KAAZ","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../core/shaderModules/interfaces.js\";import{ShaderBuilder as r}from\"../core/shaderModules/ShaderBuilder.js\";function o(){const o=new r;return o.attributes.add(\"position\",\"vec2\"),o.vertex.uniforms.add(\"proj\",\"mat4\"),o.vertex.uniforms.add(\"drawPosition\",\"vec4\"),o.varyings.add(\"vUV\",\"vec2\"),o.vertex.code.add(e`void main(void) {\nvUV = position;\ngl_Position = vec4(drawPosition.xy + vec2(position - 0.5) * drawPosition.zw, 0.0, 1.0);\n}`),o.fragment.uniforms.add(\"textureInput\",\"sampler2D\"),o.fragment.uniforms.add(\"textureMask\",\"sampler2D\"),o.fragment.uniforms.add(\"textureOverlay\",\"sampler2D\"),o.fragment.uniforms.add(\"maskEnabled\",\"bool\"),o.fragment.uniforms.add(\"overlayEnabled\",\"bool\"),o.fragment.code.add(e`const float barrelFactor = 1.1;\nvec2 barrel(vec2 uv) {\nvec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nfloat theta = atan(uvn.y, uvn.x);\nfloat r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main() {\nfloat mask = maskEnabled ? texture2D(textureMask, vUV).a : 1.0;\nvec4 inputColor = texture2D(textureInput, barrel(vUV)) * mask;\nvec4 overlayColor = overlayEnabled ? texture2D(textureOverlay, vUV) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * inputColor;\n}`),o}export{o as build};\n"]},"metadata":{},"sourceType":"module"}