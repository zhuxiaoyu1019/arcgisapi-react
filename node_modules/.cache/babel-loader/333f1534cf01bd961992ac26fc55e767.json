{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { result as e } from \"../../core/asyncUtils.js\";\nimport t from \"../../core/Error.js\";\nimport { isSome as i } from \"../../core/maybe.js\";\nimport { whenOrAbort as o, throwIfAbortError as s, eachAlways as l } from \"../../core/promiseUtils.js\";\nimport { getMetersPerUnitForSR as n } from \"../../core/unitUtils.js\";\nimport a from \"../../geometry/Multipoint.js\";\nimport r from \"../../geometry/Point.js\";\nimport c from \"../../geometry/Polyline.js\";\nimport { initializeProjection as u, project as h } from \"../../geometry/projection.js\";\nimport { fromExtent as p, create as m, contains as f } from \"../../geometry/support/aaBoundingRect.js\";\nimport { MultiTileElevationSampler as d } from \"./ElevationSampler.js\";\nimport { ElevationTile as y } from \"./ElevationTile.js\";\n\nclass T {\n  async queryAll(e, i, o) {\n    if (!(e = o && o.ignoreInvisibleLayers ? e.filter(e => e.visible) : e.slice()).length) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require at least one elevation layer to fetch tiles from\");\n    const s = v.fromGeometry(i);\n    let l = !1;\n    o && o.returnSampleInfo || (l = !0);\n    const n = { ...E,\n      ...o,\n      returnSampleInfo: !0\n    },\n          a = await this.query(e[e.length - 1], s, n),\n          r = await this._queryAllContinue(e, a, n);\n    return r.geometry = r.geometry.export(), l && delete r.sampleInfo, r;\n  }\n\n  async query(e, i, o) {\n    if (!e) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require an elevation layer to fetch tiles from\");\n    if (!i || !(i instanceof v) && \"point\" !== i.type && \"multipoint\" !== i.type && \"polyline\" !== i.type) throw new t(\"elevation-query:invalid-geometry\", \"Only point, polyline and multipoint geometries can be used to query elevation\");\n    const s = { ...E,\n      ...o\n    },\n          l = new g(e, i.spatialReference, s),\n          n = s.signal;\n    return await e.load({\n      signal: n\n    }), await this._createGeometryDescriptor(l, i, n), await this._selectTiles(l, n), await this._populateElevationTiles(l, n), this._sampleGeometryWithElevation(l), this._createQueryResult(l, n);\n  }\n\n  async createSampler(e, i, o) {\n    if (!e) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require an elevation layer to fetch tiles from\");\n    if (!i || \"extent\" !== i.type) throw new t(\"elevation-query:invalid-extent\", \"Invalid or undefined extent\");\n    const s = { ...E,\n      ...o\n    };\n    return this._createSampler(e, i, s);\n  }\n\n  async createSamplerAll(e, i, o) {\n    if (!(e = o && o.ignoreInvisibleLayers ? e.filter(e => e.visible) : e.slice()).length) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require at least one elevation layer to fetch tiles from\");\n    if (!i || \"extent\" !== i.type) throw new t(\"elevation-query:invalid-extent\", \"Invalid or undefined extent\");\n    const s = { ...E,\n      ...o,\n      returnSampleInfo: !0\n    },\n          l = await this._createSampler(e[e.length - 1], i, s);\n    return this._createSamplerAllContinue(e, i, l, s);\n  }\n\n  async _createSampler(e, t, i, o) {\n    const s = i.signal;\n    await e.load({\n      signal: s\n    });\n    const l = t.spatialReference,\n          n = e.tileInfo.spatialReference;\n    l.equals(n) || (await u([{\n      source: l,\n      dest: n\n    }], {\n      signal: s\n    }), t = h(t, n));\n    const a = new w(e, t, i, o);\n    return await this._selectTiles(a, s), await this._populateElevationTiles(a, s), new d(a.elevationTiles, a.layer.tileInfo, a.options.noDataValue);\n  }\n\n  async _createSamplerAllContinue(e, t, i, o) {\n    if (e.pop(), !e.length) return i;\n    const s = i.samplers.map(e => p(e.extent)),\n          l = await this._createSampler(e[e.length - 1], t, o, s);\n    if (0 === l.samplers.length) return i;\n    const n = i.samplers.concat(l.samplers),\n          a = new d(n, o.noDataValue);\n    return this._createSamplerAllContinue(e, t, a, o);\n  }\n\n  async _queryAllContinue(e, t, i) {\n    const o = e.pop(),\n          s = t.geometry.coordinates,\n          l = [],\n          n = [];\n\n    for (let c = 0; c < s.length; c++) {\n      const i = t.sampleInfo[c];\n      i.demResolution >= 0 ? i.source || (i.source = o) : e.length && (l.push(s[c]), n.push(c));\n    }\n\n    if (!e.length || 0 === l.length) return t;\n    const a = t.geometry.clone(l),\n          r = await this.query(e[e.length - 1], a, i);\n    return n.forEach((e, i) => {\n      s[e].z = r.geometry.coordinates[i].z, t.sampleInfo[e].demResolution = r.sampleInfo[i].demResolution;\n    }), this._queryAllContinue(e, t, i);\n  }\n\n  async _createQueryResult(e, t) {\n    const i = {\n      geometry: (await e.geometry.project(e.outSpatialReference, t)).export(),\n      noDataValue: e.options.noDataValue\n    };\n    return e.options.returnSampleInfo && (i.sampleInfo = this._extractSampleInfo(e)), e.geometry.coordinates.forEach(e => {\n      e.tile = null, e.elevationTile = null;\n    }), i;\n  }\n\n  async _createGeometryDescriptor(e, i, o) {\n    let s;\n    const l = e.layer.tileInfo.spatialReference;\n    if (i instanceof v ? s = await i.project(l, o) : (await u([{\n      source: i.spatialReference,\n      dest: l\n    }], {\n      signal: o\n    }), s = h(i, l)), !s) throw new t(\"elevation-query:spatial-reference-mismatch\", `Cannot query elevation in '${i.spatialReference.wkid}' on an elevation service in '${l.wkid}'`);\n    e.geometry = v.fromGeometry(s);\n  }\n\n  async _selectTiles(e, i) {\n    const o = e.options.demResolution;\n    if (\"geometry\" === e.type && this._preselectOutsideLayerExtent(e), \"number\" == typeof o) this._selectTilesClosestResolution(e);else if (\"finest-contiguous\" === o) await this._selectTilesFinestContiguous(e, i);else {\n      if (\"auto\" !== o) throw new t(\"elevation-query:invalid-dem-resolution\", `Invalid dem resolution value '${o}', expected a number, \"finest-contiguous\" or \"auto\"`);\n      await this._selectTilesAuto(e, i);\n    }\n  }\n\n  _preselectOutsideLayerExtent(e) {\n    const t = new y(null);\n    t.sample = () => e.options.noDataValue, e.outsideExtentTile = t;\n    const i = e.layer.fullExtent;\n    e.geometry.coordinates.forEach(e => {\n      const o = e.x,\n            s = e.y;\n      (o < i.xmin || o > i.xmax || s < i.ymin || s > i.ymax) && (e.elevationTile = t);\n    });\n  }\n\n  _selectTilesClosestResolution(e) {\n    const t = e.layer.tileInfo,\n          i = this._findNearestDemResolutionLODIndex(t, e.options.demResolution);\n\n    e.selectTilesAtLOD(i);\n  }\n\n  _findNearestDemResolutionLODIndex(e, t) {\n    const i = t / n(e.spatialReference);\n    let o = e.lods[0],\n        s = 0;\n\n    for (let l = 1; l < e.lods.length; l++) {\n      const t = e.lods[l];\n      Math.abs(t.resolution - i) < Math.abs(o.resolution - i) && (o = t, s = l);\n    }\n\n    return s;\n  }\n\n  async _selectTilesFinestContiguous(e, t) {\n    const i = _(e.layer.tileInfo, e.options.minDemResolution);\n\n    await this._selectTilesFinestContiguousAt(e, i, t);\n  }\n\n  async _selectTilesFinestContiguousAt(e, i, l) {\n    const n = e.layer;\n    if (e.selectTilesAtLOD(i), i < 0) return;\n    const a = n.tilemapCache,\n          r = e.getTilesToFetch();\n\n    try {\n      if (a) await o(Promise.all(r.map(e => a.fetchAvailability(e.level, e.row, e.col, {\n        signal: l\n      }))), l);else if (await this._populateElevationTiles(e, l), !e.allElevationTilesFetched()) throw e.clearElevationTiles(), new t(\"elevation-query:has-unavailable-tiles\");\n    } catch (c) {\n      s(c), await this._selectTilesFinestContiguousAt(e, i - 1, l);\n    }\n  }\n\n  async _populateElevationTiles(e, t) {\n    const s = e.getTilesToFetch(),\n          n = {},\n          a = e.options.cache,\n          r = e.options.noDataValue,\n          c = s.map(async o => {\n      const s = `${e.layer.uid}:${o.id}:${r}`,\n            l = i(a) ? a.get(s) : null,\n            c = i(l) ? l : await e.layer.fetchTile(o.level, o.row, o.col, {\n        noDataValue: r,\n        signal: t\n      });\n      i(a) && a.put(s, c), n[o.id] = new y(o, c);\n    });\n    await o(l(c), t), e.populateElevationTiles(n);\n  }\n\n  async _selectTilesAuto(t, i) {\n    this._selectTilesAutoFinest(t), this._reduceTilesForMaximumRequests(t);\n    const l = t.layer.tilemapCache;\n    if (!l) return this._selectTilesAutoPrefetchUpsample(t, i);\n    const n = t.getTilesToFetch(),\n          a = {},\n          r = n.map(async t => {\n      const o = {\n        id: null,\n        level: 0,\n        row: 0,\n        col: 0,\n        extent: m()\n      },\n            n = await e(l.fetchAvailabilityUpsample(t.level, t.row, t.col, o, {\n        signal: i\n      }));\n      !1 === n.ok ? s(n.error) : a[t.id] = o;\n    });\n    await o(Promise.all(r), i), t.remapTiles(a);\n  }\n\n  _reduceTilesForMaximumRequests(e) {\n    const t = e.layer.tileInfo;\n    let i = 0;\n\n    const o = {},\n          s = e => {\n      e.id in o ? o[e.id]++ : (o[e.id] = 1, i++);\n    },\n          l = e => {\n      const t = o[e.id];\n      1 === t ? (delete o[e.id], i--) : o[e.id] = t - 1;\n    };\n\n    e.forEachTileToFetch(s, l);\n    let n = !0;\n\n    for (; n && (n = !1, e.forEachTileToFetch(o => {\n      i <= e.options.maximumAutoTileRequests || (l(o), t.upsampleTile(o) && (n = !0), s(o));\n    }, l), n););\n  }\n\n  _selectTilesAutoFinest(e) {\n    const t = _(e.layer.tileInfo, e.options.minDemResolution);\n\n    e.selectTilesAtLOD(t, e.options.maximumAutoTileRequests);\n  }\n\n  async _selectTilesAutoPrefetchUpsample(e, t) {\n    const i = e.layer.tileInfo;\n    await this._populateElevationTiles(e, t);\n    let o = !1;\n    e.forEachTileToFetch((e, t) => {\n      i.upsampleTile(e) ? o = !0 : t();\n    }), o && (await this._selectTilesAutoPrefetchUpsample(e, t));\n  }\n\n  _sampleGeometryWithElevation(e) {\n    e.geometry.coordinates.forEach(t => {\n      const i = t.elevationTile;\n      let o = e.options.noDataValue;\n\n      if (i) {\n        const e = i.sample(t.x, t.y);\n        void 0 !== e ? o = e : t.elevationTile = null;\n      }\n\n      t.z = o;\n    });\n  }\n\n  _extractSampleInfo(e) {\n    const t = e.layer.tileInfo,\n          i = n(t.spatialReference);\n    return e.geometry.coordinates.map(o => {\n      let s = -1;\n\n      if (o.elevationTile && o.elevationTile !== e.outsideExtentTile) {\n        s = t.lodAt(o.elevationTile.tile.level).resolution * i;\n      }\n\n      return {\n        demResolution: s\n      };\n    });\n  }\n\n}\n\nclass v {\n  export() {\n    return this._exporter(this.coordinates, this.spatialReference);\n  }\n\n  clone(e) {\n    const t = new v();\n    return t.geometry = this.geometry, t.spatialReference = this.spatialReference, t.coordinates = e || this.coordinates.map(e => this._cloneCoordinate(e)), t._exporter = this._exporter, t;\n  }\n\n  async project(e, t) {\n    if (this.spatialReference.equals(e)) return this.clone();\n    await u([{\n      source: this.spatialReference,\n      dest: e\n    }], {\n      signal: t\n    });\n    const i = new a({\n      spatialReference: this.spatialReference,\n      points: this.coordinates.map(e => [e.x, e.y])\n    }),\n          o = h(i, e);\n    if (!o) return null;\n    const s = this.coordinates.map((e, t) => {\n      const i = this._cloneCoordinate(e),\n            s = o.points[t];\n\n      return i.x = s[0], i.y = s[1], i;\n    }),\n          l = this.clone(s);\n    return l.spatialReference = e, l;\n  }\n\n  _cloneCoordinate(e) {\n    return {\n      x: e.x,\n      y: e.y,\n      z: e.z,\n      m: e.m,\n      tile: null,\n      elevationTile: null\n    };\n  }\n\n  static fromGeometry(e) {\n    const t = new v();\n    if (t.geometry = e, t.spatialReference = e.spatialReference, e instanceof v) t.coordinates = e.coordinates.map(e => t._cloneCoordinate(e)), t._exporter = (t, i) => {\n      const o = e.clone(t);\n      return o.spatialReference = i, o;\n    };else switch (e.type) {\n      case \"point\":\n        {\n          const i = e,\n                {\n            hasZ: o,\n            hasM: s\n          } = i;\n          t.coordinates = o && s ? [{\n            x: i.x,\n            y: i.y,\n            z: i.z,\n            m: i.m\n          }] : o ? [{\n            x: i.x,\n            y: i.y,\n            z: i.z\n          }] : s ? [{\n            x: i.x,\n            y: i.y,\n            m: i.m\n          }] : [{\n            x: i.x,\n            y: i.y\n          }], t._exporter = (t, i) => e.hasM ? new r(t[0].x, t[0].y, t[0].z, t[0].m, i) : new r(t[0].x, t[0].y, t[0].z, i);\n          break;\n        }\n\n      case \"multipoint\":\n        {\n          const i = e,\n                {\n            hasZ: o,\n            hasM: s\n          } = i;\n          t.coordinates = o && s ? i.points.map(e => ({\n            x: e[0],\n            y: e[1],\n            z: e[2],\n            m: e[3]\n          })) : o ? i.points.map(e => ({\n            x: e[0],\n            y: e[1],\n            z: e[2]\n          })) : s ? i.points.map(e => ({\n            x: e[0],\n            y: e[1],\n            m: e[2]\n          })) : i.points.map(e => ({\n            x: e[0],\n            y: e[1]\n          })), t._exporter = (t, i) => e.hasM ? new a({\n            points: t.map(e => [e.x, e.y, e.z, e.m]),\n            hasZ: !0,\n            hasM: !0,\n            spatiaReference: i\n          }) : new a(t.map(e => [e.x, e.y, e.z]), i);\n          break;\n        }\n\n      case \"polyline\":\n        {\n          const i = e,\n                o = [],\n                s = [],\n                {\n            hasZ: l,\n            hasM: n\n          } = e;\n          let a = 0;\n\n          for (const e of i.paths) if (s.push([a, a + e.length]), a += e.length, l && n) for (const t of e) o.push({\n            x: t[0],\n            y: t[1],\n            z: t[2],\n            m: t[3]\n          });else if (l) for (const t of e) o.push({\n            x: t[0],\n            y: t[1],\n            z: t[2]\n          });else if (n) for (const t of e) o.push({\n            x: t[0],\n            y: t[1],\n            m: t[2]\n          });else for (const t of e) o.push({\n            x: t[0],\n            y: t[1]\n          });\n\n          t.coordinates = o, t._exporter = (t, i) => {\n            const o = e.hasM ? t.map(e => [e.x, e.y, e.z, e.m]) : t.map(e => [e.x, e.y, e.z]),\n                  l = s.map(e => o.slice(e[0], e[1]));\n            return new c({\n              paths: l,\n              hasM: e.hasM,\n              hasZ: !0,\n              spatialReference: i\n            });\n          };\n          break;\n        }\n    }\n    return t;\n  }\n\n}\n\nclass x {\n  constructor(e, t) {\n    this.layer = e, this.options = t;\n  }\n\n}\n\nclass g extends x {\n  constructor(e, t, i) {\n    super(e, i), this.outSpatialReference = t, this.type = \"geometry\";\n  }\n\n  selectTilesAtLOD(e) {\n    if (e < 0) this.geometry.coordinates.forEach(e => e.tile = null);else {\n      const t = this.layer.tileInfo,\n            i = t.lods[e].level;\n      this.geometry.coordinates.forEach(e => {\n        e.tile = t.tileAt(i, e.x, e.y);\n      });\n    }\n  }\n\n  allElevationTilesFetched() {\n    return !this.geometry.coordinates.some(e => !e.elevationTile);\n  }\n\n  clearElevationTiles() {\n    for (const e of this.geometry.coordinates) e.elevationTile !== this.outsideExtentTile && (e.elevationTile = null);\n  }\n\n  populateElevationTiles(e) {\n    for (const t of this.geometry.coordinates) !t.elevationTile && t.tile && (t.elevationTile = e[t.tile.id]);\n  }\n\n  remapTiles(e) {\n    for (const t of this.geometry.coordinates) t.tile = e[t.tile.id];\n  }\n\n  getTilesToFetch() {\n    const e = {},\n          t = [];\n\n    for (const i of this.geometry.coordinates) {\n      const o = i.tile;\n      i.elevationTile || !i.tile || e[o.id] || (e[o.id] = o, t.push(o));\n    }\n\n    return t;\n  }\n\n  forEachTileToFetch(e) {\n    for (const t of this.geometry.coordinates) t.tile && !t.elevationTile && e(t.tile, () => t.tile = null);\n  }\n\n}\n\nclass w extends x {\n  constructor(e, t, i, o) {\n    super(e, i), this.type = \"extent\", this.elevationTiles = [], this.candidateTiles = [], this.fetchedCandidates = new Set(), this.extent = t.intersection(e.fullExtent), this.maskExtents = o;\n  }\n\n  selectTilesAtLOD(e, t) {\n    const i = this._maximumLodForRequests(t),\n          o = Math.min(i, e);\n\n    o < 0 ? this.candidateTiles.length = 0 : this._selectCandidateTilesCoveringExtentAt(o);\n  }\n\n  _maximumLodForRequests(e) {\n    const t = this.layer.tileInfo;\n    if (!e) return t.lods.length - 1;\n    const i = this.extent;\n\n    for (let o = t.lods.length - 1; o >= 0; o--) {\n      const s = t.lods[o],\n            l = s.resolution * t.size[0],\n            n = s.resolution * t.size[1];\n      if (Math.ceil(i.width / l) * Math.ceil(i.height / n) <= e) return o;\n    }\n\n    return -1;\n  }\n\n  allElevationTilesFetched() {\n    return this.candidateTiles.length === this.elevationTiles.length;\n  }\n\n  clearElevationTiles() {\n    this.elevationTiles.length = 0, this.fetchedCandidates.clear();\n  }\n\n  populateElevationTiles(e) {\n    for (const t of this.candidateTiles) {\n      const i = e[t.id];\n      i && (this.fetchedCandidates.add(t), this.elevationTiles.push(i));\n    }\n  }\n\n  remapTiles(e) {\n    this.candidateTiles = this._uniqueNonOverlappingTiles(this.candidateTiles.map(t => e[t.id]));\n  }\n\n  getTilesToFetch() {\n    return this.candidateTiles;\n  }\n\n  forEachTileToFetch(e, t) {\n    const i = this.candidateTiles;\n    this.candidateTiles = [], i.forEach(i => {\n      if (this.fetchedCandidates.has(i)) return void (t && t(i));\n      let o = !1;\n      e(i, () => o = !0), o ? t && t(i) : this.candidateTiles.push(i);\n    }), this.candidateTiles = this._uniqueNonOverlappingTiles(this.candidateTiles, t);\n  }\n\n  _uniqueNonOverlappingTiles(e, t) {\n    const i = {},\n          o = [];\n\n    for (const l of e) i[l.id] ? t && t(l) : (i[l.id] = l, o.push(l));\n\n    const s = o.sort((e, t) => e.level - t.level);\n    return s.filter((e, i) => {\n      for (let o = 0; o < i; o++) if (f(s[o].extent, e.extent)) return t && t(e), !1;\n\n      return !0;\n    });\n  }\n\n  _selectCandidateTilesCoveringExtentAt(e) {\n    this.candidateTiles.length = 0;\n    const t = this.layer.tileInfo,\n          i = t.lods[e],\n          o = this.extent,\n          s = t.tileAt(i.level, o.xmin, o.ymin),\n          l = i.resolution * t.size[0],\n          n = i.resolution * t.size[1],\n          a = Math.ceil((o.xmax - s.extent[0]) / l),\n          r = Math.ceil((o.ymax - s.extent[1]) / n);\n\n    for (let c = 0; c < r; c++) for (let e = 0; e < a; e++) {\n      const i = {\n        id: null,\n        level: s.level,\n        row: s.row - c,\n        col: s.col + e\n      };\n      t.updateTileInfo(i), this._tileIsMasked(i) || this.candidateTiles.push(i);\n    }\n  }\n\n  _tileIsMasked(e) {\n    return !!this.maskExtents && this.maskExtents.some(t => f(t, e.extent));\n  }\n\n}\n\nfunction _(e, t) {\n  let i = e.lods.length - 1;\n\n  if (t > 0) {\n    const o = e.lods.findIndex(e => e.resolution < t);\n    0 === o ? i = 0 : o > 0 && (i = o - 1);\n  }\n\n  return i;\n}\n\nconst E = {\n  maximumAutoTileRequests: 20,\n  noDataValue: 0,\n  returnSampleInfo: !1,\n  demResolution: \"auto\",\n  minDemResolution: 0\n};\nexport default T;\nexport { T as ElevationQuery, v as GeometryDescriptor, _ as getFinestLodIndex };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/layers/support/ElevationQuery.js"],"names":["result","e","t","isSome","i","whenOrAbort","o","throwIfAbortError","s","eachAlways","l","getMetersPerUnitForSR","n","a","r","c","initializeProjection","u","project","h","fromExtent","p","create","m","contains","f","MultiTileElevationSampler","d","ElevationTile","y","T","queryAll","ignoreInvisibleLayers","filter","visible","slice","length","v","fromGeometry","returnSampleInfo","E","query","_queryAllContinue","geometry","export","sampleInfo","type","g","spatialReference","signal","load","_createGeometryDescriptor","_selectTiles","_populateElevationTiles","_sampleGeometryWithElevation","_createQueryResult","createSampler","_createSampler","createSamplerAll","_createSamplerAllContinue","tileInfo","equals","source","dest","w","elevationTiles","layer","options","noDataValue","pop","samplers","map","extent","concat","coordinates","demResolution","push","clone","forEach","z","outSpatialReference","_extractSampleInfo","tile","elevationTile","wkid","_preselectOutsideLayerExtent","_selectTilesClosestResolution","_selectTilesFinestContiguous","_selectTilesAuto","sample","outsideExtentTile","fullExtent","x","xmin","xmax","ymin","ymax","_findNearestDemResolutionLODIndex","selectTilesAtLOD","lods","Math","abs","resolution","_","minDemResolution","_selectTilesFinestContiguousAt","tilemapCache","getTilesToFetch","Promise","all","fetchAvailability","level","row","col","allElevationTilesFetched","clearElevationTiles","cache","uid","id","get","fetchTile","put","populateElevationTiles","_selectTilesAutoFinest","_reduceTilesForMaximumRequests","_selectTilesAutoPrefetchUpsample","fetchAvailabilityUpsample","ok","error","remapTiles","forEachTileToFetch","maximumAutoTileRequests","upsampleTile","lodAt","_exporter","_cloneCoordinate","points","hasZ","hasM","spatiaReference","paths","constructor","tileAt","some","candidateTiles","fetchedCandidates","Set","intersection","maskExtents","_maximumLodForRequests","min","_selectCandidateTilesCoveringExtentAt","size","ceil","width","height","clear","add","_uniqueNonOverlappingTiles","has","sort","updateTileInfo","_tileIsMasked","findIndex","ElevationQuery","GeometryDescriptor","getFinestLodIndex"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{result as e}from\"../../core/asyncUtils.js\";import t from\"../../core/Error.js\";import{isSome as i}from\"../../core/maybe.js\";import{whenOrAbort as o,throwIfAbortError as s,eachAlways as l}from\"../../core/promiseUtils.js\";import{getMetersPerUnitForSR as n}from\"../../core/unitUtils.js\";import a from\"../../geometry/Multipoint.js\";import r from\"../../geometry/Point.js\";import c from\"../../geometry/Polyline.js\";import{initializeProjection as u,project as h}from\"../../geometry/projection.js\";import{fromExtent as p,create as m,contains as f}from\"../../geometry/support/aaBoundingRect.js\";import{MultiTileElevationSampler as d}from\"./ElevationSampler.js\";import{ElevationTile as y}from\"./ElevationTile.js\";class T{async queryAll(e,i,o){if(!(e=o&&o.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require at least one elevation layer to fetch tiles from\");const s=v.fromGeometry(i);let l=!1;o&&o.returnSampleInfo||(l=!0);const n={...E,...o,returnSampleInfo:!0},a=await this.query(e[e.length-1],s,n),r=await this._queryAllContinue(e,a,n);return r.geometry=r.geometry.export(),l&&delete r.sampleInfo,r}async query(e,i,o){if(!e)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require an elevation layer to fetch tiles from\");if(!i||!(i instanceof v)&&\"point\"!==i.type&&\"multipoint\"!==i.type&&\"polyline\"!==i.type)throw new t(\"elevation-query:invalid-geometry\",\"Only point, polyline and multipoint geometries can be used to query elevation\");const s={...E,...o},l=new g(e,i.spatialReference,s),n=s.signal;return await e.load({signal:n}),await this._createGeometryDescriptor(l,i,n),await this._selectTiles(l,n),await this._populateElevationTiles(l,n),this._sampleGeometryWithElevation(l),this._createQueryResult(l,n)}async createSampler(e,i,o){if(!e)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require an elevation layer to fetch tiles from\");if(!i||\"extent\"!==i.type)throw new t(\"elevation-query:invalid-extent\",\"Invalid or undefined extent\");const s={...E,...o};return this._createSampler(e,i,s)}async createSamplerAll(e,i,o){if(!(e=o&&o.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require at least one elevation layer to fetch tiles from\");if(!i||\"extent\"!==i.type)throw new t(\"elevation-query:invalid-extent\",\"Invalid or undefined extent\");const s={...E,...o,returnSampleInfo:!0},l=await this._createSampler(e[e.length-1],i,s);return this._createSamplerAllContinue(e,i,l,s)}async _createSampler(e,t,i,o){const s=i.signal;await e.load({signal:s});const l=t.spatialReference,n=e.tileInfo.spatialReference;l.equals(n)||(await u([{source:l,dest:n}],{signal:s}),t=h(t,n));const a=new w(e,t,i,o);return await this._selectTiles(a,s),await this._populateElevationTiles(a,s),new d(a.elevationTiles,a.layer.tileInfo,a.options.noDataValue)}async _createSamplerAllContinue(e,t,i,o){if(e.pop(),!e.length)return i;const s=i.samplers.map((e=>p(e.extent))),l=await this._createSampler(e[e.length-1],t,o,s);if(0===l.samplers.length)return i;const n=i.samplers.concat(l.samplers),a=new d(n,o.noDataValue);return this._createSamplerAllContinue(e,t,a,o)}async _queryAllContinue(e,t,i){const o=e.pop(),s=t.geometry.coordinates,l=[],n=[];for(let c=0;c<s.length;c++){const i=t.sampleInfo[c];i.demResolution>=0?i.source||(i.source=o):e.length&&(l.push(s[c]),n.push(c))}if(!e.length||0===l.length)return t;const a=t.geometry.clone(l),r=await this.query(e[e.length-1],a,i);return n.forEach(((e,i)=>{s[e].z=r.geometry.coordinates[i].z,t.sampleInfo[e].demResolution=r.sampleInfo[i].demResolution})),this._queryAllContinue(e,t,i)}async _createQueryResult(e,t){const i={geometry:(await e.geometry.project(e.outSpatialReference,t)).export(),noDataValue:e.options.noDataValue};return e.options.returnSampleInfo&&(i.sampleInfo=this._extractSampleInfo(e)),e.geometry.coordinates.forEach((e=>{e.tile=null,e.elevationTile=null})),i}async _createGeometryDescriptor(e,i,o){let s;const l=e.layer.tileInfo.spatialReference;if(i instanceof v?s=await i.project(l,o):(await u([{source:i.spatialReference,dest:l}],{signal:o}),s=h(i,l)),!s)throw new t(\"elevation-query:spatial-reference-mismatch\",`Cannot query elevation in '${i.spatialReference.wkid}' on an elevation service in '${l.wkid}'`);e.geometry=v.fromGeometry(s)}async _selectTiles(e,i){const o=e.options.demResolution;if(\"geometry\"===e.type&&this._preselectOutsideLayerExtent(e),\"number\"==typeof o)this._selectTilesClosestResolution(e);else if(\"finest-contiguous\"===o)await this._selectTilesFinestContiguous(e,i);else{if(\"auto\"!==o)throw new t(\"elevation-query:invalid-dem-resolution\",`Invalid dem resolution value '${o}', expected a number, \"finest-contiguous\" or \"auto\"`);await this._selectTilesAuto(e,i)}}_preselectOutsideLayerExtent(e){const t=new y(null);t.sample=()=>e.options.noDataValue,e.outsideExtentTile=t;const i=e.layer.fullExtent;e.geometry.coordinates.forEach((e=>{const o=e.x,s=e.y;(o<i.xmin||o>i.xmax||s<i.ymin||s>i.ymax)&&(e.elevationTile=t)}))}_selectTilesClosestResolution(e){const t=e.layer.tileInfo,i=this._findNearestDemResolutionLODIndex(t,e.options.demResolution);e.selectTilesAtLOD(i)}_findNearestDemResolutionLODIndex(e,t){const i=t/n(e.spatialReference);let o=e.lods[0],s=0;for(let l=1;l<e.lods.length;l++){const t=e.lods[l];Math.abs(t.resolution-i)<Math.abs(o.resolution-i)&&(o=t,s=l)}return s}async _selectTilesFinestContiguous(e,t){const i=_(e.layer.tileInfo,e.options.minDemResolution);await this._selectTilesFinestContiguousAt(e,i,t)}async _selectTilesFinestContiguousAt(e,i,l){const n=e.layer;if(e.selectTilesAtLOD(i),i<0)return;const a=n.tilemapCache,r=e.getTilesToFetch();try{if(a)await o(Promise.all(r.map((e=>a.fetchAvailability(e.level,e.row,e.col,{signal:l})))),l);else if(await this._populateElevationTiles(e,l),!e.allElevationTilesFetched())throw e.clearElevationTiles(),new t(\"elevation-query:has-unavailable-tiles\")}catch(c){s(c),await this._selectTilesFinestContiguousAt(e,i-1,l)}}async _populateElevationTiles(e,t){const s=e.getTilesToFetch(),n={},a=e.options.cache,r=e.options.noDataValue,c=s.map((async o=>{const s=`${e.layer.uid}:${o.id}:${r}`,l=i(a)?a.get(s):null,c=i(l)?l:await e.layer.fetchTile(o.level,o.row,o.col,{noDataValue:r,signal:t});i(a)&&a.put(s,c),n[o.id]=new y(o,c)}));await o(l(c),t),e.populateElevationTiles(n)}async _selectTilesAuto(t,i){this._selectTilesAutoFinest(t),this._reduceTilesForMaximumRequests(t);const l=t.layer.tilemapCache;if(!l)return this._selectTilesAutoPrefetchUpsample(t,i);const n=t.getTilesToFetch(),a={},r=n.map((async t=>{const o={id:null,level:0,row:0,col:0,extent:m()},n=await e(l.fetchAvailabilityUpsample(t.level,t.row,t.col,o,{signal:i}));!1===n.ok?s(n.error):a[t.id]=o}));await o(Promise.all(r),i),t.remapTiles(a)}_reduceTilesForMaximumRequests(e){const t=e.layer.tileInfo;let i=0;const o={},s=e=>{e.id in o?o[e.id]++:(o[e.id]=1,i++)},l=e=>{const t=o[e.id];1===t?(delete o[e.id],i--):o[e.id]=t-1};e.forEachTileToFetch(s,l);let n=!0;for(;n&&(n=!1,e.forEachTileToFetch((o=>{i<=e.options.maximumAutoTileRequests||(l(o),t.upsampleTile(o)&&(n=!0),s(o))}),l),n););}_selectTilesAutoFinest(e){const t=_(e.layer.tileInfo,e.options.minDemResolution);e.selectTilesAtLOD(t,e.options.maximumAutoTileRequests)}async _selectTilesAutoPrefetchUpsample(e,t){const i=e.layer.tileInfo;await this._populateElevationTiles(e,t);let o=!1;e.forEachTileToFetch(((e,t)=>{i.upsampleTile(e)?o=!0:t()})),o&&await this._selectTilesAutoPrefetchUpsample(e,t)}_sampleGeometryWithElevation(e){e.geometry.coordinates.forEach((t=>{const i=t.elevationTile;let o=e.options.noDataValue;if(i){const e=i.sample(t.x,t.y);void 0!==e?o=e:t.elevationTile=null}t.z=o}))}_extractSampleInfo(e){const t=e.layer.tileInfo,i=n(t.spatialReference);return e.geometry.coordinates.map((o=>{let s=-1;if(o.elevationTile&&o.elevationTile!==e.outsideExtentTile){s=t.lodAt(o.elevationTile.tile.level).resolution*i}return{demResolution:s}}))}}class v{export(){return this._exporter(this.coordinates,this.spatialReference)}clone(e){const t=new v;return t.geometry=this.geometry,t.spatialReference=this.spatialReference,t.coordinates=e||this.coordinates.map((e=>this._cloneCoordinate(e))),t._exporter=this._exporter,t}async project(e,t){if(this.spatialReference.equals(e))return this.clone();await u([{source:this.spatialReference,dest:e}],{signal:t});const i=new a({spatialReference:this.spatialReference,points:this.coordinates.map((e=>[e.x,e.y]))}),o=h(i,e);if(!o)return null;const s=this.coordinates.map(((e,t)=>{const i=this._cloneCoordinate(e),s=o.points[t];return i.x=s[0],i.y=s[1],i})),l=this.clone(s);return l.spatialReference=e,l}_cloneCoordinate(e){return{x:e.x,y:e.y,z:e.z,m:e.m,tile:null,elevationTile:null}}static fromGeometry(e){const t=new v;if(t.geometry=e,t.spatialReference=e.spatialReference,e instanceof v)t.coordinates=e.coordinates.map((e=>t._cloneCoordinate(e))),t._exporter=(t,i)=>{const o=e.clone(t);return o.spatialReference=i,o};else switch(e.type){case\"point\":{const i=e,{hasZ:o,hasM:s}=i;t.coordinates=o&&s?[{x:i.x,y:i.y,z:i.z,m:i.m}]:o?[{x:i.x,y:i.y,z:i.z}]:s?[{x:i.x,y:i.y,m:i.m}]:[{x:i.x,y:i.y}],t._exporter=(t,i)=>e.hasM?new r(t[0].x,t[0].y,t[0].z,t[0].m,i):new r(t[0].x,t[0].y,t[0].z,i);break}case\"multipoint\":{const i=e,{hasZ:o,hasM:s}=i;t.coordinates=o&&s?i.points.map((e=>({x:e[0],y:e[1],z:e[2],m:e[3]}))):o?i.points.map((e=>({x:e[0],y:e[1],z:e[2]}))):s?i.points.map((e=>({x:e[0],y:e[1],m:e[2]}))):i.points.map((e=>({x:e[0],y:e[1]}))),t._exporter=(t,i)=>e.hasM?new a({points:t.map((e=>[e.x,e.y,e.z,e.m])),hasZ:!0,hasM:!0,spatiaReference:i}):new a(t.map((e=>[e.x,e.y,e.z])),i);break}case\"polyline\":{const i=e,o=[],s=[],{hasZ:l,hasM:n}=e;let a=0;for(const e of i.paths)if(s.push([a,a+e.length]),a+=e.length,l&&n)for(const t of e)o.push({x:t[0],y:t[1],z:t[2],m:t[3]});else if(l)for(const t of e)o.push({x:t[0],y:t[1],z:t[2]});else if(n)for(const t of e)o.push({x:t[0],y:t[1],m:t[2]});else for(const t of e)o.push({x:t[0],y:t[1]});t.coordinates=o,t._exporter=(t,i)=>{const o=e.hasM?t.map((e=>[e.x,e.y,e.z,e.m])):t.map((e=>[e.x,e.y,e.z])),l=s.map((e=>o.slice(e[0],e[1])));return new c({paths:l,hasM:e.hasM,hasZ:!0,spatialReference:i})};break}}return t}}class x{constructor(e,t){this.layer=e,this.options=t}}class g extends x{constructor(e,t,i){super(e,i),this.outSpatialReference=t,this.type=\"geometry\"}selectTilesAtLOD(e){if(e<0)this.geometry.coordinates.forEach((e=>e.tile=null));else{const t=this.layer.tileInfo,i=t.lods[e].level;this.geometry.coordinates.forEach((e=>{e.tile=t.tileAt(i,e.x,e.y)}))}}allElevationTilesFetched(){return!this.geometry.coordinates.some((e=>!e.elevationTile))}clearElevationTiles(){for(const e of this.geometry.coordinates)e.elevationTile!==this.outsideExtentTile&&(e.elevationTile=null)}populateElevationTiles(e){for(const t of this.geometry.coordinates)!t.elevationTile&&t.tile&&(t.elevationTile=e[t.tile.id])}remapTiles(e){for(const t of this.geometry.coordinates)t.tile=e[t.tile.id]}getTilesToFetch(){const e={},t=[];for(const i of this.geometry.coordinates){const o=i.tile;i.elevationTile||!i.tile||e[o.id]||(e[o.id]=o,t.push(o))}return t}forEachTileToFetch(e){for(const t of this.geometry.coordinates)t.tile&&!t.elevationTile&&e(t.tile,(()=>t.tile=null))}}class w extends x{constructor(e,t,i,o){super(e,i),this.type=\"extent\",this.elevationTiles=[],this.candidateTiles=[],this.fetchedCandidates=new Set,this.extent=t.intersection(e.fullExtent),this.maskExtents=o}selectTilesAtLOD(e,t){const i=this._maximumLodForRequests(t),o=Math.min(i,e);o<0?this.candidateTiles.length=0:this._selectCandidateTilesCoveringExtentAt(o)}_maximumLodForRequests(e){const t=this.layer.tileInfo;if(!e)return t.lods.length-1;const i=this.extent;for(let o=t.lods.length-1;o>=0;o--){const s=t.lods[o],l=s.resolution*t.size[0],n=s.resolution*t.size[1];if(Math.ceil(i.width/l)*Math.ceil(i.height/n)<=e)return o}return-1}allElevationTilesFetched(){return this.candidateTiles.length===this.elevationTiles.length}clearElevationTiles(){this.elevationTiles.length=0,this.fetchedCandidates.clear()}populateElevationTiles(e){for(const t of this.candidateTiles){const i=e[t.id];i&&(this.fetchedCandidates.add(t),this.elevationTiles.push(i))}}remapTiles(e){this.candidateTiles=this._uniqueNonOverlappingTiles(this.candidateTiles.map((t=>e[t.id])))}getTilesToFetch(){return this.candidateTiles}forEachTileToFetch(e,t){const i=this.candidateTiles;this.candidateTiles=[],i.forEach((i=>{if(this.fetchedCandidates.has(i))return void(t&&t(i));let o=!1;e(i,(()=>o=!0)),o?t&&t(i):this.candidateTiles.push(i)})),this.candidateTiles=this._uniqueNonOverlappingTiles(this.candidateTiles,t)}_uniqueNonOverlappingTiles(e,t){const i={},o=[];for(const l of e)i[l.id]?t&&t(l):(i[l.id]=l,o.push(l));const s=o.sort(((e,t)=>e.level-t.level));return s.filter(((e,i)=>{for(let o=0;o<i;o++)if(f(s[o].extent,e.extent))return t&&t(e),!1;return!0}))}_selectCandidateTilesCoveringExtentAt(e){this.candidateTiles.length=0;const t=this.layer.tileInfo,i=t.lods[e],o=this.extent,s=t.tileAt(i.level,o.xmin,o.ymin),l=i.resolution*t.size[0],n=i.resolution*t.size[1],a=Math.ceil((o.xmax-s.extent[0])/l),r=Math.ceil((o.ymax-s.extent[1])/n);for(let c=0;c<r;c++)for(let e=0;e<a;e++){const i={id:null,level:s.level,row:s.row-c,col:s.col+e};t.updateTileInfo(i),this._tileIsMasked(i)||this.candidateTiles.push(i)}}_tileIsMasked(e){return!!this.maskExtents&&this.maskExtents.some((t=>f(t,e.extent)))}}function _(e,t){let i=e.lods.length-1;if(t>0){const o=e.lods.findIndex((e=>e.resolution<t));0===o?i=0:o>0&&(i=o-1)}return i}const E={maximumAutoTileRequests:20,noDataValue:0,returnSampleInfo:!1,demResolution:\"auto\",minDemResolution:0};export default T;export{T as ElevationQuery,v as GeometryDescriptor,_ as getFinestLodIndex};\n"]},"metadata":{},"sourceType":"module"}