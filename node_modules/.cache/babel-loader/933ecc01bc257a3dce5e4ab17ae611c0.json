{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { AlignPixel as e } from \"../views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js\";\nimport { glsl as o } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as a } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\n\nfunction i() {\n  const i = new a();\n  return i.attributes.add(\"position\", \"vec3\"), i.attributes.add(\"color\", \"vec4\"), i.attributes.add(\"size\", \"float\"), i.varyings.add(\"vcolor\", \"vec4\"), i.varyings.add(\"vsize\", \"float\"), i.vertex.uniforms.add(\"transform\", \"mat4\").add(\"viewport\", \"vec4\").add(\"pixelRatio\", \"float\"), i.include(e), i.vertex.code.add(o`void main(void) {\nvec4 posProj = transform * vec4(position, 0);\ngl_Position = alignToPixelCenter(posProj, viewport.zw);\nvcolor = color / 1.2;\nvsize = size * 5.0 * pixelRatio;\ngl_PointSize = vsize;\n}`), i.fragment.code.add(o`void main() {\nfloat cap = 0.7;\nfloat scale = 1.0 / cap;\nfloat helper = clamp(length(abs(gl_PointCoord - vec2(0.5))), 0.0, cap);\nfloat alpha = clamp((cap - helper) * scale, 0.0, 1.0);\nfloat intensity = alpha * alpha * alpha;\nif (vsize < 3.0) {\nintensity *= 0.5;\n}\ngl_FragColor = vec4(vcolor.xyz, intensity);\n}`), i;\n}\n\nvar r = Object.freeze({\n  __proto__: null,\n  build: i\n});\nexport { r as S, i as b };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/chunks/Stars.glsl.js"],"names":["AlignPixel","e","glsl","o","ShaderBuilder","a","i","attributes","add","varyings","vertex","uniforms","include","code","fragment","r","Object","freeze","__proto__","build","S","b"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,UAAU,IAAIC,CAArB,QAA2B,oEAA3B;AAAgG,SAAOC,IAAI,IAAIC,CAAf,QAAqB,2DAArB;AAAiF,SAAOC,aAAa,IAAIC,CAAxB,QAA8B,8DAA9B;;AAA6F,SAASC,CAAT,GAAY;AAAC,QAAMA,CAAC,GAAC,IAAID,CAAJ,EAAR;AAAc,SAAOC,CAAC,CAACC,UAAF,CAAaC,GAAb,CAAiB,UAAjB,EAA4B,MAA5B,GAAoCF,CAAC,CAACC,UAAF,CAAaC,GAAb,CAAiB,OAAjB,EAAyB,MAAzB,CAApC,EAAqEF,CAAC,CAACC,UAAF,CAAaC,GAAb,CAAiB,MAAjB,EAAwB,OAAxB,CAArE,EAAsGF,CAAC,CAACG,QAAF,CAAWD,GAAX,CAAe,QAAf,EAAwB,MAAxB,CAAtG,EAAsIF,CAAC,CAACG,QAAF,CAAWD,GAAX,CAAe,OAAf,EAAuB,OAAvB,CAAtI,EAAsKF,CAAC,CAACI,MAAF,CAASC,QAAT,CAAkBH,GAAlB,CAAsB,WAAtB,EAAkC,MAAlC,EAA0CA,GAA1C,CAA8C,UAA9C,EAAyD,MAAzD,EAAiEA,GAAjE,CAAqE,YAArE,EAAkF,OAAlF,CAAtK,EAAiQF,CAAC,CAACM,OAAF,CAAUX,CAAV,CAAjQ,EAA8QK,CAAC,CAACI,MAAF,CAASG,IAAT,CAAcL,GAAd,CAAkBL,CAAE;AACllB;AACA;AACA;AACA;AACA;AACA,EAN8jB,CAA9Q,EAM5SG,CAAC,CAACQ,QAAF,CAAWD,IAAX,CAAgBL,GAAhB,CAAoBL,CAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAVI,CAN4S,EAgB5SG,CAhBqS;AAgBnS;;AAAA,IAAIS,CAAC,GAACC,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,SAAS,EAAC,IAAX;AAAgBC,EAAAA,KAAK,EAACb;AAAtB,CAAd,CAAN;AAA8C,SAAOS,CAAC,IAAIK,CAAZ,EAAcd,CAAC,IAAIe,CAAnB","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{AlignPixel as e}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js\";import{glsl as o}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as a}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";function i(){const i=new a;return i.attributes.add(\"position\",\"vec3\"),i.attributes.add(\"color\",\"vec4\"),i.attributes.add(\"size\",\"float\"),i.varyings.add(\"vcolor\",\"vec4\"),i.varyings.add(\"vsize\",\"float\"),i.vertex.uniforms.add(\"transform\",\"mat4\").add(\"viewport\",\"vec4\").add(\"pixelRatio\",\"float\"),i.include(e),i.vertex.code.add(o`void main(void) {\nvec4 posProj = transform * vec4(position, 0);\ngl_Position = alignToPixelCenter(posProj, viewport.zw);\nvcolor = color / 1.2;\nvsize = size * 5.0 * pixelRatio;\ngl_PointSize = vsize;\n}`),i.fragment.code.add(o`void main() {\nfloat cap = 0.7;\nfloat scale = 1.0 / cap;\nfloat helper = clamp(length(abs(gl_PointCoord - vec2(0.5))), 0.0, cap);\nfloat alpha = clamp((cap - helper) * scale, 0.0, 1.0);\nfloat intensity = alpha * alpha * alpha;\nif (vsize < 3.0) {\nintensity *= 0.5;\n}\ngl_FragColor = vec4(vcolor.xyz, intensity);\n}`),i}var r=Object.freeze({__proto__:null,build:i});export{r as S,i as b};\n"]},"metadata":{},"sourceType":"module"}