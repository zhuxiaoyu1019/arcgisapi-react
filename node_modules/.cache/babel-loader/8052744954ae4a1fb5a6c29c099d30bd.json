{"ast":null,"code":"import Map from '@arcgis/core/Map';\nimport Color from \"@arcgis/core/Color\";\nimport SceneView from \"@arcgis/core/views/SceneView\";\nimport SceneLayer from '@arcgis/core/layers/SceneLayer';\nimport MeshSymbol3D from '@arcgis/core/symbols/MeshSymbol3D';\nimport SolidEdges3D from '@arcgis/core/symbols/edges/SolidEdges3D';\nimport SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer';\nimport FillSymbol3DLayer from '@arcgis/core/symbols/FillSymbol3DLayer';\nimport GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';\nimport * as promiseUtils from '@arcgis/core/core/promiseUtils';\nimport Polygon from '@arcgis/core/geometry/Polygon';\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\nimport Graphic from '@arcgis/core/Graphic';\nimport PolygonSymbol3D from '@arcgis/core/symbols/PolygonSymbol3D';\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\nimport * as geometryEngine from '@arcgis/core/geometry/geometryEngine';\nimport MeshComponent from '@arcgis/core/geometry/support/MeshComponent';\nimport MeshMaterialMetallicRoughness from '@arcgis/core/geometry/support/MeshMaterialMetallicRoughness';\nimport Mesh from '@arcgis/core/geometry/Mesh';\nimport { spring } from 'popmotion';\n\nconst ArcGISMap = (basemap, ref) => {\n  const buildings = new SceneLayer({\n    url: 'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0',\n    opacity: 1,\n    popupEnabled: false,\n    renderer: new SimpleRenderer({\n      symbol: new MeshSymbol3D({\n        symbolLayers: [new FillSymbol3DLayer({\n          material: {\n            color: new Color([200, 200, 200]),\n            colorMixMode: \"replace\"\n          },\n          edges: new SolidEdges3D({\n            color: new Color([100, 100, 100, 0.5])\n          })\n        })]\n      })\n    })\n  });\n  const walls = new GraphicsLayer({\n    elevationInfo: {\n      mode: \"absolute-height\"\n    }\n  });\n  const wallColor = new Color(\"#00fffb\");\n  const footprints = new FeatureLayer({\n    url: \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/FeatureServer/0\"\n  });\n  const map = new Map({\n    basemap,\n    layers: [buildings, walls]\n  });\n  const view = new SceneView({\n    container: ref,\n    map,\n    qualityProfile: \"high\",\n    camera: {\n      position: [-73.98564294432742, 40.748586782824624, 601.67648],\n      heading: 330.47,\n      tilt: 64.02\n    },\n    environment: {\n      lighting: {\n        directShadowsEnabled: true\n      }\n    }\n  });\n\n  function getCageGraphic(wall, opacity, height) {\n    const geometry = new Polygon({\n      rings: [wall.rings[0].map(coords => [...coords, height])],\n      spatialReference: SpatialReference.WebMercator\n    });\n    return new Graphic({\n      geometry: geometry,\n      symbol: new PolygonSymbol3D({\n        symbolLayers: [new FillSymbol3DLayer({\n          outline: {\n            size: 1.5,\n            color: [153, 255, 253, opacity]\n          },\n          material: {\n            color: [0, 0, 0, 0]\n          }\n        })]\n      })\n    });\n  }\n\n  async function animateFootprint(building, extent) {\n    const objectId = building.getObjectId();\n    const query = footprints.createQuery();\n    query.objectIds = [objectId];\n    query.outFields = [\"*\"];\n    query.multipatchOption = \"xyFootprint\";\n    query.returnGeometry = true;\n    const result = await footprints.queryFeatures(query);\n\n    if (result.features.length === 0) {\n      return;\n    }\n\n    const footprint = result.features[0];\n    const hull = geometryEngine.convexHull(footprint.geometry, true);\n    const buffer = geometryEngine.buffer(hull, 10, \"meters\");\n    const wall = geometryEngine.generalize(buffer, 10, true, \"meters\");\n    const size = (extent.zmax - extent.zmin) * 0.9;\n    walls.removeAll();\n\n    function createWall(s) {\n      const mesh = createMesh(wall, extent.zmin, size * s);\n      walls.removeAll();\n      const fill = new FillSymbol3DLayer({\n        material: {\n          color: wallColor,\n          colorMixMode: \"tint\"\n        },\n        castShadows: false\n      });\n      walls.addMany([getCageGraphic(wall, 1, (extent.zmin + 0.5) * s), getCageGraphic(wall, 0.2, (extent.zmin + size / 2) * s), getCageGraphic(wall, 0.6, (extent.zmin + size / 4) * s), getCageGraphic(wall, 0.8, (extent.zmin + size / 8) * s)]);\n      walls.add(new Graphic({\n        geometry: mesh,\n        symbol: new MeshSymbol3D({\n          symbolLayers: [fill]\n        })\n      }));\n    }\n\n    return new Promise(resolve => {\n      spring({\n        from: 0,\n        velocity: 0,\n        to: 1,\n        stiffness: 200,\n        // mass: 1,\n        // damping: 10\n        onUpdate: createWall,\n        onComplete: resolve\n      });\n    });\n  }\n\n  function createMesh(polygon, zmin, height = 100) {\n    const ring = polygon.rings[0];\n    const triangles = [];\n    const vertices = [];\n    const colors = [];\n\n    for (let i = 0; i < ring.length; i++) {\n      const vIdx0 = 2 * i;\n      const vIdx1 = 2 * i + 1;\n      const vIdx2 = (2 * i + 2) % (2 * ring.length);\n      const vIdx3 = (2 * i + 3) % (2 * ring.length); // Add new wall vertex\n\n      vertices.push(ring[i][0], ring[i][1], zmin);\n      vertices.push(ring[i][0], ring[i][1], height); // Colors\n\n      colors.push(255, 255, 255, 255);\n      colors.push(255, 255, 255, 0);\n      triangles.push(vIdx0, vIdx1, vIdx2, vIdx2, vIdx1, vIdx3);\n    }\n\n    const wall = new MeshComponent({\n      faces: triangles,\n      shading: \"flat\",\n      material: new MeshMaterialMetallicRoughness({\n        emissiveColor: wallColor,\n        metallic: 0.5,\n        roughness: 0.8,\n        doubleSided: true\n      })\n    });\n    return new Mesh({\n      components: [wall],\n      vertexAttributes: {\n        position: vertices,\n        color: colors\n      },\n      spatialReference: polygon.spatialReference\n    });\n  }\n\n  view.when(async () => {\n    const buildingsLV = await view.whenLayerView(buildings);\n    view.on(\"click\", promiseUtils.debounce(async e => {\n      const ht = await view.hitTest(e, {\n        include: [buildings]\n      });\n      walls.removeAll();\n\n      for (const result of ht.results) {\n        const graphic = result.graphic;\n\n        if (graphic && graphic.layer === buildings) {\n          const extentResult = await buildingsLV.queryExtent({\n            objectIds: [graphic.getObjectId()],\n            returnGeometry: true\n          });\n          await animateFootprint(graphic, extentResult.extent);\n          return;\n        }\n      }\n    }));\n  });\n  return view;\n};\n\n_c = ArcGISMap;\nexport default ArcGISMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArcGISMap\");","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/untils/ArcGISMap.js"],"names":["Map","Color","SceneView","SceneLayer","MeshSymbol3D","SolidEdges3D","SimpleRenderer","FillSymbol3DLayer","GraphicsLayer","promiseUtils","Polygon","SpatialReference","Graphic","PolygonSymbol3D","FeatureLayer","geometryEngine","MeshComponent","MeshMaterialMetallicRoughness","Mesh","spring","ArcGISMap","basemap","ref","buildings","url","opacity","popupEnabled","renderer","symbol","symbolLayers","material","color","colorMixMode","edges","walls","elevationInfo","mode","wallColor","footprints","map","layers","view","container","qualityProfile","camera","position","heading","tilt","environment","lighting","directShadowsEnabled","getCageGraphic","wall","height","geometry","rings","coords","spatialReference","WebMercator","outline","size","animateFootprint","building","extent","objectId","getObjectId","query","createQuery","objectIds","outFields","multipatchOption","returnGeometry","result","queryFeatures","features","length","footprint","hull","convexHull","buffer","generalize","zmax","zmin","removeAll","createWall","s","mesh","createMesh","fill","castShadows","addMany","add","Promise","resolve","from","velocity","to","stiffness","onUpdate","onComplete","polygon","ring","triangles","vertices","colors","i","vIdx0","vIdx1","vIdx2","vIdx3","push","faces","shading","emissiveColor","metallic","roughness","doubleSided","components","vertexAttributes","when","buildingsLV","whenLayerView","on","debounce","e","ht","hitTest","include","results","graphic","layer","extentResult","queryExtent"],"mappings":"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","sourcesContent":["import Map from '@arcgis/core/Map'\nimport Color from \"@arcgis/core/Color\"\nimport SceneView from \"@arcgis/core/views/SceneView\"\nimport SceneLayer from '@arcgis/core/layers/SceneLayer'\nimport MeshSymbol3D from '@arcgis/core/symbols/MeshSymbol3D'\nimport SolidEdges3D from '@arcgis/core/symbols/edges/SolidEdges3D'\nimport SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer'\nimport FillSymbol3DLayer from '@arcgis/core/symbols/FillSymbol3DLayer'\n\nimport GraphicsLayer from '@arcgis/core/layers/GraphicsLayer'\n\nimport * as promiseUtils from '@arcgis/core/core/promiseUtils'\nimport Polygon from '@arcgis/core/geometry/Polygon';\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference'\nimport Graphic from '@arcgis/core/Graphic'\nimport PolygonSymbol3D from '@arcgis/core/symbols/PolygonSymbol3D'\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer'\nimport * as geometryEngine from '@arcgis/core/geometry/geometryEngine'\nimport MeshComponent from '@arcgis/core/geometry/support/MeshComponent'\nimport MeshMaterialMetallicRoughness from '@arcgis/core/geometry/support/MeshMaterialMetallicRoughness'\nimport Mesh from '@arcgis/core/geometry/Mesh'\nimport { spring } from 'popmotion'\n\n\nconst ArcGISMap = (basemap, ref) => {\n    const buildings = new SceneLayer({\n        url: 'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0',\n        opacity: 1,\n        popupEnabled: false,\n        renderer: new SimpleRenderer({\n            symbol: new MeshSymbol3D({\n                symbolLayers: [\n                    new FillSymbol3DLayer({\n                        material: {\n                            color: new Color([200, 200, 200]),\n                            colorMixMode: \"replace\"\n                        },\n                        edges: new SolidEdges3D({\n                            color: new Color([100, 100, 100, 0.5])\n                        })\n                    })\n                ]\n            })\n        })\n    });\n\n    const walls = new GraphicsLayer({\n        elevationInfo: {\n            mode: \"absolute-height\"\n        }\n    });\n\n    const wallColor = new Color(\"#00fffb\")\n\n    const footprints = new FeatureLayer({\n        url: \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/FeatureServer/0\"\n    });\n\n    const map = new Map({\n        basemap,\n        layers: [buildings, walls]\n    });\n\n    const view = new SceneView({\n        container: ref,\n        map,\n        qualityProfile: \"high\",\n        camera: {\n            position: [-73.98564294432742, 40.748586782824624, 601.67648],\n            heading: 330.47,\n            tilt: 64.02\n        },\n        environment: {\n            lighting: {\n                directShadowsEnabled: true\n            }\n        },\n    })\n\n    function getCageGraphic(wall, opacity, height) {\n        const geometry = new Polygon({\n            rings: [wall.rings[0].map((coords) => [...coords, height])],\n            spatialReference: SpatialReference.WebMercator\n        });\n        return new Graphic({\n            geometry: geometry,\n            symbol: new PolygonSymbol3D({\n                symbolLayers: [\n                    new FillSymbol3DLayer({\n                        outline: {\n                            size: 1.5,\n                            color: [153, 255, 253, opacity]\n                        },\n                        material: {\n                            color: [0, 0, 0, 0]\n                        }\n                    })\n                ]\n            })\n        });\n    }\n\n    async function animateFootprint(building, extent) {\n        const objectId = building.getObjectId();\n\n        const query = footprints.createQuery();\n        query.objectIds = [objectId];\n        query.outFields = [\"*\"];\n        query.multipatchOption = \"xyFootprint\";\n        query.returnGeometry = true;\n\n        const result = await footprints.queryFeatures(query);\n        if (result.features.length === 0) {\n            return;\n        }\n\n        const footprint = result.features[0];\n\n        const hull = geometryEngine.convexHull(footprint.geometry, true);\n        const buffer = geometryEngine.buffer(hull, 10, \"meters\");\n        const wall = geometryEngine.generalize(buffer, 10, true, \"meters\");\n        const size = (extent.zmax - extent.zmin) * 0.9;\n\n        walls.removeAll();\n\n        function createWall(s) {\n            const mesh = createMesh(wall, extent.zmin, size * s);\n            walls.removeAll();\n\n            const fill = new FillSymbol3DLayer({\n                material: {\n                    color: wallColor,\n                    colorMixMode: \"tint\"\n                },\n                castShadows: false\n            });\n\n            walls.addMany([\n                getCageGraphic(wall, 1, (extent.zmin + 0.5) * s),\n                getCageGraphic(wall, 0.2, (extent.zmin + size / 2) * s),\n                getCageGraphic(wall, 0.6, (extent.zmin + size / 4) * s),\n                getCageGraphic(wall, 0.8, (extent.zmin + size / 8) * s)\n            ]);\n\n            walls.add(\n                new Graphic({\n                    geometry: mesh,\n                    symbol: new MeshSymbol3D({\n                        symbolLayers: [fill]\n                    })\n                })\n            );\n        }\n\n        return new Promise((resolve) => {\n            spring({\n                from: 0,\n                velocity: 0,\n                to: 1,\n                stiffness: 200,\n                // mass: 1,\n                // damping: 10\n                onUpdate: createWall,\n                onComplete: resolve\n            })\n        });\n    }\n\n    function createMesh(polygon, zmin, height = 100) {\n        const ring = polygon.rings[0];\n        const triangles = [];\n        const vertices = [];\n        const colors = [];\n\n        for (let i = 0; i < ring.length; i++) {\n            const vIdx0 = 2 * i;\n            const vIdx1 = 2 * i + 1;\n\n            const vIdx2 = (2 * i + 2) % (2 * ring.length);\n            const vIdx3 = (2 * i + 3) % (2 * ring.length);\n\n            // Add new wall vertex\n            vertices.push(ring[i][0], ring[i][1], zmin);\n            vertices.push(ring[i][0], ring[i][1], height);\n\n            // Colors\n            colors.push(255, 255, 255, 255);\n            colors.push(255, 255, 255, 0);\n\n            triangles.push(vIdx0, vIdx1, vIdx2, vIdx2, vIdx1, vIdx3);\n        }\n\n        const wall = new MeshComponent({\n            faces: triangles,\n            shading: \"flat\",\n            material: new MeshMaterialMetallicRoughness({\n                emissiveColor: wallColor,\n                metallic: 0.5,\n                roughness: 0.8,\n                doubleSided: true\n            })\n        });\n\n        return new Mesh({\n            components: [wall],\n            vertexAttributes: {\n                position: vertices,\n                color: colors\n            },\n            spatialReference: polygon.spatialReference\n        });\n    }\n\n    view.when(async () => {\n        const buildingsLV = await view.whenLayerView(buildings);\n\n        view.on(\n            \"click\",\n            promiseUtils.debounce(async (e) => {\n                const ht = await view.hitTest(e, {\n                    include: [buildings]\n                });\n\n                walls.removeAll();\n\n                for (const result of ht.results) {\n                    const graphic = result.graphic;\n                    if (graphic && graphic.layer === buildings) {\n                        const extentResult = await buildingsLV.queryExtent({\n                            objectIds: [graphic.getObjectId()],\n                            returnGeometry: true\n                        });\n\n                        await animateFootprint(graphic, extentResult.extent);\n\n                        return;\n                    }\n                }\n            })\n        );\n    });\n\n    return view\n}\n\nexport default ArcGISMap\n"]},"metadata":{},"sourceType":"module"}