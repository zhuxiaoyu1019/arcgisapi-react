{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport e from \"../../../../../request.js\";\nimport t from \"../../../../../core/Error.js\";\nimport r from \"../../../../../core/has.js\";\nimport s from \"../../../../../core/Logger.js\";\nimport { isSome as i, unwrapOr as o, isNone as n } from \"../../../../../core/maybe.js\";\nimport { throwIfAborted as a, isAbortError as u } from \"../../../../../core/promiseUtils.js\";\nimport c from \"../../../../../rest/support/Query.js\";\nimport { createSourceAdapter as l } from \"../controllers/support/sourceAdapters.js\";\nimport { DataTileSource as p } from \"./DataTileSource.js\";\nimport { QueueProcessor as d } from \"../../../../support/QueueProcessor.js\";\nconst y = s.getLogger(\"esri.views.2d.layers.features.sources.BaseFeatureSource\"),\n      h = 4;\n\nclass m extends p {\n  constructor(e) {\n    super(e), this.type = \"feature\", this.mode = \"on-demand\", this._adapter = l(e.serviceInfo), this._queue = new d({\n      concurrency: 8,\n      process: async e => {\n        if (a(e), i(e.tile)) {\n          const t = e.tile.key.id,\n                {\n            signal: s\n          } = e,\n                i = r(\"esri-tiles-debug\") ? {\n            tile: t.replace(/\\//g, \".\"),\n            depth: e.depth\n          } : void 0;\n          return this._adapter.executeQuery(e.query, {\n            query: i,\n            signal: s\n          });\n        }\n\n        return this._adapter.executeQuery(e.query, e);\n      }\n    }), this._patchQueue = new d({\n      concurrency: 8,\n      process: async e => {\n        if (a(e), i(e.tile)) {\n          const t = e.tile.key.id,\n                {\n            signal: s\n          } = e,\n                i = r(\"esri-tiles-debug\") ? {\n            tile: t.replace(/\\//g, \".\"),\n            depth: e.depth\n          } : void 0;\n          return this._adapter.executeQuery(e.query, {\n            query: i,\n            signal: s\n          });\n        }\n\n        return this._adapter.executeQuery(e.query, e);\n      }\n    });\n  }\n\n  destroy() {\n    super.destroy(), this._adapter.destroy(), this._queue.destroy(), this._patchQueue.destroy();\n  }\n\n  get updating() {\n    return !!this._queue.length || Array.from(this._subscriptions.values()).some(e => !e.done);\n  }\n\n  get maxRecordCountFactor() {\n    const {\n      query: e\n    } = this._serviceInfo.capabilities;\n    return e.supportsMaxRecordCountFactor ? h : null;\n  }\n\n  get maxPageSize() {\n    var e;\n    const {\n      query: t\n    } = this._serviceInfo.capabilities;\n    return (null != (e = t.maxRecordCount) ? e : 8e3) * o(this.maxRecordCountFactor, 1);\n  }\n\n  get pageSize() {\n    return Math.min(8e3, this.maxPageSize);\n  }\n\n  enableEvent(e, t) {}\n\n  subscribe(e) {\n    super.subscribe(e);\n\n    const r = this._subscriptions.get(e.id);\n\n    this._fetchDataTile(e).catch(r => {\n      u(r) || y.error(new t(\"mapview-query-error\", \"Encountered error when fetching tile\", {\n        tile: e,\n        error: r\n      }));\n    }).then(() => r.end());\n  }\n\n  unsubscribe(e) {\n    super.unsubscribe(e);\n  }\n\n  readers(e) {\n    return this._subscriptions.get(e).readers();\n  }\n\n  async query(e) {\n    return this._adapter.executeQuery(e);\n  }\n\n  async queryLastEditDate() {\n    const t = this._serviceInfo.source,\n          r = { ...t.query,\n      f: \"json\"\n    };\n    return (await e(t.path, {\n      query: r,\n      responseType: \"json\"\n    })).data.editingInfo.lastEditDate;\n  }\n\n  createTileQuery(e) {\n    const t = this.createQuery();\n    return t.quantizationParameters = e.getQuantizationParameters(), t.resultType = \"tile\", t.geometry = e.extent, \"esriGeometryPolyline\" === this._serviceInfo.geometryType && (t.maxAllowableOffset = e.resolution), this._serviceInfo.capabilities.query.supportsQuantization || (t.quantizationParameters = null, t.maxAllowableOffset = e.resolution), t;\n  }\n\n  _createQuery(e, t) {\n    const r = this._queryInfo.historicMoment ? new Date(this._queryInfo.historicMoment) : null,\n          s = new c({ ...this._queryInfo,\n      historicMoment: r,\n      ...t\n    });\n    return this._serviceInfo.capabilities.query.supportsQuantization || (t.quantizationParameters = null, s.maxAllowableOffset = e.resolution), t.quantizationParameters && \"esriGeometryPolyline\" === this._serviceInfo.geometryType && (s.maxAllowableOffset = e.resolution), s.resultType = \"tile\", s.geometry = e.extent, s;\n  }\n\n  async _executePatchQuery(e, t, r, s) {\n    const o = t.clone();\n    o.outFields = [this._serviceInfo.objectIdField, ...r], o.returnCentroid = !1, o.returnGeometry = !1;\n    const n = i(o.start) ? o.start / 8e3 : 0,\n          a = s.signal;\n    return this._patchQueue.push({\n      tile: e,\n      query: o,\n      signal: a,\n      depth: n\n    });\n  }\n\n  async _resend(e, t) {\n    const {\n      query: r,\n      message: s\n    } = e,\n          o = i(r.outFields) ? r.outFields : [],\n          u = this._queryInfo.outFields,\n          c = u.filter(e => -1 === o.indexOf(e));\n    if (n(s.addOrUpdate)) this._onMessage({ ...s,\n      type: \"append\"\n    });else if (c.length) try {\n      const e = this._subscriptions.get(s.id).tile,\n            i = await this._executePatchQuery(e, r, c, t);\n\n      a(t), r.outFields = u, s.addOrUpdate.joinAttributes(i), this._onMessage({ ...s,\n        end: s.end,\n        type: \"append\"\n      });\n    } catch (l) {} else this._onMessage({ ...s,\n      type: \"append\"\n    });\n  }\n\n  async _resendSubscription(e) {\n    if (e.empty) return this._onMessage({\n      id: e.tile.id,\n      addOrUpdate: null,\n      end: !1,\n      type: \"append\"\n    });\n    const t = e.signal;\n\n    for (const r of e.requests.done) await this._resend(r, {\n      signal: t\n    });\n\n    return i(e.edits) ? this._onMessage(e.edits) : void 0;\n  }\n\n  async resend() {\n    const e = Array.from(this._subscriptions.values());\n    await Promise.all(e.map(e => this._resendSubscription(e)));\n  }\n\n}\n\nexport { m as BaseFeatureSource };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/views/2d/layers/features/sources/BaseFeatureSource.js"],"names":["e","t","r","s","isSome","i","unwrapOr","o","isNone","n","throwIfAborted","a","isAbortError","u","c","createSourceAdapter","l","DataTileSource","p","QueueProcessor","d","y","getLogger","h","m","constructor","type","mode","_adapter","serviceInfo","_queue","concurrency","process","tile","key","id","signal","replace","depth","executeQuery","query","_patchQueue","destroy","updating","length","Array","from","_subscriptions","values","some","done","maxRecordCountFactor","_serviceInfo","capabilities","supportsMaxRecordCountFactor","maxPageSize","maxRecordCount","pageSize","Math","min","enableEvent","subscribe","get","_fetchDataTile","catch","error","then","end","unsubscribe","readers","queryLastEditDate","source","f","path","responseType","data","editingInfo","lastEditDate","createTileQuery","createQuery","quantizationParameters","getQuantizationParameters","resultType","geometry","extent","geometryType","maxAllowableOffset","resolution","supportsQuantization","_createQuery","_queryInfo","historicMoment","Date","_executePatchQuery","clone","outFields","objectIdField","returnCentroid","returnGeometry","start","push","_resend","message","filter","indexOf","addOrUpdate","_onMessage","joinAttributes","_resendSubscription","empty","requests","edits","resend","Promise","all","map","BaseFeatureSource"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport e from\"../../../../../request.js\";import t from\"../../../../../core/Error.js\";import r from\"../../../../../core/has.js\";import s from\"../../../../../core/Logger.js\";import{isSome as i,unwrapOr as o,isNone as n}from\"../../../../../core/maybe.js\";import{throwIfAborted as a,isAbortError as u}from\"../../../../../core/promiseUtils.js\";import c from\"../../../../../rest/support/Query.js\";import{createSourceAdapter as l}from\"../controllers/support/sourceAdapters.js\";import{DataTileSource as p}from\"./DataTileSource.js\";import{QueueProcessor as d}from\"../../../../support/QueueProcessor.js\";const y=s.getLogger(\"esri.views.2d.layers.features.sources.BaseFeatureSource\"),h=4;class m extends p{constructor(e){super(e),this.type=\"feature\",this.mode=\"on-demand\",this._adapter=l(e.serviceInfo),this._queue=new d({concurrency:8,process:async e=>{if(a(e),i(e.tile)){const t=e.tile.key.id,{signal:s}=e,i=r(\"esri-tiles-debug\")?{tile:t.replace(/\\//g,\".\"),depth:e.depth}:void 0;return this._adapter.executeQuery(e.query,{query:i,signal:s})}return this._adapter.executeQuery(e.query,e)}}),this._patchQueue=new d({concurrency:8,process:async e=>{if(a(e),i(e.tile)){const t=e.tile.key.id,{signal:s}=e,i=r(\"esri-tiles-debug\")?{tile:t.replace(/\\//g,\".\"),depth:e.depth}:void 0;return this._adapter.executeQuery(e.query,{query:i,signal:s})}return this._adapter.executeQuery(e.query,e)}})}destroy(){super.destroy(),this._adapter.destroy(),this._queue.destroy(),this._patchQueue.destroy()}get updating(){return!!this._queue.length||Array.from(this._subscriptions.values()).some((e=>!e.done))}get maxRecordCountFactor(){const{query:e}=this._serviceInfo.capabilities;return e.supportsMaxRecordCountFactor?h:null}get maxPageSize(){var e;const{query:t}=this._serviceInfo.capabilities;return(null!=(e=t.maxRecordCount)?e:8e3)*o(this.maxRecordCountFactor,1)}get pageSize(){return Math.min(8e3,this.maxPageSize)}enableEvent(e,t){}subscribe(e){super.subscribe(e);const r=this._subscriptions.get(e.id);this._fetchDataTile(e).catch((r=>{u(r)||y.error(new t(\"mapview-query-error\",\"Encountered error when fetching tile\",{tile:e,error:r}))})).then((()=>r.end()))}unsubscribe(e){super.unsubscribe(e)}readers(e){return this._subscriptions.get(e).readers()}async query(e){return this._adapter.executeQuery(e)}async queryLastEditDate(){const t=this._serviceInfo.source,r={...t.query,f:\"json\"};return(await e(t.path,{query:r,responseType:\"json\"})).data.editingInfo.lastEditDate}createTileQuery(e){const t=this.createQuery();return t.quantizationParameters=e.getQuantizationParameters(),t.resultType=\"tile\",t.geometry=e.extent,\"esriGeometryPolyline\"===this._serviceInfo.geometryType&&(t.maxAllowableOffset=e.resolution),this._serviceInfo.capabilities.query.supportsQuantization||(t.quantizationParameters=null,t.maxAllowableOffset=e.resolution),t}_createQuery(e,t){const r=this._queryInfo.historicMoment?new Date(this._queryInfo.historicMoment):null,s=new c({...this._queryInfo,historicMoment:r,...t});return this._serviceInfo.capabilities.query.supportsQuantization||(t.quantizationParameters=null,s.maxAllowableOffset=e.resolution),t.quantizationParameters&&\"esriGeometryPolyline\"===this._serviceInfo.geometryType&&(s.maxAllowableOffset=e.resolution),s.resultType=\"tile\",s.geometry=e.extent,s}async _executePatchQuery(e,t,r,s){const o=t.clone();o.outFields=[this._serviceInfo.objectIdField,...r],o.returnCentroid=!1,o.returnGeometry=!1;const n=i(o.start)?o.start/8e3:0,a=s.signal;return this._patchQueue.push({tile:e,query:o,signal:a,depth:n})}async _resend(e,t){const{query:r,message:s}=e,o=i(r.outFields)?r.outFields:[],u=this._queryInfo.outFields,c=u.filter((e=>-1===o.indexOf(e)));if(n(s.addOrUpdate))this._onMessage({...s,type:\"append\"});else if(c.length)try{const e=this._subscriptions.get(s.id).tile,i=await this._executePatchQuery(e,r,c,t);a(t),r.outFields=u,s.addOrUpdate.joinAttributes(i),this._onMessage({...s,end:s.end,type:\"append\"})}catch(l){}else this._onMessage({...s,type:\"append\"})}async _resendSubscription(e){if(e.empty)return this._onMessage({id:e.tile.id,addOrUpdate:null,end:!1,type:\"append\"});const t=e.signal;for(const r of e.requests.done)await this._resend(r,{signal:t});return i(e.edits)?this._onMessage(e.edits):void 0}async resend(){const e=Array.from(this._subscriptions.values());await Promise.all(e.map((e=>this._resendSubscription(e))))}}export{m as BaseFeatureSource};\n"]},"metadata":{},"sourceType":"module"}