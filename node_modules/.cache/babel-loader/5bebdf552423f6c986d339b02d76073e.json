{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport t from \"../../../core/Error.js\";\nimport r from \"./CloudRaster.js\";\nimport e from \"./ImageAuxRaster.js\";\nimport s from \"./ImageServerRaster.js\";\nimport o from \"./MRFRaster.js\";\nimport a from \"./TIFFRaster.js\";\nconst c = new Map();\nc.set(\"CRF\", {\n  desc: \"Cloud Raster Format\",\n  constructor: r\n}), c.set(\"MRF\", {\n  desc: \"Meta Raster Format\",\n  constructor: o\n}), c.set(\"TIFF\", {\n  desc: \"GeoTIFF\",\n  constructor: a\n}), c.set(\"RasterTileServer\", {\n  desc: \"Raster Tile Server\",\n  constructor: s\n}), c.set(\"JPG\", {\n  desc: \"JPG Raster Format\",\n  constructor: e\n}), c.set(\"PNG\", {\n  desc: \"PNG Raster Format\",\n  constructor: e\n}), c.set(\"GIF\", {\n  desc: \"GIF Raster Format\",\n  constructor: e\n}), c.set(\"BMP\", {\n  desc: \"BMP Raster Format\",\n  constructor: e\n});\n\nclass n {\n  static get supportedFormats() {\n    const t = new Set();\n    return c.forEach((r, e) => t.add(e)), t;\n  }\n\n  static async open(r) {\n    const {\n      url: e,\n      ioConfig: s,\n      sourceJSON: o\n    } = r;\n    let a = r.datasetFormat;\n    null == a && e.lastIndexOf(\".\") && (a = e.slice(e.lastIndexOf(\".\") + 1).toUpperCase()), \"OVR\" === a || \"TIF\" === a ? a = \"TIFF\" : \"JPG\" !== a && \"JPEG\" !== a && \"JFIF\" !== a || (a = \"JPG\"), e.toLowerCase().indexOf(\"/imageserver\") > -1 && -1 === e.toLowerCase().indexOf(\"/wcsserver\") && (a = \"RasterTileServer\");\n    const n = {\n      url: e,\n      sourceJSON: o,\n      datasetFormat: a,\n      ioConfig: s || {\n        bandIds: null,\n        sampling: null\n      }\n    };\n    let i, u;\n    if (this.supportedFormats.has(a)) return i = c.get(a).constructor, u = new i(n), await u.open({\n      signal: r.signal\n    }), u;\n    if (a) throw new t(\"rasterfactory:open\", \"not a supported format \" + a);\n    const l = Array.from(c.keys());\n    let m = 0;\n\n    const F = function () {\n      return a = l[m++], a ? (i = c.get(a).constructor, u = new i(n), u.open({\n        signal: r.signal\n      }).then(() => u).catch(() => F())) : null;\n    };\n\n    return F();\n  }\n\n  static register(t, r, e) {\n    c.has(t.toUpperCase()) || c.set(t.toUpperCase(), {\n      desc: r,\n      constructor: e\n    });\n  }\n\n}\n\nexport default n;","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/layers/support/rasterDatasets/RasterFactory.js"],"names":["t","r","e","s","o","a","c","Map","set","desc","constructor","n","supportedFormats","Set","forEach","add","open","url","ioConfig","sourceJSON","datasetFormat","lastIndexOf","slice","toUpperCase","toLowerCase","indexOf","bandIds","sampling","i","u","has","get","signal","l","Array","from","keys","m","F","then","catch","register"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport t from\"../../../core/Error.js\";import r from\"./CloudRaster.js\";import e from\"./ImageAuxRaster.js\";import s from\"./ImageServerRaster.js\";import o from\"./MRFRaster.js\";import a from\"./TIFFRaster.js\";const c=new Map;c.set(\"CRF\",{desc:\"Cloud Raster Format\",constructor:r}),c.set(\"MRF\",{desc:\"Meta Raster Format\",constructor:o}),c.set(\"TIFF\",{desc:\"GeoTIFF\",constructor:a}),c.set(\"RasterTileServer\",{desc:\"Raster Tile Server\",constructor:s}),c.set(\"JPG\",{desc:\"JPG Raster Format\",constructor:e}),c.set(\"PNG\",{desc:\"PNG Raster Format\",constructor:e}),c.set(\"GIF\",{desc:\"GIF Raster Format\",constructor:e}),c.set(\"BMP\",{desc:\"BMP Raster Format\",constructor:e});class n{static get supportedFormats(){const t=new Set;return c.forEach(((r,e)=>t.add(e))),t}static async open(r){const{url:e,ioConfig:s,sourceJSON:o}=r;let a=r.datasetFormat;null==a&&e.lastIndexOf(\".\")&&(a=e.slice(e.lastIndexOf(\".\")+1).toUpperCase()),\"OVR\"===a||\"TIF\"===a?a=\"TIFF\":\"JPG\"!==a&&\"JPEG\"!==a&&\"JFIF\"!==a||(a=\"JPG\"),e.toLowerCase().indexOf(\"/imageserver\")>-1&&-1===e.toLowerCase().indexOf(\"/wcsserver\")&&(a=\"RasterTileServer\");const n={url:e,sourceJSON:o,datasetFormat:a,ioConfig:s||{bandIds:null,sampling:null}};let i,u;if(this.supportedFormats.has(a))return i=c.get(a).constructor,u=new i(n),await u.open({signal:r.signal}),u;if(a)throw new t(\"rasterfactory:open\",\"not a supported format \"+a);const l=Array.from(c.keys());let m=0;const F=function(){return a=l[m++],a?(i=c.get(a).constructor,u=new i(n),u.open({signal:r.signal}).then((()=>u)).catch((()=>F()))):null};return F()}static register(t,r,e){c.has(t.toUpperCase())||c.set(t.toUpperCase(),{desc:r,constructor:e})}}export default n;\n"]},"metadata":{},"sourceType":"module"}