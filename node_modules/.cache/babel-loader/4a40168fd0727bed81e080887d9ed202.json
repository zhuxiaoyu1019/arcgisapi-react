{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport e from \"../../core/Error.js\";\nimport { open as r } from \"../../core/workers/workers.js\";\nimport o from \"./PixelBlock.js\";\n\nclass n {\n  constructor() {\n    this._workerThread = null, this._destroyed = !1;\n  }\n\n  async initialize() {\n    const e = await r(\"RasterWorker\");\n    this._destroyed ? e.close() : this._workerThread = e;\n  }\n\n  destroy() {\n    this._destroyed = !0, this._workerThread && (this._workerThread.close(), this._workerThread = null);\n  }\n\n  async decode(r, n) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const t = await this._workerThread.invoke(\"decode\", r, n);\n    return t ? new o(t) : null;\n  }\n\n  async symbolize(r, n) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const t = {\n      extent: r.extent && r.extent.toJSON(),\n      pixelBlock: r.pixelBlock.toJSON(),\n      simpleStretchParams: r.simpleStretchParams,\n      bandIds: r.bandIds\n    },\n          i = await this._workerThread.invoke(\"symbolize\", t, n);\n    return i ? new o(i) : null;\n  }\n\n  async updateSymbolizer(r, o) {\n    var n;\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const t = null == r || null == (n = r.rendererJSON) ? void 0 : n.histograms;\n    await Promise.all(this._workerThread.broadcast(\"updateSymbolizer\", {\n      symbolizerJSON: r.toJSON(),\n      histograms: t\n    }, o));\n  }\n\n  async stretch(r, n) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (null == r || !r.pixelBlock) return null;\n    const t = {\n      srcPixelBlock: r.pixelBlock.toJSON(),\n      stretchParams: r.stretchParams\n    },\n          i = await this._workerThread.invoke(\"stretch\", t, n);\n    return i ? new o(i) : null;\n  }\n\n  async split(r, n) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (null == r || !r.pixelBlock) return null;\n    const t = {\n      srcPixelBlock: r.pixelBlock.toJSON(),\n      tileSize: r.tileSize,\n      maximumPyramidLevel: r.maximumPyramidLevel\n    },\n          i = await this._workerThread.invoke(\"split\", t, n);\n    return i && i.forEach((e, r) => {\n      i.set(r, e ? o.fromJSON(e) : null);\n    }), Promise.resolve(i);\n  }\n\n  async estimateStatisticsHistograms(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (null == r || !r.pixelBlock) return null;\n    const n = {\n      srcPixelBlock: r.pixelBlock.toJSON()\n    },\n          t = await this._workerThread.invoke(\"estimateStatisticsHistograms\", n, o);\n    return Promise.resolve(t);\n  }\n\n  async mosaicAndTransform(r, n) {\n    var t;\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (null == r || null == (t = r.srcPixelBlocks) || !t.length) return null;\n    const i = { ...r,\n      srcPixelBlocks: r.srcPixelBlocks.map(e => e ? e.toJSON() : null)\n    },\n          a = await this._workerThread.invoke(\"mosaicAndTransform\", i, n);\n    return a ? new o(a) : null;\n  }\n\n}\n\nexport default n;","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/layers/support/RasterJobHandler.js"],"names":["e","open","r","o","n","constructor","_workerThread","_destroyed","initialize","close","destroy","decode","t","invoke","symbolize","extent","toJSON","pixelBlock","simpleStretchParams","bandIds","i","updateSymbolizer","rendererJSON","histograms","Promise","all","broadcast","symbolizerJSON","stretch","srcPixelBlock","stretchParams","split","tileSize","maximumPyramidLevel","forEach","set","fromJSON","resolve","estimateStatisticsHistograms","mosaicAndTransform","srcPixelBlocks","length","map","a"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport e from\"../../core/Error.js\";import{open as r}from\"../../core/workers/workers.js\";import o from\"./PixelBlock.js\";class n{constructor(){this._workerThread=null,this._destroyed=!1}async initialize(){const e=await r(\"RasterWorker\");this._destroyed?e.close():this._workerThread=e}destroy(){this._destroyed=!0,this._workerThread&&(this._workerThread.close(),this._workerThread=null)}async decode(r,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t=await this._workerThread.invoke(\"decode\",r,n);return t?new o(t):null}async symbolize(r,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t={extent:r.extent&&r.extent.toJSON(),pixelBlock:r.pixelBlock.toJSON(),simpleStretchParams:r.simpleStretchParams,bandIds:r.bandIds},i=await this._workerThread.invoke(\"symbolize\",t,n);return i?new o(i):null}async updateSymbolizer(r,o){var n;if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t=null==r||null==(n=r.rendererJSON)?void 0:n.histograms;await Promise.all(this._workerThread.broadcast(\"updateSymbolizer\",{symbolizerJSON:r.toJSON(),histograms:t},o))}async stretch(r,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(null==r||!r.pixelBlock)return null;const t={srcPixelBlock:r.pixelBlock.toJSON(),stretchParams:r.stretchParams},i=await this._workerThread.invoke(\"stretch\",t,n);return i?new o(i):null}async split(r,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(null==r||!r.pixelBlock)return null;const t={srcPixelBlock:r.pixelBlock.toJSON(),tileSize:r.tileSize,maximumPyramidLevel:r.maximumPyramidLevel},i=await this._workerThread.invoke(\"split\",t,n);return i&&i.forEach(((e,r)=>{i.set(r,e?o.fromJSON(e):null)})),Promise.resolve(i)}async estimateStatisticsHistograms(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(null==r||!r.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON()},t=await this._workerThread.invoke(\"estimateStatisticsHistograms\",n,o);return Promise.resolve(t)}async mosaicAndTransform(r,n){var t;if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(null==r||null==(t=r.srcPixelBlocks)||!t.length)return null;const i={...r,srcPixelBlocks:r.srcPixelBlocks.map((e=>e?e.toJSON():null))},a=await this._workerThread.invoke(\"mosaicAndTransform\",i,n);return a?new o(a):null}}export default n;\n"]},"metadata":{},"sourceType":"module"}