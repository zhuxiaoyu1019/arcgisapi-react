{"ast":null,"code":"import Map from '@arcgis/core/Map';\nimport Color from \"@arcgis/core/Color\";\nimport SceneView from \"@arcgis/core/views/SceneView\";\nimport SceneLayer from '@arcgis/core/layers/SceneLayer';\nimport MeshSymbol3D from '@arcgis/core/symbols/MeshSymbol3D';\nimport SolidEdges3D from '@arcgis/core/symbols/edges/SolidEdges3D';\nimport SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer';\nimport FillSymbol3DLayer from '@arcgis/core/symbols/FillSymbol3DLayer';\nimport promiseUtils from '@arcgis/core/core/promiseUtils';\n\nconst ArcGISMap = (basemap, ref) => {\n  const buildings = new SceneLayer({\n    url: 'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0',\n    opacity: 1,\n    popupEnabled: false,\n    renderer: new SimpleRenderer({\n      symbol: new MeshSymbol3D({\n        symbolLayers: [new FillSymbol3DLayer({\n          material: {\n            color: new Color([200, 200, 200]),\n            colorMixMode: \"replace\"\n          },\n          edges: new SolidEdges3D({\n            color: new Color([100, 100, 100, 0.5])\n          })\n        })]\n      })\n    })\n  });\n  const map = new Map({\n    basemap,\n    layers: [buildings]\n  });\n  const view = new SceneView({\n    container: ref,\n    map,\n    qualityProfile: \"high\",\n    camera: {\n      position: [-73.98564294432742, 40.748586782824624, 601.67648],\n      heading: 330.47,\n      tilt: 64.02\n    },\n    environment: {\n      lighting: {\n        directShadowsEnabled: true\n      }\n    }\n  });\n  view.when().then(async () => {\n    const buildingsLV = await view.whenLayerView(buildings);\n    let highlight = null;\n    view.on(\"pointer-move\", promiseUtils.debounce(async e => {\n      const ht = await view.hitTest(e, {\n        include: [buildings]\n      });\n\n      if (highlight) {\n        highlight.remove();\n        highlight = null;\n      }\n\n      if (ht.results.length > 0) {\n        // select the first feature (closest to the camera)\n        const graphic = ht.results[0].graphic;\n\n        if (graphic) {\n          highlight = buildingsLV.highlight(graphic);\n        }\n      }\n    }));\n    view.on(\"pointer-leave\", () => {\n      if (highlight) {\n        highlight.remove();\n        highlight = null;\n      }\n    });\n  });\n  return view;\n};\n\n_c = ArcGISMap;\nexport default ArcGISMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArcGISMap\");","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/untils/ArcGISMap.js"],"names":["Map","Color","SceneView","SceneLayer","MeshSymbol3D","SolidEdges3D","SimpleRenderer","FillSymbol3DLayer","promiseUtils","ArcGISMap","basemap","ref","buildings","url","opacity","popupEnabled","renderer","symbol","symbolLayers","material","color","colorMixMode","edges","map","layers","view","container","qualityProfile","camera","position","heading","tilt","environment","lighting","directShadowsEnabled","when","then","buildingsLV","whenLayerView","highlight","on","debounce","e","ht","hitTest","include","remove","results","length","graphic"],"mappings":"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","sourcesContent":["import Map from '@arcgis/core/Map'\nimport Color from \"@arcgis/core/Color\"\nimport SceneView from \"@arcgis/core/views/SceneView\"\nimport SceneLayer from '@arcgis/core/layers/SceneLayer'\nimport MeshSymbol3D from '@arcgis/core/symbols/MeshSymbol3D'\nimport SolidEdges3D from '@arcgis/core/symbols/edges/SolidEdges3D'\nimport SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer'\nimport FillSymbol3DLayer from '@arcgis/core/symbols/FillSymbol3DLayer'\nimport promiseUtils from '@arcgis/core/core/promiseUtils'\n\nconst ArcGISMap = (basemap, ref) => {\n    const buildings = new SceneLayer({\n        url: 'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0',\n        opacity: 1,\n        popupEnabled: false,\n        renderer: new SimpleRenderer({\n            symbol: new MeshSymbol3D({\n                symbolLayers: [\n                    new FillSymbol3DLayer({\n                        material: {\n                            color: new Color([200, 200, 200]),\n                            colorMixMode: \"replace\"\n                        },\n                        edges: new SolidEdges3D({\n                            color: new Color([100, 100, 100, 0.5])\n                        })\n                    })\n                ]\n            })\n        })\n    });\n\n    const map = new Map({\n        basemap,\n        layers: [buildings]\n    });\n\n    const view = new SceneView({\n        container: ref,\n        map,\n        qualityProfile: \"high\",\n        camera: {\n            position: [-73.98564294432742, 40.748586782824624, 601.67648],\n            heading: 330.47,\n            tilt: 64.02\n        },\n        environment: {\n            lighting: {\n                directShadowsEnabled: true\n            }\n        },\n    })\n\n    view.when().then(async () => {\n        const buildingsLV = await view.whenLayerView(buildings);\n        let highlight = null;\n        view.on(\n            \"pointer-move\",\n            promiseUtils.debounce(async (e) => {\n                const ht = await view.hitTest(e, {\n                    include: [buildings]\n                });\n                if (highlight) {\n                    highlight.remove();\n                    highlight = null;\n                }\n                if (ht.results.length > 0) {\n                    // select the first feature (closest to the camera)\n                    const graphic = ht.results[0].graphic;\n                    if (graphic) {\n                        highlight = buildingsLV.highlight(graphic);\n                    }\n                }\n            })\n        );\n        view.on(\"pointer-leave\", () => {\n            if (highlight) {\n                highlight.remove();\n                highlight = null;\n            }\n        });\n    });\n\n    return view\n}\n\nexport default ArcGISMap\n"]},"metadata":{},"sourceType":"module"}