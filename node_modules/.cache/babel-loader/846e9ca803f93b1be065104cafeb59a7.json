{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { ForwardLinearDepth as e } from \"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";\nimport { Offset as o } from \"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";\nimport { Slice as r } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as a } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { InstancedDoublePrecision as i } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";\nimport { NormalAttribute as l } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";\nimport { PositionAttribute as t } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";\nimport { SymbolColor as d } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";\nimport { TextureCoordinateAttribute as n } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexColor as s } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";\nimport { VerticalOffset as c } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";\nimport { DefaultMaterialAuxiliaryPasses as g } from \"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";\nimport { ReadLinearDepth as v } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";\nimport { EvaluateAmbientOcclusion as m } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";\nimport { EvaluateSceneLighting as p } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";\nimport { multipassTerrainTest as u } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { PhysicallyBasedRendering as b } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";\nimport { PhysicallyBasedRenderingParameters as f } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";\nimport { ReadShadowMap as h } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { VisualVariables as w } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { symbolAlphaCutoff as x, DiscardOrAdjustAlpha as y } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";\nimport { MixExternalColor as C } from \"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";\nimport { glsl as L } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as M } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\n\nfunction j(j) {\n  const E = new M(),\n        O = E.vertex.code,\n        _ = E.fragment.code;\n  return E.vertex.uniforms.add(\"proj\", \"mat4\").add(\"view\", \"mat4\").add(\"camPos\", \"vec3\").add(\"localOrigin\", \"vec3\"), E.include(t), E.varyings.add(\"vpos\", \"vec3\"), E.include(w, j), E.include(i, j), E.include(c, j), 0 !== j.output && 7 !== j.output || (E.include(l, j), E.include(a, {\n    linearDepth: !1\n  }), j.offsetBackfaces && E.include(o), j.instancedColor && E.attributes.add(\"instanceColor\", \"vec4\"), E.varyings.add(\"vNormalWorld\", \"vec3\"), E.varyings.add(\"localvpos\", \"vec3\"), j.multipassTerrainEnabled && E.varyings.add(\"depth\", \"float\"), E.include(n, j), E.include(e, j), E.include(d, j), E.include(s, j), E.vertex.uniforms.add(\"externalColor\", \"vec4\"), E.varyings.add(\"vcolorExt\", \"vec4\"), O.add(L`\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt = externalColor;\n          ${j.instancedColor ? \"vcolorExt *= instanceColor;\" : \"\"}\n          vcolorExt *= vvColor();\n          vcolorExt *= getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a < ${L.float(x)}) {\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          }\n          else {\n            vpos = calculateVPos();\n            localvpos = vpos - view[3].xyz;\n            vpos = subtractOrigin(vpos);\n            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            ${j.offsetBackfaces ? \"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, camPos);\" : \"\"}\n          }\n          ${j.multipassTerrainEnabled ? L`depth = (view * vec4(vpos, 1.0)).z;` : \"\"}\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      `)), 7 === j.output && (E.include(r, j), E.include(y, j), j.multipassTerrainEnabled && (E.fragment.include(v), E.include(u, j)), E.fragment.uniforms.add(\"camPos\", \"vec3\").add(\"localOrigin\", \"vec3\").add(\"opacity\", \"float\").add(\"layerOpacity\", \"float\"), E.fragment.uniforms.add(\"view\", \"mat4\"), j.hasColorTexture && E.fragment.uniforms.add(\"tex\", \"sampler2D\"), E.fragment.include(C), _.add(L`\n      void main() {\n        discardBySlice(vpos);\n        ${j.multipassTerrainEnabled ? L`terrainDepthTest(gl_FragCoord, depth);` : \"\"}\n        ${j.hasColorTexture ? L`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${j.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n        discardOrAdjustAlpha(texColor);` : L`vec4 texColor = vec4(1.0);`}\n        ${j.attributeColor ? L`\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : L`\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n\n        gl_FragColor = vec4(opacity_);\n      }\n    `)), 0 === j.output && (E.include(r, j), E.include(p, j), E.include(m, j), E.include(y, j), j.receiveShadows && E.include(h, j), j.multipassTerrainEnabled && (E.fragment.include(v), E.include(u, j)), E.fragment.uniforms.add(\"camPos\", \"vec3\").add(\"localOrigin\", \"vec3\").add(\"ambient\", \"vec3\").add(\"diffuse\", \"vec3\").add(\"opacity\", \"float\").add(\"layerOpacity\", \"float\"), E.fragment.uniforms.add(\"view\", \"mat4\"), j.hasColorTexture && E.fragment.uniforms.add(\"tex\", \"sampler2D\"), E.include(f, j), E.include(b, j), E.fragment.include(C), _.add(L`\n      void main() {\n        discardBySlice(vpos);\n        ${j.multipassTerrainEnabled ? L`terrainDepthTest(gl_FragCoord, depth);` : \"\"}\n        ${j.hasColorTexture ? L`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${j.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n        discardOrAdjustAlpha(texColor);` : L`vec4 texColor = vec4(1.0);`}\n        vec3 viewDirection = normalize(vpos - camPos);\n        ${1 === j.pbrMode ? \"applyPBRFactors();\" : \"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${j.receiveShadows ? \"float shadow = readShadowMap(vpos, linearDepth);\" : 1 === j.viewingMode ? \"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\" : \"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${j.attributeColor ? L`\n        vec3 albedo_ = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : L`\n        vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        ${L`\n        vec3 shadedNormal = normalize(vNormalWorld);\n        albedo_ *= 1.2;\n        vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n        float alignmentLightView = clamp(dot(viewForward, -lightingMainDirection), 0.0, 1.0);\n        float transmittance = 1.0 - clamp(dot(viewForward, shadedNormal), 0.0, 1.0);\n        float treeRadialFalloff = vColor.r;\n        float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n        additionalLight += backLightFactor * lightingMainIntensity;`}\n        ${1 === j.pbrMode || 2 === j.pbrMode ? 1 === j.viewingMode ? L`vec3 normalGround = normalize(vpos + localOrigin);` : L`vec3 normalGround = vec3(0.0, 0.0, 1.0);` : L``}\n        ${1 === j.pbrMode || 2 === j.pbrMode ? L`\n            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor = evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : \"vec3 shadedColor = evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);\"}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${j.OITEnabled ? \"gl_FragColor = premultiplyAlpha(gl_FragColor);\" : \"\"}\n      }\n    `)), E.include(g, j), E;\n}\n\nvar E = Object.freeze({\n  __proto__: null,\n  build: j\n});\nexport { E as R, j as b };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/chunks/RealisticTree.glsl.js"],"names":["ForwardLinearDepth","e","Offset","o","Slice","r","Transform","a","InstancedDoublePrecision","i","NormalAttribute","l","PositionAttribute","t","SymbolColor","d","TextureCoordinateAttribute","n","VertexColor","s","VerticalOffset","c","DefaultMaterialAuxiliaryPasses","g","ReadLinearDepth","v","EvaluateAmbientOcclusion","m","EvaluateSceneLighting","p","multipassTerrainTest","u","PhysicallyBasedRendering","b","PhysicallyBasedRenderingParameters","f","ReadShadowMap","h","VisualVariables","w","symbolAlphaCutoff","x","DiscardOrAdjustAlpha","y","MixExternalColor","C","glsl","L","ShaderBuilder","M","j","E","O","vertex","code","_","fragment","uniforms","add","include","varyings","output","linearDepth","offsetBackfaces","instancedColor","attributes","multipassTerrainEnabled","float","hasColorTexture","textureAlphaPremultiplied","attributeColor","receiveShadows","pbrMode","viewingMode","OITEnabled","Object","freeze","__proto__","build","R"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{Slice as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as i}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VerticalOffset as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as g}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{ReadLinearDepth as v}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{EvaluateAmbientOcclusion as m}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{multipassTerrainTest as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{PhysicallyBasedRendering as b}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMap as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as x,DiscardOrAdjustAlpha as y}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{MixExternalColor as C}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{glsl as L}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as M}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";function j(j){const E=new M,O=E.vertex.code,_=E.fragment.code;return E.vertex.uniforms.add(\"proj\",\"mat4\").add(\"view\",\"mat4\").add(\"camPos\",\"vec3\").add(\"localOrigin\",\"vec3\"),E.include(t),E.varyings.add(\"vpos\",\"vec3\"),E.include(w,j),E.include(i,j),E.include(c,j),0!==j.output&&7!==j.output||(E.include(l,j),E.include(a,{linearDepth:!1}),j.offsetBackfaces&&E.include(o),j.instancedColor&&E.attributes.add(\"instanceColor\",\"vec4\"),E.varyings.add(\"vNormalWorld\",\"vec3\"),E.varyings.add(\"localvpos\",\"vec3\"),j.multipassTerrainEnabled&&E.varyings.add(\"depth\",\"float\"),E.include(n,j),E.include(e,j),E.include(d,j),E.include(s,j),E.vertex.uniforms.add(\"externalColor\",\"vec4\"),E.varyings.add(\"vcolorExt\",\"vec4\"),O.add(L`\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt = externalColor;\n          ${j.instancedColor?\"vcolorExt *= instanceColor;\":\"\"}\n          vcolorExt *= vvColor();\n          vcolorExt *= getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a < ${L.float(x)}) {\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          }\n          else {\n            vpos = calculateVPos();\n            localvpos = vpos - view[3].xyz;\n            vpos = subtractOrigin(vpos);\n            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            ${j.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, camPos);\":\"\"}\n          }\n          ${j.multipassTerrainEnabled?L`depth = (view * vec4(vpos, 1.0)).z;`:\"\"}\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      `)),7===j.output&&(E.include(r,j),E.include(y,j),j.multipassTerrainEnabled&&(E.fragment.include(v),E.include(u,j)),E.fragment.uniforms.add(\"camPos\",\"vec3\").add(\"localOrigin\",\"vec3\").add(\"opacity\",\"float\").add(\"layerOpacity\",\"float\"),E.fragment.uniforms.add(\"view\",\"mat4\"),j.hasColorTexture&&E.fragment.uniforms.add(\"tex\",\"sampler2D\"),E.fragment.include(C),_.add(L`\n      void main() {\n        discardBySlice(vpos);\n        ${j.multipassTerrainEnabled?L`terrainDepthTest(gl_FragCoord, depth);`:\"\"}\n        ${j.hasColorTexture?L`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${j.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n        discardOrAdjustAlpha(texColor);`:L`vec4 texColor = vec4(1.0);`}\n        ${j.attributeColor?L`\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:L`\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n\n        gl_FragColor = vec4(opacity_);\n      }\n    `)),0===j.output&&(E.include(r,j),E.include(p,j),E.include(m,j),E.include(y,j),j.receiveShadows&&E.include(h,j),j.multipassTerrainEnabled&&(E.fragment.include(v),E.include(u,j)),E.fragment.uniforms.add(\"camPos\",\"vec3\").add(\"localOrigin\",\"vec3\").add(\"ambient\",\"vec3\").add(\"diffuse\",\"vec3\").add(\"opacity\",\"float\").add(\"layerOpacity\",\"float\"),E.fragment.uniforms.add(\"view\",\"mat4\"),j.hasColorTexture&&E.fragment.uniforms.add(\"tex\",\"sampler2D\"),E.include(f,j),E.include(b,j),E.fragment.include(C),_.add(L`\n      void main() {\n        discardBySlice(vpos);\n        ${j.multipassTerrainEnabled?L`terrainDepthTest(gl_FragCoord, depth);`:\"\"}\n        ${j.hasColorTexture?L`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${j.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n        discardOrAdjustAlpha(texColor);`:L`vec4 texColor = vec4(1.0);`}\n        vec3 viewDirection = normalize(vpos - camPos);\n        ${1===j.pbrMode?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${j.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":1===j.viewingMode?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${j.attributeColor?L`\n        vec3 albedo_ = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:L`\n        vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        ${L`\n        vec3 shadedNormal = normalize(vNormalWorld);\n        albedo_ *= 1.2;\n        vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n        float alignmentLightView = clamp(dot(viewForward, -lightingMainDirection), 0.0, 1.0);\n        float transmittance = 1.0 - clamp(dot(viewForward, shadedNormal), 0.0, 1.0);\n        float treeRadialFalloff = vColor.r;\n        float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n        additionalLight += backLightFactor * lightingMainIntensity;`}\n        ${1===j.pbrMode||2===j.pbrMode?1===j.viewingMode?L`vec3 normalGround = normalize(vpos + localOrigin);`:L`vec3 normalGround = vec3(0.0, 0.0, 1.0);`:L``}\n        ${1===j.pbrMode||2===j.pbrMode?L`\n            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor = evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:\"vec3 shadedColor = evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);\"}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${j.OITEnabled?\"gl_FragColor = premultiplyAlpha(gl_FragColor);\":\"\"}\n      }\n    `)),E.include(g,j),E}var E=Object.freeze({__proto__:null,build:j});export{E as R,j as b};\n"]},"metadata":{},"sourceType":"module"}