{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { isSome as e, isNone as t } from \"../../../core/maybe.js\";\nimport { toQuantizationTransform as s } from \"../../../geometry/support/quantizationUtils.js\";\nimport { isValid as i, equals as r } from \"../../../geometry/support/spatialReferenceUtils.js\";\nimport { convertFromGeometry as n } from \"../featureConversionUtils.js\";\nimport a from \"./AttributesBuilder.js\";\nimport { getWhereClause as o } from \"./attributeSupport.js\";\nimport { project as u, projectMany as l } from \"./projectionSupport.js\";\nimport { getTimeOperator as c } from \"./timeSupport.js\";\nimport { cleanFromGeometryEngine as d, getGeometry as h, transformCentroid as m } from \"./utils.js\";\nimport { isStringField as f } from \"../../support/fieldUtils.js\";\nimport { isNullCountSupported as p, calculateStringStatistics as g, calculateStatistics as y, processStatsResult as I } from \"../../../smartMapping/statistics/support/utils.js\";\nimport { loadArcade as b } from \"../../../support/arcadeOnDemand.js\";\n\nfunction x(e) {\n  return e.substr(24, 12) + e.substr(19, 4) + e.substr(16, 2) + e.substr(14, 2) + e.substr(11, 2) + e.substr(9, 2) + e.substr(6, 2) + e.substr(4, 2) + e.substr(2, 2) + e.substr(0, 2);\n}\n\nfunction F(e, t, s) {\n  return (s ? e > t : e < t) ? -1 : (s ? e < t : e > t) ? 1 : 0;\n}\n\nfunction T(e, t, s) {\n  return s ? t - e : e - t;\n}\n\nfunction A(e, t, s, i) {\n  if (s && \"esriFieldTypeDate\" === s.type) {\n    const s = new Date(e).getTime(),\n          r = new Date(t).getTime();\n    if (!isNaN(s) && !isNaN(r)) return T(s, r, i);\n  }\n\n  if (\"number\" == typeof e && \"number\" == typeof t) return T(e, t, i);\n\n  if (\"string\" == typeof e && \"string\" == typeof t) {\n    const r = e.toUpperCase(),\n          n = t.toUpperCase();\n    return !s || \"esriFieldTypeGUID\" !== s.type && \"esriFieldTypeGlobalID\" !== s.type ? F(r, n, i) : F(x(r), x(n), i);\n  }\n\n  return i ? 1 : -1;\n}\n\nclass S {\n  constructor(e, t, s) {\n    this.items = e, this.queryGeometry = t, this.definitionExpression = s.definitionExpression, this.geometryType = s.geometryType, this.hasM = s.hasM, this.hasZ = s.hasZ, this.objectIdField = s.objectIdField, this.spatialReference = s.spatialReference, this.fieldsIndex = s.fieldsIndex, this.timeInfo = s.timeInfo, this.featureAdapter = s.featureAdapter, this.aggregateAdapter = s.aggregateAdapter;\n  }\n\n  get size() {\n    return this.items.length;\n  }\n\n  createQueryResponseForCount(e) {\n    const t = new a(e, this.featureAdapter, this.fieldsIndex);\n    if (!e.outStatistics) return t.countDistinctValues(this.items);\n    const {\n      groupByFieldsForStatistics: s,\n      having: i\n    } = e;\n    if (!!!(null == s ? void 0 : s.length)) return 1;\n    const r = new Map(),\n          n = new Map(),\n          o = new Set(),\n          u = e.outStatistics;\n\n    for (const a of u) {\n      const {\n        statisticType: e\n      } = a,\n            u = \"exceedslimit\" !== e ? a.onStatisticField : void 0;\n\n      if (!n.has(u)) {\n        const e = [];\n\n        for (const i of s) {\n          const s = this._getAttributeValues(t, i, r);\n\n          e.push(s);\n        }\n\n        n.set(u, this._calculateUniqueValues(e));\n      }\n\n      const l = n.get(u);\n\n      for (const s in l) {\n        const {\n          data: e,\n          items: r\n        } = l[s],\n              n = e.join(\",\");\n        i && !t.validateItems(r, i) || o.add(n);\n      }\n    }\n\n    return o.size;\n  }\n\n  createQueryResponse(e) {\n    let t;\n\n    if (e.outStatistics) {\n      t = e.outStatistics.some(e => \"exceedslimit\" === e.statisticType) ? this._createExceedsLimitQueryResponse(e) : this._createStatisticsQueryResponse(e);\n    } else t = this._createFeatureQueryResponse(e);\n\n    return e.returnQueryGeometry && (i(e.outSR) && !r(this.queryGeometry.spatialReference, e.outSR) ? t.queryGeometry = d({\n      spatialReference: e.outSR,\n      ...u(this.queryGeometry, this.queryGeometry.spatialReference, e.outSR)\n    }) : t.queryGeometry = d({\n      spatialReference: e.outSR,\n      ...this.queryGeometry\n    })), t;\n  }\n\n  createSnappingResponse(e, t) {\n    const s = this.featureAdapter,\n          i = _(this.hasZ, this.hasM),\n          {\n      x: r,\n      y: n\n    } = e.point,\n          a = \"number\" == typeof e.distance ? e.distance : e.distance.x,\n          o = \"number\" == typeof e.distance ? e.distance : e.distance.y,\n          u = {\n      candidates: []\n    },\n          l = \"esriGeometryPolygon\" === this.geometryType,\n          c = this.getPointCreator(e.point, this.spatialReference, t);\n\n    for (const d of this.items) {\n      const t = s.getGeometry(d);\n      if (!t) continue;\n      const {\n        coords: h,\n        lengths: m\n      } = t;\n\n      if (1 & e.types) {\n        let e = 0;\n\n        for (let t = 0; t < m.length; t++) {\n          const l = m[t];\n\n          for (let t = 0; t < l; t++, e += i) {\n            const m = h[e],\n                  f = h[e + 1];\n\n            if (t !== l - 1) {\n              const t = h[e + i],\n                    l = h[e + i + 1],\n                    {\n                x: p,\n                y: g\n              } = V(r, n, m, f, t, l),\n                    y = (r - p) / a,\n                    I = (n - g) / o,\n                    b = y * y + I * I;\n              b <= 1 && u.candidates.push({\n                type: \"edge\",\n                objectId: s.getObjectId(d),\n                distance: Math.sqrt(b),\n                target: c(p, g),\n                start: c(m, f),\n                end: c(t, l)\n              });\n            }\n          }\n        }\n      }\n\n      if (2 & e.types) {\n        const e = l ? h.length - i : h.length;\n\n        for (let t = 0; t < e; t += i) {\n          const e = h[t],\n                i = h[t + 1],\n                l = (r - e) / a,\n                m = (n - i) / o,\n                f = l * l + m * m;\n          f <= 1 && u.candidates.push({\n            type: \"vertex\",\n            objectId: s.getObjectId(d),\n            distance: Math.sqrt(f),\n            target: c(e, i)\n          });\n        }\n      }\n    }\n\n    return u.candidates.sort((e, t) => e.distance - t.distance), u;\n  }\n\n  getPointCreator(t, s, i) {\n    const n = e(i) && !r(s, i) ? e => u(e, s, i) : e => e;\n    return null != t.z && null != t.m ? (e, s) => n({\n      x: e,\n      y: s,\n      z: t.z,\n      m: t.m\n    }) : null != t.z ? (e, s) => n({\n      x: e,\n      y: s,\n      z: t.z\n    }) : null != t.m ? (e, s) => n({\n      x: e,\n      y: s,\n      m: t.m\n    }) : (e, t) => n({\n      x: e,\n      y: t\n    });\n  }\n\n  executeAttributesQuery(e) {\n    const t = o(e.where, this.fieldsIndex);\n    if (!t) return Promise.resolve(this);\n\n    if (t.isStandardized) {\n      let s = 0;\n      const i = [];\n\n      for (const e of this.items) t.testFeature(e, this.featureAdapter) && (i[s++] = e);\n\n      const r = new S(i, this.queryGeometry, this);\n      return r.definitionExpression = e.where, Promise.resolve(r);\n    }\n\n    return Promise.reject(new TypeError(\"Where clause is not standardized\"));\n  }\n\n  executeAggregateIdsQuery(e) {\n    if (!e.aggregateIds || !e.aggregateIds.length || t(this.aggregateAdapter)) return Promise.resolve(this);\n    const s = new Set();\n\n    for (const t of e.aggregateIds) {\n      this.aggregateAdapter.getFeatureObjectIds(t).forEach(e => s.add(e));\n    }\n\n    const i = this.featureAdapter.getObjectId;\n    return Promise.resolve(new S(this.items.filter(e => s.has(i(e))), this.queryGeometry, this));\n  }\n\n  executeObjectIdsQuery(e) {\n    if (!e.objectIds || !e.objectIds.length) return Promise.resolve(this);\n    const t = new Set(e.objectIds),\n          s = this.featureAdapter.getObjectId;\n    return Promise.resolve(new S(this.items.filter(e => t.has(s(e))), this.queryGeometry, this));\n  }\n\n  executeTimeQuery(t) {\n    const s = c(this.timeInfo, t.timeExtent, this.featureAdapter);\n    if (!e(s)) return Promise.resolve(this);\n    const i = this.items.filter(s);\n    return Promise.resolve(new S(i, this.queryGeometry, this));\n  }\n\n  filterLatest() {\n    const {\n      trackIdField: e,\n      startTimeField: t,\n      endTimeField: s\n    } = this.timeInfo,\n          i = s || t,\n          r = new Map(),\n          n = this.featureAdapter.getAttribute;\n\n    for (const o of this.items) {\n      const t = n(o, e),\n            s = n(o, i),\n            a = r.get(t);\n      (!a || s > n(a, i)) && r.set(t, o);\n    }\n\n    const a = Array.from(r.values());\n    return Promise.resolve(new S(a, this.queryGeometry, this));\n  }\n\n  async project(e) {\n    if (!e || r(this.spatialReference, e)) return this;\n    const t = this.featureAdapter,\n          s = (await l(this.items.map(e => h(this.geometryType, this.hasZ, this.hasM, t.getGeometry(e))), this.spatialReference, e)).map((e, s) => t.cloneWithGeometry(this.items[s], n(e, this.hasZ, this.hasM)));\n    return new S(s, this.queryGeometry, {\n      definitionExpression: this.definitionExpression,\n      geometryType: this.geometryType,\n      hasM: this.hasM,\n      hasZ: this.hasZ,\n      objectIdField: this.objectIdField,\n      spatialReference: e,\n      fieldsIndex: this.fieldsIndex,\n      timeInfo: this.timeInfo,\n      featureAdapter: this.featureAdapter\n    });\n  }\n\n  async createSummaryStatisticsResponse(e, t) {\n    const {\n      field: s,\n      normalizationField: i,\n      normalizationType: r,\n      normalizationTotal: n,\n      minValue: o,\n      maxValue: u\n    } = t,\n          l = new a(e, this.featureAdapter, this.fieldsIndex),\n          c = this.fieldsIndex.isDateField(s),\n          d = t.valueExpression ? await this._getAttributeExpressionValues(l, t.valueExpression, t.viewInfoParams) : this._getAttributeNormalizedValues(l, {\n      field: s,\n      normalizationField: i,\n      normalizationType: r,\n      normalizationTotal: n\n    }),\n          h = p({\n      normalizationType: r,\n      normalizationField: i,\n      minValue: o,\n      maxValue: u\n    }),\n          m = f(this.fieldsIndex.get(s)) ? g({\n      values: d,\n      supportsNullCount: h\n    }) : y({\n      values: d,\n      minValue: o,\n      maxValue: u,\n      useSampleStdDev: !r,\n      supportsNullCount: h\n    });\n    return I(m, c);\n  }\n\n  _sortFeatures(e, t, s) {\n    if (e.length > 1 && t && t.length) for (const i of t.reverse()) {\n      const t = i.split(\" \"),\n            r = t[0],\n            n = this.fieldsIndex.get(r),\n            a = t[1] && \"desc\" === t[1].toLowerCase();\n      e.sort((e, t) => A(s(e, r, n), s(t, r, n), n, a));\n    }\n  }\n\n  _createFeatureQueryResponse(e) {\n    const t = this.items,\n          {\n      geometryType: i,\n      hasM: r,\n      hasZ: n,\n      objectIdField: a,\n      spatialReference: o\n    } = this,\n          {\n      outFields: u,\n      outSR: l,\n      quantizationParameters: c,\n      resultRecordCount: h,\n      resultOffset: m,\n      returnZ: f,\n      returnM: p\n    } = e,\n          g = null != h && t.length > (m || 0) + h,\n          y = u && (u.indexOf(\"*\") > -1 ? [...this.fieldsIndex.fields] : u.map(e => this.fieldsIndex.get(e)));\n    return {\n      exceededTransferLimit: g,\n      features: this._createFeatures(e, t),\n      fields: y,\n      geometryType: i,\n      hasM: r && p,\n      hasZ: n && f,\n      objectIdFieldName: a,\n      spatialReference: d(l || o),\n      transform: c && s(c) || null\n    };\n  }\n\n  _createFeatures(e, t) {\n    const i = new a(e, this.featureAdapter, this.fieldsIndex),\n          {\n      hasM: r,\n      hasZ: n\n    } = this,\n          {\n      orderByFields: o,\n      quantizationParameters: u,\n      returnGeometry: l,\n      returnCentroid: c,\n      maxAllowableOffset: d,\n      resultOffset: f,\n      resultRecordCount: p,\n      returnZ: g = !1,\n      returnM: y = !1\n    } = e,\n          I = n && g,\n          b = r && y;\n    let x = [],\n        F = 0;\n    const T = [...t];\n\n    if (this._sortFeatures(T, o, (e, t, s) => i.getFieldValue(e, t, s)), l || c) {\n      const e = s(u);\n      if (l && !c) for (const t of T) x[F++] = {\n        attributes: i.getAttributes(t),\n        geometry: h(this.geometryType, this.hasZ, this.hasM, this.featureAdapter.getGeometry(t), d, e, I, b)\n      };else if (!l && c) for (const t of T) x[F++] = {\n        attributes: i.getAttributes(t),\n        centroid: m(this, this.featureAdapter.getCentroid(t, this), e)\n      };else for (const t of T) x[F++] = {\n        attributes: i.getAttributes(t),\n        centroid: m(this, this.featureAdapter.getCentroid(t, this), e),\n        geometry: h(this.geometryType, this.hasZ, this.hasM, this.featureAdapter.getGeometry(t), d, e, I, b)\n      };\n    } else for (const s of T) {\n      const e = i.getAttributes(s);\n      e && (x[F++] = {\n        attributes: e\n      });\n    }\n\n    const A = f || 0;\n\n    if (null != p) {\n      const e = A + p;\n      x = x.slice(A, Math.min(x.length, e));\n    }\n\n    return x;\n  }\n\n  _createExceedsLimitQueryResponse(e) {\n    let t = !1,\n        s = Number.POSITIVE_INFINITY,\n        i = Number.POSITIVE_INFINITY,\n        r = Number.POSITIVE_INFINITY;\n\n    for (const n of e.outStatistics) if (\"exceedslimit\" === n.statisticType) {\n      s = null != n.maxPointCount ? n.maxPointCount : Number.POSITIVE_INFINITY, i = null != n.maxRecordCount ? n.maxRecordCount : Number.POSITIVE_INFINITY, r = null != n.maxVertexCount ? n.maxVertexCount : Number.POSITIVE_INFINITY;\n      break;\n    }\n\n    if (\"esriGeometryPoint\" === this.geometryType) t = this.items.length > s;else if (this.items.length > i) t = !0;else {\n      const e = this.hasZ ? this.hasM ? 4 : 3 : this.hasM ? 3 : 2,\n            s = this.featureAdapter;\n      t = this.items.reduce((e, t) => {\n        const i = s.getGeometry(t);\n        return e + (i && i.coords.length || 0);\n      }, 0) / e > r;\n    }\n    return {\n      fields: [{\n        name: \"exceedslimit\",\n        type: \"esriFieldTypeInteger\",\n        alias: \"exceedslimit\",\n        sqlType: \"sqlTypeInteger\",\n        domain: null,\n        defaultValue: null\n      }],\n      features: [{\n        attributes: {\n          exceedslimit: Number(t)\n        }\n      }]\n    };\n  }\n\n  _createStatisticsQueryResponse(e) {\n    const t = {\n      attributes: {}\n    },\n          s = [],\n          i = new Map(),\n          r = new Map(),\n          n = new Map(),\n          o = new Map(),\n          u = new a(e, this.featureAdapter, this.fieldsIndex),\n          l = e.outStatistics,\n          {\n      groupByFieldsForStatistics: c,\n      having: d,\n      orderByFields: h\n    } = e,\n          m = c && c.length,\n          f = !!m,\n          p = f && c[0],\n          g = f && !this.fieldsIndex.get(p);\n\n    for (const a of l) {\n      const {\n        outStatisticFieldName: e,\n        statisticType: l\n      } = a,\n            h = a,\n            y = \"exceedslimit\" !== l ? a.onStatisticField : void 0,\n            I = \"percentile_disc\" === l || \"percentile_cont\" === l,\n            b = f && 1 === m && (y === p || g) && \"count\" === l;\n\n      if (f) {\n        if (!n.has(y)) {\n          const e = [];\n\n          for (const t of c) {\n            const s = this._getAttributeValues(u, t, i);\n\n            e.push(s);\n          }\n\n          n.set(y, this._calculateUniqueValues(e, u.returnDistinctValues));\n        }\n\n        const t = n.get(y);\n\n        for (const s in t) {\n          const {\n            count: r,\n            data: n,\n            items: a,\n            itemPositions: l\n          } = t[s],\n                m = n.join(\",\");\n\n          if (!d || u.validateItems(a, d)) {\n            const t = o.get(m) || {\n              attributes: {}\n            };\n            let s = null;\n            if (b) s = r;else {\n              const e = this._getAttributeValues(u, y, i),\n                    t = l.map(t => e[t]);\n\n              s = I && \"statisticParameters\" in h ? this._getPercentileValue(h, t) : this._getStatisticValue(h, t);\n            }\n            t.attributes[e] = s, c.forEach((e, s) => t.attributes[this.fieldsIndex.get(e) ? e : `EXPR_${s + 1}`] = n[s]), o.set(m, t);\n          }\n        }\n      } else {\n        const s = this._getAttributeValues(u, y, i);\n\n        t.attributes[e] = I && \"statisticParameters\" in h ? this._getPercentileValue(h, s) : this._getStatisticValue(h, s, r);\n      }\n\n      s.push({\n        name: e,\n        alias: e,\n        type: \"esriFieldTypeDouble\"\n      });\n    }\n\n    const y = f ? Array.from(o.values()) : [t];\n    return this._sortFeatures(y, h, (e, t) => e.attributes[t]), {\n      fields: s,\n      features: y\n    };\n  }\n\n  _getStatisticValue(e, t, s) {\n    const {\n      onStatisticField: i,\n      statisticType: r\n    } = e;\n    let n = null;\n    n = null != s && s.has(i) ? s.get(i) : f(this.fieldsIndex.get(i)) ? g({\n      values: t\n    }) : y({\n      values: t,\n      minValue: null,\n      maxValue: null,\n      useSampleStdDev: !0\n    }), s && s.set(i, n);\n    return n[\"var\" === r ? \"variance\" : r];\n  }\n\n  _getPercentileValue(e, t) {\n    const {\n      onStatisticField: s,\n      statisticParameters: i,\n      statisticType: r\n    } = e,\n          {\n      value: n,\n      orderBy: a\n    } = i,\n          o = \"desc\" === a,\n          u = this.fieldsIndex.get(s),\n          l = [...t].filter(e => null != e).sort((e, t) => A(e, t, u, o));\n    return this._calculatePercentile(l, n, \"percentile_disc\" === r);\n  }\n\n  _getAttributeValues(e, t, s) {\n    if (s.has(t)) return s.get(t);\n    const i = this.fieldsIndex.get(t),\n          r = this.items.map(s => e.getFieldValue(s, t, i));\n    return s.set(t, r), r;\n  }\n\n  _getAttributeNormalizedValues(e, t) {\n    return this.items.map(s => e.getNormalizedValue(s, {\n      field: t.field,\n      fieldInfo: this.fieldsIndex.get(t.field),\n      normalizationField: t.normalizationField,\n      normalizationFieldInfo: this.fieldsIndex.get(t.normalizationField),\n      normalizationType: t.normalizationType,\n      normalizationTotal: t.normalizationTotal\n    }));\n  }\n\n  async _getAttributeExpressionValues(e, t, s) {\n    const {\n      arcadeUtils: i\n    } = await b(),\n          r = i.createFunction(t),\n          n = s && i.getViewInfo(s);\n    return this.items.map(t => e.getExpressionValue(t, {\n      compiledFunc: r,\n      viewInfo: n\n    }, i));\n  }\n\n  _calculateUniqueValues(e, t) {\n    const s = {},\n          i = this.items,\n          r = i.length;\n\n    for (let n = 0; n < r; n++) {\n      const r = i[n],\n            a = [];\n\n      for (const t of e) a.push(t[n]);\n\n      const o = a.join(\",\");\n      t ? null == s[o] && (s[o] = {\n        count: 1,\n        data: a,\n        items: [r],\n        itemPositions: [n]\n      }) : null == s[o] ? s[o] = {\n        count: 1,\n        data: a,\n        items: [r],\n        itemPositions: [n]\n      } : (s[o].count++, s[o].items.push(r), s[o].itemPositions.push(n));\n    }\n\n    return s;\n  }\n\n  _calculatePercentile(e, t, s) {\n    if (0 === e.length) return null;\n    if (t <= 0) return e[0];\n    if (t >= 1) return e[e.length - 1];\n    const i = (e.length - 1) * t,\n          r = Math.floor(i),\n          n = r + 1,\n          a = i % 1,\n          o = e[r],\n          u = e[n];\n    return n >= e.length || s || \"string\" == typeof o || \"string\" == typeof u ? o : o * (1 - a) + u * a;\n  }\n\n}\n\nfunction V(e, t, s, i, r, n) {\n  const a = r - s,\n        o = n - i,\n        u = a * a + o * o,\n        l = (e - s) * a + (t - i) * o,\n        c = Math.min(1, Math.max(0, l / u));\n  return {\n    x: s + a * c,\n    y: i + o * c\n  };\n}\n\nfunction _(e, t) {\n  return e ? t ? 4 : 3 : t ? 3 : 2;\n}\n\nexport default S;","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/layers/graphics/data/QueryEngineResult.js"],"names":["isSome","e","isNone","t","toQuantizationTransform","s","isValid","i","equals","r","convertFromGeometry","n","a","getWhereClause","o","project","u","projectMany","l","getTimeOperator","c","cleanFromGeometryEngine","d","getGeometry","h","transformCentroid","m","isStringField","f","isNullCountSupported","p","calculateStringStatistics","g","calculateStatistics","y","processStatsResult","I","loadArcade","b","x","substr","F","T","A","type","Date","getTime","isNaN","toUpperCase","S","constructor","items","queryGeometry","definitionExpression","geometryType","hasM","hasZ","objectIdField","spatialReference","fieldsIndex","timeInfo","featureAdapter","aggregateAdapter","size","length","createQueryResponseForCount","outStatistics","countDistinctValues","groupByFieldsForStatistics","having","Map","Set","statisticType","onStatisticField","has","_getAttributeValues","push","set","_calculateUniqueValues","get","data","join","validateItems","add","createQueryResponse","some","_createExceedsLimitQueryResponse","_createStatisticsQueryResponse","_createFeatureQueryResponse","returnQueryGeometry","outSR","createSnappingResponse","_","point","distance","candidates","getPointCreator","coords","lengths","types","V","objectId","getObjectId","Math","sqrt","target","start","end","sort","z","executeAttributesQuery","where","Promise","resolve","isStandardized","testFeature","reject","TypeError","executeAggregateIdsQuery","aggregateIds","getFeatureObjectIds","forEach","filter","executeObjectIdsQuery","objectIds","executeTimeQuery","timeExtent","filterLatest","trackIdField","startTimeField","endTimeField","getAttribute","Array","from","values","map","cloneWithGeometry","createSummaryStatisticsResponse","field","normalizationField","normalizationType","normalizationTotal","minValue","maxValue","isDateField","valueExpression","_getAttributeExpressionValues","viewInfoParams","_getAttributeNormalizedValues","supportsNullCount","useSampleStdDev","_sortFeatures","reverse","split","toLowerCase","outFields","quantizationParameters","resultRecordCount","resultOffset","returnZ","returnM","indexOf","fields","exceededTransferLimit","features","_createFeatures","objectIdFieldName","transform","orderByFields","returnGeometry","returnCentroid","maxAllowableOffset","getFieldValue","attributes","getAttributes","geometry","centroid","getCentroid","slice","min","Number","POSITIVE_INFINITY","maxPointCount","maxRecordCount","maxVertexCount","reduce","name","alias","sqlType","domain","defaultValue","exceedslimit","outStatisticFieldName","returnDistinctValues","count","itemPositions","_getPercentileValue","_getStatisticValue","statisticParameters","value","orderBy","_calculatePercentile","getNormalizedValue","fieldInfo","normalizationFieldInfo","arcadeUtils","createFunction","getViewInfo","getExpressionValue","compiledFunc","viewInfo","floor","max"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{isSome as e,isNone as t}from\"../../../core/maybe.js\";import{toQuantizationTransform as s}from\"../../../geometry/support/quantizationUtils.js\";import{isValid as i,equals as r}from\"../../../geometry/support/spatialReferenceUtils.js\";import{convertFromGeometry as n}from\"../featureConversionUtils.js\";import a from\"./AttributesBuilder.js\";import{getWhereClause as o}from\"./attributeSupport.js\";import{project as u,projectMany as l}from\"./projectionSupport.js\";import{getTimeOperator as c}from\"./timeSupport.js\";import{cleanFromGeometryEngine as d,getGeometry as h,transformCentroid as m}from\"./utils.js\";import{isStringField as f}from\"../../support/fieldUtils.js\";import{isNullCountSupported as p,calculateStringStatistics as g,calculateStatistics as y,processStatsResult as I}from\"../../../smartMapping/statistics/support/utils.js\";import{loadArcade as b}from\"../../../support/arcadeOnDemand.js\";function x(e){return e.substr(24,12)+e.substr(19,4)+e.substr(16,2)+e.substr(14,2)+e.substr(11,2)+e.substr(9,2)+e.substr(6,2)+e.substr(4,2)+e.substr(2,2)+e.substr(0,2)}function F(e,t,s){return(s?e>t:e<t)?-1:(s?e<t:e>t)?1:0}function T(e,t,s){return s?t-e:e-t}function A(e,t,s,i){if(s&&\"esriFieldTypeDate\"===s.type){const s=new Date(e).getTime(),r=new Date(t).getTime();if(!isNaN(s)&&!isNaN(r))return T(s,r,i)}if(\"number\"==typeof e&&\"number\"==typeof t)return T(e,t,i);if(\"string\"==typeof e&&\"string\"==typeof t){const r=e.toUpperCase(),n=t.toUpperCase();return!s||\"esriFieldTypeGUID\"!==s.type&&\"esriFieldTypeGlobalID\"!==s.type?F(r,n,i):F(x(r),x(n),i)}return i?1:-1}class S{constructor(e,t,s){this.items=e,this.queryGeometry=t,this.definitionExpression=s.definitionExpression,this.geometryType=s.geometryType,this.hasM=s.hasM,this.hasZ=s.hasZ,this.objectIdField=s.objectIdField,this.spatialReference=s.spatialReference,this.fieldsIndex=s.fieldsIndex,this.timeInfo=s.timeInfo,this.featureAdapter=s.featureAdapter,this.aggregateAdapter=s.aggregateAdapter}get size(){return this.items.length}createQueryResponseForCount(e){const t=new a(e,this.featureAdapter,this.fieldsIndex);if(!e.outStatistics)return t.countDistinctValues(this.items);const{groupByFieldsForStatistics:s,having:i}=e;if(!!!(null==s?void 0:s.length))return 1;const r=new Map,n=new Map,o=new Set,u=e.outStatistics;for(const a of u){const{statisticType:e}=a,u=\"exceedslimit\"!==e?a.onStatisticField:void 0;if(!n.has(u)){const e=[];for(const i of s){const s=this._getAttributeValues(t,i,r);e.push(s)}n.set(u,this._calculateUniqueValues(e))}const l=n.get(u);for(const s in l){const{data:e,items:r}=l[s],n=e.join(\",\");i&&!t.validateItems(r,i)||o.add(n)}}return o.size}createQueryResponse(e){let t;if(e.outStatistics){t=e.outStatistics.some((e=>\"exceedslimit\"===e.statisticType))?this._createExceedsLimitQueryResponse(e):this._createStatisticsQueryResponse(e)}else t=this._createFeatureQueryResponse(e);return e.returnQueryGeometry&&(i(e.outSR)&&!r(this.queryGeometry.spatialReference,e.outSR)?t.queryGeometry=d({spatialReference:e.outSR,...u(this.queryGeometry,this.queryGeometry.spatialReference,e.outSR)}):t.queryGeometry=d({spatialReference:e.outSR,...this.queryGeometry})),t}createSnappingResponse(e,t){const s=this.featureAdapter,i=_(this.hasZ,this.hasM),{x:r,y:n}=e.point,a=\"number\"==typeof e.distance?e.distance:e.distance.x,o=\"number\"==typeof e.distance?e.distance:e.distance.y,u={candidates:[]},l=\"esriGeometryPolygon\"===this.geometryType,c=this.getPointCreator(e.point,this.spatialReference,t);for(const d of this.items){const t=s.getGeometry(d);if(!t)continue;const{coords:h,lengths:m}=t;if(1&e.types){let e=0;for(let t=0;t<m.length;t++){const l=m[t];for(let t=0;t<l;t++,e+=i){const m=h[e],f=h[e+1];if(t!==l-1){const t=h[e+i],l=h[e+i+1],{x:p,y:g}=V(r,n,m,f,t,l),y=(r-p)/a,I=(n-g)/o,b=y*y+I*I;b<=1&&u.candidates.push({type:\"edge\",objectId:s.getObjectId(d),distance:Math.sqrt(b),target:c(p,g),start:c(m,f),end:c(t,l)})}}}}if(2&e.types){const e=l?h.length-i:h.length;for(let t=0;t<e;t+=i){const e=h[t],i=h[t+1],l=(r-e)/a,m=(n-i)/o,f=l*l+m*m;f<=1&&u.candidates.push({type:\"vertex\",objectId:s.getObjectId(d),distance:Math.sqrt(f),target:c(e,i)})}}}return u.candidates.sort(((e,t)=>e.distance-t.distance)),u}getPointCreator(t,s,i){const n=e(i)&&!r(s,i)?e=>u(e,s,i):e=>e;return null!=t.z&&null!=t.m?(e,s)=>n({x:e,y:s,z:t.z,m:t.m}):null!=t.z?(e,s)=>n({x:e,y:s,z:t.z}):null!=t.m?(e,s)=>n({x:e,y:s,m:t.m}):(e,t)=>n({x:e,y:t})}executeAttributesQuery(e){const t=o(e.where,this.fieldsIndex);if(!t)return Promise.resolve(this);if(t.isStandardized){let s=0;const i=[];for(const e of this.items)t.testFeature(e,this.featureAdapter)&&(i[s++]=e);const r=new S(i,this.queryGeometry,this);return r.definitionExpression=e.where,Promise.resolve(r)}return Promise.reject(new TypeError(\"Where clause is not standardized\"))}executeAggregateIdsQuery(e){if(!e.aggregateIds||!e.aggregateIds.length||t(this.aggregateAdapter))return Promise.resolve(this);const s=new Set;for(const t of e.aggregateIds){this.aggregateAdapter.getFeatureObjectIds(t).forEach((e=>s.add(e)))}const i=this.featureAdapter.getObjectId;return Promise.resolve(new S(this.items.filter((e=>s.has(i(e)))),this.queryGeometry,this))}executeObjectIdsQuery(e){if(!e.objectIds||!e.objectIds.length)return Promise.resolve(this);const t=new Set(e.objectIds),s=this.featureAdapter.getObjectId;return Promise.resolve(new S(this.items.filter((e=>t.has(s(e)))),this.queryGeometry,this))}executeTimeQuery(t){const s=c(this.timeInfo,t.timeExtent,this.featureAdapter);if(!e(s))return Promise.resolve(this);const i=this.items.filter(s);return Promise.resolve(new S(i,this.queryGeometry,this))}filterLatest(){const{trackIdField:e,startTimeField:t,endTimeField:s}=this.timeInfo,i=s||t,r=new Map,n=this.featureAdapter.getAttribute;for(const o of this.items){const t=n(o,e),s=n(o,i),a=r.get(t);(!a||s>n(a,i))&&r.set(t,o)}const a=Array.from(r.values());return Promise.resolve(new S(a,this.queryGeometry,this))}async project(e){if(!e||r(this.spatialReference,e))return this;const t=this.featureAdapter,s=(await l(this.items.map((e=>h(this.geometryType,this.hasZ,this.hasM,t.getGeometry(e)))),this.spatialReference,e)).map(((e,s)=>t.cloneWithGeometry(this.items[s],n(e,this.hasZ,this.hasM))));return new S(s,this.queryGeometry,{definitionExpression:this.definitionExpression,geometryType:this.geometryType,hasM:this.hasM,hasZ:this.hasZ,objectIdField:this.objectIdField,spatialReference:e,fieldsIndex:this.fieldsIndex,timeInfo:this.timeInfo,featureAdapter:this.featureAdapter})}async createSummaryStatisticsResponse(e,t){const{field:s,normalizationField:i,normalizationType:r,normalizationTotal:n,minValue:o,maxValue:u}=t,l=new a(e,this.featureAdapter,this.fieldsIndex),c=this.fieldsIndex.isDateField(s),d=t.valueExpression?await this._getAttributeExpressionValues(l,t.valueExpression,t.viewInfoParams):this._getAttributeNormalizedValues(l,{field:s,normalizationField:i,normalizationType:r,normalizationTotal:n}),h=p({normalizationType:r,normalizationField:i,minValue:o,maxValue:u}),m=f(this.fieldsIndex.get(s))?g({values:d,supportsNullCount:h}):y({values:d,minValue:o,maxValue:u,useSampleStdDev:!r,supportsNullCount:h});return I(m,c)}_sortFeatures(e,t,s){if(e.length>1&&t&&t.length)for(const i of t.reverse()){const t=i.split(\" \"),r=t[0],n=this.fieldsIndex.get(r),a=t[1]&&\"desc\"===t[1].toLowerCase();e.sort(((e,t)=>A(s(e,r,n),s(t,r,n),n,a)))}}_createFeatureQueryResponse(e){const t=this.items,{geometryType:i,hasM:r,hasZ:n,objectIdField:a,spatialReference:o}=this,{outFields:u,outSR:l,quantizationParameters:c,resultRecordCount:h,resultOffset:m,returnZ:f,returnM:p}=e,g=null!=h&&t.length>(m||0)+h,y=u&&(u.indexOf(\"*\")>-1?[...this.fieldsIndex.fields]:u.map((e=>this.fieldsIndex.get(e))));return{exceededTransferLimit:g,features:this._createFeatures(e,t),fields:y,geometryType:i,hasM:r&&p,hasZ:n&&f,objectIdFieldName:a,spatialReference:d(l||o),transform:c&&s(c)||null}}_createFeatures(e,t){const i=new a(e,this.featureAdapter,this.fieldsIndex),{hasM:r,hasZ:n}=this,{orderByFields:o,quantizationParameters:u,returnGeometry:l,returnCentroid:c,maxAllowableOffset:d,resultOffset:f,resultRecordCount:p,returnZ:g=!1,returnM:y=!1}=e,I=n&&g,b=r&&y;let x=[],F=0;const T=[...t];if(this._sortFeatures(T,o,((e,t,s)=>i.getFieldValue(e,t,s))),l||c){const e=s(u);if(l&&!c)for(const t of T)x[F++]={attributes:i.getAttributes(t),geometry:h(this.geometryType,this.hasZ,this.hasM,this.featureAdapter.getGeometry(t),d,e,I,b)};else if(!l&&c)for(const t of T)x[F++]={attributes:i.getAttributes(t),centroid:m(this,this.featureAdapter.getCentroid(t,this),e)};else for(const t of T)x[F++]={attributes:i.getAttributes(t),centroid:m(this,this.featureAdapter.getCentroid(t,this),e),geometry:h(this.geometryType,this.hasZ,this.hasM,this.featureAdapter.getGeometry(t),d,e,I,b)}}else for(const s of T){const e=i.getAttributes(s);e&&(x[F++]={attributes:e})}const A=f||0;if(null!=p){const e=A+p;x=x.slice(A,Math.min(x.length,e))}return x}_createExceedsLimitQueryResponse(e){let t=!1,s=Number.POSITIVE_INFINITY,i=Number.POSITIVE_INFINITY,r=Number.POSITIVE_INFINITY;for(const n of e.outStatistics)if(\"exceedslimit\"===n.statisticType){s=null!=n.maxPointCount?n.maxPointCount:Number.POSITIVE_INFINITY,i=null!=n.maxRecordCount?n.maxRecordCount:Number.POSITIVE_INFINITY,r=null!=n.maxVertexCount?n.maxVertexCount:Number.POSITIVE_INFINITY;break}if(\"esriGeometryPoint\"===this.geometryType)t=this.items.length>s;else if(this.items.length>i)t=!0;else{const e=this.hasZ?this.hasM?4:3:this.hasM?3:2,s=this.featureAdapter;t=this.items.reduce(((e,t)=>{const i=s.getGeometry(t);return e+(i&&i.coords.length||0)}),0)/e>r}return{fields:[{name:\"exceedslimit\",type:\"esriFieldTypeInteger\",alias:\"exceedslimit\",sqlType:\"sqlTypeInteger\",domain:null,defaultValue:null}],features:[{attributes:{exceedslimit:Number(t)}}]}}_createStatisticsQueryResponse(e){const t={attributes:{}},s=[],i=new Map,r=new Map,n=new Map,o=new Map,u=new a(e,this.featureAdapter,this.fieldsIndex),l=e.outStatistics,{groupByFieldsForStatistics:c,having:d,orderByFields:h}=e,m=c&&c.length,f=!!m,p=f&&c[0],g=f&&!this.fieldsIndex.get(p);for(const a of l){const{outStatisticFieldName:e,statisticType:l}=a,h=a,y=\"exceedslimit\"!==l?a.onStatisticField:void 0,I=\"percentile_disc\"===l||\"percentile_cont\"===l,b=f&&1===m&&(y===p||g)&&\"count\"===l;if(f){if(!n.has(y)){const e=[];for(const t of c){const s=this._getAttributeValues(u,t,i);e.push(s)}n.set(y,this._calculateUniqueValues(e,u.returnDistinctValues))}const t=n.get(y);for(const s in t){const{count:r,data:n,items:a,itemPositions:l}=t[s],m=n.join(\",\");if(!d||u.validateItems(a,d)){const t=o.get(m)||{attributes:{}};let s=null;if(b)s=r;else{const e=this._getAttributeValues(u,y,i),t=l.map((t=>e[t]));s=I&&\"statisticParameters\"in h?this._getPercentileValue(h,t):this._getStatisticValue(h,t)}t.attributes[e]=s,c.forEach(((e,s)=>t.attributes[this.fieldsIndex.get(e)?e:`EXPR_${s+1}`]=n[s])),o.set(m,t)}}}else{const s=this._getAttributeValues(u,y,i);t.attributes[e]=I&&\"statisticParameters\"in h?this._getPercentileValue(h,s):this._getStatisticValue(h,s,r)}s.push({name:e,alias:e,type:\"esriFieldTypeDouble\"})}const y=f?Array.from(o.values()):[t];return this._sortFeatures(y,h,((e,t)=>e.attributes[t])),{fields:s,features:y}}_getStatisticValue(e,t,s){const{onStatisticField:i,statisticType:r}=e;let n=null;n=null!=s&&s.has(i)?s.get(i):f(this.fieldsIndex.get(i))?g({values:t}):y({values:t,minValue:null,maxValue:null,useSampleStdDev:!0}),s&&s.set(i,n);return n[\"var\"===r?\"variance\":r]}_getPercentileValue(e,t){const{onStatisticField:s,statisticParameters:i,statisticType:r}=e,{value:n,orderBy:a}=i,o=\"desc\"===a,u=this.fieldsIndex.get(s),l=[...t].filter((e=>null!=e)).sort(((e,t)=>A(e,t,u,o)));return this._calculatePercentile(l,n,\"percentile_disc\"===r)}_getAttributeValues(e,t,s){if(s.has(t))return s.get(t);const i=this.fieldsIndex.get(t),r=this.items.map((s=>e.getFieldValue(s,t,i)));return s.set(t,r),r}_getAttributeNormalizedValues(e,t){return this.items.map((s=>e.getNormalizedValue(s,{field:t.field,fieldInfo:this.fieldsIndex.get(t.field),normalizationField:t.normalizationField,normalizationFieldInfo:this.fieldsIndex.get(t.normalizationField),normalizationType:t.normalizationType,normalizationTotal:t.normalizationTotal})))}async _getAttributeExpressionValues(e,t,s){const{arcadeUtils:i}=await b(),r=i.createFunction(t),n=s&&i.getViewInfo(s);return this.items.map((t=>e.getExpressionValue(t,{compiledFunc:r,viewInfo:n},i)))}_calculateUniqueValues(e,t){const s={},i=this.items,r=i.length;for(let n=0;n<r;n++){const r=i[n],a=[];for(const t of e)a.push(t[n]);const o=a.join(\",\");t?null==s[o]&&(s[o]={count:1,data:a,items:[r],itemPositions:[n]}):null==s[o]?s[o]={count:1,data:a,items:[r],itemPositions:[n]}:(s[o].count++,s[o].items.push(r),s[o].itemPositions.push(n))}return s}_calculatePercentile(e,t,s){if(0===e.length)return null;if(t<=0)return e[0];if(t>=1)return e[e.length-1];const i=(e.length-1)*t,r=Math.floor(i),n=r+1,a=i%1,o=e[r],u=e[n];return n>=e.length||s||\"string\"==typeof o||\"string\"==typeof u?o:o*(1-a)+u*a}}function V(e,t,s,i,r,n){const a=r-s,o=n-i,u=a*a+o*o,l=(e-s)*a+(t-i)*o,c=Math.min(1,Math.max(0,l/u));return{x:s+a*c,y:i+o*c}}function _(e,t){return e?t?4:3:t?3:2}export default S;\n"]},"metadata":{},"sourceType":"module"}