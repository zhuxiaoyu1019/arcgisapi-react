{"ast":null,"code":"var _jsxFileName = \"/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/components/MapView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport Map from '@arcgis/core/Map';\nimport * as promiseUtils from '@arcgis/core/core/promiseUtils';\nimport buildings from '../untils/SceneLayerConfig';\nimport sceneView from '../untils/SceneViewConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapView() {\n  _s();\n\n  const mapRef = useRef();\n  const view = '';\n  useEffect(() => {\n    const map = new Map({\n      basemap: 'satellite',\n      layers: [buildings({\n        url: \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0\"\n      })]\n    });\n    view = sceneView({\n      ref: mapRef.current,\n      map\n    });\n    return () => {\n      view && view.destroy();\n    };\n  }, []);\n  view.when().then(async () => {\n    const buildingsLV = await view.whenLayerView(buildings);\n    let highlight = null;\n    view.on(\"pointer-move\", promiseUtils.debounce(async e => {\n      const ht = await view.hitTest(e, {\n        include: [buildings]\n      });\n\n      if (highlight) {\n        highlight.remove();\n        highlight = null;\n      }\n\n      if (ht.results.length > 0) {\n        // select the first feature (closest to the camera)\n        const graphic = ht.results[0].graphic;\n\n        if (graphic) {\n          highlight = buildingsLV.highlight(graphic);\n        }\n      }\n    }));\n    view.on(\"pointer-leave\", () => {\n      if (highlight) {\n        highlight.remove();\n        highlight = null;\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MapView, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n\n_c = MapView;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/src/components/MapView.js"],"names":["React","useRef","useEffect","Map","promiseUtils","buildings","sceneView","MapView","mapRef","view","map","basemap","layers","url","ref","current","destroy","when","then","buildingsLV","whenLayerView","highlight","on","debounce","e","ht","hitTest","include","remove","results","length","graphic","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,KAAKC,YAAZ,MAA8B,gCAA9B;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAC9B,QAAMC,MAAM,GAAGP,MAAM,EAArB;AACA,QAAMQ,IAAI,GAAG,EAAb;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,GAAG,GAAG,IAAIP,GAAJ,CAAQ;AAChBQ,MAAAA,OAAO,EAAE,WADO;AAEhBC,MAAAA,MAAM,EAAE,CAACP,SAAS,CAAC;AAAEQ,QAAAA,GAAG,EAAE;AAAP,OAAD,CAAV;AAFQ,KAAR,CAAZ;AAKAJ,IAAAA,IAAI,GAAGH,SAAS,CAAC;AAAEQ,MAAAA,GAAG,EAAEN,MAAM,CAACO,OAAd;AAAuBL,MAAAA;AAAvB,KAAD,CAAhB;AAEA,WAAO,MAAM;AAAED,MAAAA,IAAI,IAAIA,IAAI,CAACO,OAAL,EAAR;AAAwB,KAAvC;AACH,GATQ,EASN,EATM,CAAT;AAWAP,EAAAA,IAAI,CAACQ,IAAL,GAAYC,IAAZ,CAAiB,YAAY;AACzB,UAAMC,WAAW,GAAG,MAAMV,IAAI,CAACW,aAAL,CAAmBf,SAAnB,CAA1B;AACA,QAAIgB,SAAS,GAAG,IAAhB;AACAZ,IAAAA,IAAI,CAACa,EAAL,CACI,cADJ,EAEIlB,YAAY,CAACmB,QAAb,CAAsB,MAAOC,CAAP,IAAa;AAC/B,YAAMC,EAAE,GAAG,MAAMhB,IAAI,CAACiB,OAAL,CAAaF,CAAb,EAAgB;AAC7BG,QAAAA,OAAO,EAAE,CAACtB,SAAD;AADoB,OAAhB,CAAjB;;AAGA,UAAIgB,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAACO,MAAV;AACAP,QAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,UAAII,EAAE,CAACI,OAAH,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AACvB;AACA,cAAMC,OAAO,GAAGN,EAAE,CAACI,OAAH,CAAW,CAAX,EAAcE,OAA9B;;AACA,YAAIA,OAAJ,EAAa;AACTV,UAAAA,SAAS,GAAGF,WAAW,CAACE,SAAZ,CAAsBU,OAAtB,CAAZ;AACH;AACJ;AACJ,KAfD,CAFJ;AAmBAtB,IAAAA,IAAI,CAACa,EAAL,CAAQ,eAAR,EAAyB,MAAM;AAC3B,UAAID,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAACO,MAAV;AACAP,QAAAA,SAAS,GAAG,IAAZ;AACH;AACJ,KALD;AAMH,GA5BD;AA8BA,sBACI;AAAK,IAAA,GAAG,EAAEb,MAAV;AAAkB,IAAA,KAAK,EAAE;AAAEwB,MAAAA,MAAM,EAAE;AAAV;AAAzB;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GAhDuBzB,O;;KAAAA,O","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport Map from '@arcgis/core/Map'\nimport * as promiseUtils from '@arcgis/core/core/promiseUtils'\n\nimport buildings from '../untils/SceneLayerConfig'\nimport sceneView from '../untils/SceneViewConfig'\n\nexport default function MapView() {\n    const mapRef = useRef()\n    const view = '';\n\n    useEffect(() => {\n        const map = new Map({\n            basemap: 'satellite',\n            layers: [buildings({ url: \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYC/SceneServer/layers/0\" })]\n        })\n\n        view = sceneView({ ref: mapRef.current, map })\n\n        return () => { view && view.destroy() }\n    }, [])\n\n    view.when().then(async () => {\n        const buildingsLV = await view.whenLayerView(buildings);\n        let highlight = null;\n        view.on(\n            \"pointer-move\",\n            promiseUtils.debounce(async (e) => {\n                const ht = await view.hitTest(e, {\n                    include: [buildings]\n                });\n                if (highlight) {\n                    highlight.remove();\n                    highlight = null;\n                }\n                if (ht.results.length > 0) {\n                    // select the first feature (closest to the camera)\n                    const graphic = ht.results[0].graphic;\n                    if (graphic) {\n                        highlight = buildingsLV.highlight(graphic);\n                    }\n                }\n            })\n        );\n        view.on(\"pointer-leave\", () => {\n            if (highlight) {\n                highlight.remove();\n                highlight = null;\n            }\n        });\n    });\n\n    return (\n        <div ref={mapRef} style={{ height: '100vh' }} />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}