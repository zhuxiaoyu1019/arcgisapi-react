{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { c as t } from \"../../../../chunks/mat4f64.js\";\nimport { c as o } from \"../../../../chunks/vec3f64.js\";\nimport { computeLinearTransformation as r } from \"../../../../geometry/projection.js\";\nimport { getReferenceEllipsoid as n } from \"../../../../geometry/projectionEllipsoid.js\";\n\nfunction a(o, n, a, s) {\n  const c = h(o, n, a),\n        i = t();\n  return r(a, c, i, s), i;\n}\n\nconst s = 1,\n      c = 5 - s;\n\nfunction h(t, r, a) {\n  const h = o(),\n        i = t[3],\n        e = 2 ** (Math.ceil(Math.log(i) * Math.LOG2E / c) * c + s);\n\n  if (a.isGeographic) {\n    const o = e / n(a).radius * 180 / Math.PI,\n          r = Math.round(t[1] / o),\n          s = Math.max(-90, Math.min(90, r * o)),\n          c = o / Math.cos((Math.abs(s) - o / 2) / 180 * Math.PI),\n          i = Math.round(t[0] / c) * c;\n    h[0] = i, h[1] = s;\n  } else {\n    const o = Math.round(t[0] / e),\n          r = Math.round(t[1] / e);\n    h[0] = o * e, h[1] = r * e;\n  }\n\n  const M = t[2] + r,\n        m = Math.round(M / e);\n  return h[2] = m * e, h;\n}\n\nexport { a as computeGlobalTransformation, h as getLocalOrigin };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/views/3d/layers/i3s/I3SProjectionUtil.js"],"names":["c","t","o","computeLinearTransformation","r","getReferenceEllipsoid","n","a","s","h","i","e","Math","ceil","log","LOG2E","isGeographic","radius","PI","round","max","min","cos","abs","M","m","computeGlobalTransformation","getLocalOrigin"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,CAAC,IAAIC,CAAZ,QAAkB,+BAAlB;AAAkD,SAAOD,CAAC,IAAIE,CAAZ,QAAkB,+BAAlB;AAAkD,SAAOC,2BAA2B,IAAIC,CAAtC,QAA4C,oCAA5C;AAAiF,SAAOC,qBAAqB,IAAIC,CAAhC,QAAsC,6CAAtC;;AAAoF,SAASC,CAAT,CAAWL,CAAX,EAAaI,CAAb,EAAeC,CAAf,EAAiBC,CAAjB,EAAmB;AAAC,QAAMR,CAAC,GAACS,CAAC,CAACP,CAAD,EAAGI,CAAH,EAAKC,CAAL,CAAT;AAAA,QAAiBG,CAAC,GAACT,CAAC,EAApB;AAAuB,SAAOG,CAAC,CAACG,CAAD,EAAGP,CAAH,EAAKU,CAAL,EAAOF,CAAP,CAAD,EAAWE,CAAlB;AAAoB;;AAAA,MAAMF,CAAC,GAAC,CAAR;AAAA,MAAUR,CAAC,GAAC,IAAEQ,CAAd;;AAAgB,SAASC,CAAT,CAAWR,CAAX,EAAaG,CAAb,EAAeG,CAAf,EAAiB;AAAC,QAAME,CAAC,GAACP,CAAC,EAAT;AAAA,QAAYQ,CAAC,GAACT,CAAC,CAAC,CAAD,CAAf;AAAA,QAAmBU,CAAC,GAAC,MAAIC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASJ,CAAT,IAAYE,IAAI,CAACG,KAAjB,GAAuBf,CAAjC,IAAoCA,CAApC,GAAsCQ,CAA1C,CAArB;;AAAkE,MAAGD,CAAC,CAACS,YAAL,EAAkB;AAAC,UAAMd,CAAC,GAACS,CAAC,GAACL,CAAC,CAACC,CAAD,CAAD,CAAKU,MAAP,GAAc,GAAd,GAAkBL,IAAI,CAACM,EAA/B;AAAA,UAAkCd,CAAC,GAACQ,IAAI,CAACO,KAAL,CAAWlB,CAAC,CAAC,CAAD,CAAD,GAAKC,CAAhB,CAApC;AAAA,UAAuDM,CAAC,GAACI,IAAI,CAACQ,GAAL,CAAS,CAAC,EAAV,EAAaR,IAAI,CAACS,GAAL,CAAS,EAAT,EAAYjB,CAAC,GAACF,CAAd,CAAb,CAAzD;AAAA,UAAwFF,CAAC,GAACE,CAAC,GAACU,IAAI,CAACU,GAAL,CAAS,CAACV,IAAI,CAACW,GAAL,CAASf,CAAT,IAAYN,CAAC,GAAC,CAAf,IAAkB,GAAlB,GAAsBU,IAAI,CAACM,EAApC,CAA5F;AAAA,UAAoIR,CAAC,GAACE,IAAI,CAACO,KAAL,CAAWlB,CAAC,CAAC,CAAD,CAAD,GAAKD,CAAhB,IAAmBA,CAAzJ;AAA2JS,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAKC,CAAL,EAAOD,CAAC,CAAC,CAAD,CAAD,GAAKD,CAAZ;AAAc,GAA5L,MAAgM;AAAC,UAAMN,CAAC,GAACU,IAAI,CAACO,KAAL,CAAWlB,CAAC,CAAC,CAAD,CAAD,GAAKU,CAAhB,CAAR;AAAA,UAA2BP,CAAC,GAACQ,IAAI,CAACO,KAAL,CAAWlB,CAAC,CAAC,CAAD,CAAD,GAAKU,CAAhB,CAA7B;AAAgDF,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAKP,CAAC,GAACS,CAAP,EAASF,CAAC,CAAC,CAAD,CAAD,GAAKL,CAAC,GAACO,CAAhB;AAAkB;;AAAA,QAAMa,CAAC,GAACvB,CAAC,CAAC,CAAD,CAAD,GAAKG,CAAb;AAAA,QAAeqB,CAAC,GAACb,IAAI,CAACO,KAAL,CAAWK,CAAC,GAACb,CAAb,CAAjB;AAAiC,SAAOF,CAAC,CAAC,CAAD,CAAD,GAAKgB,CAAC,GAACd,CAAP,EAASF,CAAhB;AAAkB;;AAAA,SAAOF,CAAC,IAAImB,2BAAZ,EAAwCjB,CAAC,IAAIkB,cAA7C","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{c as t}from\"../../../../chunks/mat4f64.js\";import{c as o}from\"../../../../chunks/vec3f64.js\";import{computeLinearTransformation as r}from\"../../../../geometry/projection.js\";import{getReferenceEllipsoid as n}from\"../../../../geometry/projectionEllipsoid.js\";function a(o,n,a,s){const c=h(o,n,a),i=t();return r(a,c,i,s),i}const s=1,c=5-s;function h(t,r,a){const h=o(),i=t[3],e=2**(Math.ceil(Math.log(i)*Math.LOG2E/c)*c+s);if(a.isGeographic){const o=e/n(a).radius*180/Math.PI,r=Math.round(t[1]/o),s=Math.max(-90,Math.min(90,r*o)),c=o/Math.cos((Math.abs(s)-o/2)/180*Math.PI),i=Math.round(t[0]/c)*c;h[0]=i,h[1]=s}else{const o=Math.round(t[0]/e),r=Math.round(t[1]/e);h[0]=o*e,h[1]=r*e}const M=t[2]+r,m=Math.round(M/e);return h[2]=m*e,h}export{a as computeGlobalTransformation,h as getLocalOrigin};\n"]},"metadata":{},"sourceType":"module"}