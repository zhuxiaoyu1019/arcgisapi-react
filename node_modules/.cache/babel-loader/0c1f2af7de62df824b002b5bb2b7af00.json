{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { glsl as n } from \"../../shaderModules/interfaces.js\";\n\nfunction e(e, t) {\n  e.varyings.add(\"tbnTangent\", \"vec3\"), e.varyings.add(\"tbnBiTangent\", \"vec3\"), 1 === t.viewingMode ? e.vertex.code.add(n`void forwardVertexTangent(vec3 n) {\ntbnTangent = normalize(cross(vec3(0.0, 0.0, 1.0), n));\ntbnBiTangent = normalize(cross(n, tbnTangent));\n}`) : e.vertex.code.add(n`void forwardVertexTangent(vec3 n) {\ntbnTangent = vec3(1.0, 0.0, 0.0);\ntbnBiTangent = normalize(cross(n, tbnTangent));\n}`), e.fragment.code.add(n`mat3 getTBNMatrix(vec3 n) {\nreturn mat3(tbnTangent, tbnBiTangent, n);\n}`);\n}\n\nexport { e as VertexTangent };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexTangent.glsl.js"],"names":["glsl","n","e","t","varyings","add","viewingMode","vertex","code","fragment","VertexTangent"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,IAAI,IAAIC,CAAf,QAAqB,mCAArB;;AAAyD,SAASC,CAAT,CAAWA,CAAX,EAAaC,CAAb,EAAe;AAACD,EAAAA,CAAC,CAACE,QAAF,CAAWC,GAAX,CAAe,YAAf,EAA4B,MAA5B,GAAoCH,CAAC,CAACE,QAAF,CAAWC,GAAX,CAAe,cAAf,EAA8B,MAA9B,CAApC,EAA0E,MAAIF,CAAC,CAACG,WAAN,GAAkBJ,CAAC,CAACK,MAAF,CAASC,IAAT,CAAcH,GAAd,CAAkBJ,CAAE;AACzL;AACA;AACA,EAHqK,CAAlB,GAG/IC,CAAC,CAACK,MAAF,CAASC,IAAT,CAAcH,GAAd,CAAkBJ,CAAE;AACxB;AACA;AACA,EAHI,CAHqE,EAMrEC,CAAC,CAACO,QAAF,CAAWD,IAAX,CAAgBH,GAAhB,CAAoBJ,CAAE;AAC1B;AACA,EAFI,CANqE;AAQrE;;AAAA,SAAOC,CAAC,IAAIQ,aAAZ","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{glsl as n}from\"../../shaderModules/interfaces.js\";function e(e,t){e.varyings.add(\"tbnTangent\",\"vec3\"),e.varyings.add(\"tbnBiTangent\",\"vec3\"),1===t.viewingMode?e.vertex.code.add(n`void forwardVertexTangent(vec3 n) {\ntbnTangent = normalize(cross(vec3(0.0, 0.0, 1.0), n));\ntbnBiTangent = normalize(cross(n, tbnTangent));\n}`):e.vertex.code.add(n`void forwardVertexTangent(vec3 n) {\ntbnTangent = vec3(1.0, 0.0, 0.0);\ntbnBiTangent = normalize(cross(n, tbnTangent));\n}`),e.fragment.code.add(n`mat3 getTBNMatrix(vec3 n) {\nreturn mat3(tbnTangent, tbnBiTangent, n);\n}`)}export{e as VertexTangent};\n"]},"metadata":{},"sourceType":"module"}