{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { DecodeSymbolColor as o } from \"./DecodeSymbolColor.glsl.js\";\nimport { glsl as e } from \"../../../../core/shaderModules/interfaces.js\";\n\nfunction r(r, n) {\n  1 === n.componentData && (r.vertex.uniforms.add(\"uComponentColorTex\", \"sampler2D\"), r.vertex.uniforms.add(\"uComponentColorTexInvDim\", \"vec2\"), r.attributes.add(\"componentIndex\", \"float\"), r.varyings.add(\"vExternalColorMixMode\", \"mediump float\"), r.varyings.add(\"vExternalColor\", \"vec4\"), r.include(o), r.vertex.code.add(e`vec4 _readComponentColor() {\nfloat normalizedIndex = (componentIndex + 0.5) * uComponentColorTexInvDim.x;\nvec2 indexCoord = vec2(\nmod(normalizedIndex, 1.0),\n(floor(normalizedIndex) + 0.5) * uComponentColorTexInvDim.y\n);\nreturn texture2D(uComponentColorTex, indexCoord);\n}\nvec4 forwardExternalColor(out bool castShadows) {\nvec4 componentColor = _readComponentColor() * 255.0;\nfloat shadowFlag = mod(componentColor.b * 255.0, 2.0);\ncomponentColor.b -= shadowFlag;\ncastShadows = shadowFlag >= 1.0;\nint decodedColorMixMode;\nvExternalColor = decodeSymbolColor(componentColor, decodedColorMixMode) * 0.003921568627451;\nvExternalColorMixMode = float(decodedColorMixMode) + 0.5;\nreturn vExternalColor;\n}`), r.fragment.code.add(e`void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {\nexternalColor = vExternalColor;\nexternalColorMixMode = int(vExternalColorMixMode);\n}`)), 0 === n.componentData && (r.vertex.uniforms.add(\"uExternalColor\", \"vec4\"), r.fragment.uniforms.add(\"uExternalColorMixMode\", \"int\"), r.varyings.add(\"vExternalColor\", \"vec4\"), r.vertex.code.add(e`vec4 forwardExternalColor(out bool castShadows) {\nvExternalColor = uExternalColor;\ncastShadows = true;\nreturn uExternalColor;\n}`), r.fragment.code.add(e`void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {\nexternalColor = vExternalColor;\nexternalColorMixMode = uExternalColorMixMode;\n}`));\n}\n\nexport { r as ComponentData };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/Material/shader/ComponentData.glsl.js"],"names":["DecodeSymbolColor","o","glsl","e","r","n","componentData","vertex","uniforms","add","attributes","varyings","include","code","fragment","ComponentData"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,iBAAiB,IAAIC,CAA5B,QAAkC,6BAAlC;AAAgE,SAAOC,IAAI,IAAIC,CAAf,QAAqB,8CAArB;;AAAoE,SAASC,CAAT,CAAWA,CAAX,EAAaC,CAAb,EAAe;AAAC,QAAIA,CAAC,CAACC,aAAN,KAAsBF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBC,GAAlB,CAAsB,oBAAtB,EAA2C,WAA3C,GAAwDL,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBC,GAAlB,CAAsB,0BAAtB,EAAiD,MAAjD,CAAxD,EAAiHL,CAAC,CAACM,UAAF,CAAaD,GAAb,CAAiB,gBAAjB,EAAkC,OAAlC,CAAjH,EAA4JL,CAAC,CAACO,QAAF,CAAWF,GAAX,CAAe,uBAAf,EAAuC,eAAvC,CAA5J,EAAoNL,CAAC,CAACO,QAAF,CAAWF,GAAX,CAAe,gBAAf,EAAgC,MAAhC,CAApN,EAA4PL,CAAC,CAACQ,OAAF,CAAUX,CAAV,CAA5P,EAAyQG,CAAC,CAACG,MAAF,CAASM,IAAT,CAAcJ,GAAd,CAAkBN,CAAE;AACvc;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAjBmb,CAAzQ,EAiBtKC,CAAC,CAACU,QAAF,CAAWD,IAAX,CAAgBJ,GAAhB,CAAoBN,CAAE;AAC1B;AACA;AACA,EAHI,CAjBgJ,GAoB/I,MAAIE,CAAC,CAACC,aAAN,KAAsBF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBC,GAAlB,CAAsB,gBAAtB,EAAuC,MAAvC,GAA+CL,CAAC,CAACU,QAAF,CAAWN,QAAX,CAAoBC,GAApB,CAAwB,uBAAxB,EAAgD,KAAhD,CAA/C,EAAsGL,CAAC,CAACO,QAAF,CAAWF,GAAX,CAAe,gBAAf,EAAgC,MAAhC,CAAtG,EAA8IL,CAAC,CAACG,MAAF,CAASM,IAAT,CAAcJ,GAAd,CAAkBN,CAAE;AAC7L;AACA;AACA;AACA,EAJyK,CAA9I,EAIvBC,CAAC,CAACU,QAAF,CAAWD,IAAX,CAAgBJ,GAAhB,CAAoBN,CAAE;AAC1B;AACA;AACA,EAHI,CAJC,CApB+I;AA2B/I;;AAAA,SAAOC,CAAC,IAAIW,aAAZ","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{DecodeSymbolColor as o}from\"./DecodeSymbolColor.glsl.js\";import{glsl as e}from\"../../../../core/shaderModules/interfaces.js\";function r(r,n){1===n.componentData&&(r.vertex.uniforms.add(\"uComponentColorTex\",\"sampler2D\"),r.vertex.uniforms.add(\"uComponentColorTexInvDim\",\"vec2\"),r.attributes.add(\"componentIndex\",\"float\"),r.varyings.add(\"vExternalColorMixMode\",\"mediump float\"),r.varyings.add(\"vExternalColor\",\"vec4\"),r.include(o),r.vertex.code.add(e`vec4 _readComponentColor() {\nfloat normalizedIndex = (componentIndex + 0.5) * uComponentColorTexInvDim.x;\nvec2 indexCoord = vec2(\nmod(normalizedIndex, 1.0),\n(floor(normalizedIndex) + 0.5) * uComponentColorTexInvDim.y\n);\nreturn texture2D(uComponentColorTex, indexCoord);\n}\nvec4 forwardExternalColor(out bool castShadows) {\nvec4 componentColor = _readComponentColor() * 255.0;\nfloat shadowFlag = mod(componentColor.b * 255.0, 2.0);\ncomponentColor.b -= shadowFlag;\ncastShadows = shadowFlag >= 1.0;\nint decodedColorMixMode;\nvExternalColor = decodeSymbolColor(componentColor, decodedColorMixMode) * 0.003921568627451;\nvExternalColorMixMode = float(decodedColorMixMode) + 0.5;\nreturn vExternalColor;\n}`),r.fragment.code.add(e`void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {\nexternalColor = vExternalColor;\nexternalColorMixMode = int(vExternalColorMixMode);\n}`)),0===n.componentData&&(r.vertex.uniforms.add(\"uExternalColor\",\"vec4\"),r.fragment.uniforms.add(\"uExternalColorMixMode\",\"int\"),r.varyings.add(\"vExternalColor\",\"vec4\"),r.vertex.code.add(e`vec4 forwardExternalColor(out bool castShadows) {\nvExternalColor = uExternalColor;\ncastShadows = true;\nreturn uExternalColor;\n}`),r.fragment.code.add(e`void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {\nexternalColor = vExternalColor;\nexternalColorMixMode = uExternalColorMixMode;\n}`))}export{r as ComponentData};\n"]},"metadata":{},"sourceType":"module"}