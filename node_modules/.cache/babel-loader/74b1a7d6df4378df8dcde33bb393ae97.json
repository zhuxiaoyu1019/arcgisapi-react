{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { FoamColor as e } from \"./FoamRendering.glsl.js\";\nimport { Gamma as o } from \"./Gamma.glsl.js\";\nimport { PhysicallyBasedRendering as t } from \"./PhysicallyBasedRendering.glsl.js\";\nimport { ScreenSpaceReflections as i } from \"./ScreenSpaceReflections.glsl.js\";\nimport { glsl as r } from \"../../shaderModules/interfaces.js\";\n\nfunction a(a, n) {\n  a.include(t, n), a.include(o), a.include(e), n.ssrEnabled && a.include(i, n), a.fragment.constants.add(\"fresnelSky\", \"vec3\", [.02, 1, 15]).add(\"fresnelMaterial\", \"vec2\", [.02, .1]).add(\"roughness\", \"float\", .015).add(\"foamIntensityExternal\", \"float\", 1.7).add(\"ssrIntensity\", \"float\", .65).add(\"ssrHeightFadeStart\", \"float\", 3e5).add(\"ssrHeightFadeEnd\", \"float\", 5e5).add(\"waterDiffusion\", \"float\", .775).add(\"waterSeeColorMod\", \"float\", .8).add(\"correctionViewingPowerFactor\", \"float\", .4).add(\"skyZenitColor\", \"vec3\", [.52, .68, .9]).add(\"skyColor\", \"vec3\", [.67, .79, .9]), a.fragment.code.add(r`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`), a.fragment.code.add(r`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 positionView) {\nfloat reflectionHit = 0.;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotL = clamp(dot(n, l), 0.0, 1.0);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nspecular = shadingInfo.NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}`), n.ssrEnabled ? a.fragment.code.add(r`vec4 viewPosition = vec4(positionView.xyz, 1.0);\nvec3 viewDir = normalize(viewPosition.xyz);\nvec4 viewNormalVectorCoordinate = ssrViewMat *vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = ssrViewMat *vec4(localUp, 0.0);\nfloat correctionViewingFactor = pow(max(dot(-viewDir, viewUp.xyz), 0.0), correctionViewingPowerFactor);\nvec3 viewNormalCorrected = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrected));\nvec3 hitCoordinate = screenSpaceIntersection( normalize(reflected), viewPosition.xyz, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -positionView.z);\nreflectionHit = waterDiffusion * clamp(1.0 - (1.3*dCoords.y), 0.0, 1.0) * heightMod;\nreflectedColor = linearizeGamma(texture2D(lastFrameColorMap, reprojectedCoordinate).xyz)* reflectionHit * fresnelModifier.y * ssrIntensity;\n}\nfloat seeColorMod =  mix(waterSeeColorMod, waterSeeColorMod*0.5, reflectionHit);\nreturn tonemapACES((1. - reflectionHit) * reflSky + reflectedColor + reflSea * seeColorMod + specular + foam);\n}`) : a.fragment.code.add(r`return tonemapACES(reflSky + reflSea * waterSeeColorMod + specular + foam);\n}`);\n}\n\nexport { a as Water };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js"],"names":["FoamColor","e","Gamma","o","PhysicallyBasedRendering","t","ScreenSpaceReflections","i","glsl","r","a","n","include","ssrEnabled","fragment","constants","add","code","Water"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,SAAS,IAAIC,CAApB,QAA0B,yBAA1B;AAAoD,SAAOC,KAAK,IAAIC,CAAhB,QAAsB,iBAAtB;AAAwC,SAAOC,wBAAwB,IAAIC,CAAnC,QAAyC,oCAAzC;AAA8E,SAAOC,sBAAsB,IAAIC,CAAjC,QAAuC,kCAAvC;AAA0E,SAAOC,IAAI,IAAIC,CAAf,QAAqB,mCAArB;;AAAyD,SAASC,CAAT,CAAWA,CAAX,EAAaC,CAAb,EAAe;AAACD,EAAAA,CAAC,CAACE,OAAF,CAAUP,CAAV,EAAYM,CAAZ,GAAeD,CAAC,CAACE,OAAF,CAAUT,CAAV,CAAf,EAA4BO,CAAC,CAACE,OAAF,CAAUX,CAAV,CAA5B,EAAyCU,CAAC,CAACE,UAAF,IAAcH,CAAC,CAACE,OAAF,CAAUL,CAAV,EAAYI,CAAZ,CAAvD,EAAsED,CAAC,CAACI,QAAF,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,YAAzB,EAAsC,MAAtC,EAA6C,CAAC,GAAD,EAAK,CAAL,EAAO,EAAP,CAA7C,EAAyDA,GAAzD,CAA6D,iBAA7D,EAA+E,MAA/E,EAAsF,CAAC,GAAD,EAAK,EAAL,CAAtF,EAAgGA,GAAhG,CAAoG,WAApG,EAAgH,OAAhH,EAAwH,IAAxH,EAA8HA,GAA9H,CAAkI,uBAAlI,EAA0J,OAA1J,EAAkK,GAAlK,EAAuKA,GAAvK,CAA2K,cAA3K,EAA0L,OAA1L,EAAkM,GAAlM,EAAuMA,GAAvM,CAA2M,oBAA3M,EAAgO,OAAhO,EAAwO,GAAxO,EAA6OA,GAA7O,CAAiP,kBAAjP,EAAoQ,OAApQ,EAA4Q,GAA5Q,EAAiRA,GAAjR,CAAqR,gBAArR,EAAsS,OAAtS,EAA8S,IAA9S,EAAoTA,GAApT,CAAwT,kBAAxT,EAA2U,OAA3U,EAAmV,EAAnV,EAAuVA,GAAvV,CAA2V,8BAA3V,EAA0X,OAA1X,EAAkY,EAAlY,EAAsYA,GAAtY,CAA0Y,eAA1Y,EAA0Z,MAA1Z,EAAia,CAAC,GAAD,EAAK,GAAL,EAAS,EAAT,CAAja,EAA+aA,GAA/a,CAAmb,UAAnb,EAA8b,MAA9b,EAAqc,CAAC,GAAD,EAAK,GAAL,EAAS,EAAT,CAArc,CAAtE,EAAyhBN,CAAC,CAACI,QAAF,CAAWG,IAAX,CAAgBD,GAAhB,CAAoBP,CAAE;AAC52B;AACA;AACA;AACA,EAJs1B,CAAzhB,EAIzTC,CAAC,CAACI,QAAF,CAAWG,IAAX,CAAgBD,GAAhB,CAAoBP,CAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EA9BI,CAJyT,EAkCzTE,CAAC,CAACE,UAAF,GAAaH,CAAC,CAACI,QAAF,CAAWG,IAAX,CAAgBD,GAAhB,CAAoBP,CAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EApBiB,CAAb,GAoBAC,CAAC,CAACI,QAAF,CAAWG,IAAX,CAAgBD,GAAhB,CAAoBP,CAAE;AAC1B,EADI,CAtDyT;AAuDzT;;AAAA,SAAOC,CAAC,IAAIQ,KAAZ","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{FoamColor as e}from\"./FoamRendering.glsl.js\";import{Gamma as o}from\"./Gamma.glsl.js\";import{PhysicallyBasedRendering as t}from\"./PhysicallyBasedRendering.glsl.js\";import{ScreenSpaceReflections as i}from\"./ScreenSpaceReflections.glsl.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";function a(a,n){a.include(t,n),a.include(o),a.include(e),n.ssrEnabled&&a.include(i,n),a.fragment.constants.add(\"fresnelSky\",\"vec3\",[.02,1,15]).add(\"fresnelMaterial\",\"vec2\",[.02,.1]).add(\"roughness\",\"float\",.015).add(\"foamIntensityExternal\",\"float\",1.7).add(\"ssrIntensity\",\"float\",.65).add(\"ssrHeightFadeStart\",\"float\",3e5).add(\"ssrHeightFadeEnd\",\"float\",5e5).add(\"waterDiffusion\",\"float\",.775).add(\"waterSeeColorMod\",\"float\",.8).add(\"correctionViewingPowerFactor\",\"float\",.4).add(\"skyZenitColor\",\"vec3\",[.52,.68,.9]).add(\"skyColor\",\"vec3\",[.67,.79,.9]),a.fragment.code.add(r`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`),a.fragment.code.add(r`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 positionView) {\nfloat reflectionHit = 0.;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotL = clamp(dot(n, l), 0.0, 1.0);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nspecular = shadingInfo.NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}`),n.ssrEnabled?a.fragment.code.add(r`vec4 viewPosition = vec4(positionView.xyz, 1.0);\nvec3 viewDir = normalize(viewPosition.xyz);\nvec4 viewNormalVectorCoordinate = ssrViewMat *vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = ssrViewMat *vec4(localUp, 0.0);\nfloat correctionViewingFactor = pow(max(dot(-viewDir, viewUp.xyz), 0.0), correctionViewingPowerFactor);\nvec3 viewNormalCorrected = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrected));\nvec3 hitCoordinate = screenSpaceIntersection( normalize(reflected), viewPosition.xyz, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -positionView.z);\nreflectionHit = waterDiffusion * clamp(1.0 - (1.3*dCoords.y), 0.0, 1.0) * heightMod;\nreflectedColor = linearizeGamma(texture2D(lastFrameColorMap, reprojectedCoordinate).xyz)* reflectionHit * fresnelModifier.y * ssrIntensity;\n}\nfloat seeColorMod =  mix(waterSeeColorMod, waterSeeColorMod*0.5, reflectionHit);\nreturn tonemapACES((1. - reflectionHit) * reflSky + reflectedColor + reflSea * seeColorMod + specular + foam);\n}`):a.fragment.code.add(r`return tonemapACES(reflSky + reflSea * waterSeeColorMod + specular + foam);\n}`)}export{a as Water};\n"]},"metadata":{},"sourceType":"module"}