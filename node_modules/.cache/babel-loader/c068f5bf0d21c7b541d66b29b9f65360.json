{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { deg2rad as e } from \"../../../../../core/mathUtils.js\";\nimport t from \"../../../../../core/Quantity.js\";\nimport { e as s } from \"../../../../../chunks/earcut.js\";\nimport { s as i, d as o } from \"../../../../../chunks/vec2.js\";\nimport { a as r } from \"../../../../../chunks/vec2f64.js\";\nimport { n, i as h, g as a, c as d, o as g, f as l, d as p, a as c, b as m } from \"../../../../../chunks/vec3.js\";\nimport { c as _ } from \"../../../../../chunks/vec3f64.js\";\nimport { c as u } from \"../../../../../chunks/vec4f64.js\";\nimport { canProjectWithoutEngine as f, canProjectToWGS84ComparableLonLat as C, projectPointToVector as S, projectPointToWGS84ComparableLonLat as L, projectDirection as R, projectVectorToVector as w } from \"../../../../../geometry/projection.js\";\nimport { getSphericalPCPF as P, getReferenceEllipsoid as j } from \"../../../../../geometry/projectionEllipsoid.js\";\nimport A from \"../../../../../geometry/SpatialReference.js\";\nimport { segmentIntersects as W } from \"../../../../../geometry/support/intersectsBase.js\";\nimport { segmentLengthGeodesicVector as v, bestFitPlane as I, fitHemisphere as U, triangleAreaEuclidean as G, triangleAreaGeodesic as z, planePointDistance as M, boundingSphere as V } from \"../support/measurementUtils.js\";\nimport { midpoint as T } from \"../support/viewUtils.js\";\nimport { makeOrthonormal as F, tangentFrame as y } from \"../../../support/mathUtils.js\";\n\nclass k {\n  constructor(e, t) {\n    this.positionsWorldCoords = [], this.positionsRenderCoords = [], this.positionsProjectedWorldCoords = [], this.positionsFittedRenderCoords = [], this.positionsGeographic = [], this.positionsSpherical = [], this.positionsStereographic = [], this.pathSegmentLengths = [], this.geodesicPathSegmentLengths = [], this.perimeterSegmentLengths = [], this.intersectingSegments = new Set(), this.geodesicIntersectingSegments = new Set(), this.areaCentroidWorldCoords = _(), this.areaCentroidRenderCoords = _(), this.geodesicAreaCentroidRenderCoords = _(), this._length = 0, this._centroidRenderCoords = _(), this._planeWorldCoords = u(), this._worldUp = _(), this._worldTangent = _(), this._frame = [_(), _(), _()], this._pathVersion = -1, this._validMeasurement = !1, this._tempU = _(), this._tempV = _(), this._tempVec3 = _(), this._tempSphere = {\n      center: _(),\n      radius: 0\n    }, this._sceneView = e, this.unitNormalizer = t;\n  }\n\n  update(e, s, i, o) {\n    const r = this.unitNormalizer,\n          h = this._sceneView.renderSpatialReference,\n          a = this.unitNormalizer.spatialReference;\n    if (this._pathVersion === e.version && this._validMeasurement === i) return;\n    this._pathVersion = e.version, this._validMeasurement = i;\n    const d = e.numVertices;\n\n    this._resize(d);\n\n    const g = P(s.spatialReference),\n          l = f(s.spatialReference, g) && C(s.spatialReference),\n          p = this.positionsGeographic,\n          c = this.positionsWorldCoords,\n          m = this.positionsRenderCoords,\n          _ = this.positionsSpherical;\n    e.forEachVertexPosition((e, t) => {\n      S(e, c[t], a), S(e, m[t], h), l && (L(e, p[t]), S(e, _[t], g), n(_[t], _[t]));\n    });\n\n    const u = this._updatePathLengths(i);\n\n    if (this.pathLength = this._length > 1 ? new t(r.normalizeDistance(u), \"meters\") : null, l) {\n      const e = this._updateGeodesicPathLengths(i, a);\n\n      this.geodesicPathLength = this._length > 1 ? new t(e, \"meters\") : null;\n    } else this.geodesicPathLength = null;\n\n    if (!i) return this.area = null, this.geodesicArea = null, this.perimeterLength = null, this.triangleIndices = null, this.geodesicTriangleIndices = null, this.intersectingSegments.clear(), void this.geodesicIntersectingSegments.clear();\n    this._updateArea(s, r, h, a, o), l && this._updateGeodesicArea(s);\n  }\n\n  getData() {\n    return {\n      positionsWorldCoords: this.positionsWorldCoords,\n      positionsRenderCoords: this.positionsRenderCoords,\n      positionsProjectedWorldCoords: this.positionsProjectedWorldCoords,\n      positionsFittedRenderCoords: this.positionsFittedRenderCoords,\n      positionsGeographic: this.positionsGeographic,\n      positionsSpherical: this.positionsSpherical,\n      positionsStereographic: this.positionsStereographic,\n      pathSegmentLengths: this.pathSegmentLengths,\n      geodesicPathSegmentLengths: this.geodesicPathSegmentLengths,\n      perimeterSegmentLengths: this.perimeterSegmentLengths,\n      intersectingSegments: this.intersectingSegments,\n      geodesicIntersectingSegments: this.geodesicIntersectingSegments,\n      triangleIndices: this.triangleIndices,\n      geodesicTriangleIndices: this.geodesicTriangleIndices,\n      areaCentroidWorldCoords: this.areaCentroidWorldCoords,\n      areaCentroidRenderCoords: this.areaCentroidRenderCoords,\n      geodesicAreaCentroidRenderCoords: this.geodesicAreaCentroidRenderCoords,\n      fittingMode: this.fittingMode,\n      area: this.area,\n      geodesicArea: this.geodesicArea,\n      pathLength: this.pathLength,\n      geodesicPathLength: this.geodesicPathLength,\n      perimeterLength: this.perimeterLength,\n      unitNormalizer: this.unitNormalizer\n    };\n  }\n\n  _resize(e) {\n    for (e < this._length && (this.positionsWorldCoords.length = e, this.positionsRenderCoords.length = e, this.positionsProjectedWorldCoords.length = e, this.positionsFittedRenderCoords.length = e, this.positionsGeographic.length = e, this.positionsSpherical.length = e, this.positionsStereographic.length = e, this.pathSegmentLengths.length = e, this.geodesicPathSegmentLengths.length = e, this.perimeterSegmentLengths.length = e, this._length = e); this._length < e;) this.positionsWorldCoords.push(_()), this.positionsRenderCoords.push(_()), this.positionsProjectedWorldCoords.push(r()), this.positionsFittedRenderCoords.push(_()), this.positionsGeographic.push(_()), this.positionsSpherical.push(_()), this.positionsStereographic.push(r()), this.pathSegmentLengths.push(0), this.geodesicPathSegmentLengths.push(0), this.perimeterSegmentLengths.push(0), ++this._length;\n  }\n\n  _updatePathLengths(e) {\n    const t = this.positionsWorldCoords,\n          s = this.pathSegmentLengths;\n    let i = 0;\n\n    for (let o = 0; o < this._length; ++o) {\n      const r = s[o] = h(t[o], t[(o + 1) % this._length]);\n      (o < this._length - 1 || e) && (i += r);\n    }\n\n    return i;\n  }\n\n  _updateGeodesicPathLengths(e, t) {\n    const s = this.positionsGeographic,\n          i = this.geodesicPathSegmentLengths;\n    let o = 0;\n\n    for (let r = 0; r < this._length; ++r) {\n      const n = i[r] = v(s[r], s[(r + 1) % this._length], t);\n      (r < this._length - 1 || e) && (o += n);\n    }\n\n    return o;\n  }\n\n  _updateArea(e, s, o, r, n) {\n    const h = e.renderCoordsHelper,\n          _ = this.positionsWorldCoords,\n          u = this.positionsRenderCoords,\n          f = this.positionsProjectedWorldCoords,\n          C = this.positionsFittedRenderCoords,\n          S = this._planeWorldCoords,\n          L = this._centroidRenderCoords;\n    T(u, L), h.worldUpAtPosition(L, this._worldUp), h.worldBasisAtPosition(L, 0, this._worldTangent), R(L, this._worldUp, o, this._worldUp, r), R(L, this._worldTangent, o, this._worldTangent, r), _.length > 2 && I(_, S), this.fittingMode = this._selectFittingMode(S, _, this._worldUp, n);\n    let P = 0;\n\n    if (\"horizontal\" === this.fittingMode) {\n      let e = -1 / 0;\n      u.forEach((t, s) => {\n        const i = h.getAltitude(u[s]);\n        i > e && (e = i, P = s);\n      });\n    }\n\n    const j = _[P];\n    let A = S,\n        W = this._worldTangent;\n    \"horizontal\" === this.fittingMode ? A = this._worldUp : \"vertical\" === this.fittingMode && (A = this._tempVec3, W = this._worldUp, F(S, this._worldUp, A)), a(this._frame[2], A), F(W, A, this._frame[0]), d(this._frame[1], this._frame[0], this._frame[2]), g(this._frame[1], this._frame[1]);\n    const v = this._tempVec3,\n          U = this._tempU,\n          G = this._tempV;\n\n    for (let t = 0; t < this._length; ++t) {\n      const e = f[t],\n            s = C[t];\n      l(v, _[t], j), i(e, p(this._frame[0], v), p(this._frame[1], v)), c(U, this._frame[0], e[0]), c(G, this._frame[1], e[1]), m(v, U, G), m(v, v, j), w(v, r, s, o);\n    }\n\n    this.perimeterLength = this._length > 0 ? new t(s.normalizeDistance(this._updatePerimeterLengths()), \"meters\") : null, T(C, this.areaCentroidRenderCoords), w(this.areaCentroidRenderCoords, o, this.areaCentroidWorldCoords, r), this._updateIntersectingSegments(), this.area = 0 === this.intersectingSegments.size ? new t(s.normalizeArea(this._computeArea()), \"square-meters\") : null;\n  }\n\n  _updateGeodesicArea(e) {\n    const s = e.renderCoordsHelper,\n          o = this.positionsSpherical,\n          r = this.positionsStereographic,\n          n = this._tempVec3,\n          h = U(o, n);\n    if (!h) return void (this.geodesicArea = null);\n    const a = this._tempU,\n          d = this._tempV;\n    y(n, a, d);\n\n    for (let t = 0; t < this._length; ++t) {\n      const e = p(o[t], a),\n            s = p(o[t], d),\n            h = p(o[t], n);\n      i(r[t], e / h, s / h);\n    }\n\n    c(n, n, j(e.spatialReference).radius), s.toRenderCoords(n, P(e.spatialReference), this.geodesicAreaCentroidRenderCoords), this._updateGeodesicIntersectingSegments(), this.geodesicArea = h && 0 === this.geodesicIntersectingSegments.size ? new t(this._computeGeodesicArea(), \"square-meters\") : null;\n  }\n\n  _updatePerimeterLengths() {\n    const e = this.positionsProjectedWorldCoords,\n          t = this.perimeterSegmentLengths;\n    let s = 0;\n\n    for (let i = 0; i < this._length; ++i) {\n      s += t[i] = o(e[i], e[(i + 1) % this._length]);\n    }\n\n    return s;\n  }\n\n  _updateIntersectingSegments() {\n    const e = this.positionsProjectedWorldCoords,\n          t = this.intersectingSegments;\n    t.clear();\n\n    for (let s = 0; s < this._length; ++s) for (let i = s + 2; i < this._length; ++i) {\n      if ((i + 1) % this._length === s) continue;\n      const o = e[s],\n            r = e[(s + 1) % this._length],\n            n = e[i],\n            h = e[(i + 1) % this._length];\n      W(o, r, n, h) && (t.add(s), t.add(i));\n    }\n  }\n\n  _computeArea() {\n    const e = this.positionsProjectedWorldCoords,\n          t = x(e, 2),\n          i = this.triangleIndices = new Uint32Array(s(t, [], 2));\n    let o = 0;\n\n    for (let s = 0; s < i.length; s += 3) o += G(e[i[s]], e[i[s + 1]], e[i[s + 2]]);\n\n    return o;\n  }\n\n  _updateGeodesicIntersectingSegments() {\n    const e = this.positionsStereographic,\n          t = this.geodesicIntersectingSegments;\n    t.clear();\n\n    for (let s = 0; s < this._length; ++s) for (let i = s + 2; i < this._length; ++i) {\n      if ((i + 1) % this._length === s) continue;\n      const o = e[s],\n            r = e[(s + 1) % this._length],\n            n = e[i],\n            h = e[(i + 1) % this._length];\n      W(o, r, n, h) && (t.add(s), t.add(i));\n    }\n  }\n\n  _computeGeodesicArea() {\n    const e = this.positionsGeographic,\n          t = x(this.positionsStereographic, 2),\n          i = this.geodesicTriangleIndices = new Uint32Array(s(t, [], 2));\n    let o = 0;\n\n    for (let s = 0; s < i.length; s += 3) o += z(e[i[s]], e[i[s + 1]], e[i[s + 2]], A.WGS84);\n\n    return o;\n  }\n\n  _selectFittingMode(t, s, i, o) {\n    const r = s.map(e => Math.abs(M(t, e))).reduce((e, t) => Math.max(e, t), 0);\n    V(s, this._tempSphere);\n    const n = r / (2 * this._tempSphere.radius),\n          h = n < o.maxRelativeErrorCoplanar,\n          a = n < o.maxRelativeErrorAlmostCoplanar;\n    let d = \"horizontal\";\n    if (h) d = \"oblique\";else if (a) {\n      d = Math.abs(p(i, t)) > Math.cos(e(o.verticalAngleThreshold)) ? \"horizontal\" : \"vertical\";\n    }\n    return d;\n  }\n\n}\n\nfunction x(e, t) {\n  const s = new Float64Array(e.length * t);\n\n  for (let i = 0; i < e.length; ++i) {\n    const o = e[i];\n\n    for (let e = 0; e < t; ++e) s[i * t + e] = o[e];\n  }\n\n  return s;\n}\n\nexport { k as MeasurementDataManager };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/views/3d/layers/analysis/AreaMeasurement/MeasurementData.js"],"names":["deg2rad","e","t","s","i","d","o","a","r","n","h","g","c","f","l","p","b","m","_","u","canProjectWithoutEngine","canProjectToWGS84ComparableLonLat","C","projectPointToVector","S","projectPointToWGS84ComparableLonLat","L","projectDirection","R","projectVectorToVector","w","getSphericalPCPF","P","getReferenceEllipsoid","j","A","segmentIntersects","W","segmentLengthGeodesicVector","v","bestFitPlane","I","fitHemisphere","U","triangleAreaEuclidean","G","triangleAreaGeodesic","z","planePointDistance","M","boundingSphere","V","midpoint","T","makeOrthonormal","F","tangentFrame","y","k","constructor","positionsWorldCoords","positionsRenderCoords","positionsProjectedWorldCoords","positionsFittedRenderCoords","positionsGeographic","positionsSpherical","positionsStereographic","pathSegmentLengths","geodesicPathSegmentLengths","perimeterSegmentLengths","intersectingSegments","Set","geodesicIntersectingSegments","areaCentroidWorldCoords","areaCentroidRenderCoords","geodesicAreaCentroidRenderCoords","_length","_centroidRenderCoords","_planeWorldCoords","_worldUp","_worldTangent","_frame","_pathVersion","_validMeasurement","_tempU","_tempV","_tempVec3","_tempSphere","center","radius","_sceneView","unitNormalizer","update","renderSpatialReference","spatialReference","version","numVertices","_resize","forEachVertexPosition","_updatePathLengths","pathLength","normalizeDistance","_updateGeodesicPathLengths","geodesicPathLength","area","geodesicArea","perimeterLength","triangleIndices","geodesicTriangleIndices","clear","_updateArea","_updateGeodesicArea","getData","fittingMode","length","push","renderCoordsHelper","worldUpAtPosition","worldBasisAtPosition","_selectFittingMode","forEach","getAltitude","_updatePerimeterLengths","_updateIntersectingSegments","size","normalizeArea","_computeArea","toRenderCoords","_updateGeodesicIntersectingSegments","_computeGeodesicArea","add","x","Uint32Array","WGS84","map","Math","abs","reduce","max","maxRelativeErrorCoplanar","maxRelativeErrorAlmostCoplanar","cos","verticalAngleThreshold","Float64Array","MeasurementDataManager"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{deg2rad as e}from\"../../../../../core/mathUtils.js\";import t from\"../../../../../core/Quantity.js\";import{e as s}from\"../../../../../chunks/earcut.js\";import{s as i,d as o}from\"../../../../../chunks/vec2.js\";import{a as r}from\"../../../../../chunks/vec2f64.js\";import{n,i as h,g as a,c as d,o as g,f as l,d as p,a as c,b as m}from\"../../../../../chunks/vec3.js\";import{c as _}from\"../../../../../chunks/vec3f64.js\";import{c as u}from\"../../../../../chunks/vec4f64.js\";import{canProjectWithoutEngine as f,canProjectToWGS84ComparableLonLat as C,projectPointToVector as S,projectPointToWGS84ComparableLonLat as L,projectDirection as R,projectVectorToVector as w}from\"../../../../../geometry/projection.js\";import{getSphericalPCPF as P,getReferenceEllipsoid as j}from\"../../../../../geometry/projectionEllipsoid.js\";import A from\"../../../../../geometry/SpatialReference.js\";import{segmentIntersects as W}from\"../../../../../geometry/support/intersectsBase.js\";import{segmentLengthGeodesicVector as v,bestFitPlane as I,fitHemisphere as U,triangleAreaEuclidean as G,triangleAreaGeodesic as z,planePointDistance as M,boundingSphere as V}from\"../support/measurementUtils.js\";import{midpoint as T}from\"../support/viewUtils.js\";import{makeOrthonormal as F,tangentFrame as y}from\"../../../support/mathUtils.js\";class k{constructor(e,t){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.areaCentroidWorldCoords=_(),this.areaCentroidRenderCoords=_(),this.geodesicAreaCentroidRenderCoords=_(),this._length=0,this._centroidRenderCoords=_(),this._planeWorldCoords=u(),this._worldUp=_(),this._worldTangent=_(),this._frame=[_(),_(),_()],this._pathVersion=-1,this._validMeasurement=!1,this._tempU=_(),this._tempV=_(),this._tempVec3=_(),this._tempSphere={center:_(),radius:0},this._sceneView=e,this.unitNormalizer=t}update(e,s,i,o){const r=this.unitNormalizer,h=this._sceneView.renderSpatialReference,a=this.unitNormalizer.spatialReference;if(this._pathVersion===e.version&&this._validMeasurement===i)return;this._pathVersion=e.version,this._validMeasurement=i;const d=e.numVertices;this._resize(d);const g=P(s.spatialReference),l=f(s.spatialReference,g)&&C(s.spatialReference),p=this.positionsGeographic,c=this.positionsWorldCoords,m=this.positionsRenderCoords,_=this.positionsSpherical;e.forEachVertexPosition(((e,t)=>{S(e,c[t],a),S(e,m[t],h),l&&(L(e,p[t]),S(e,_[t],g),n(_[t],_[t]))}));const u=this._updatePathLengths(i);if(this.pathLength=this._length>1?new t(r.normalizeDistance(u),\"meters\"):null,l){const e=this._updateGeodesicPathLengths(i,a);this.geodesicPathLength=this._length>1?new t(e,\"meters\"):null}else this.geodesicPathLength=null;if(!i)return this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),void this.geodesicIntersectingSegments.clear();this._updateArea(s,r,h,a,o),l&&this._updateGeodesicArea(s)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,unitNormalizer:this.unitNormalizer}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(_()),this.positionsRenderCoords.push(_()),this.positionsProjectedWorldCoords.push(r()),this.positionsFittedRenderCoords.push(_()),this.positionsGeographic.push(_()),this.positionsSpherical.push(_()),this.positionsStereographic.push(r()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorldCoords,s=this.pathSegmentLengths;let i=0;for(let o=0;o<this._length;++o){const r=s[o]=h(t[o],t[(o+1)%this._length]);(o<this._length-1||e)&&(i+=r)}return i}_updateGeodesicPathLengths(e,t){const s=this.positionsGeographic,i=this.geodesicPathSegmentLengths;let o=0;for(let r=0;r<this._length;++r){const n=i[r]=v(s[r],s[(r+1)%this._length],t);(r<this._length-1||e)&&(o+=n)}return o}_updateArea(e,s,o,r,n){const h=e.renderCoordsHelper,_=this.positionsWorldCoords,u=this.positionsRenderCoords,f=this.positionsProjectedWorldCoords,C=this.positionsFittedRenderCoords,S=this._planeWorldCoords,L=this._centroidRenderCoords;T(u,L),h.worldUpAtPosition(L,this._worldUp),h.worldBasisAtPosition(L,0,this._worldTangent),R(L,this._worldUp,o,this._worldUp,r),R(L,this._worldTangent,o,this._worldTangent,r),_.length>2&&I(_,S),this.fittingMode=this._selectFittingMode(S,_,this._worldUp,n);let P=0;if(\"horizontal\"===this.fittingMode){let e=-1/0;u.forEach(((t,s)=>{const i=h.getAltitude(u[s]);i>e&&(e=i,P=s)}))}const j=_[P];let A=S,W=this._worldTangent;\"horizontal\"===this.fittingMode?A=this._worldUp:\"vertical\"===this.fittingMode&&(A=this._tempVec3,W=this._worldUp,F(S,this._worldUp,A)),a(this._frame[2],A),F(W,A,this._frame[0]),d(this._frame[1],this._frame[0],this._frame[2]),g(this._frame[1],this._frame[1]);const v=this._tempVec3,U=this._tempU,G=this._tempV;for(let t=0;t<this._length;++t){const e=f[t],s=C[t];l(v,_[t],j),i(e,p(this._frame[0],v),p(this._frame[1],v)),c(U,this._frame[0],e[0]),c(G,this._frame[1],e[1]),m(v,U,G),m(v,v,j),w(v,r,s,o)}this.perimeterLength=this._length>0?new t(s.normalizeDistance(this._updatePerimeterLengths()),\"meters\"):null,T(C,this.areaCentroidRenderCoords),w(this.areaCentroidRenderCoords,o,this.areaCentroidWorldCoords,r),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?new t(s.normalizeArea(this._computeArea()),\"square-meters\"):null}_updateGeodesicArea(e){const s=e.renderCoordsHelper,o=this.positionsSpherical,r=this.positionsStereographic,n=this._tempVec3,h=U(o,n);if(!h)return void(this.geodesicArea=null);const a=this._tempU,d=this._tempV;y(n,a,d);for(let t=0;t<this._length;++t){const e=p(o[t],a),s=p(o[t],d),h=p(o[t],n);i(r[t],e/h,s/h)}c(n,n,j(e.spatialReference).radius),s.toRenderCoords(n,P(e.spatialReference),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=h&&0===this.geodesicIntersectingSegments.size?new t(this._computeGeodesicArea(),\"square-meters\"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths;let s=0;for(let i=0;i<this._length;++i){s+=t[i]=o(e[i],e[(i+1)%this._length])}return s}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];W(o,r,n,h)&&(t.add(s),t.add(i))}}_computeArea(){const e=this.positionsProjectedWorldCoords,t=x(e,2),i=this.triangleIndices=new Uint32Array(s(t,[],2));let o=0;for(let s=0;s<i.length;s+=3)o+=G(e[i[s]],e[i[s+1]],e[i[s+2]]);return o}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];W(o,r,n,h)&&(t.add(s),t.add(i))}}_computeGeodesicArea(){const e=this.positionsGeographic,t=x(this.positionsStereographic,2),i=this.geodesicTriangleIndices=new Uint32Array(s(t,[],2));let o=0;for(let s=0;s<i.length;s+=3)o+=z(e[i[s]],e[i[s+1]],e[i[s+2]],A.WGS84);return o}_selectFittingMode(t,s,i,o){const r=s.map((e=>Math.abs(M(t,e)))).reduce(((e,t)=>Math.max(e,t)),0);V(s,this._tempSphere);const n=r/(2*this._tempSphere.radius),h=n<o.maxRelativeErrorCoplanar,a=n<o.maxRelativeErrorAlmostCoplanar;let d=\"horizontal\";if(h)d=\"oblique\";else if(a){d=Math.abs(p(i,t))>Math.cos(e(o.verticalAngleThreshold))?\"horizontal\":\"vertical\"}return d}}function x(e,t){const s=new Float64Array(e.length*t);for(let i=0;i<e.length;++i){const o=e[i];for(let e=0;e<t;++e)s[i*t+e]=o[e]}return s}export{k as MeasurementDataManager};\n"]},"metadata":{},"sourceType":"module"}