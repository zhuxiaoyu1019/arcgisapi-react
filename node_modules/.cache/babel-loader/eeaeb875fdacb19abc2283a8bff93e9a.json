{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { FoamIntensity as e } from \"./FoamRendering.glsl.js\";\nimport { glsl as t } from \"../../shaderModules/interfaces.js\";\n\nfunction r(r) {\n  r.fragment.uniforms.add(\"texWaveNormal\", \"sampler2D\"), r.fragment.uniforms.add(\"texWavePerturbation\", \"sampler2D\"), r.fragment.uniforms.add(\"waveParams\", \"vec4\"), r.fragment.uniforms.add(\"waveDirection\", \"vec2\"), r.include(e), r.fragment.code.add(t`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);\nvec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture2D(_tex, _uv).rg - 1.0;\n}\nfloat sampleNoiseTexture(vec2 _uv) {\nreturn texture2D(texWavePerturbation, _uv).b;\n}\nvec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture2D(_tex, _uv).rgb - 1.0;\n}\nfloat computeProgress(vec2 uv, float time) {\nreturn fract(time);\n}\nfloat computeWeight(vec2 uv, float time) {\nfloat progress = computeProgress(uv, time);\nreturn 1.0 - abs(1.0 - 2.0 * progress);\n}\nvec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\nfloat flowStrength = waveParams[2];\nfloat flowOffset = waveParams[3];\nvec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;\nfloat progress = computeProgress(uv, time + phaseOffset);\nfloat weight = computeWeight(uv, time + phaseOffset);\nvec2 result = uv;\nresult -= flowVector * (progress + flowOffset);\nresult += phaseOffset;\nresult += (time - progress) * FLOW_JUMP;\nreturn vec3(result, weight);\n}\nconst float TIME_NOISE_TEXTURE_REPEAT = 0.3737;\nconst float TIME_NOISE_STRENGTH = 7.77;\nvec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\nfloat waveStrength = waveParams[0];\nvec2 waveMovement = time * -_waveDir;\nfloat timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\nvec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\nvec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\nvec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\nvec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\nvec3 mixNormal = normalize(normal_A + normal_B);\nmixNormal.xy *= waveStrength;\nmixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\nreturn mixNormal;\n}\nvec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {\nfloat waveTextureRepeat = waveParams[1];\nvec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\nfloat foam  = normals2FoamIntensity(normal, waveParams[0]);\nreturn vec4(normal, foam);\n}`);\n}\n\nfunction a(e, t) {\n  e.setUniform4f(\"waveParams\", t.waveStrength, t.waveTextureRepeat, t.flowStrength, t.flowOffset), e.setUniform2f(\"waveDirection\", t.waveDirection[0] * t.waveVelocity, t.waveDirection[1] * t.waveVelocity);\n}\n\nexport { r as WaterDistortion, a as bindWaterDistortionUniforms };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js"],"names":["FoamIntensity","e","glsl","t","r","fragment","uniforms","add","include","code","a","setUniform4f","waveStrength","waveTextureRepeat","flowStrength","flowOffset","setUniform2f","waveDirection","waveVelocity","WaterDistortion","bindWaterDistortionUniforms"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,aAAa,IAAIC,CAAxB,QAA8B,yBAA9B;AAAwD,SAAOC,IAAI,IAAIC,CAAf,QAAqB,mCAArB;;AAAyD,SAASC,CAAT,CAAWA,CAAX,EAAa;AAACA,EAAAA,CAAC,CAACC,QAAF,CAAWC,QAAX,CAAoBC,GAApB,CAAwB,eAAxB,EAAwC,WAAxC,GAAqDH,CAAC,CAACC,QAAF,CAAWC,QAAX,CAAoBC,GAApB,CAAwB,qBAAxB,EAA8C,WAA9C,CAArD,EAAgHH,CAAC,CAACC,QAAF,CAAWC,QAAX,CAAoBC,GAApB,CAAwB,YAAxB,EAAqC,MAArC,CAAhH,EAA6JH,CAAC,CAACC,QAAF,CAAWC,QAAX,CAAoBC,GAApB,CAAwB,eAAxB,EAAwC,MAAxC,CAA7J,EAA6MH,CAAC,CAACI,OAAF,CAAUP,CAAV,CAA7M,EAA0NG,CAAC,CAACC,QAAF,CAAWI,IAAX,CAAgBF,GAAhB,CAAoBJ,CAAE;AAC/W;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAjDyV,CAA1N;AAiD3H;;AAAA,SAASO,CAAT,CAAWT,CAAX,EAAaE,CAAb,EAAe;AAACF,EAAAA,CAAC,CAACU,YAAF,CAAe,YAAf,EAA4BR,CAAC,CAACS,YAA9B,EAA2CT,CAAC,CAACU,iBAA7C,EAA+DV,CAAC,CAACW,YAAjE,EAA8EX,CAAC,CAACY,UAAhF,GAA4Fd,CAAC,CAACe,YAAF,CAAe,eAAf,EAA+Bb,CAAC,CAACc,aAAF,CAAgB,CAAhB,IAAmBd,CAAC,CAACe,YAApD,EAAiEf,CAAC,CAACc,aAAF,CAAgB,CAAhB,IAAmBd,CAAC,CAACe,YAAtF,CAA5F;AAAgM;;AAAA,SAAOd,CAAC,IAAIe,eAAZ,EAA4BT,CAAC,IAAIU,2BAAjC","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{FoamIntensity as e}from\"./FoamRendering.glsl.js\";import{glsl as t}from\"../../shaderModules/interfaces.js\";function r(r){r.fragment.uniforms.add(\"texWaveNormal\",\"sampler2D\"),r.fragment.uniforms.add(\"texWavePerturbation\",\"sampler2D\"),r.fragment.uniforms.add(\"waveParams\",\"vec4\"),r.fragment.uniforms.add(\"waveDirection\",\"vec2\"),r.include(e),r.fragment.code.add(t`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);\nvec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture2D(_tex, _uv).rg - 1.0;\n}\nfloat sampleNoiseTexture(vec2 _uv) {\nreturn texture2D(texWavePerturbation, _uv).b;\n}\nvec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture2D(_tex, _uv).rgb - 1.0;\n}\nfloat computeProgress(vec2 uv, float time) {\nreturn fract(time);\n}\nfloat computeWeight(vec2 uv, float time) {\nfloat progress = computeProgress(uv, time);\nreturn 1.0 - abs(1.0 - 2.0 * progress);\n}\nvec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\nfloat flowStrength = waveParams[2];\nfloat flowOffset = waveParams[3];\nvec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;\nfloat progress = computeProgress(uv, time + phaseOffset);\nfloat weight = computeWeight(uv, time + phaseOffset);\nvec2 result = uv;\nresult -= flowVector * (progress + flowOffset);\nresult += phaseOffset;\nresult += (time - progress) * FLOW_JUMP;\nreturn vec3(result, weight);\n}\nconst float TIME_NOISE_TEXTURE_REPEAT = 0.3737;\nconst float TIME_NOISE_STRENGTH = 7.77;\nvec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\nfloat waveStrength = waveParams[0];\nvec2 waveMovement = time * -_waveDir;\nfloat timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\nvec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\nvec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\nvec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\nvec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\nvec3 mixNormal = normalize(normal_A + normal_B);\nmixNormal.xy *= waveStrength;\nmixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\nreturn mixNormal;\n}\nvec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {\nfloat waveTextureRepeat = waveParams[1];\nvec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\nfloat foam  = normals2FoamIntensity(normal, waveParams[0]);\nreturn vec4(normal, foam);\n}`)}function a(e,t){e.setUniform4f(\"waveParams\",t.waveStrength,t.waveTextureRepeat,t.flowStrength,t.flowOffset),e.setUniform2f(\"waveDirection\",t.waveDirection[0]*t.waveVelocity,t.waveDirection[1]*t.waveVelocity)}export{r as WaterDistortion,a as bindWaterDistortionUniforms};\n"]},"metadata":{},"sourceType":"module"}