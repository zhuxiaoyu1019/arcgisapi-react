{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport \"../../geometry.js\";\nimport e from \"./PixelBlock.js\";\nimport { decode as r } from \"./rasterFormats/RasterCodec.js\";\nimport { estimateStatisticsHistograms as o, split as s, mosaic as t, approximateTransform as i } from \"./rasterFunctions/pixelUtils.js\";\nimport l from \"../../renderers/support/RasterSymbolizer.js\";\nimport m from \"../../geometry/Extent.js\";\n\nclass n {\n  async decode(e) {\n    const o = await r(e.data, e.options);\n    return o && o.toJSON();\n  }\n\n  symbolize(r) {\n    r.pixelBlock = e.fromJSON(r.pixelBlock), r.extent = r.extent ? m.fromJSON(r.extent) : null;\n    const o = this.symbolizer.symbolize(r);\n    return Promise.resolve(o && o.toJSON());\n  }\n\n  async updateSymbolizer(e) {\n    var r;\n    this.symbolizer = l.fromJSON(e.symbolizerJSON), e.histograms && \"rasterStretch\" === (null == (r = this.symbolizer) ? void 0 : r.rendererJSON.type) && (this.symbolizer.rendererJSON.histograms = e.histograms);\n  }\n\n  stretch(r) {\n    const o = this.symbolizer.simpleStretch(e.fromJSON(r.srcPixelBlock), r.stretchParams);\n    return Promise.resolve(o && o.toJSON());\n  }\n\n  estimateStatisticsHistograms(r) {\n    const s = o(e.fromJSON(r.srcPixelBlock));\n    return Promise.resolve(s);\n  }\n\n  split(r) {\n    const o = s(e.fromJSON(r.srcPixelBlock), r.tileSize, r.maximumPyramidLevel);\n    return o && o.forEach((e, r) => {\n      o.set(r, null == e ? void 0 : e.toJSON());\n    }), Promise.resolve(o);\n  }\n\n  async mosaicAndTransform(r) {\n    const o = r.srcPixelBlocks.map(r => r ? new e(r) : null),\n          s = t(o, r.srcMosaicSize, null, null, r.alignmentInfo);\n    if (!r.coefs) return s && s.toJSON();\n    const l = i(s, r.destDimension, r.coefs, r.sampleSpacing, r.interpolation);\n    return l && l.toJSON();\n  }\n\n}\n\nexport default n;","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/layers/support/RasterWorker.js"],"names":["e","decode","r","estimateStatisticsHistograms","o","split","s","mosaic","t","approximateTransform","i","l","m","n","data","options","toJSON","symbolize","pixelBlock","fromJSON","extent","symbolizer","Promise","resolve","updateSymbolizer","symbolizerJSON","histograms","rendererJSON","type","stretch","simpleStretch","srcPixelBlock","stretchParams","tileSize","maximumPyramidLevel","forEach","set","mosaicAndTransform","srcPixelBlocks","map","srcMosaicSize","alignmentInfo","coefs","destDimension","sampleSpacing","interpolation"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport\"../../geometry.js\";import e from\"./PixelBlock.js\";import{decode as r}from\"./rasterFormats/RasterCodec.js\";import{estimateStatisticsHistograms as o,split as s,mosaic as t,approximateTransform as i}from\"./rasterFunctions/pixelUtils.js\";import l from\"../../renderers/support/RasterSymbolizer.js\";import m from\"../../geometry/Extent.js\";class n{async decode(e){const o=await r(e.data,e.options);return o&&o.toJSON()}symbolize(r){r.pixelBlock=e.fromJSON(r.pixelBlock),r.extent=r.extent?m.fromJSON(r.extent):null;const o=this.symbolizer.symbolize(r);return Promise.resolve(o&&o.toJSON())}async updateSymbolizer(e){var r;this.symbolizer=l.fromJSON(e.symbolizerJSON),e.histograms&&\"rasterStretch\"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(r){const o=this.symbolizer.simpleStretch(e.fromJSON(r.srcPixelBlock),r.stretchParams);return Promise.resolve(o&&o.toJSON())}estimateStatisticsHistograms(r){const s=o(e.fromJSON(r.srcPixelBlock));return Promise.resolve(s)}split(r){const o=s(e.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return o&&o.forEach(((e,r)=>{o.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(o)}async mosaicAndTransform(r){const o=r.srcPixelBlocks.map((r=>r?new e(r):null)),s=t(o,r.srcMosaicSize,null,null,r.alignmentInfo);if(!r.coefs)return s&&s.toJSON();const l=i(s,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation);return l&&l.toJSON()}}export default n;\n"]},"metadata":{},"sourceType":"module"}