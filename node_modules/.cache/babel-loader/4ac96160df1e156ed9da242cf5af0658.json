{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { BufferViewVec4u8 as t } from \"../../../../../geometry/support/buffer/BufferView.js\";\nimport e from \"../../../../webgl/Texture.js\";\n\nclass i {\n  constructor(i, s = 1) {\n    this.rctx = i, this.fieldCount = s, this.textureWidth = 4096, this.dirty = !0, this.texture = new e(this.rctx, {\n      target: 3553,\n      pixelFormat: 6408,\n      dataType: 5121,\n      samplingMode: 9728,\n      wrapMode: 33071,\n      width: this.textureWidth,\n      height: 1,\n      flipped: !1\n    }), this.data = new t(new ArrayBuffer(4 * this.textureWidth));\n  }\n\n  dispose() {\n    this.texture.dispose(), this.texture = void 0, this.data = void 0;\n  }\n\n  setData(t, e, i, s, r, h) {\n    const d = t * this.fieldCount + e;\n    this.dirty = !0, this.data.set(d, 0, i), this.data.set(d, 1, s), this.data.set(d, 2, r), this.data.set(d, 3, h);\n  }\n\n  setDataElement(t, e, i, s) {\n    const r = t * this.fieldCount + e;\n    this.dirty = !0, this.data.set(r, i, s);\n  }\n\n  resizeToFit(e) {\n    const i = e * this.fieldCount;\n\n    if (i >= this.data.count) {\n      const e = Math.ceil((i + 1) / this.textureWidth) * this.textureWidth,\n            s = new t(new ArrayBuffer(4 * e));\n      s.typedBuffer.set(this.data.typedBuffer), this.data = s;\n    }\n  }\n\n  updateTexture() {\n    if (!this.dirty) return;\n    const t = this.texture.descriptor.width,\n          e = this.texture.descriptor.height;\n    this.data.count > t * e && this.texture.resize(t, this.data.count / t), this.texture.setData(this.data.typedBuffer), this.dirty = !1;\n  }\n\n  bind(t, e, i) {\n    t.bindTexture(this.texture, e), t.setUniform2f(i, 1 / this.texture.descriptor.width, 1 / this.texture.descriptor.height);\n  }\n\n}\n\nexport { i as TextureBackedBuffer };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextureBackedBuffer/TextureBackedBuffer.js"],"names":["BufferViewVec4u8","t","e","i","constructor","s","rctx","fieldCount","textureWidth","dirty","texture","target","pixelFormat","dataType","samplingMode","wrapMode","width","height","flipped","data","ArrayBuffer","dispose","setData","r","h","d","set","setDataElement","resizeToFit","count","Math","ceil","typedBuffer","updateTexture","descriptor","resize","bind","bindTexture","setUniform2f","TextureBackedBuffer"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{BufferViewVec4u8 as t}from\"../../../../../geometry/support/buffer/BufferView.js\";import e from\"../../../../webgl/Texture.js\";class i{constructor(i,s=1){this.rctx=i,this.fieldCount=s,this.textureWidth=4096,this.dirty=!0,this.texture=new e(this.rctx,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,width:this.textureWidth,height:1,flipped:!1}),this.data=new t(new ArrayBuffer(4*this.textureWidth))}dispose(){this.texture.dispose(),this.texture=void 0,this.data=void 0}setData(t,e,i,s,r,h){const d=t*this.fieldCount+e;this.dirty=!0,this.data.set(d,0,i),this.data.set(d,1,s),this.data.set(d,2,r),this.data.set(d,3,h)}setDataElement(t,e,i,s){const r=t*this.fieldCount+e;this.dirty=!0,this.data.set(r,i,s)}resizeToFit(e){const i=e*this.fieldCount;if(i>=this.data.count){const e=Math.ceil((i+1)/this.textureWidth)*this.textureWidth,s=new t(new ArrayBuffer(4*e));s.typedBuffer.set(this.data.typedBuffer),this.data=s}}updateTexture(){if(!this.dirty)return;const t=this.texture.descriptor.width,e=this.texture.descriptor.height;this.data.count>t*e&&this.texture.resize(t,this.data.count/t),this.texture.setData(this.data.typedBuffer),this.dirty=!1}bind(t,e,i){t.bindTexture(this.texture,e),t.setUniform2f(i,1/this.texture.descriptor.width,1/this.texture.descriptor.height)}}export{i as TextureBackedBuffer};\n"]},"metadata":{},"sourceType":"module"}