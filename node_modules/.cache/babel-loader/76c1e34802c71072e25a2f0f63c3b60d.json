{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { _ as e } from \"../../../../../chunks/tslib.es6.js\";\nimport \"../../../../../intl.js\";\nimport t from \"../../../../../core/Accessor.js\";\nimport \"../../../../../core/has.js\";\nimport i from \"../../../../../core/Handles.js\";\nimport { nextHighestPowerOfTen as s } from \"../../../../../core/mathUtils.js\";\nimport { isNone as r, isSome as n, unwrap as a } from \"../../../../../core/maybe.js\";\nimport o from \"../../../../../core/Quantity.js\";\nimport { formatDecimal as l } from \"../../../../../core/quantityFormatUtils.js\";\nimport { convertUnit as h, preferredImperialAreaUnit as m, preferredMetricAreaUnit as c, preferredImperialLengthUnit as d, preferredMetricLengthUnit as u } from \"../../../../../core/unitUtils.js\";\nimport { whenOnce as p } from \"../../../../../core/watchUtils.js\";\nimport { property as g } from \"../../../../../core/accessorSupport/decorators/property.js\";\nimport \"../../../../../core/accessorSupport/ensureType.js\";\nimport \"../../../../../core/Logger.js\";\nimport { subclass as _ } from \"../../../../../core/accessorSupport/decorators/subclass.js\";\nimport { reactionInit as L } from \"../../../../../core/accessorSupport/trackingUtils.js\";\nimport { i as b, t as v } from \"../../../../../chunks/mat4.js\";\nimport { c as f } from \"../../../../../chunks/mat4f64.js\";\nimport { f as w } from \"../../../../../chunks/vec3.js\";\nimport { c as S } from \"../../../../../chunks/vec3f64.js\";\nimport y from \"../../../interactive/measurementTools/support/measurementUtils.js\";\nimport { midpoint as j } from \"../../../interactive/measurementTools/support/viewUtils.js\";\nimport { LabelVisualElement as C } from \"../../../interactive/visualElements/LabelVisualElement.js\";\nimport { LineVisualElement as P } from \"../../../interactive/visualElements/LineVisualElement.js\";\nimport { MeasurementAreaVisualElement as V } from \"../../../interactive/visualElements/MeasurementAreaVisualElement.js\";\nimport { GeodesicSegment as A, EuclideanSegment as D } from \"../../../interactive/visualElements/support/Segment.js\";\nimport { createStipplePatternSimple as R } from \"../../../webgl-engine/materials/lineStippleUtils.js\";\nimport { onLocaleChange as M } from \"../../../../../intl/locale.js\";\nimport { fetchMessageBundle as I } from \"../../../../../intl/messages.js\";\nlet U = class extends t {\n  constructor(e) {\n    super(e), this._handles = new i(), this._params = { ...z\n    }, this._path = null, this._intersectedPath = null, this._perimeter = null, this._intersectedPerimeter = null, this._projectionLines = null, this._measurementArea = null, this._areaLabel = null, this._pathLengthLabel = null, this._cursorSegmentLengthLabel = null, this._perimeterLengthLabel = null, this._pathSegments = [], this._perimeterSegments = [], this._cursorSegment = null, this._origin = S(), this._originTransform = f(), this._cursorPositionRenderSpace = S(), this.messages = null, this.viewData = k, this.areaLabel = null, this.perimeterLengthLabel = null, this.mode = \"auto\", this.geodesicMeasurementDistanceThreshold = 1e5;\n  }\n\n  get visible() {\n    return this.layerView.visible && !this.layerView.suspended;\n  }\n\n  get testData() {\n    return {\n      labels: {\n        area: this._areaLabel,\n        pathLength: this._pathLengthLabel,\n        cursorSegmentLength: this._cursorSegmentLengthLabel,\n        perimeterLength: this._perimeterLengthLabel\n      }\n    };\n  }\n\n  initialize() {\n    const e = this.view;\n    this._path = new P({\n      view: e,\n      attached: !0,\n      width: this._params.pathLineWidth,\n      color: this._params.pathLineColor,\n      polygonOffset: !0,\n      renderOccluded: 4\n    }), this._intersectedPath = new P({\n      view: e,\n      attached: !0,\n      width: this._params.pathLineWidth,\n      color: this._params.intersectingLineColor,\n      polygonOffset: !0,\n      renderOccluded: 4\n    }), this._perimeter = new P({\n      view: e,\n      attached: !0,\n      width: this._params.perimeterLineWidth,\n      color: this._params.perimeterLineColor,\n      polygonOffset: !0,\n      renderOccluded: 4\n    }), this._intersectedPerimeter = new P({\n      view: e,\n      attached: !0,\n      width: this._params.perimeterLineWidth,\n      color: this._params.intersectingLineColor,\n      polygonOffset: !0,\n      renderOccluded: 4\n    }), this._projectionLines = new P({\n      view: e,\n      attached: !0,\n      width: this._params.projectionLineWidth,\n      color: this._params.projectionLineColor,\n      stipplePattern: R(this._params.projectionLineStippleSize),\n      stippleIntegerRepeats: !1,\n      polygonOffset: !0,\n      renderOccluded: 4\n    }), this._measurementArea = new V({\n      view: e,\n      attached: !0,\n      color1: this._params.areaColor1,\n      color2: this._params.areaColor2\n    }), this._areaLabel = new C({\n      view: this.view,\n      attached: !0,\n      fontSize: 16\n    }), this._pathLengthLabel = new C({\n      view: e,\n      attached: !0,\n      fontSize: 12\n    }), this._cursorSegmentLengthLabel = new C({\n      view: e,\n      attached: !0,\n      fontSize: 12\n    }), this._perimeterLengthLabel = new C({\n      view: e,\n      attached: !0,\n      fontSize: 12\n    });\n    const t = this.layerView,\n          i = t.layerViewData;\n    this._handles.add([L(() => [this.mode, this.visible, t.unit, i.measurementData, i.cursorPoint], () => this._update()), L(() => {\n      var t;\n      return null == (t = e.state) ? void 0 : t.camera;\n    }, () => this._updateLabels()), M(async () => this._updateMessageBundle())]), this._updateMessageBundle();\n  }\n\n  destroy() {\n    this._measurementArea.destroy(), this._measurementArea = null, this._path.destroy(), this._path = null, this._intersectedPath.destroy(), this._intersectedPath = null, this._perimeter.destroy(), this._perimeter = null, this._intersectedPerimeter.destroy(), this._intersectedPerimeter = null, this._areaLabel.destroy(), this._areaLabel = null, this._pathLengthLabel.destroy(), this._pathLengthLabel = null, this._cursorSegmentLengthLabel.destroy(), this._cursorSegmentLengthLabel = null, this._perimeterLengthLabel.destroy(), this._perimeterLengthLabel = null, this.set(\"view\", null);\n  }\n\n  async whenMessages() {\n    await p(this, \"messages\");\n  }\n\n  _update() {\n    if (this.destroyed) return;\n    const e = this.layerView.layerViewData.measurementData;\n    r(e) || (this._updateViewData(e, this.layerView.layerViewData.path, this.layerView.layerViewData.cursorPoint), this._updateOrigin(), this._updatePathSegments(), this._updatePerimeterSegments(), this._updateArea(), this._updateProjectionLines(), this._updateLabels());\n  }\n\n  _updateViewData(e, t, i) {\n    const r = t.isValidPolygon,\n          a = t.lastPoint,\n          l = n(a) && n(i) ? new o(y.segmentLengthGeodesic(a, i), \"meters\") : null,\n          m = n(a) && n(i) ? new o(e.unitNormalizer.normalizeDistance(y.segmentLengthEuclidean(a, i, e.unitNormalizer.spatialReference)), \"meters\") : null;\n    let c;\n\n    if (\"auto\" === this.mode) {\n      c = \"euclidean\";\n      (e.geodesicPathLength ? e.geodesicPathLength.value : 0) + (!r && n(l) ? l.value : 0) > this.geodesicMeasurementDistanceThreshold && (c = \"geodesic\");\n    } else c = this.mode;\n\n    null == e.geodesicPathLength && (c = \"euclidean\");\n    const d = \"geodesic\" === c,\n          u = d ? e.geodesicArea : e.area;\n    let p = 1;\n\n    if (u) {\n      const t = this._toPreferredAreaUnit(u, this.layerView.unit);\n\n      p = s(Math.sqrt(t.value) / Math.sqrt(300)), p *= Math.sqrt(h(1, t.unit, \"square-meters\")), p /= e.unitNormalizer.normalizeDistance(1);\n    }\n\n    const g = {\n      validMeasurement: r,\n      path: t,\n      pathVersion: t.version,\n      cursorPoint: i,\n      measurementData: e,\n      mode: c,\n      positionsGeographic: e.positionsGeographic,\n      positionsRenderCoords: e.positionsRenderCoords,\n      positionsProjected: e.positionsProjectedWorldCoords,\n      positionsFittedRenderCoords: e.positionsFittedRenderCoords,\n      intersectingSegments: d ? e.geodesicIntersectingSegments : e.intersectingSegments,\n      triangleIndices: d ? e.geodesicTriangleIndices : e.triangleIndices,\n      fittingMode: e.fittingMode,\n      areaCentroid: d ? e.geodesicAreaCentroidRenderCoords : e.areaCentroidRenderCoords,\n      pathLengthLabelSegmentIndex: r ? 0 : t.numVertices - 2,\n      perimeterLengthLabelSegmentIndex: 0,\n      checkerSize: p,\n      geodesicCursorSegmentLength: l,\n      cursorSegmentLength: m\n    };\n\n    this._set(\"viewData\", g);\n  }\n\n  _updateOrigin() {\n    const e = this.viewData;\n    j(e.positionsRenderCoords, this._origin), b(this._originTransform), v(this._originTransform, this._originTransform, this._origin), this._measurementArea.transform = this._originTransform, this._projectionLines.transform = this._originTransform;\n  }\n\n  _createSegments(e) {\n    const t = this.viewData,\n          i = t.path,\n          s = this.view.renderCoordsHelper.spatialReference,\n          r = t.mode,\n          n = [],\n          a = [],\n          o = [],\n          l = t.validMeasurement ? i.numVertices : i.numVertices - 1;\n\n    for (let h = 0; h < l; ++h) {\n      const l = t[e][h],\n            m = t[e][(h + 1) % i.numVertices];\n      let c = null;\n\n      switch (r) {\n        case \"euclidean\":\n          c = new D(l, m);\n          break;\n\n        case \"geodesic\":\n          c = new A(l, m, s);\n      }\n\n      t.intersectingSegments.has(h) ? o.push(c) : a.push(c), n.push(c);\n    }\n\n    return {\n      all: n,\n      nonIntersecting: a,\n      intersecting: o\n    };\n  }\n\n  _updatePathSegments() {\n    const e = this.visible,\n          t = this.viewData,\n          i = this._createSegments(\"positionsRenderCoords\"),\n          s = t.path,\n          r = !s.isValidPolygon,\n          a = t.cursorPoint,\n          o = this.view.renderCoordsHelper,\n          l = o.spatialReference,\n          h = t.mode;\n\n    if (this._cursorSegment = null, s.numVertices > 0 && r && n(a)) {\n      if (o.toRenderCoords(a, this._cursorPositionRenderSpace)) {\n        const e = t.positionsRenderCoords[s.numVertices - 1],\n              r = this._cursorPositionRenderSpace;\n        let n = null;\n\n        switch (h) {\n          case \"euclidean\":\n            n = new D(e, r);\n            break;\n\n          case \"geodesic\":\n            n = new A(e, r, l);\n        }\n\n        i.nonIntersecting.push(n), this._cursorSegment = n;\n      }\n    }\n\n    this._path.setGeometryFromSegments(i.nonIntersecting, this._origin), this._path.visible = e, this._intersectedPath.setGeometryFromSegments(i.intersecting, this._origin), this._intersectedPath.visible = e, this._pathSegments = i.all;\n  }\n\n  _updatePerimeterSegments() {\n    const e = this.visible && \"euclidean\" === this.viewData.mode,\n          t = this._createSegments(\"positionsFittedRenderCoords\");\n\n    this._perimeter.setGeometryFromSegments(t.nonIntersecting, this._origin), this._perimeter.visible = e, this._intersectedPerimeter.setGeometryFromSegments(t.intersecting, this._origin), this._intersectedPerimeter.visible = e, this._perimeterSegments = t.all;\n  }\n\n  _updateArea() {\n    const e = this.viewData;\n\n    switch (e.mode) {\n      case \"euclidean\":\n        this._updateAreaEuclidean(e);\n\n        break;\n\n      case \"geodesic\":\n        this._updateAreaGeodesic();\n\n    }\n  }\n\n  _updateAreaEuclidean(e) {\n    const t = this.visible;\n    e.validMeasurement && 0 === e.intersectingSegments.size && e.triangleIndices ? (this._measurementArea.geometry = {\n      uv: e.positionsProjected,\n      position: e.positionsFittedRenderCoords,\n      triangleIndices: e.triangleIndices\n    }, this._measurementArea.size = [e.checkerSize, e.checkerSize], this._measurementArea.visible = t) : this._measurementArea.visible = !1;\n  }\n\n  _updateAreaGeodesic() {\n    this._measurementArea.visible = !1;\n  }\n\n  _updateProjectionLines() {\n    const e = this.viewData,\n          t = this.visible,\n          i = e.path,\n          s = e.mode;\n\n    if (i.numVertices > 0 && e.validMeasurement && \"euclidean\" === s) {\n      const s = [];\n\n      for (let t = 0; t < i.numVertices; ++t) {\n        const i = S();\n        w(i, e.positionsRenderCoords[t], this._origin);\n        const r = S();\n        w(r, e.positionsFittedRenderCoords[t], this._origin), s.push([i, r]);\n      }\n\n      this._projectionLines.geometry = s, this._projectionLines.visible = t;\n    } else this._projectionLines.geometry = null, this._projectionLines.visible = !1;\n  }\n\n  _updateLabels() {\n    if (this.destroyed) return;\n    const e = this.viewData,\n          t = e.path;\n    if (!t) return;\n\n    const i = e.measurementData,\n          s = e.mode,\n          r = !t.isValidPolygon,\n          o = this.visible,\n          l = this._formatAreaLabel(this.messages, \"geodesic\" === s ? i.geodesicArea : i.area, this.layerView.unit);\n\n    n(l) ? (this._areaLabel.geometry = {\n      type: \"point\",\n      point: e.areaCentroid\n    }, this._areaLabel.text = l, this._areaLabel.visible = e.validMeasurement && 0 === e.intersectingSegments.size && o) : this._areaLabel.visible = !1, this._set(\"areaLabel\", a(l));\n\n    const h = this._formatLengthLabel(this.messages, \"geodesic\" === s ? i.geodesicPathLength : i.pathLength, this.layerView.unit);\n\n    if (n(h) && e.pathLengthLabelSegmentIndex >= 0 && e.pathLengthLabelSegmentIndex < this._pathSegments.length) {\n      const i = this._pathSegments[e.pathLengthLabelSegmentIndex],\n            s = n(this._cursorSegment) ? this._cursorSegment : O;\n      this._pathLengthLabel.distance = this._params.labelDistance, this._pathLengthLabel.geometry = {\n        type: \"corner\",\n        left: i,\n        right: s\n      }, this._pathLengthLabel.text = h, this._pathLengthLabel.visible = r && t.numVertices > 0 && o;\n    } else this._pathLengthLabel.visible = !1;\n\n    const m = \"geodesic\" === s ? e.geodesicCursorSegmentLength : e.cursorSegmentLength;\n\n    if (n(m)) {\n      const e = this._formatLengthLabel(this.messages, m, this.layerView.unit);\n\n      this._cursorSegmentLengthLabel.distance = this._params.labelDistance, this._cursorSegmentLengthLabel.geometry = n(this._cursorSegment) ? {\n        type: \"segment\",\n        segment: this._cursorSegment,\n        sampleLocation: \"end\"\n      } : null, this._cursorSegmentLengthLabel.anchor = \"bottom\", this._cursorSegmentLengthLabel.text = a(e), this._cursorSegmentLengthLabel.visible = r && 0 !== m.value && o;\n    } else this._cursorSegmentLengthLabel.visible = !1;\n\n    this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel) && (this._cursorSegmentLengthLabel.visible = !1), this._pathLengthLabel.overlaps(this._areaLabel) && (this._pathLengthLabel.visible = !1);\n    const c = \"geodesic\" === e.mode,\n          d = c ? i.geodesicPathLength : i.perimeterLength,\n          u = a(null != d ? this._formatLengthLabel(this.messages, d, this.layerView.unit) : null);\n\n    if (this._set(\"perimeterLengthLabel\", a(u)), e.validMeasurement && 0 === e.intersectingSegments.size) {\n      this._perimeterLengthLabel.distance = this._params.labelDistance, this._perimeterLengthLabel.anchor = \"top\", this._perimeterLengthLabel.text = u, this._perimeterLengthLabel.visible = !0;\n      let t = !0;\n\n      for (let i = 0; i < e.path.numVertices; ++i) {\n        const s = (e.perimeterLengthLabelSegmentIndex + i) % e.path.numVertices,\n              r = c ? this._pathSegments[s] : this._perimeterSegments[s];\n        if (t = !0, this._perimeterLengthLabel.geometry = {\n          type: \"segment\",\n          segment: r,\n          sampleLocation: \"center\"\n        }, !this._perimeterLengthLabel.overlaps(this._areaLabel)) break;\n        t = !1;\n      }\n\n      this._perimeterLengthLabel.visible = t && o;\n    } else this._perimeterLengthLabel.visible = !1;\n  }\n\n  _toPreferredAreaUnit(e, t) {\n    return e.toUnit(this._preferredAreaUnit(e, t));\n  }\n\n  _preferredAreaUnit(e, t) {\n    switch (t) {\n      case \"metric\":\n        return c(e.value, e.unit);\n\n      case \"imperial\":\n        return m(e.value, e.unit);\n\n      default:\n        return t;\n    }\n  }\n\n  _preferredLengthUnit(e, t) {\n    const i = this._deriveLengthUnitFromAreaUnit(t);\n\n    switch (i) {\n      case \"metric\":\n        return u(e.value, e.unit);\n\n      case \"imperial\":\n        return d(e.value, e.unit);\n\n      default:\n        return i;\n    }\n  }\n\n  _deriveLengthUnitFromAreaUnit(e) {\n    switch (e) {\n      case \"metric\":\n        return \"metric\";\n\n      case \"imperial\":\n        return \"imperial\";\n\n      case \"square-inches\":\n        return \"inches\";\n\n      case \"square-feet\":\n        return \"feet\";\n\n      case \"square-yards\":\n        return \"yards\";\n\n      case \"square-miles\":\n        return \"miles\";\n\n      case \"square-us-feet\":\n        return \"us-feet\";\n\n      case \"square-millimeters\":\n        return \"millimeters\";\n\n      case \"square-centimeters\":\n        return \"centimeters\";\n\n      case \"square-decimeters\":\n        return \"decimeters\";\n\n      case \"square-meters\":\n        return \"meters\";\n\n      case \"square-kilometers\":\n        return \"kilometers\";\n\n      case \"acres\":\n        return \"imperial\";\n\n      case \"ares\":\n      case \"hectares\":\n        return \"metric\";\n    }\n\n    throw new Error(\"unhandled area unit\");\n  }\n\n  _formatAreaLabel(e, t, i) {\n    return e && t && l(e, t, this._preferredAreaUnit(t, i));\n  }\n\n  _formatLengthLabel(e, t, i) {\n    return e && t && l(e, t, this._preferredLengthUnit(t, i));\n  }\n\n  _updateMessageBundle() {\n    I(\"esri/core/t9n/Units\").then(e => {\n      this.messages = e, this.view && this._update();\n    });\n  }\n\n};\ne([g()], U.prototype, \"view\", void 0), e([g()], U.prototype, \"messages\", void 0), e([g()], U.prototype, \"analysis\", void 0), e([g()], U.prototype, \"viewData\", void 0), e([g()], U.prototype, \"layerView\", void 0), e([g({\n  readOnly: !0\n})], U.prototype, \"areaLabel\", void 0), e([g({\n  readOnly: !0\n})], U.prototype, \"perimeterLengthLabel\", void 0), e([g()], U.prototype, \"mode\", void 0), e([g({\n  readOnly: !0\n})], U.prototype, \"visible\", null), e([g()], U.prototype, \"geodesicMeasurementDistanceThreshold\", void 0), U = e([_(\"esri.views.3d.layers.analysis.AreaMeasurement.AreaMeasurementView\")], U);\nconst z = {\n  laserLineGlowColor: [1, .5, 0],\n  laserLineGlowWidth: 8,\n  laserLineGlowFalloff: 8,\n  laserLineInnerColor: [1, 1, 1],\n  laserLineInnerWidth: 1,\n  laserLineGlobalAlpha: .75,\n  laserLineEnabled: !0,\n  handleColor: [1, .5, 0],\n  handleOpacity: .5,\n  handleRadius: 5,\n  handleRadiusHovered: 10,\n  handleRadiusMouse: 10,\n  handleRadiusTouch: 25,\n  pathLineColor: [1, .5, 0, 1],\n  pathLineWidth: 3,\n  intersectingLineColor: [1, .2, 0, 1],\n  perimeterLineColor: [1, .5, 0, 1],\n  perimeterLineWidth: 2,\n  projectionLineColor: [1, .5, 0, 1],\n  projectionLineWidth: 2,\n  projectionLineStippleSize: 5,\n  areaColor1: [1, .5, 0, .5],\n  areaColor2: [1, 1, 1, .5],\n  fillColor: [1, .5, 0, .5],\n  lineSubdivisions: 64,\n  labelDistance: 25\n},\n      k = {\n  validMeasurement: !1,\n  path: null,\n  pathVersion: -1,\n  cursorPoint: null,\n  measurementData: null,\n  mode: null,\n  positionsGeographic: null,\n  positionsRenderCoords: null,\n  positionsProjected: null,\n  positionsFittedRenderCoords: null,\n  intersectingSegments: null,\n  triangleIndices: null,\n  fittingMode: null,\n  areaCentroid: null,\n  pathLengthLabelSegmentIndex: null,\n  perimeterLengthLabelSegmentIndex: null,\n  checkerSize: null,\n  geodesicCursorSegmentLength: null,\n  cursorSegmentLength: null\n},\n      O = new D(S(), S());\nexport { U as AreaMeasurementView };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgisapi-react/node_modules/@arcgis/core/views/3d/layers/analysis/AreaMeasurement/AreaMeasurementView.js"],"names":["_","e","t","i","nextHighestPowerOfTen","s","isNone","r","isSome","n","unwrap","a","o","formatDecimal","l","convertUnit","h","preferredImperialAreaUnit","m","preferredMetricAreaUnit","c","preferredImperialLengthUnit","d","preferredMetricLengthUnit","u","whenOnce","p","property","g","subclass","reactionInit","L","b","v","f","w","S","y","midpoint","j","LabelVisualElement","C","LineVisualElement","P","MeasurementAreaVisualElement","V","GeodesicSegment","A","EuclideanSegment","D","createStipplePatternSimple","R","onLocaleChange","M","fetchMessageBundle","I","U","constructor","_handles","_params","z","_path","_intersectedPath","_perimeter","_intersectedPerimeter","_projectionLines","_measurementArea","_areaLabel","_pathLengthLabel","_cursorSegmentLengthLabel","_perimeterLengthLabel","_pathSegments","_perimeterSegments","_cursorSegment","_origin","_originTransform","_cursorPositionRenderSpace","messages","viewData","k","areaLabel","perimeterLengthLabel","mode","geodesicMeasurementDistanceThreshold","visible","layerView","suspended","testData","labels","area","pathLength","cursorSegmentLength","perimeterLength","initialize","view","attached","width","pathLineWidth","color","pathLineColor","polygonOffset","renderOccluded","intersectingLineColor","perimeterLineWidth","perimeterLineColor","projectionLineWidth","projectionLineColor","stipplePattern","projectionLineStippleSize","stippleIntegerRepeats","color1","areaColor1","color2","areaColor2","fontSize","layerViewData","add","unit","measurementData","cursorPoint","_update","state","camera","_updateLabels","_updateMessageBundle","destroy","set","whenMessages","destroyed","_updateViewData","path","_updateOrigin","_updatePathSegments","_updatePerimeterSegments","_updateArea","_updateProjectionLines","isValidPolygon","lastPoint","segmentLengthGeodesic","unitNormalizer","normalizeDistance","segmentLengthEuclidean","spatialReference","geodesicPathLength","value","geodesicArea","_toPreferredAreaUnit","Math","sqrt","validMeasurement","pathVersion","version","positionsGeographic","positionsRenderCoords","positionsProjected","positionsProjectedWorldCoords","positionsFittedRenderCoords","intersectingSegments","geodesicIntersectingSegments","triangleIndices","geodesicTriangleIndices","fittingMode","areaCentroid","geodesicAreaCentroidRenderCoords","areaCentroidRenderCoords","pathLengthLabelSegmentIndex","numVertices","perimeterLengthLabelSegmentIndex","checkerSize","geodesicCursorSegmentLength","_set","transform","_createSegments","renderCoordsHelper","has","push","all","nonIntersecting","intersecting","toRenderCoords","setGeometryFromSegments","_updateAreaEuclidean","_updateAreaGeodesic","size","geometry","uv","position","_formatAreaLabel","type","point","text","_formatLengthLabel","length","O","distance","labelDistance","left","right","segment","sampleLocation","anchor","overlaps","toUnit","_preferredAreaUnit","_preferredLengthUnit","_deriveLengthUnitFromAreaUnit","Error","then","prototype","readOnly","laserLineGlowColor","laserLineGlowWidth","laserLineGlowFalloff","laserLineInnerColor","laserLineInnerWidth","laserLineGlobalAlpha","laserLineEnabled","handleColor","handleOpacity","handleRadius","handleRadiusHovered","handleRadiusMouse","handleRadiusTouch","fillColor","lineSubdivisions","AreaMeasurementView"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{_ as e}from\"../../../../../chunks/tslib.es6.js\";import\"../../../../../intl.js\";import t from\"../../../../../core/Accessor.js\";import\"../../../../../core/has.js\";import i from\"../../../../../core/Handles.js\";import{nextHighestPowerOfTen as s}from\"../../../../../core/mathUtils.js\";import{isNone as r,isSome as n,unwrap as a}from\"../../../../../core/maybe.js\";import o from\"../../../../../core/Quantity.js\";import{formatDecimal as l}from\"../../../../../core/quantityFormatUtils.js\";import{convertUnit as h,preferredImperialAreaUnit as m,preferredMetricAreaUnit as c,preferredImperialLengthUnit as d,preferredMetricLengthUnit as u}from\"../../../../../core/unitUtils.js\";import{whenOnce as p}from\"../../../../../core/watchUtils.js\";import{property as g}from\"../../../../../core/accessorSupport/decorators/property.js\";import\"../../../../../core/accessorSupport/ensureType.js\";import\"../../../../../core/Logger.js\";import{subclass as _}from\"../../../../../core/accessorSupport/decorators/subclass.js\";import{reactionInit as L}from\"../../../../../core/accessorSupport/trackingUtils.js\";import{i as b,t as v}from\"../../../../../chunks/mat4.js\";import{c as f}from\"../../../../../chunks/mat4f64.js\";import{f as w}from\"../../../../../chunks/vec3.js\";import{c as S}from\"../../../../../chunks/vec3f64.js\";import y from\"../../../interactive/measurementTools/support/measurementUtils.js\";import{midpoint as j}from\"../../../interactive/measurementTools/support/viewUtils.js\";import{LabelVisualElement as C}from\"../../../interactive/visualElements/LabelVisualElement.js\";import{LineVisualElement as P}from\"../../../interactive/visualElements/LineVisualElement.js\";import{MeasurementAreaVisualElement as V}from\"../../../interactive/visualElements/MeasurementAreaVisualElement.js\";import{GeodesicSegment as A,EuclideanSegment as D}from\"../../../interactive/visualElements/support/Segment.js\";import{createStipplePatternSimple as R}from\"../../../webgl-engine/materials/lineStippleUtils.js\";import{onLocaleChange as M}from\"../../../../../intl/locale.js\";import{fetchMessageBundle as I}from\"../../../../../intl/messages.js\";let U=class extends t{constructor(e){super(e),this._handles=new i,this._params={...z},this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._pathLengthLabel=null,this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._cursorSegment=null,this._origin=S(),this._originTransform=f(),this._cursorPositionRenderSpace=S(),this.messages=null,this.viewData=k,this.areaLabel=null,this.perimeterLengthLabel=null,this.mode=\"auto\",this.geodesicMeasurementDistanceThreshold=1e5}get visible(){return this.layerView.visible&&!this.layerView.suspended}get testData(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}initialize(){const e=this.view;this._path=new P({view:e,attached:!0,width:this._params.pathLineWidth,color:this._params.pathLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPath=new P({view:e,attached:!0,width:this._params.pathLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._perimeter=new P({view:e,attached:!0,width:this._params.perimeterLineWidth,color:this._params.perimeterLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPerimeter=new P({view:e,attached:!0,width:this._params.perimeterLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._projectionLines=new P({view:e,attached:!0,width:this._params.projectionLineWidth,color:this._params.projectionLineColor,stipplePattern:R(this._params.projectionLineStippleSize),stippleIntegerRepeats:!1,polygonOffset:!0,renderOccluded:4}),this._measurementArea=new V({view:e,attached:!0,color1:this._params.areaColor1,color2:this._params.areaColor2}),this._areaLabel=new C({view:this.view,attached:!0,fontSize:16}),this._pathLengthLabel=new C({view:e,attached:!0,fontSize:12}),this._cursorSegmentLengthLabel=new C({view:e,attached:!0,fontSize:12}),this._perimeterLengthLabel=new C({view:e,attached:!0,fontSize:12});const t=this.layerView,i=t.layerViewData;this._handles.add([L((()=>[this.mode,this.visible,t.unit,i.measurementData,i.cursorPoint]),(()=>this._update())),L((()=>{var t;return null==(t=e.state)?void 0:t.camera}),(()=>this._updateLabels())),M((async()=>this._updateMessageBundle()))]),this._updateMessageBundle()}destroy(){this._measurementArea.destroy(),this._measurementArea=null,this._path.destroy(),this._path=null,this._intersectedPath.destroy(),this._intersectedPath=null,this._perimeter.destroy(),this._perimeter=null,this._intersectedPerimeter.destroy(),this._intersectedPerimeter=null,this._areaLabel.destroy(),this._areaLabel=null,this._pathLengthLabel.destroy(),this._pathLengthLabel=null,this._cursorSegmentLengthLabel.destroy(),this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel.destroy(),this._perimeterLengthLabel=null,this.set(\"view\",null)}async whenMessages(){await p(this,\"messages\")}_update(){if(this.destroyed)return;const e=this.layerView.layerViewData.measurementData;r(e)||(this._updateViewData(e,this.layerView.layerViewData.path,this.layerView.layerViewData.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(e,t,i){const r=t.isValidPolygon,a=t.lastPoint,l=n(a)&&n(i)?new o(y.segmentLengthGeodesic(a,i),\"meters\"):null,m=n(a)&&n(i)?new o(e.unitNormalizer.normalizeDistance(y.segmentLengthEuclidean(a,i,e.unitNormalizer.spatialReference)),\"meters\"):null;let c;if(\"auto\"===this.mode){c=\"euclidean\";(e.geodesicPathLength?e.geodesicPathLength.value:0)+(!r&&n(l)?l.value:0)>this.geodesicMeasurementDistanceThreshold&&(c=\"geodesic\")}else c=this.mode;null==e.geodesicPathLength&&(c=\"euclidean\");const d=\"geodesic\"===c,u=d?e.geodesicArea:e.area;let p=1;if(u){const t=this._toPreferredAreaUnit(u,this.layerView.unit);p=s(Math.sqrt(t.value)/Math.sqrt(300)),p*=Math.sqrt(h(1,t.unit,\"square-meters\")),p/=e.unitNormalizer.normalizeDistance(1)}const g={validMeasurement:r,path:t,pathVersion:t.version,cursorPoint:i,measurementData:e,mode:c,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:d?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:d?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:d?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:r?0:t.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:p,geodesicCursorSegmentLength:l,cursorSegmentLength:m};this._set(\"viewData\",g)}_updateOrigin(){const e=this.viewData;j(e.positionsRenderCoords,this._origin),b(this._originTransform),v(this._originTransform,this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(e){const t=this.viewData,i=t.path,s=this.view.renderCoordsHelper.spatialReference,r=t.mode,n=[],a=[],o=[],l=t.validMeasurement?i.numVertices:i.numVertices-1;for(let h=0;h<l;++h){const l=t[e][h],m=t[e][(h+1)%i.numVertices];let c=null;switch(r){case\"euclidean\":c=new D(l,m);break;case\"geodesic\":c=new A(l,m,s)}t.intersectingSegments.has(h)?o.push(c):a.push(c),n.push(c)}return{all:n,nonIntersecting:a,intersecting:o}}_updatePathSegments(){const e=this.visible,t=this.viewData,i=this._createSegments(\"positionsRenderCoords\"),s=t.path,r=!s.isValidPolygon,a=t.cursorPoint,o=this.view.renderCoordsHelper,l=o.spatialReference,h=t.mode;if(this._cursorSegment=null,s.numVertices>0&&r&&n(a)){if(o.toRenderCoords(a,this._cursorPositionRenderSpace)){const e=t.positionsRenderCoords[s.numVertices-1],r=this._cursorPositionRenderSpace;let n=null;switch(h){case\"euclidean\":n=new D(e,r);break;case\"geodesic\":n=new A(e,r,l)}i.nonIntersecting.push(n),this._cursorSegment=n}}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._path.visible=e,this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._intersectedPath.visible=e,this._pathSegments=i.all}_updatePerimeterSegments(){const e=this.visible&&\"euclidean\"===this.viewData.mode,t=this._createSegments(\"positionsFittedRenderCoords\");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all}_updateArea(){const e=this.viewData;switch(e.mode){case\"euclidean\":this._updateAreaEuclidean(e);break;case\"geodesic\":this._updateAreaGeodesic()}}_updateAreaEuclidean(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const e=this.viewData,t=this.visible,i=e.path,s=e.mode;if(i.numVertices>0&&e.validMeasurement&&\"euclidean\"===s){const s=[];for(let t=0;t<i.numVertices;++t){const i=S();w(i,e.positionsRenderCoords[t],this._origin);const r=S();w(r,e.positionsFittedRenderCoords[t],this._origin),s.push([i,r])}this._projectionLines.geometry=s,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const e=this.viewData,t=e.path;if(!t)return;const i=e.measurementData,s=e.mode,r=!t.isValidPolygon,o=this.visible,l=this._formatAreaLabel(this.messages,\"geodesic\"===s?i.geodesicArea:i.area,this.layerView.unit);n(l)?(this._areaLabel.geometry={type:\"point\",point:e.areaCentroid},this._areaLabel.text=l,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&o):this._areaLabel.visible=!1,this._set(\"areaLabel\",a(l));const h=this._formatLengthLabel(this.messages,\"geodesic\"===s?i.geodesicPathLength:i.pathLength,this.layerView.unit);if(n(h)&&e.pathLengthLabelSegmentIndex>=0&&e.pathLengthLabelSegmentIndex<this._pathSegments.length){const i=this._pathSegments[e.pathLengthLabelSegmentIndex],s=n(this._cursorSegment)?this._cursorSegment:O;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:\"corner\",left:i,right:s},this._pathLengthLabel.text=h,this._pathLengthLabel.visible=r&&t.numVertices>0&&o}else this._pathLengthLabel.visible=!1;const m=\"geodesic\"===s?e.geodesicCursorSegmentLength:e.cursorSegmentLength;if(n(m)){const e=this._formatLengthLabel(this.messages,m,this.layerView.unit);this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=n(this._cursorSegment)?{type:\"segment\",segment:this._cursorSegment,sampleLocation:\"end\"}:null,this._cursorSegmentLengthLabel.anchor=\"bottom\",this._cursorSegmentLengthLabel.text=a(e),this._cursorSegmentLengthLabel.visible=r&&0!==m.value&&o}else this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);const c=\"geodesic\"===e.mode,d=c?i.geodesicPathLength:i.perimeterLength,u=a(null!=d?this._formatLengthLabel(this.messages,d,this.layerView.unit):null);if(this._set(\"perimeterLengthLabel\",a(u)),e.validMeasurement&&0===e.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor=\"top\",this._perimeterLengthLabel.text=u,this._perimeterLengthLabel.visible=!0;let t=!0;for(let i=0;i<e.path.numVertices;++i){const s=(e.perimeterLengthLabelSegmentIndex+i)%e.path.numVertices,r=c?this._pathSegments[s]:this._perimeterSegments[s];if(t=!0,this._perimeterLengthLabel.geometry={type:\"segment\",segment:r,sampleLocation:\"center\"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;t=!1}this._perimeterLengthLabel.visible=t&&o}else this._perimeterLengthLabel.visible=!1}_toPreferredAreaUnit(e,t){return e.toUnit(this._preferredAreaUnit(e,t))}_preferredAreaUnit(e,t){switch(t){case\"metric\":return c(e.value,e.unit);case\"imperial\":return m(e.value,e.unit);default:return t}}_preferredLengthUnit(e,t){const i=this._deriveLengthUnitFromAreaUnit(t);switch(i){case\"metric\":return u(e.value,e.unit);case\"imperial\":return d(e.value,e.unit);default:return i}}_deriveLengthUnitFromAreaUnit(e){switch(e){case\"metric\":return\"metric\";case\"imperial\":return\"imperial\";case\"square-inches\":return\"inches\";case\"square-feet\":return\"feet\";case\"square-yards\":return\"yards\";case\"square-miles\":return\"miles\";case\"square-us-feet\":return\"us-feet\";case\"square-millimeters\":return\"millimeters\";case\"square-centimeters\":return\"centimeters\";case\"square-decimeters\":return\"decimeters\";case\"square-meters\":return\"meters\";case\"square-kilometers\":return\"kilometers\";case\"acres\":return\"imperial\";case\"ares\":case\"hectares\":return\"metric\"}throw new Error(\"unhandled area unit\")}_formatAreaLabel(e,t,i){return e&&t&&l(e,t,this._preferredAreaUnit(t,i))}_formatLengthLabel(e,t,i){return e&&t&&l(e,t,this._preferredLengthUnit(t,i))}_updateMessageBundle(){I(\"esri/core/t9n/Units\").then((e=>{this.messages=e,this.view&&this._update()}))}};e([g()],U.prototype,\"view\",void 0),e([g()],U.prototype,\"messages\",void 0),e([g()],U.prototype,\"analysis\",void 0),e([g()],U.prototype,\"viewData\",void 0),e([g()],U.prototype,\"layerView\",void 0),e([g({readOnly:!0})],U.prototype,\"areaLabel\",void 0),e([g({readOnly:!0})],U.prototype,\"perimeterLengthLabel\",void 0),e([g()],U.prototype,\"mode\",void 0),e([g({readOnly:!0})],U.prototype,\"visible\",null),e([g()],U.prototype,\"geodesicMeasurementDistanceThreshold\",void 0),U=e([_(\"esri.views.3d.layers.analysis.AreaMeasurement.AreaMeasurementView\")],U);const z={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25},k={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,geodesicCursorSegmentLength:null,cursorSegmentLength:null},O=new D(S(),S());export{U as AreaMeasurementView};\n"]},"metadata":{},"sourceType":"module"}