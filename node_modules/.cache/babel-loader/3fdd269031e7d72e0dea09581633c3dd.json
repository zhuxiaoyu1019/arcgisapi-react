{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { ForwardLinearDepth as e } from \"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";\nimport { Offset as r } from \"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";\nimport { Slice as o } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as a } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { InstancedDoublePrecision as i } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";\nimport { NormalAttribute as l } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";\nimport { PositionAttribute as t } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";\nimport { SymbolColor as n } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";\nimport { TextureCoordinateAttribute as d } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexColor as s } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";\nimport { VertexNormal as c } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";\nimport { VerticalOffset as g } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";\nimport { DefaultMaterialAuxiliaryPasses as m } from \"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";\nimport { ReadLinearDepth as v } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";\nimport { ComputeNormalTexture as p } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";\nimport { EvaluateAmbientOcclusion as u } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";\nimport { EvaluateSceneLighting as b } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";\nimport { multipassTerrainTest as h } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { Normals as f } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";\nimport { PhysicallyBasedRendering as x } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";\nimport { PhysicallyBasedRenderingParameters as w } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";\nimport { ReadShadowMap as y } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { VisualVariables as C } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { symbolAlphaCutoff as L, DiscardOrAdjustAlpha as j } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";\nimport { HeaderComment as M } from \"../views/3d/webgl-engine/core/shaderLibrary/util/HeaderComment.glsl.js\";\nimport { MixExternalColor as T } from \"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";\nimport { glsl as E } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as O } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\n\nfunction P(P) {\n  const _ = new O(),\n        S = _.vertex.code,\n        $ = _.fragment.code;\n\n  return _.include(M, {\n    name: \"Default Material Shader\",\n    output: P.output\n  }), _.vertex.uniforms.add(\"proj\", \"mat4\").add(\"view\", \"mat4\").add(\"camPos\", \"vec3\").add(\"localOrigin\", \"vec3\"), _.include(t), _.varyings.add(\"vpos\", \"vec3\"), _.include(C, P), _.include(i, P), _.include(g, P), 0 !== P.output && 7 !== P.output || (_.include(l, P), _.include(a, {\n    linearDepth: !1\n  }), 0 === P.normalType && P.offsetBackfaces && _.include(r), _.include(p, P), _.include(c, P), P.instancedColor && _.attributes.add(\"instanceColor\", \"vec4\"), _.varyings.add(\"localvpos\", \"vec3\"), _.include(d, P), _.include(e, P), _.include(n, P), _.include(s, P), _.vertex.uniforms.add(\"externalColor\", \"vec4\"), _.varyings.add(\"vcolorExt\", \"vec4\"), P.multipassTerrainEnabled && _.varyings.add(\"depth\", \"float\"), S.add(E`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${P.instancedColor ? \"vcolorExt *= instanceColor;\" : \"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${E.float(L)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        }\n        else {\n          vpos = calculateVPos();\n          localvpos = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${0 === P.normalType ? E`\n          vNormalWorld = dpNormal(vvLocalNormal(normalModel()));` : \"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${P.vertexTangents ? \"vTangent = dpTransformVertexTangent(tangent);\" : \"\"}\n          gl_Position = transformPosition(proj, view, vpos);\n          ${0 === P.normalType && P.offsetBackfaces ? \"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, camPos);\" : \"\"}\n        }\n\n        ${P.multipassTerrainEnabled ? \"depth = (view * vec4(vpos, 1.0)).z;\" : \"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n      }\n    `)), 7 === P.output && (_.include(o, P), _.include(j, P), P.multipassTerrainEnabled && (_.fragment.include(v), _.include(h, P)), _.fragment.uniforms.add(\"camPos\", \"vec3\").add(\"localOrigin\", \"vec3\").add(\"opacity\", \"float\").add(\"layerOpacity\", \"float\"), P.hasColorTexture && _.fragment.uniforms.add(\"tex\", \"sampler2D\"), _.fragment.include(T), $.add(E`\n      void main() {\n        discardBySlice(vpos);\n        ${P.multipassTerrainEnabled ? \"terrainDepthTest(gl_FragCoord, depth);\" : \"\"}\n        ${P.hasColorTexture ? E`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${P.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n        discardOrAdjustAlpha(texColor);` : E`vec4 texColor = vec4(1.0);`}\n        ${P.attributeColor ? E`\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : E`\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        gl_FragColor = vec4(opacity_);\n      }\n    `)), 0 === P.output && (_.include(o, P), _.include(b, P), _.include(u, P), _.include(j, P), P.receiveShadows && _.include(y, P), P.multipassTerrainEnabled && (_.fragment.include(v), _.include(h, P)), _.fragment.uniforms.add(\"camPos\", \"vec3\").add(\"localOrigin\", \"vec3\").add(\"ambient\", \"vec3\").add(\"diffuse\", \"vec3\").add(\"opacity\", \"float\").add(\"layerOpacity\", \"float\"), P.hasColorTexture && _.fragment.uniforms.add(\"tex\", \"sampler2D\"), _.include(w, P), _.include(x, P), _.fragment.include(T), _.include(f, P), $.add(E`\n      void main() {\n        discardBySlice(vpos);\n        ${P.multipassTerrainEnabled ? \"terrainDepthTest(gl_FragCoord, depth);\" : \"\"}\n        ${P.hasColorTexture ? E`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${P.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n        discardOrAdjustAlpha(texColor);` : E`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - camPos);\n        ${3 === P.normalType ? E`\n        vec3 normal = screenDerivativeNormal(localvpos);` : E`\n        shadingParams.normalView = vNormalWorld;\n        vec3 normal = shadingNormal(shadingParams);`}\n        ${1 === P.pbrMode ? \"applyPBRFactors();\" : \"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${P.receiveShadows ? \"float shadow = readShadowMap(vpos, linearDepth);\" : 1 === P.viewingMode ? \"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\" : \"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${P.attributeColor ? E`\n        vec3 albedo_ = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : E`\n        vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        ${P.hasNormalTexture ? E`\n              mat3 tangentSpace = ${P.vertexTangents ? \"computeTangentSpace(normal);\" : \"computeTangentSpace(normal, vpos, vuv0);\"}\n              vec3 shadedNormal = computeTextureNormal(tangentSpace, vuv0);` : \"vec3 shadedNormal = normal;\"}\n        ${1 === P.pbrMode || 2 === P.pbrMode ? 1 === P.viewingMode ? E`vec3 normalGround = normalize(vpos + localOrigin);` : E`vec3 normalGround = vec3(0.0, 0.0, 1.0);` : E``}\n        ${1 === P.pbrMode || 2 === P.pbrMode ? E`\n            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor = evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : \"vec3 shadedColor = evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);\"}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${P.OITEnabled ? \"gl_FragColor = premultiplyAlpha(gl_FragColor);\" : \"\"}\n      }\n    `)), _.include(m, P), _;\n}\n\nvar _ = Object.freeze({\n  __proto__: null,\n  build: P\n});\n\nexport { _ as D, P as b };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/chunks/DefaultMaterial.glsl.js"],"names":["ForwardLinearDepth","e","Offset","r","Slice","o","Transform","a","InstancedDoublePrecision","i","NormalAttribute","l","PositionAttribute","t","SymbolColor","n","TextureCoordinateAttribute","d","VertexColor","s","VertexNormal","c","VerticalOffset","g","DefaultMaterialAuxiliaryPasses","m","ReadLinearDepth","v","ComputeNormalTexture","p","EvaluateAmbientOcclusion","u","EvaluateSceneLighting","b","multipassTerrainTest","h","Normals","f","PhysicallyBasedRendering","x","PhysicallyBasedRenderingParameters","w","ReadShadowMap","y","VisualVariables","C","symbolAlphaCutoff","L","DiscardOrAdjustAlpha","j","HeaderComment","M","MixExternalColor","T","glsl","E","ShaderBuilder","O","P","_","S","vertex","code","$","fragment","include","name","output","uniforms","add","varyings","linearDepth","normalType","offsetBackfaces","instancedColor","attributes","multipassTerrainEnabled","float","vertexTangents","hasColorTexture","textureAlphaPremultiplied","attributeColor","receiveShadows","pbrMode","viewingMode","hasNormalTexture","OITEnabled","Object","freeze","__proto__","build","D"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{Slice as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as i}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VertexNormal as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";import{VerticalOffset as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as m}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{ReadLinearDepth as v}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{ComputeNormalTexture as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";import{EvaluateAmbientOcclusion as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as b}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{multipassTerrainTest as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{Normals as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";import{PhysicallyBasedRendering as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMap as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as L,DiscardOrAdjustAlpha as j}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{HeaderComment as M}from\"../views/3d/webgl-engine/core/shaderLibrary/util/HeaderComment.glsl.js\";import{MixExternalColor as T}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{glsl as E}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as O}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";function P(P){const _=new O,S=_.vertex.code,$=_.fragment.code;return _.include(M,{name:\"Default Material Shader\",output:P.output}),_.vertex.uniforms.add(\"proj\",\"mat4\").add(\"view\",\"mat4\").add(\"camPos\",\"vec3\").add(\"localOrigin\",\"vec3\"),_.include(t),_.varyings.add(\"vpos\",\"vec3\"),_.include(C,P),_.include(i,P),_.include(g,P),0!==P.output&&7!==P.output||(_.include(l,P),_.include(a,{linearDepth:!1}),0===P.normalType&&P.offsetBackfaces&&_.include(r),_.include(p,P),_.include(c,P),P.instancedColor&&_.attributes.add(\"instanceColor\",\"vec4\"),_.varyings.add(\"localvpos\",\"vec3\"),_.include(d,P),_.include(e,P),_.include(n,P),_.include(s,P),_.vertex.uniforms.add(\"externalColor\",\"vec4\"),_.varyings.add(\"vcolorExt\",\"vec4\"),P.multipassTerrainEnabled&&_.varyings.add(\"depth\",\"float\"),S.add(E`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${P.instancedColor?\"vcolorExt *= instanceColor;\":\"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${E.float(L)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        }\n        else {\n          vpos = calculateVPos();\n          localvpos = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${0===P.normalType?E`\n          vNormalWorld = dpNormal(vvLocalNormal(normalModel()));`:\"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${P.vertexTangents?\"vTangent = dpTransformVertexTangent(tangent);\":\"\"}\n          gl_Position = transformPosition(proj, view, vpos);\n          ${0===P.normalType&&P.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, camPos);\":\"\"}\n        }\n\n        ${P.multipassTerrainEnabled?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n      }\n    `)),7===P.output&&(_.include(o,P),_.include(j,P),P.multipassTerrainEnabled&&(_.fragment.include(v),_.include(h,P)),_.fragment.uniforms.add(\"camPos\",\"vec3\").add(\"localOrigin\",\"vec3\").add(\"opacity\",\"float\").add(\"layerOpacity\",\"float\"),P.hasColorTexture&&_.fragment.uniforms.add(\"tex\",\"sampler2D\"),_.fragment.include(T),$.add(E`\n      void main() {\n        discardBySlice(vpos);\n        ${P.multipassTerrainEnabled?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${P.hasColorTexture?E`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${P.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n        discardOrAdjustAlpha(texColor);`:E`vec4 texColor = vec4(1.0);`}\n        ${P.attributeColor?E`\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:E`\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        gl_FragColor = vec4(opacity_);\n      }\n    `)),0===P.output&&(_.include(o,P),_.include(b,P),_.include(u,P),_.include(j,P),P.receiveShadows&&_.include(y,P),P.multipassTerrainEnabled&&(_.fragment.include(v),_.include(h,P)),_.fragment.uniforms.add(\"camPos\",\"vec3\").add(\"localOrigin\",\"vec3\").add(\"ambient\",\"vec3\").add(\"diffuse\",\"vec3\").add(\"opacity\",\"float\").add(\"layerOpacity\",\"float\"),P.hasColorTexture&&_.fragment.uniforms.add(\"tex\",\"sampler2D\"),_.include(w,P),_.include(x,P),_.fragment.include(T),_.include(f,P),$.add(E`\n      void main() {\n        discardBySlice(vpos);\n        ${P.multipassTerrainEnabled?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${P.hasColorTexture?E`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${P.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n        discardOrAdjustAlpha(texColor);`:E`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - camPos);\n        ${3===P.normalType?E`\n        vec3 normal = screenDerivativeNormal(localvpos);`:E`\n        shadingParams.normalView = vNormalWorld;\n        vec3 normal = shadingNormal(shadingParams);`}\n        ${1===P.pbrMode?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${P.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":1===P.viewingMode?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${P.attributeColor?E`\n        vec3 albedo_ = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:E`\n        vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        ${P.hasNormalTexture?E`\n              mat3 tangentSpace = ${P.vertexTangents?\"computeTangentSpace(normal);\":\"computeTangentSpace(normal, vpos, vuv0);\"}\n              vec3 shadedNormal = computeTextureNormal(tangentSpace, vuv0);`:\"vec3 shadedNormal = normal;\"}\n        ${1===P.pbrMode||2===P.pbrMode?1===P.viewingMode?E`vec3 normalGround = normalize(vpos + localOrigin);`:E`vec3 normalGround = vec3(0.0, 0.0, 1.0);`:E``}\n        ${1===P.pbrMode||2===P.pbrMode?E`\n            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor = evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:\"vec3 shadedColor = evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);\"}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${P.OITEnabled?\"gl_FragColor = premultiplyAlpha(gl_FragColor);\":\"\"}\n      }\n    `)),_.include(m,P),_}var _=Object.freeze({__proto__:null,build:P});export{_ as D,P as b};\n"]},"metadata":{},"sourceType":"module"}