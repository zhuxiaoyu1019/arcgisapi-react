{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { EvaluateMainLighting as e } from \"../shading/EvaluateMainLighting.glsl.js\";\nimport { Water as o } from \"../shading/Water.glsl.js\";\nimport { glsl as r } from \"../../shaderModules/interfaces.js\";\n\nfunction a(a, t) {\n  a.extensions.add(\"GL_OES_standard_derivatives\"), 3 !== t.pbrMode && 4 !== t.pbrMode || a.include(o, t), a.vertex.uniforms.add(\"overlayTexOffset\", \"vec4\"), a.vertex.uniforms.add(\"overlayTexScale\", \"vec4\"), a.varyings.add(\"vtcOverlay\", \"vec4\"), a.vertex.code.add(r`void setOverlayVTC(in vec2 uv) {\nvtcOverlay = vec4(uv, uv) * overlayTexScale + overlayTexOffset;\n}`), a.fragment.uniforms.add(\"ovColorTex\", \"sampler2D\"), a.fragment.uniforms.add(\"overlayOpacity\", \"float\"), a.fragment.code.add(r`bool isValid(vec2 uv, vec2 dxdy) {\nreturn (uv.x >= 0.0 + dxdy.x) && (uv.x <= 1.0 - dxdy.x) && (uv.y >= 0.0 + dxdy.y) && (uv.y <= 1.0 - dxdy.y);\n}\nvec4 getOverlayColor(sampler2D ov0Tex, vec4 texCoords) {\nvec4 color0 = texture2D(ov0Tex, vec2(texCoords.x * 0.5, texCoords.y));\nvec4 color1 = texture2D(ov0Tex, vec2(texCoords.z * 0.5 + 0.5, texCoords.w));\nbool isValid0 = isValid(texCoords.xy, fwidth(texCoords.xy));\nbool isValid1 = isValid(texCoords.zw, vec2(0.0, 0.0));\nreturn mix(color1 * float(isValid1), color0, float(isValid0));\n}`), a.fragment.code.add(r`vec4 getCombinedOverlayColor() {\nreturn overlayOpacity * getOverlayColor(ovColorTex, vtcOverlay);\n}`), 3 !== t.pbrMode && 4 !== t.pbrMode || (a.include(e), a.fragment.code.add(r`vec4 getOverlayWaterColor(vec4 maskInput, vec4 colorInput, vec3 vposEyeDir,\nfloat shadow, vec3 localUp, mat3 tbn, vec3 position) {\nvec3 n = normalize(tbn *  (2.0 * maskInput.rgb - vec3(1.0)));\nvec3 v = vposEyeDir;\nvec3 final = getSeaColor(n, v, lightingMainDirection, colorInput.rgb, lightingMainIntensity, localUp, 1.0 - shadow, maskInput.w, position);\nreturn vec4(final, colorInput.w);\n}`));\n}\n\nexport { a as Overlay };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/terrain/Overlay.glsl.js"],"names":["EvaluateMainLighting","e","Water","o","glsl","r","a","t","extensions","add","pbrMode","include","vertex","uniforms","varyings","code","fragment","Overlay"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,oBAAoB,IAAIC,CAA/B,QAAqC,yCAArC;AAA+E,SAAOC,KAAK,IAAIC,CAAhB,QAAsB,0BAAtB;AAAiD,SAAOC,IAAI,IAAIC,CAAf,QAAqB,mCAArB;;AAAyD,SAASC,CAAT,CAAWA,CAAX,EAAaC,CAAb,EAAe;AAACD,EAAAA,CAAC,CAACE,UAAF,CAAaC,GAAb,CAAiB,6BAAjB,GAAgD,MAAIF,CAAC,CAACG,OAAN,IAAe,MAAIH,CAAC,CAACG,OAArB,IAA8BJ,CAAC,CAACK,OAAF,CAAUR,CAAV,EAAYI,CAAZ,CAA9E,EAA6FD,CAAC,CAACM,MAAF,CAASC,QAAT,CAAkBJ,GAAlB,CAAsB,kBAAtB,EAAyC,MAAzC,CAA7F,EAA8IH,CAAC,CAACM,MAAF,CAASC,QAAT,CAAkBJ,GAAlB,CAAsB,iBAAtB,EAAwC,MAAxC,CAA9I,EAA8LH,CAAC,CAACQ,QAAF,CAAWL,GAAX,CAAe,YAAf,EAA4B,MAA5B,CAA9L,EAAkOH,CAAC,CAACM,MAAF,CAASG,IAAT,CAAcN,GAAd,CAAkBJ,CAAE;AAC/b;AACA,EAF2a,CAAlO,EAErMC,CAAC,CAACU,QAAF,CAAWH,QAAX,CAAoBJ,GAApB,CAAwB,YAAxB,EAAqC,WAArC,CAFqM,EAEnJH,CAAC,CAACU,QAAF,CAAWH,QAAX,CAAoBJ,GAApB,CAAwB,gBAAxB,EAAyC,OAAzC,CAFmJ,EAEjGH,CAAC,CAACU,QAAF,CAAWD,IAAX,CAAgBN,GAAhB,CAAoBJ,CAAE;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EATwG,CAFiG,EAWrMC,CAAC,CAACU,QAAF,CAAWD,IAAX,CAAgBN,GAAhB,CAAoBJ,CAAE;AAC1B;AACA,EAFI,CAXqM,EAarM,MAAIE,CAAC,CAACG,OAAN,IAAe,MAAIH,CAAC,CAACG,OAArB,KAA+BJ,CAAC,CAACK,OAAF,CAAUV,CAAV,GAAaK,CAAC,CAACU,QAAF,CAAWD,IAAX,CAAgBN,GAAhB,CAAoBJ,CAAE;AACtE;AACA;AACA;AACA;AACA;AACA,EANgD,CAA5C,CAbqM;AAmBpM;;AAAA,SAAOC,CAAC,IAAIW,OAAZ","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{EvaluateMainLighting as e}from\"../shading/EvaluateMainLighting.glsl.js\";import{Water as o}from\"../shading/Water.glsl.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";function a(a,t){a.extensions.add(\"GL_OES_standard_derivatives\"),3!==t.pbrMode&&4!==t.pbrMode||a.include(o,t),a.vertex.uniforms.add(\"overlayTexOffset\",\"vec4\"),a.vertex.uniforms.add(\"overlayTexScale\",\"vec4\"),a.varyings.add(\"vtcOverlay\",\"vec4\"),a.vertex.code.add(r`void setOverlayVTC(in vec2 uv) {\nvtcOverlay = vec4(uv, uv) * overlayTexScale + overlayTexOffset;\n}`),a.fragment.uniforms.add(\"ovColorTex\",\"sampler2D\"),a.fragment.uniforms.add(\"overlayOpacity\",\"float\"),a.fragment.code.add(r`bool isValid(vec2 uv, vec2 dxdy) {\nreturn (uv.x >= 0.0 + dxdy.x) && (uv.x <= 1.0 - dxdy.x) && (uv.y >= 0.0 + dxdy.y) && (uv.y <= 1.0 - dxdy.y);\n}\nvec4 getOverlayColor(sampler2D ov0Tex, vec4 texCoords) {\nvec4 color0 = texture2D(ov0Tex, vec2(texCoords.x * 0.5, texCoords.y));\nvec4 color1 = texture2D(ov0Tex, vec2(texCoords.z * 0.5 + 0.5, texCoords.w));\nbool isValid0 = isValid(texCoords.xy, fwidth(texCoords.xy));\nbool isValid1 = isValid(texCoords.zw, vec2(0.0, 0.0));\nreturn mix(color1 * float(isValid1), color0, float(isValid0));\n}`),a.fragment.code.add(r`vec4 getCombinedOverlayColor() {\nreturn overlayOpacity * getOverlayColor(ovColorTex, vtcOverlay);\n}`),3!==t.pbrMode&&4!==t.pbrMode||(a.include(e),a.fragment.code.add(r`vec4 getOverlayWaterColor(vec4 maskInput, vec4 colorInput, vec3 vposEyeDir,\nfloat shadow, vec3 localUp, mat3 tbn, vec3 position) {\nvec3 n = normalize(tbn *  (2.0 * maskInput.rgb - vec3(1.0)));\nvec3 v = vposEyeDir;\nvec3 final = getSeaColor(n, v, lightingMainDirection, colorInput.rgb, lightingMainIntensity, localUp, 1.0 - shadow, maskInput.w, position);\nreturn vec4(final, colorInput.w);\n}`))}export{a as Overlay};\n"]},"metadata":{},"sourceType":"module"}