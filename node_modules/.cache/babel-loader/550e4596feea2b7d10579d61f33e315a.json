{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport { _ as t } from \"../../../../../chunks/tslib.es6.js\";\nimport { getAssetUrl as e } from \"../../../../../assets.js\";\nimport r from \"../../../../../core/Accessor.js\";\nimport a from \"../../../../../core/Logger.js\";\nimport { property as s } from \"../../../../../core/accessorSupport/decorators/property.js\";\nimport \"../../../../../core/has.js\";\nimport \"../../../../../core/accessorSupport/ensureType.js\";\nimport { subclass as o } from \"../../../../../core/accessorSupport/decorators/subclass.js\";\nimport { requestImage as i } from \"../../../../../support/requestImageUtils.js\";\nimport p from \"../../../../webgl/Texture.js\";\nconst n = a.getLogger(\"esri.views.3d.webgl-engine.materials.internal.waterMaterialUtils\");\nlet l = class extends r {\n  constructor() {\n    super(...arguments), this._data = new Array(), this.loadingState = 0;\n  }\n\n  dispose() {\n    this.loadingState = 0, this._data.forEach(t => t.dispose()), this._data.length = 0;\n  }\n\n  get updating() {\n    return 1 === this.loadingState;\n  }\n\n  get ready() {\n    return 2 === this.loadingState;\n  }\n\n  loadTextures(t) {\n    const r = [e(\"esri/images/materials/water/normals.jpg\"), e(\"esri/images/materials/water/perturbation.jpg\")];\n    this.loadingState = 1, Promise.all(r.map(t => i(t))).then(e => {\n      e.forEach(e => this._data.push(new p(t, {\n        target: 3553,\n        pixelFormat: 6408,\n        dataType: 5121,\n        wrapMode: 10497,\n        samplingMode: 9987,\n        hasMipmap: !0,\n        maxAnisotropy: 8,\n        width: e.width,\n        height: e.height\n      }, e))), this.loadingState = 2;\n    }).catch(t => {\n      n.error(\"Failed to load textures for water material.\", t), this.loadingState = 0;\n    });\n  }\n\n  bind(t) {\n    this._data.length >= 2 && (t.bindTexture(this._data[0], \"texWaveNormal\"), t.bindTexture(this._data[1], \"texWavePerturbation\"));\n  }\n\n};\nt([s()], l.prototype, \"loadingState\", void 0), t([s({\n  type: Boolean,\n  readOnly: !0\n})], l.prototype, \"updating\", null), l = t([o(\"esri.views.3d.webgl-engine.materials.internal.WaterTextureRepository\")], l);\nexport { l as WaterTextureRepository };","map":{"version":3,"sources":["/Users/xiaoyuzhu/Desktop/arcgis-api-react/node_modules/@arcgis/core/views/3d/webgl-engine/materials/internal/WaterTextureRepository.js"],"names":["_","t","getAssetUrl","e","r","a","property","s","subclass","o","requestImage","i","p","n","getLogger","l","constructor","arguments","_data","Array","loadingState","dispose","forEach","length","updating","ready","loadTextures","Promise","all","map","then","push","target","pixelFormat","dataType","wrapMode","samplingMode","hasMipmap","maxAnisotropy","width","height","catch","error","bind","bindTexture","prototype","type","Boolean","readOnly","WaterTextureRepository"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{_ as t}from\"../../../../../chunks/tslib.es6.js\";import{getAssetUrl as e}from\"../../../../../assets.js\";import r from\"../../../../../core/Accessor.js\";import a from\"../../../../../core/Logger.js\";import{property as s}from\"../../../../../core/accessorSupport/decorators/property.js\";import\"../../../../../core/has.js\";import\"../../../../../core/accessorSupport/ensureType.js\";import{subclass as o}from\"../../../../../core/accessorSupport/decorators/subclass.js\";import{requestImage as i}from\"../../../../../support/requestImageUtils.js\";import p from\"../../../../webgl/Texture.js\";const n=a.getLogger(\"esri.views.3d.webgl-engine.materials.internal.waterMaterialUtils\");let l=class extends r{constructor(){super(...arguments),this._data=new Array,this.loadingState=0}dispose(){this.loadingState=0,this._data.forEach((t=>t.dispose())),this._data.length=0}get updating(){return 1===this.loadingState}get ready(){return 2===this.loadingState}loadTextures(t){const r=[e(\"esri/images/materials/water/normals.jpg\"),e(\"esri/images/materials/water/perturbation.jpg\")];this.loadingState=1,Promise.all(r.map((t=>i(t)))).then((e=>{e.forEach((e=>this._data.push(new p(t,{target:3553,pixelFormat:6408,dataType:5121,wrapMode:10497,samplingMode:9987,hasMipmap:!0,maxAnisotropy:8,width:e.width,height:e.height},e)))),this.loadingState=2})).catch((t=>{n.error(\"Failed to load textures for water material.\",t),this.loadingState=0}))}bind(t){this._data.length>=2&&(t.bindTexture(this._data[0],\"texWaveNormal\"),t.bindTexture(this._data[1],\"texWavePerturbation\"))}};t([s()],l.prototype,\"loadingState\",void 0),t([s({type:Boolean,readOnly:!0})],l.prototype,\"updating\",null),l=t([o(\"esri.views.3d.webgl-engine.materials.internal.WaterTextureRepository\")],l);export{l as WaterTextureRepository};\n"]},"metadata":{},"sourceType":"module"}