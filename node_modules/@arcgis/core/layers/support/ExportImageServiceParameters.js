/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import{JSONSupport as r}from"../../core/JSONSupport.js";import{aliasOf as o}from"../../core/accessorSupport/decorators/aliasOf.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import"../../core/Logger.js";import{property as t}from"../../core/accessorSupport/decorators/property.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import{writer as s}from"../../core/accessorSupport/decorators/writer.js";import{isSupportedRendererType as n,combineRenderingRules as p,convertRendererToRenderingRule as a}from"./imageryRendererUtils.js";import l from"./MosaicRule.js";import{interpolationKebab as c,noDataInterpretationKebab as m}from"./rasterEnums.js";import y from"./RasterFunction.js";let d=class extends r{constructor(){super(...arguments),this.layer=null,this.adjustAspectRatio=void 0,this.bandIds=void 0,this.compression=void 0,this.compressionQuality=void 0,this.compressionTolerance=.01,this.format=null,this.interpolation=null,this.noData=null,this.noDataInterpretation=void 0,this.pixelType=void 0,this.lercVersion=2}writeAdjustAspectRatio(e,r,o){this.layer.version<10.3||(r[o]=e)}writeCompressionQuality(e,r,o){this.format&&this.format.toLowerCase().indexOf("jpg")>-1&&null!=e&&(r[o]=e)}writeCompressionTolerance(e,r,o){"lerc"===this.format&&null!=e&&(r[o]=e)}writeLercVersion(e,r,o){"lerc"===this.format&&this.layer.version>=10.5&&(r[o]=e)}get version(){const e=this.layer;return e.commitProperty("bandIds"),e.commitProperty("format"),e.commitProperty("compressionQuality"),e.commitProperty("compressionTolerance"),e.commitProperty("interpolation"),e.commitProperty("noData"),e.commitProperty("noDataInterpretation"),e.commitProperty("mosaicRule"),e.commitProperty("renderingRule"),e.commitProperty("adjustAspectRatio"),e.commitProperty("pixelFilter"),e.commitProperty("renderer"),e.commitProperty("definitionExpression"),(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let r=e.mosaicRule;const o=e.definitionExpression;return r?o&&o!==r.where&&(r=r.clone(),r.where=o):o&&(r=new l({where:o})),r}get renderingRule(){const e=this.layer;let r=e.renderingRule;const o=e.pixelFilter,t=!e.format||e.format.indexOf("jpg")>-1||e.format.indexOf("png")>-1;return r=this._addResampleRasterFunction(r),t&&!o&&(r=this.combineRendererWithRenderingRule()),r}combineRendererWithRenderingRule(){var e;const r=this.layer,{rasterInfo:o,renderingRule:t,renderer:i}=r;if(!i||!n(i))return t;return p(a(i,{rasterAttributeTable:o.attributeTable,pixelType:o.pixelType,dataType:o.dataType,bandProperties:null==(e=o.keyProperties)?void 0:e.BandProperties,convertColorRampToColormap:r.version<10.6}),t)}_addResampleRasterFunction(e){var r;if(!("vector-field"===(null==(r=this.layer.renderer)?void 0:r.type))||"Resample"===(null==e?void 0:e.functionName))return e;const o="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10,t=new y({functionName:"Resample",functionArguments:{ResamplingType:o,InputCellSize:{x:this.layer.pixelSizeX,y:this.layer.pixelSizeY}}});return p(t,e)}};e([t()],d.prototype,"layer",void 0),e([t({json:{write:!0}})],d.prototype,"adjustAspectRatio",void 0),e([s("adjustAspectRatio")],d.prototype,"writeAdjustAspectRatio",null),e([t({json:{write:!0}}),o("layer.bandIds")],d.prototype,"bandIds",void 0),e([t({json:{write:!0}})],d.prototype,"compression",void 0),e([t({json:{write:!0}}),o("layer.compressionQuality")],d.prototype,"compressionQuality",void 0),e([s("compressionQuality")],d.prototype,"writeCompressionQuality",null),e([t({json:{write:!0}}),o("layer.compressionTolerance")],d.prototype,"compressionTolerance",void 0),e([s("compressionTolerance")],d.prototype,"writeCompressionTolerance",null),e([t({json:{write:!0}}),o("layer.format")],d.prototype,"format",void 0),e([t({type:String,json:{read:{reader:c.read},write:{writer:c.write}}}),o("layer.interpolation")],d.prototype,"interpolation",void 0),e([t({json:{write:!0}}),o("layer.noData")],d.prototype,"noData",void 0),e([t({type:String,json:{read:{reader:m.read},write:{writer:m.write}}}),o("layer.noDataInterpretation")],d.prototype,"noDataInterpretation",void 0),e([t({json:{write:!0}})],d.prototype,"pixelType",void 0),e([t({json:{write:!0}})],d.prototype,"lercVersion",void 0),e([s("lercVersion")],d.prototype,"writeLercVersion",null),e([t({type:Number})],d.prototype,"version",null),e([t({json:{write:!0}})],d.prototype,"mosaicRule",null),e([t({json:{write:!0}})],d.prototype,"renderingRule",null),d=e([i("esri.layers.mixins.ExportImageServiceParameters")],d);export{d as ExportImageServiceParameters};
