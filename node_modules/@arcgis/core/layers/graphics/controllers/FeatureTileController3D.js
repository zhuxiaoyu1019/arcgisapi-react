/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{result as i}from"../../../core/asyncUtils.js";import r from"../../../core/Collection.js";import"../../../core/has.js";import s from"../../../core/Error.js";import a from"../../../core/Handles.js";import{clone as o}from"../../../core/lang.js";import n from"../../../core/Logger.js";import{isSome as l,destroyMaybe as c,removeMaybe as h,isNone as u}from"../../../core/maybe.js";import{EsriPromiseMixin as d}from"../../../core/Promise.js";import{createAbortController as m,isAbortError as p,eachAlways as f}from"../../../core/promiseUtils.js";import{whenOnce as y,init as g}from"../../../core/watchUtils.js";import{property as x}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as F}from"../../../core/accessorSupport/decorators/subclass.js";import{isHostedAgolService as v}from"../../support/arcgisLayerUrl.js";import{projectGeometry as T}from"../../../portal/support/geometryServiceUtils.js";import E from"../../../rest/support/StatisticDefinition.js";import{FeatureTileFetcher3D as w}from"../../../views/3d/layers/support/FeatureTileFetcher3D.js";import{FeatureTileFetcher3DDebugger as C}from"../../../views/3d/layers/support/FeatureTileFetcher3DDebugger.js";import D from"../../../views/3d/support/debugFlags.js";import{WatchUpdatingTracking as b}from"../../../views/support/WatchUpdatingTracking.js";const S=n.getLogger("esri.layers.graphics.controllers.FeatureTileController3D");let _=class extends(d(t)){constructor(e){super(e),this.type="feature-tile-3d",this.watchUpdatingTracking=new b,this.serviceDataExtent=null,this.serviceDataCount=A.NO_SERVICE_DATA_COUNT,this.vertexLimitExceeded=!1,this.displayFeatureLimit=null,this.suspended=!1,this.tileFetcher=null,this.handles=new a,this.fetchDataInfoPromise=null,this.fetchDataInfoAbortController=null,this.lifeCycleAbortController=m()}set extent(e){if(e&&!e.spatialReference.equals(this.layerView.view.spatialReference))return void S.error("#extent=","extent needs to be in the same spatial reference as the view");const t=this._get("extent");if(t===e)return;if(t&&e&&t.equals(e))return;const i=e?e.clone():null;this._set("extent",i)}get updating(){return!!(l(this.tileFetcher)&&this.tileFetcher.updating||null!=this.fetchDataInfoPromise||"tiles"===this.mode&&this.layerView.view.featureTiles&&this.layerView.view.featureTiles.updating||this.watchUpdatingTracking&&this.watchUpdatingTracking.updating)}get updatingTotal(){return this.updating&&l(this.tileFetcher)?this.tileFetcher.updatingTotal:0}get updatingRemaining(){return this.updating&&l(this.tileFetcher)?this.tileFetcher.updatingRemaining:0}get expectedFeatureDiff(){return this.updating&&l(this.tileFetcher)?this.tileFetcher.expectedFeatureDiff:0}get memoryForUnusedFeatures(){return l(this.tileFetcher)?this.tileFetcher.memoryForUnusedFeatures:0}get maximumNumberOfFeaturesExceeded(){return!(!l(this.tileFetcher)||!this.tileFetcher.maximumNumberOfFeaturesExceeded)}get maximumNumberOfFeatures(){return l(this.displayFeatureLimit)?this.displayFeatureLimit.maximumNumberOfFeatures:0}set maximumNumberOfFeatures(e){e!==this.maximumNumberOfFeatures&&(null==e?this._clearOverride("maximumNumberOfFeatures"):this._override("maximumNumberOfFeatures",e))}get hasMaximumNumberOfFeaturesOverride(){return this._isOverridden("maximumNumberOfFeatures")}get mode(){const e=this.layerView.layer;if("feature"===e.type&&l(e.infoFor3D))return"snapshot";if(this.serviceDataCount===A.NO_SERVICE_DATA_COUNT||this.vertexLimitExceeded)return"tiles";const t=this.layerView.view,i=t&&t.featureTiles,r=i&&i.tilingScheme;if(e&&e.minScale&&this.serviceDataExtent&&r){const t=this.approximateExtentSizeAtScale(e.minScale,r);if((this.serviceDataExtent.width/t+this.serviceDataExtent.height/t)/2>A.MAX_SNAPSHOT_MIN_SCALE_FACTOR)return"tiles"}return!this.maximumNumberOfFeatures||this.serviceDataCount<=this.maximumNumberOfFeatures?"snapshot":"tiles"}get maxTotalSnapshotVertices(){const e=this._get("maxTotalSnapshotVertices")||0,t="snapshot"===this.mode&&l(this.tileFetcher)&&this.tileFetcher.totalVertices||0;return Math.max(e,t)}approximateExtentSizeAtScale(e,t){const i=this.layerView.view,r=Math.ceil((i.width/t.pixelSize+i.height/t.pixelSize)/2),s=t.levels[0];return r*((s.tileSize[0]/(s.scale/e)+s.tileSize[1]/(s.scale/e))/2)}get tileDescriptors(){return"snapshot"===this.mode?new r([{id:"dummy-tile-full-extent",lij:[0,0,0]}]):this.layerView.view.featureTiles?this.layerView.view.featureTiles.tiles:new r}get test(){return{fetchDataInfoPromise:this.fetchDataInfoPromise,tileFetcher:this.tileFetcher}}initialize(){this.watchUpdatingTracking.add(this,"vertexLimitInfo",(()=>this.watchUpdatingTracking.addPromise(this.updateVertexLimitExceeded(null,this.lifeCycleAbortController.signal)))),this.watchUpdatingTracking.add(this,"mode",(()=>this.modeChanged()),2),this.addResolvingPromise(Promise.resolve().then((()=>this.verifyCapabilities())).then((()=>this.watchUpdatingTracking.addPromise(this.fetchServiceDataInfo()))).then((()=>this.initializeTileFetcher())))}verifyCapabilities(){const e=this.layerView.layer;if(!e.get("capabilities.operations.supportsQuery"))throw new s("graphicscontroller:query-capability-required","Service requires query capabilities to be used as a feature layer",{layer:e})}destroy(){this.cancelFetchServiceDataInfo(),this.tileFetcher=c(this.tileFetcher),this.handles=c(this.handles),this.tilesHandle=h(this.tilesHandle),this.lifeCycleAbortController&&(this.lifeCycleAbortController.abort(),this.lifeCycleAbortController=null),this.watchUpdatingTracking.destroy(),this._set("watchUpdatingTracking",null)}suspend(){this.suspended||(this.suspended=!0,l(this.tileFetcher)&&this.tileFetcher.suspend())}resume(){this.suspended&&(this.suspended=!1,l(this.tileFetcher)&&this.tileFetcher.resume())}restart(){const e=()=>{l(this.tileFetcher)&&this.tileFetcher.restart()};this.watchUpdatingTracking.addPromise(this.fetchServiceDataInfo().then(e,e))}refetch(){const e=()=>{l(this.tileFetcher)&&this.tileFetcher.refetch()};this.watchUpdatingTracking.addPromise(this.fetchServiceDataInfo().then(e,e))}initializeTileFetcher(){const e=this.layerView.view;if(!e)return;const t=y(e.featureTiles,"tilingScheme",this.lifeCycleAbortController.signal);this.watchUpdatingTracking.addPromise(t),t.then((()=>{const{layerView:t,tileDescriptors:i}=this,r=t.layer,s=new w({context:this.context,filterExtent:this.extent,tileDescriptors:i,features:this.graphics});this.tileFetcher=s,this.suspended?this.tileFetcher.suspend():this.tileFetcher.resume();const a=this.layerView.view.resourceController;a&&(this.handles.add(a.memoryController.events.on("quality-changed",(e=>{s.memoryFactor=e}))),this.tileFetcher.memoryFactor=a.memoryController.memoryFactor);const o="polygon"===this.context.geometryType?"polygonLodFactor":"polyline"===this.context.geometryType?"polylineLodFactor":null;o&&this.handles.add(g(this.layerView.view,"qualitySettings.graphics3D."+o,(e=>{s.lodFactor=e||1})));const n=e=>{s.maximumNumberOfFeatures=e,s.useTileCount=this.serviceDataCount>e},l=e=>s.useTileCount=e>this.maximumNumberOfFeatures;this.watchUpdatingTracking.add(r,"createQueryVersion",(()=>this.dataFilterChanged())),this.watchUpdatingTracking.add(t,"availableFields",((e,t)=>this.availableFieldsChanged(t,e))),this.watchUpdatingTracking.add(t,"requiredFields",((e,t)=>this.requiredFieldsChanged(t,e))),this.handles.add([r.on("apply-edits",(e=>this.applyEdits(e))),this.watch("extent",(e=>s.filterExtent=e),!0),this.watch("tileDescriptors",(e=>s.tileDescriptors=e),!0),g(this,"maximumNumberOfFeatures",n,!0),g(this,"serviceDataCount",l,!0),g(D,"FEATURE_TILE_FETCH_SHOW_TILES",(t=>{t&&s&&!s.debugger?(s.debugger=new C(s,e.featureTiles.tilingScheme.toTileInfo(),e),s.debugger.update()):!t&&this.tileFetcher&&s.debugger&&(s.debugger.destroy(),s.debugger=null)}))]),this.supportsExceedsLimitQuery||this.watchUpdatingTracking.add(this,"maxTotalSnapshotVertices",(()=>this.watchUpdatingTracking.addPromise(this.updateVertexLimitExceeded(null,this.lifeCycleAbortController.signal))))})).catch((()=>{}))}modeChanged(){switch(this.mode){case"tiles":this.tilesHandle||(this.tilesHandle=this.layerView.view.featureTiles.addClient());break;default:S.warn("Unhandled feature layer mode "+this.mode);case"snapshot":l(this.tilesHandle)&&(this.tilesHandle.remove(),this.tilesHandle=null)}}dataFilterChanged(){this._set("maxTotalSnapshotVertices",0),this.notifyChange("maxTotalSnapshotVertices"),this.refetch()}applyEdits(e){u(this.tileFetcher)||this.tileFetcher.applyEdits(e).then((e=>{e&&(e.deletedFeatures.length||e.updatedFeatures.length||e.addedFeatures.length)&&this.watchUpdatingTracking.addPromise(this.updateServiceDataExtent(this.lifeCycleAbortController.signal))})).catch((e=>{if(!p(e))throw e}))}availableFieldsChanged(e,t){l(this.tileFetcher)&&N(this.tileFetcher.availableFields,t)&&this.refetch()}requiredFieldsChanged(e,t){l(this.tileFetcher)&&N(this.tileFetcher.availableFields,t)&&this.restart()}createVertexLimitExceededQuery(e){const t=this.layerView.layer,i=t.createQuery();return i.outStatistics=[new E({statisticType:"exceedslimit",maxVertexCount:e,outStatisticFieldName:"exceedslimit",maxPointCount:1e8,maxRecordCount:1e8})],t.capabilities.query.supportsCacheHint&&(i.cacheHint=!0),i}createDataInfoQuery(){const e=this.layerView.layer,t=e.createQuery();return t.outSpatialReference=this.layerView.view.spatialReference,e.capabilities.query.supportsCacheHint&&(t.cacheHint=!0),t}fullExtentIsAccurate(){const e=this.layerView.layer;if(e.definitionExpression)return!1;switch(e.type){case"feature":return v(e.url);case"csv":case"geojson":case"ogc-feature":case"wfs":return!0;default:return}}async updateServiceDataExtent(e){try{await this.tryUpdateServiceDataExtent(e)}catch(t){p(t)||this._set("serviceDataExtent",o(this.layerView.fullExtentInLocalViewSpatialReference))}}async tryUpdateServiceDataExtent(e){const t=this.layerView,i=t.layer,r=i.capabilities.query.supportsExtent,s=o(t.fullExtentInLocalViewSpatialReference),a=i.fullExtent,n=this.fullExtentIsAccurate(),l=this.serviceDataCount;if(r&&l<=A.MAX_FEATURE_COUNT_FOR_EXTENT&&(!s||!n)&&"queryExtent"in i){const t=this.createDataInfoQuery(),r=await i.queryExtent(t,{timeout:A.QUERY_EXTENT_TIMEOUT,signal:e});this._set("serviceDataExtent",r.extent)}else if(s)this._set("serviceDataExtent",s);else if(a){const r="portalItem"in i?i.portalItem:null,s=await T(a,t.view.spatialReference,r,e);this._set("serviceDataExtent",s)}else this._set("serviceDataExtent",null)}async updateServiceDataCount(e){const t=this.layerView.layer;if(!("queryFeatureCount"in t))return void this._set("serviceDataCount",A.NO_SERVICE_DATA_COUNT);const r=await i(t.queryFeatureCount(this.createDataInfoQuery(),{timeout:A.QUERY_STATISTICS_TIMEOUT,signal:e}));if(!0===r.ok)this._set("serviceDataCount",r.value);else{if(p(r.error))throw r.error;this._set("serviceDataCount",A.NO_SERVICE_DATA_COUNT)}}get vertexLimitInfo(){if(u(this.displayFeatureLimit)||u(this.displayFeatureLimit.averageSymbolComplexity))return null;const{averageSymbolComplexity:e,maximumTotalNumberOfPrimitives:t}=this.displayFeatureLimit,{primitivesPerCoordinate:i,primitivesPerFeature:r}=e,s=this._get("vertexLimitInfo");return u(s)||s.maximumTotalNumberOfPrimitives!==t||s.primitivesPerCoordinate!==i||s.primitivesPerFeature!==r?{primitivesPerCoordinate:i,primitivesPerFeature:r,maximumTotalNumberOfPrimitives:t}:s}get supportsExceedsLimitQuery(){const e=this.layerView.layer;return e.capabilities&&e.capabilities.operations&&e.capabilities.operations.supportsExceedsLimitStatistics}get minimumNumberOfVerticesForGeometry(){switch(this.layerView.layer.geometryType){case"point":case"multipoint":return 1;case"polygon":return 4;case"polyline":return 2;case"multipatch":case"mesh":return 3;default:return 0}}async updateVertexLimitExceeded(e,t){const r=this.vertexLimitInfo;if(u(r))return void this._set("vertexLimitExceeded",!1);const s=r.primitivesPerFeature<=0,a=this.minimumNumberOfVerticesForGeometry>1;if(!s&&!a)return void this._set("vertexLimitExceeded",!1);const{primitivesPerFeature:o,primitivesPerCoordinate:n,maximumTotalNumberOfPrimitives:c}=r;let h;0!==o&&l(e)&&await e;const d=this.serviceDataCount,m=d!==A.NO_SERVICE_DATA_COUNT;if(h=m?Math.ceil((c-d*o)/(n||1)):Math.ceil(c/(n||1)),a&&(h=Math.min(h,U)),m&&this.minimumNumberOfVerticesForGeometry*d>h)return void this._set("vertexLimitExceeded",!0);if(!this.supportsExceedsLimitQuery)return void this._set("vertexLimitExceeded",this.maxTotalSnapshotVertices>h);const f=await i(this.layerView.layer.queryFeatures(this.createVertexLimitExceededQuery(h),{timeout:A.QUERY_STATISTICS_TIMEOUT,signal:t}));if(!1===f.ok){if(p(f.error))throw f.error;return void this._set("vertexLimitExceeded",!1)}const y=f.value.features[0];y&&y.attributes?this._set("vertexLimitExceeded",!!y.attributes.exceedslimit):this._set("vertexLimitExceeded",!1)}async fetchServiceDataInfo(){this.cancelFetchServiceDataInfo();let e=m();const t=e.signal,i=this.updateServiceDataCount(t),r=f([i,this.updateVertexLimitExceeded(i,t)]),s=r.then((()=>this.updateServiceDataExtent(t))).catch((e=>{p(e)||S.error("#fetchServiceDataInfo()",e)})).then((()=>{s===this.fetchDataInfoPromise&&(this.fetchDataInfoPromise=null,this.fetchDataInfoAbortController=null),e=null}));return e&&(this.fetchDataInfoPromise=s),this.fetchDataInfoAbortController=e,r.then((()=>{}),(()=>{}))}cancelFetchServiceDataInfo(){const e=this.fetchDataInfoAbortController;e&&(this.fetchDataInfoAbortController=null,this.fetchDataInfoPromise=null,e.abort())}get debug(){return{storedFeatures:l(this.tileFetcher)?this.tileFetcher.storedFeatures:0,totalFeatures:l(this.tileFetcher)?this.tileFetcher.totalFeatures:0,totalVertices:l(this.tileFetcher)?this.tileFetcher.totalVertices:0}}};e([x({readOnly:!0})],_.prototype,"type",void 0),e([x({constructOnly:!0})],_.prototype,"graphics",void 0),e([x({constructOnly:!0})],_.prototype,"layerView",void 0),e([x({constructOnly:!0})],_.prototype,"context",void 0),e([x()],_.prototype,"extent",null),e([x()],_.prototype,"updating",null),e([x({readOnly:!0})],_.prototype,"watchUpdatingTracking",void 0),e([x()],_.prototype,"updatingTotal",null),e([x()],_.prototype,"updatingRemaining",null),e([x()],_.prototype,"expectedFeatureDiff",null),e([x()],_.prototype,"memoryForUnusedFeatures",null),e([x()],_.prototype,"maximumNumberOfFeaturesExceeded",null),e([x({readOnly:!0})],_.prototype,"serviceDataExtent",void 0),e([x({readOnly:!0})],_.prototype,"serviceDataCount",void 0),e([x({readOnly:!0})],_.prototype,"vertexLimitExceeded",void 0),e([x()],_.prototype,"displayFeatureLimit",void 0),e([x({type:Number})],_.prototype,"maximumNumberOfFeatures",null),e([x({readOnly:!0})],_.prototype,"mode",null),e([x({readOnly:!0})],_.prototype,"maxTotalSnapshotVertices",null),e([x({readOnly:!0,dependsOn:["mode"]})],_.prototype,"tileDescriptors",null),e([x()],_.prototype,"tileFetcher",void 0),e([x()],_.prototype,"fetchDataInfoPromise",void 0),e([x({readOnly:!0})],_.prototype,"vertexLimitInfo",null),_=e([F("esri.layers.graphics.controllers.FeatureTileController3D")],_);const O=1e4,I=12e3,V=1e4,U=5e6;function N(e,t){if(!t)return!1;for(const i of t)if(!e.has(i))return!0;return!1}var A;!function(e){function t(){e.MAX_FEATURE_COUNT_FOR_EXTENT=O,e.QUERY_STATISTICS_TIMEOUT=I,e.QUERY_EXTENT_TIMEOUT=V}e.NO_SERVICE_DATA_COUNT=1/0,e.MAX_SNAPSHOT_MIN_SCALE_FACTOR=5,e.reset=t}(A||(A={})),A.reset();export{_ as FeatureTileController3D,A as FeatureTileController3DConstants};
