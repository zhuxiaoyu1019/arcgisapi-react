/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../core/Error.js";import t from"../../../core/Logger.js";import{unwrap as r}from"../../../core/maybe.js";import{throwIfAborted as s,createTask as a,isAbortError as i}from"../../../core/promiseUtils.js";import{equals as n,WGS84 as o}from"../../../geometry/support/spatialReferenceUtils.js";import{convertFromGeometry as u,convertToGeometry as p}from"../featureConversionUtils.js";import h from"../data/FeatureStore.js";import{project as y,checkProjectionSupport as l}from"../data/projectionSupport.js";import m from"../data/QueryEngine.js";import{validateGeoJSON as c,createOptimizedFeatures as g}from"./geojson/geojson.js";import{mixAttributes as _}from"./support/sourceUtils.js";import{getFeature as f}from"../../ogc/wfsUtils.js";import d from"../../support/FieldsIndex.js";class w{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async e=>{const{objectIdField:t}=this._queryEngine,r=await f(this._getFeatureUrl,this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map((e=>e.name)),signal:e});await c(r),s(e);const a=g(r,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:t});if(!n(this._queryEngine.spatialReference,o))for(const s of a)s.geometry&&(s.geometry=u(y(p(s.geometry,this._queryEngine.geometryType,!1,!1),o,this._queryEngine.spatialReference)));let i=1;for(const s of a){const e={};_(this._fieldsIndex,e,s.attributes,null,!0),s.attributes=e,null==s.attributes[t]&&(s.objectId=s.attributes[t]=i++)}return a}}destroy(){var e;null==(e=this._queryEngine)||e.destroy(),this._queryEngine=null}async load(e,t){const{getFeatureUrl:a,getFeatureOutputFormat:i,spatialReference:n,fields:o,geometryType:u,featureType:p,objectIdField:y,customParameters:l}=e;this._featureType=p,this._customParameters=l,this._getFeatureUrl=a,this._getFeatureOutputFormat=i,this._fieldsIndex=new d(o),await this._checkProjection(n),s(t),this._queryEngine=new m({fields:o,geometryType:u,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:n,timeInfo:null,featureStore:new h({geometryType:u,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(r(t.signal));return this._queryEngine.featureStore.addMany(c),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new e("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}setCustomParameters(e){this._customParameters=e}async refresh(){var r;return null==(r=this._snapshotTask)||r.abort(),this._snapshotTask=a(this._snapshotFeatures),this._snapshotTask.promise.then((e=>{this._queryEngine.featureStore.clear(),e&&this._queryEngine.featureStore.addMany(e)}),(r=>{this._queryEngine.featureStore.clear(),i(r)||t.getLogger("esri.layers.WFSLayer").error(new e("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:r}))})),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await l(o,t)}catch{throw new e("unsupported-projection","Projection not supported",{spatialReference:t})}}}export default w;
