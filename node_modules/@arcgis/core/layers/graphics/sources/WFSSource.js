/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import t from"../../../core/Error.js";import{HandleOwnerMixin as r}from"../../../core/HandleOwner.js";import o from"../../../core/has.js";import s from"../../../core/Loadable.js";import{isSome as a,unwrap as i}from"../../../core/maybe.js";import{debounce as n,eachAlways as c}from"../../../core/promiseUtils.js";import{init as p}from"../../../core/watchUtils.js";import{open as l}from"../../../core/workers/workers.js";import{property as u}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/Logger.js";import{subclass as m}from"../../../core/accessorSupport/decorators/subclass.js";import{featureGeometryTypeKebabDictionary as y}from"../../../geometry/support/typeUtils.js";import{createCapabilities as d,createDrawingInfo as f}from"./support/clientSideDefaults.js";import{getCapabilities as h,getWFSLayerInfo as w,prepareWFSLayerFields as g,findFeatureType as S}from"../../ogc/wfsUtils.js";import v from"../../../rest/support/FeatureSet.js";import F from"../../../geometry/Extent.js";let j=class extends(r(s)){constructor(){super(...arguments),this.capabilities=d(!1,!1),this.type="wfs",this._updateCustomParameters=n((()=>{var e;const t=this.layer.customParameters;return null==(e=this._connection)?void 0:e.invoke("setCustomParameters",t)}))}load(e){var t;const r=null!=(t=a(e)&&e.signal)?t:null;return this.addResolvingPromise(this._startWorker({signal:r})),Promise.resolve(this)}destroy(){var e;null==(e=this._connection)||e.close(),this._connection=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,t={}){await this.load(t);const r=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);return v.fromJSON(r)}async queryFeaturesJSON(e,t={}){return await this.load(t),this._connection.invoke("queryFeatures",e?e.toJSON():null,t)}async queryFeatureCount(e,t={}){return await this.load(t),this._connection.invoke("queryFeatureCount",e?e.toJSON():null,t)}async queryObjectIds(e,t={}){return await this.load(t),this._connection.invoke("queryObjectIds",e?e.toJSON():null,t)}async queryExtent(e,t={}){await this.load(t);const r=await this._connection.invoke("queryExtent",e?e.toJSON():null,t);return{count:r.count,extent:F.fromJSON(r.extent)}}async querySnapping(e,t={}){return await this.load(t),this._connection.invoke("querySnapping",e,t)}async refresh(e={}){await this.load(e);const{extent:t}=await this._connection.invoke("refresh",void 0,e);return this.sourceJSON.extent=t,{extent:t}}async _createLoadOptions(e){const{url:r,customParameters:o,name:s,namespaceUri:a,spatialReference:n,fields:c,geometryType:p,swapXY:l}=this.layer;if(!r)throw new t("wfs-layer:missing-url","WFSLayer must be created with a url");this.wfsCapabilities=this.wfsCapabilities||await h(r,{customParameters:o,...e});const u=["fields","geometryType","name","namespaceUri","spatialReference","swapXY"].some((e=>null==this.layer[e]))?await w(this.wfsCapabilities,s,a,{spatialReference:n,customParameters:o,signal:null==e?void 0:e.signal}):{...g(c),geometryType:p,name:s,namespaceUri:a,spatialReference:n,swapXY:l},m=i(S(this.wfsCapabilities.readFeatureTypes(),u.name,u.namespaceUri)),d=y.toJSON(u.geometryType);return{customParameters:o,featureType:m,fields:u.fields.map((e=>e.toJSON())),geometryField:u.geometryField,geometryType:d,getFeatureUrl:this.wfsCapabilities.operations.GetFeature.url,getFeatureOutputFormat:this.wfsCapabilities.operations.GetFeature.outputFormat,objectIdField:u.objectIdField,spatialReference:u.spatialReference.toJSON(),swapXY:u.swapXY}}async _startWorker(e){const[t,r]=await c([this._createLoadOptions(e),l("WFSSourceWorker",{...e,strategy:o("feature-layers-workers")?"dedicated":"local"})]),s=t.error||r.error||null,a=r.value||null;if(s)throw a&&a.close(),s;const i=t.value;this._connection=r.value;const{extent:n}=await this._connection.invoke("load",i,e);this.sourceJSON={extent:n,fields:i.fields,geometryType:i.geometryType,objectIdField:i.objectIdField,geometryField:i.geometryField,drawingInfo:f(i.geometryType),name:i.featureType.title,wfsInfo:{name:i.featureType.name,featureUrl:i.getFeatureUrl,maxFeatures:3e3,swapXY:i.swapXY,supportedSpatialReferences:i.featureType.supportedSpatialReferences,version:"2.0.0",wfsNamespace:i.featureType.namespaceUri}},this.handles.add(p(this.layer,"customParameters",(()=>this._updateCustomParameters().catch((()=>{})))))}};e([u()],j.prototype,"capabilities",void 0),e([u({constructOnly:!0})],j.prototype,"layer",void 0),e([u()],j.prototype,"sourceJSON",void 0),e([u()],j.prototype,"type",void 0),e([u()],j.prototype,"wfsCapabilities",void 0),j=e([m("esri.layers.graphics.sources.WFSSource")],j);var O=j;export default O;export{j as WFSSource};
