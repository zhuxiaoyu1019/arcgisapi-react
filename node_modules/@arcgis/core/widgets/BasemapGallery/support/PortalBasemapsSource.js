/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import e from"../../../Basemap.js";import r from"../../../core/Collection.js";import s from"../../../core/Error.js";import o from"../../../core/Handles.js";import a from"../../../core/Loadable.js";import l from"../../../core/Logger.js";import{EsriPromiseMixin as i}from"../../../core/Promise.js";import{isAbortError as p}from"../../../core/promiseUtils.js";import{init as n}from"../../../core/watchUtils.js";import{property as m}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as h}from"../../../core/accessorSupport/decorators/subclass.js";import c from"../../../portal/Portal.js";import u from"./LocalBasemapsSource.js";const d=r.ofType(e),f="esri.widgets.BasemapGallery.support.PortalBasemapsSource",y=l.getLogger(f);let b=class extends(a.LoadableMixin(i(u))){constructor(t){super(t),this._handles=new o,this.basemaps=new d,this.filterFunction=null,this.portal=c.getDefault(),this.query=null,this.updateBasemapsCallback=null}initialize(){this._handles.add([n(this,["filterFunction","loadStatus","portal.basemapGalleryGroupQuery","portal.user","query","updateBasemapsCallback"],(()=>this.refresh()))])}destroy(){this._handles.destroy(),this._handles=null,this.filterFunction=null,this.portal=null}get state(){return"not-loaded"===this.loadStatus?"not-loaded":"loading"===this.loadStatus||this._lastPortalBasemapFetchController?"loading":"ready"}load(t){return this.addResolvingPromise(this.portal.load(t)),this.notifyChange("state"),Promise.resolve(this)}async refresh(){if("ready"!==this.state)return;this._lastPortalBasemapFetchController&&(this._lastPortalBasemapFetchController.abort(),this._lastPortalBasemapFetchController=null);const t=this.portal,e=new AbortController;this._lastPortalBasemapFetchController=e,this.notifyChange("state");try{const r=await t.fetchBasemaps(this._toQueryString(this.query),e);this._updateBasemaps(r)}catch(r){if(p(r))throw r;y.warn(new s("basemap-source:fetch-basemaps-error","Could not fetch basemaps from portal.",{error:r})),this._updateBasemaps()}this._lastPortalBasemapFetchController=null,this.notifyChange("state")}_toQueryString(t){return t&&"string"!=typeof t?Object.keys(t).map((e=>`${e}:${t[e]}`)).join(" AND "):t}_updateBasemaps(t=[]){let e=this.filterFunction?t.filter(this.filterFunction):t;e=this.updateBasemapsCallback?this.updateBasemapsCallback(e):e,this.basemaps.removeAll(),this.basemaps.addMany(e)}};t([m({readOnly:!0,type:d})],b.prototype,"basemaps",void 0),t([m()],b.prototype,"filterFunction",void 0),t([m({type:c})],b.prototype,"portal",void 0),t([m()],b.prototype,"query",void 0),t([m({readOnly:!0})],b.prototype,"state",null),t([m()],b.prototype,"updateBasemapsCallback",void 0),b=t([h(f)],b);var B=b;export default B;
