/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../core/Collection.js";import s from"../../core/Handles.js";import o from"../../core/Loadable.js";import{watch as i,on as r}from"../../core/watchUtils.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import{cast as p}from"../../core/accessorSupport/decorators/cast.js";import"../../core/Logger.js";import{subclass as c}from"../../core/accessorSupport/decorators/subclass.js";import{contentEquals as n}from"../../support/basemapUtils.js";import{default3DCompatibility as l,default2DCompatibility as m}from"./support/basemapCompatibilityUtils.js";import u from"./support/BasemapGalleryItem.js";import h from"./support/LocalBasemapsSource.js";import d from"./support/PortalBasemapsSource.js";const y=e.ofType(u);function b(t){return t&&"esri.portal.Portal"===t.declaredClass}function f(t){return t&&!(t instanceof d)&&(!!t.portal||!!t.query)}function v(t){return t&&"basemaps"in t&&"state"in t&&"refresh"in t}let w=class extends o{constructor(t){super(t),this._handles=new s,this.activeBasemap=null,this.items=new y,this.source=new d,this.view=null}initialize(){const t=()=>this._recreateItems();this._handles.add([i(this,["compatibilityFunction","state"],(()=>this._updateItems())),r(this,"source.basemaps","change",t,t)])}destroy(){this._handles.destroy(),this._handles=null}get compatibilityFunction(){if(void 0===this._get("compatibilityFunction")){return"3d"===this.get("view.type")?l:m}return this._get("compatibilityFunction")}set compatibilityFunction(t){this._set("compatibilityFunction",t)}castSource(t){return Array.isArray(t)||e.isCollection(t)?new h({basemaps:t}):b(t)?new d({portal:t}):f(t)?new d(t):v(t)?t:null}get state(){return this.get("view.ready")&&this.source?"ready":"disabled"}basemapEquals(t,e){return n(t,e)}refresh(){this._recreateItems()}load(t){return this.addResolvingPromise(o.isLoadable(this.source)?this.source.load(t):Promise.resolve()),Promise.resolve(this)}_recreateItems(){const t=this.get("source.basemaps"),{view:e,compatibilityFunction:s}=this;this.items.removeAll().forEach((t=>t.destroy())),this.items.addMany(t.map((t=>new u({basemap:t,compatibilityFunction:s,view:e}))))}_updateItems(){this.items.forEach((t=>{t.compatibilityFunction=this.compatibilityFunction,t.view=this.view}))}};t([a({aliasOf:"view.map.basemap"})],w.prototype,"activeBasemap",void 0),t([a()],w.prototype,"compatibilityFunction",null),t([a({readOnly:!0,type:y})],w.prototype,"items",void 0),t([a()],w.prototype,"source",void 0),t([p("source")],w.prototype,"castSource",null),t([a({readOnly:!0})],w.prototype,"state",null),t([a()],w.prototype,"view",void 0),w=t([c("esri.widgets.BasemapGallery.BasemapGalleryViewModel")],w);var j=w;export default j;
