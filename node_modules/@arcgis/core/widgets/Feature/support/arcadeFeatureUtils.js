/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../core/Logger.js";import{eachAlways as r}from"../../../core/promiseUtils.js";import t from"../../../layers/FeatureLayer.js";import{applyTextFormattingHTML as a,htmlEntities as s}from"./featureUtils.js";const i=["$datastore","$map","$layer","$aggregatedfeatures"],o="esri.widgets.Feature.support.arcadeFeatureUtils",n=e.getLogger(o);function c(e){return`<ul class="esri-widget__list">${e.map((e=>`<li>${"string"==typeof e?a(s(e)):e}</li>`)).join("")}</ul>`}function p(e){return`<table class="esri-widget__table">${e.keys().map((r=>{const t=e.field(r);return`<tr><th>${r}</th><td>${"string"==typeof t?a(s(t)):t}</td></tr>`})).join("")}</table>`}function l({aggregatedFeatures:e,arcadeUtils:r,featureSetVars:a,context:s,viewInfo:i,map:o,graphic:n}){a.forEach((a=>{const c=a.toLowerCase(),p={map:o,spatialReference:i.sr};if("$map"===c&&(s.vars[c]=r.convertMapToFeatureSetCollection(p)),"$layer"===c&&(s.vars[c]=r.convertFeatureLayerToFeatureSet(n.sourceLayer,i.sr)),"$datastore"===c&&(s.vars[c]=r.convertServiceUrlToWorkspace(n.sourceLayer.url,i.sr)),"$aggregatedfeatures"===c){const a=n.layer,{fields:o,objectIdField:p,geometryType:l,spatialReference:u,displayField:f}=a,d=new t({fields:o,objectIdField:p,geometryType:l,spatialReference:u,displayField:f,..."feature"===a.type?{templates:a.templates,typeIdField:a.typeIdField,types:a.types}:null,source:e});s.vars[c]=r.convertFeatureLayerToFeatureSet(d,i.sr)}}))}function u(){return import("../../../support/arcadeUtils.js")}async function f({graphic:e,view:r}){const{isAggregate:t,layer:a}=e;if(!t||!a||"2d"!==(null==r?void 0:r.type))return[];const s=await r.whenLayerView(a);if(!s.createQuery||!s.queryFeatures)return[];const i=s.createQuery();i.aggregateIds=[e.getObjectId()];const{features:o}=await s.queryFeatures(i);return o}async function d({expressionAttributes:e,info:r,arcadeUtils:t,spatialReference:o,map:u,graphic:d,view:g}){const y=`expression/${r.name}`,m=t.createSyntaxTree(r.expression),w=i.filter((e=>t.hasVariable(m,e)));await t.loadScriptDependencies(m,!0,w);const F=t.getViewInfo({spatialReference:o}),v=t.createExecContext(d,F);v.useAsync=!0;l({aggregatedFeatures:await f({graphic:d,view:g}),arcadeUtils:t,featureSetVars:w,context:v,viewInfo:F,map:u,graphic:d});const h=t.createFunction(m,v),x=await t.executeAsyncFunction(h,v).catch((e=>n.error("arcade-execution-error",{error:e,graphic:d,expressionInfo:r})));e[y]="string"==typeof x?a(s(x)):Array.isArray(x)?c(x):x&&"esri.arcade.Dictionary"===x.declaredClass?p(x):x}async function g({popupTemplate:e,spatialReference:t,graphic:a,map:s,view:i}){const o=e.expressionInfos,n=[],c={};if(!o||!o.length)return c;const p=await u();for(const r of o)n.push(d({expressionAttributes:c,info:r,arcadeUtils:p,spatialReference:t,map:s,graphic:a,view:i}));return await r(n),c}export{g as createCompiledExpressions};
