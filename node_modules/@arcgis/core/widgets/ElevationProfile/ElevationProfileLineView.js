/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../Color.js";import{handlesGroup as r}from"../../core/handleUtils.js";import{isNone as i,applySome as o,unwrapOr as n,isSome as s}from"../../core/maybe.js";import{memoize as l}from"../../core/memoize.js";import{union as c}from"../../core/SetUtils.js";import{getMetersPerVerticalUnitForSR as a}from"../../core/unitUtils.js";import{on as u}from"../../core/watchUtils.js";import{property as p}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import"../../core/Logger.js";import{subclass as d}from"../../core/accessorSupport/decorators/subclass.js";import{s as m}from"../../chunks/vec3.js";import{c as v}from"../../chunks/vec4f64.js";import{getReferenceEllipsoid as y}from"../../geometry/projectionEllipsoid.js";import{create as h,fromPoints as f}from"../../geometry/support/ray.js";import{GeometryDescriptor as _}from"../../layers/support/ElevationQuery.js";import{Intersector as w}from"../../views/3d/webgl-engine/lib/Intersector.js";import{toGraphic as g}from"../../views/3d/webgl-engine/lib/intersectorUtilsConversions.js";import{ElevationProfileLine as j}from"./ElevationProfileLine.js";const I=2e5;let b=class extends j{constructor(e){super(e),this.type="view",this.color=new t("#cf4ccf"),this.viewVisualizationEnabled=!0,this.include=null,this.exclude=null,this.numSamplesForPreview=50,this.numSamplesPerChunk=25,this._getQueryElevationDependencies=l(((e,t,r,i,o,n,l)=>({inputGraphicUid:s(e)?E(e):null,visibleLayers:t,maxIntersectionDistance:r,intersectOptions:i,view:o,stationary:n,spatialReference:l}))),this._vecA=v(),this._vecB=v(),this._ray=h()}get minDemResolution(){var e,t,r;const o=null==(e=this._viewModel)?void 0:e.view;if(i(o)||"3d"!==o.type)return null;const n=null==(t=o.pointsOfInterest)||null==(r=t.focus)?void 0:r.renderLocation;if(!n)return null;return o.state.camera.computeRenderPixelSizeAt(n)*a(o.spatialReference)}get queryElevationDependencies(){return o(this._view,(e=>this._getQueryElevationDependencies(this._viewModel.input,this._visibleLayers,this._maxIntersectionDistance,this._intersectOptions,e,e.stationary,e.spatialReference)))}get _visibleLayers(){const e=this._view,t=o(e,(e=>{var t,r;return null==(t=e.map)||null==(r=t.allLayers)?void 0:r.filter((e=>e.visible)).toArray()}));return n(t,[])}get _intersectOptions(){const e=this._view;if(i(e))return{};const t=e.externalToInternalIntersectOptions({include:this.include,exclude:this.exclude}),r=e.externalToInternalIntersectOptions({exclude:this._pointCloudLayers});return t.exclude=c(t.exclude,r.exclude),t}get _pointCloudLayers(){const e=this._view;return i(e)?[]:e.allLayerViews.toArray().filter((e=>{var t;return"point-cloud"===(null==(t=e.layer)?void 0:t.type)})).map((e=>e.layer))}get _view(){const e=this._viewModel.view;return s(e)&&"3d"===e.type?e:null}get _maxIntersectionDistance(){const e=this._view;return i(e)||!e.renderCoordsHelper?Number.POSITIVE_INFINITY:y(e.spatialReference).radius/e.renderCoordsHelper.unitInMeters}get _intersector(){const e=this._view;if(i(e))return null;const t=new w(e.state.viewingMode),r=t.options;return r.hud=!1,r.invisibleTerrain=!1,r.backfacesTerrain=!1,r.selectionMode=!1,r.store=2,t}async queryElevation(e,{noDataValue:t,signal:r}){const o=this.queryElevationDependencies;if(i(o))throw new Error("ElevationProfileLineInput: no dependencies");const{intersectOptions:n,view:s,spatialReference:l}=o,c=s.renderCoordsHelper,a=s.sceneIntersectionHelper,u=this._intersector,p=this._vecA,d=this._vecA,v=this._vecB,y=this._ray,h=await _.fromGeometry(e).project(l,r),w=h.coordinates,g=w.length;for(let i=0;i<g;++i){var j;const e=w[i];m(v,e.x,e.y,null!=(j=e.z)?j:0),c.toRenderCoords(v,l,v),c.setAltitude(p,I,v);const r=f(p,v,y);a.computeIntersection(r,u,n);const s=x(o,u.results.all);s?(s.getIntersectionPoint(d),c.fromRenderCoords(d,d,l),e.z=d[2]):e.z=t}return{geometry:h.export(),noDataValue:t}}attach(e){const t=()=>this._onChange();return r([super.attach(e),this.watch("queryElevationDependencies",t),u(this,"include","change",t,t,t),u(this,"exclude","change",t,t,t),u(e,"view.elevationProvider","elevation-change",t)])}};function x({view:e,inputGraphicUid:t,maxIntersectionDistance:r},o){for(let n=0;n<o.length;n++){const s=o[n];if(s.distanceInRenderSpace>r)continue;const l=g(s,e);if(i(l)||E(l)!==t)return s}return null}function E(e){if(e.layer&&"objectIdField"in e.layer){const t=e.attributes[e.layer.objectIdField];if(t)return`o-${e.layer.id}-${t}`}return`u-${e.uid}`}e([p({type:t,nonNullable:!0})],b.prototype,"color",void 0),e([p()],b.prototype,"viewVisualizationEnabled",void 0),e([p()],b.prototype,"include",void 0),e([p()],b.prototype,"exclude",void 0),e([p({readOnly:!0})],b.prototype,"minDemResolution",null),e([p()],b.prototype,"queryElevationDependencies",null),e([p()],b.prototype,"_visibleLayers",null),e([p()],b.prototype,"_intersectOptions",null),e([p()],b.prototype,"_pointCloudLayers",null),e([p()],b.prototype,"_view",null),e([p()],b.prototype,"_maxIntersectionDistance",null),e([p()],b.prototype,"_intersector",null),b=e([d("esri.widgets.ElevationProfile.ElevationProfileLineView")],b);var D=b;export default D;
