/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../Color.js";import{handlesGroup as o}from"../../core/handleUtils.js";import{isNone as r,applySome as i,unwrapOr as n}from"../../core/maybe.js";import{memoize as s}from"../../core/memoize.js";import{on as a}from"../../core/watchUtils.js";import{property as l}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import"../../core/Logger.js";import{subclass as p}from"../../core/accessorSupport/decorators/subclass.js";import{GeometryDescriptor as c}from"../../layers/support/ElevationQuery.js";import{getGraphicEffectiveElevationInfo as u}from"../../support/elevationInfoUtils.js";import{ElevationProfileLine as v}from"./ElevationProfileLine.js";let m=class extends v{constructor(e){super(e),this.type="input",this.color=new t("#00c8c8"),this.viewVisualizationEnabled=!1,this.numSamplesForPreview=50,this.numSamplesPerChunk=500,this.chartFillEnabled=!1,this.chartStrokeOffsetY=-1,this._getQueryElevationDependencies=s(((e,t,o,r,n)=>i(e,(e=>({elevationInfo:e,visibleLayers:t,view:o,stationary:r,spatialReference:n})))))}get queryElevationDependencies(){const e=this._viewModel.view;return r(e)?null:this._getQueryElevationDependencies(this._elevationInfo,this._visibleLayers,e,e.stationary,e.spatialReference)}get available(){return!this._viewModel.inputIsSketched}get _elevationInfo(){return i(this._viewModel.input,u)}get _visibleLayers(){var e;const t=null==(e=this._viewModel)?void 0:e.view,o=i(t,(e=>{var t,o;return null==(t=e.map)||null==(o=t.allLayers)?void 0:o.filter((e=>e.visible)).toArray()}));return n(o,[])}async queryElevation(e,{noDataValue:t,signal:o}){const i=this.queryElevationDependencies;if(r(i))throw new Error("ElevationProfileLineInput: no dependencies");const{view:s,elevationInfo:a,spatialReference:l}=i;if("on-the-ground"===a.mode&&"3d"===s.type){const r=await c.fromGeometry(e).project(l,o),i=s.elevationProvider;return r.coordinates.forEach((e=>{e.z=n(i.getElevation(e.x,e.y,0,l,"ground"),0)})),{geometry:r.export(),noDataValue:t}}return{geometry:e,noDataValue:t}}attach(e){const t=()=>this._onChange();return o([super.attach(e),this.watch("queryElevationDependencies",t),a(e,"view.elevationProvider","elevation-change",t)])}};e([l({type:t,nonNullable:!0})],m.prototype,"color",void 0),e([l()],m.prototype,"viewVisualizationEnabled",void 0),e([l()],m.prototype,"queryElevationDependencies",null),e([l()],m.prototype,"available",null),e([l()],m.prototype,"_elevationInfo",null),e([l()],m.prototype,"_visibleLayers",null),m=e([p("esri.widgets.ElevationProfile.ElevationProfileLineInput")],m);var h=m;export default h;
