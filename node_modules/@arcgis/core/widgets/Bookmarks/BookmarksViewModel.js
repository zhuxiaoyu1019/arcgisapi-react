/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../Viewpoint.js";import o from"../../core/Collection.js";import r from"../../core/Error.js";import i from"../../core/Evented.js";import a from"../../core/Logger.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import c from"../../webdoc/support/Thumbnail.js";import p from"../../webmap/Bookmark.js";import{GoToMixin as l}from"../support/GoTo.js";const u="esri.widgets.Bookmarks.BookmarksViewModel",m=a.getLogger(u),k=o.ofType(p),w={width:128,height:128,format:"png"},d={takeScreenshot:!0,captureViewpoint:!0,captureRotation:!0,captureScale:!0};let v=class extends(l(i.EventedAccessor)){constructor(t){super(t),this.activeBookmark=null}destroy(){this.view=null,this._set("activeBookmark",null)}set bookmarks(t){void 0!==t?this._override("bookmarks",t):this._clearOverride("bookmarks")}get bookmarks(){return this.get("view.map.bookmarks")||new k}set defaultCreateOptions(t){this._set("defaultCreateOptions",{...d,...t})}get defaultCreateOptions(){return d}set defaultEditOptions(t){this._set("defaultEditOptions",{...d,...t})}get defaultEditOptions(){return d}get state(){const t=this.get("view");return t&&!t.ready?"loading":"ready"}get view(){return this._get("view")}set view(t){t&&"2d"!==t.type&&m.error(new r("view:invalid-view","SceneView is not supported",{view:t})),this._set("view",t)}async createBookmark(t){const{view:e,defaultCreateOptions:o}=this;if(!e){const t=new r("create-bookmark:invalid-view","Cannot create a bookmark without a view.");return m.error(t),Promise.reject(t)}const{takeScreenshot:i,screenshotSettings:a,captureViewpoint:s,captureRotation:n,captureScale:c}={...o,...t},l=i?await this._createThumbnail(a):void 0;return new p({...l&&{thumbnail:l},...s&&{viewpoint:this._createViewpoint({view:e,captureScale:c,captureRotation:n})}})}async editBookmark(t,e){const{view:o,defaultEditOptions:i}=this;if(!o){const t=new r("edit-bookmark:invalid-view","Cannot edit a bookmark without a view.");return m.error(t),Promise.reject(t)}const{takeScreenshot:a,screenshotSettings:s,captureViewpoint:n,captureRotation:c,captureScale:p}={...i,...e},l=a?await this._createThumbnail(s):void 0;return l&&(t.thumbnail=l),n&&(t.viewpoint=this._createViewpoint({view:o,captureScale:p,captureRotation:c})),this.emit("bookmark-edit",{bookmark:t}),t}goTo(t){const{view:e}=this;if(!e){const t=new r("go-to:invalid-view","Cannot go to a bookmark without a view");return m.error(t),Promise.reject(t)}const o=null==t?void 0:t.viewpoint;if(!o){const e=new r("go-to:invalid-bookmark","Cannot go to a bookmark that does not contain a 'viewpoint'.",{bookmark:t});return m.error(e),Promise.reject(e)}this._set("activeBookmark",t);const i={target:o},a=this.callGoTo(i);return this.emit("bookmark-select",{bookmark:t}),a.catch((()=>{})).then((()=>this._set("activeBookmark",null))),a}async _createThumbnail(t){const e=await this.view.takeScreenshot({...w,...t});return new c({url:e.dataUrl})}_createViewpoint({view:t,captureRotation:o,captureScale:r}){var i,a;const s=null==(i=t.viewpoint)?void 0:i.clone();return new e({targetGeometry:null==(a=t.extent)?void 0:a.clone(),rotation:o&&(null==s?void 0:s.rotation)||0,scale:r&&(null==s?void 0:s.scale)||0})}};t([s({readOnly:!0})],v.prototype,"activeBookmark",void 0),t([s({type:k})],v.prototype,"bookmarks",null),t([s()],v.prototype,"defaultCreateOptions",null),t([s()],v.prototype,"defaultEditOptions",null),t([s({readOnly:!0})],v.prototype,"state",null),t([s({value:null})],v.prototype,"view",null),v=t([n(u)],v);var h=v;export default h;
