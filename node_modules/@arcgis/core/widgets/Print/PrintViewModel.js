/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../intl.js";import t from"../../request.js";import r from"../../Viewpoint.js";import o from"../../core/Collection.js";import i from"../../core/Error.js";import s from"../../core/Handles.js";import a from"../../core/Loadable.js";import{property as l}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import"../../core/Logger.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import p from"../../geometry/Extent.js";import c from"../../portal/Portal.js";import{execute as d}from"../../rest/print.js";import{fromJSON as u}from"../../rest/support/fileFormat.js";import{fromJSON as m}from"../../rest/support/layoutTemplate.js";import f from"../../rest/support/PrintParameters.js";import{getExtent as h}from"../../views/2d/viewpointUtils.js";import v from"./CustomTemplate.js";import{formatDate as y,convertDateFormatToIntlOptions as w}from"../../intl/date.js";const S=6e4,g=o.ofType(v);function j(e){e.layoutOptions||(e.layoutOptions={}),e.layoutOptions.customTextElements||(e.layoutOptions.customTextElements=[]);const t="date";if(!e.layoutOptions.customTextElements.find((e=>t in e))){const{customTextElements:t}=e.layoutOptions;t.push({date:y(Date.now(),w("short-date"))})}}let x=class extends a{constructor(e){super(e),this._handles=new s,this.allowedFormats="all",this.allowedLayouts="all",this.defaultTemplates=new g,this.extraParameters=null,this.includeDefaultTemplates=!0,this.effectivePrintServiceUrl=null,this.error=null,this.portal=c.getDefault(),this.printServiceUrl=null,this.scaleEnabled=!1,this.templatesInfo=null,this.updateDelay=1e3,this.view=null,this.print=this.print.bind(this)}destroy(){this._handles.destroy(),this._handles=null,this.view=null}get state(){return"loading"===this.loadStatus?"initializing":this.error||"failed"===this.loadStatus?"error":this.get("view.ready")&&"loaded"===this.loadStatus?"ready":"disabled"}async load(e){return this.addResolvingPromise(this._loadResources(e).catch((e=>this.error=e))),this}async print(e){const{view:t,extraParameters:r,updateDelay:o}=this;if(!t)throw new i("print:view-required","view is not set");const s=this._getExtent(t.viewpoint,this.scaleEnabled?e.outScale:void 0);j(e);const a=new f({view:t,template:e,extent:s,extraParameters:r,updateDelay:o});try{return await d(this.effectivePrintServiceUrl,a)}catch(l){const e="print-task:cim-symbol-unsupported"===l.name?l.message:"An error occurred while exporting the web map.";throw new i("print:export-error",e,{error:l})}}async _loadResources(e){let t=[];const{printServiceUrl:r}=this;if(!r){var o;if(this.destroyed)return;const{portal:r}=this;try{await r.load(e)}catch(a){throw new i("print:could-not-load-portal","Cannot load print resource information from portal",{url:this.effectivePrintServiceUrl})}const l=null==(o=r.helperServices)?void 0:o.printTask;var s;if(l)this._set("effectivePrintServiceUrl",l.url),t=(null!=(s=null==l?void 0:l.templates)?s:[]).map((e=>v.fromJSON(e)))}t.length>0&&this.defaultTemplates.addMany(t),await this._loadServiceDescription(e)}async _loadServiceDescription(e){const t=await this._getPrintTemplatesFromService(e);this._set("templatesInfo",t)}_getPrintTemplatesFromService(e){if(-1===this.effectivePrintServiceUrl.toLowerCase().split("/").indexOf("gpserver"))throw new i("print:invalid-print-service-url","Can't fetch print templates information from provided URL",{url:this.effectivePrintServiceUrl});return t(this.effectivePrintServiceUrl,{...e,query:{f:"json"},timeout:S}).then((e=>{const t=e&&e.data,r=t&&t.parameters;let o=null,i=null;r.forEach((e=>{let t,r=e.choiceList&&e.choiceList.slice();r&&r.length&&e.defaultValue&&(t=r.indexOf(e.defaultValue)),t>-1&&(r.splice(t,1),r.unshift(e.defaultValue));const s=(e,t)=>{const r="all"===t?e:e.filter((e=>t.indexOf(e)>-1));return 0===r.length?e:r};if("Format"===e.name){const t=s(r.map(u),this.allowedFormats),i=u(e.defaultValue);o={defaultValue:t.includes(i)?i:t[0],choiceList:t}}else if("Layout_Template"===e.name){let t,o;r=r.filter((e=>"map_only"!==e.toLowerCase())),r.some(((e,r)=>{const o=e.toLowerCase();return o.indexOf("letter")>-1&&o.indexOf("landscape")>-1?(t=r,!0):o.indexOf("a4")>-1&&o.indexOf("landscape")>-1&&(t=r,!1)})),t&&(o=r[t],r.splice(t,1),r.unshift(o));const a=s(r.map(m),this.allowedLayouts),l=m(e.defaultValue);i={defaultValue:a.includes(l)?l:a[0],choiceList:a}}})),this.error=null;return{format:o,layout:i}})).catch((e=>{throw new i("print:unavailable-service-info","Can't fetch templates info from service",{error:e})}))}_getExtent(e,t){const o=t||this.view.scale,i=this.get("view.size"),s=e?e.targetGeometry:null;return h(new p,new r({scale:o,targetGeometry:s}),i)}};e([l()],x.prototype,"allowedFormats",void 0),e([l()],x.prototype,"allowedLayouts",void 0),e([l({type:g})],x.prototype,"defaultTemplates",void 0),e([l()],x.prototype,"extraParameters",void 0),e([l()],x.prototype,"includeDefaultTemplates",void 0),e([l({aliasOf:{source:"printServiceUrl",overridable:!0},readOnly:!0})],x.prototype,"effectivePrintServiceUrl",void 0),e([l()],x.prototype,"error",void 0),e([l({type:c})],x.prototype,"portal",void 0),e([l()],x.prototype,"printServiceUrl",void 0),e([l({readOnly:!0})],x.prototype,"state",null),e([l()],x.prototype,"scaleEnabled",void 0),e([l({readOnly:!0})],x.prototype,"templatesInfo",void 0),e([l()],x.prototype,"updateDelay",void 0),e([l()],x.prototype,"view",void 0),x=e([n("esri.widgets.Print.PrintViewModel")],x);var P=x;export default P;
