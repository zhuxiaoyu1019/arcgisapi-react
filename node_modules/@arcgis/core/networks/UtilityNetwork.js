/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as r}from"../chunks/tslib.es6.js";import e from"../request.js";import{property as t}from"../core/accessorSupport/decorators/property.js";import"../core/has.js";import"../core/accessorSupport/ensureType.js";import"../core/Logger.js";import{subclass as o}from"../core/accessorSupport/decorators/subclass.js";import i from"./Network.js";import a from"./support/NamedTraceConfiguration.js";import n from"./support/TerminalConfiguration.js";let s=class extends i{constructor(r){super(r),this.sharedNamedTraceConfigurations=[],this.type="utility"}get serviceTerritoryFeatureLayerId(){var r;return null==(r=this.dataElement)?void 0:r.serviceTerritoryFeatureLayerId}get terminalConfigurations(){var r;return null==(r=this.dataElement)?void 0:r.terminalConfigurations.map((r=>n.fromJSON(r)))}async load(r){return this.addResolvingPromise(super.load(r)),this.addResolvingPromise(this._loadNamedTraceConfigurationsFromNetwork(r)),this}getTerminalConfiguration(r){let e=null,t=null;const o=r.layer;let i=null;if("feature"!==(null==o?void 0:o.type))return null;if(i=o.layerId,null===i)return null;const a=r.attributes;if(null==a)return null;for(const n of Object.keys(a))"ASSETGROUP"===n.toUpperCase()&&(e=r.getAttribute(n)),"ASSETTYPE"===n.toUpperCase()&&(t=r.getAttribute(n));if(!this.dataElement)return null;let s=null;const l=this.dataElement.domainNetworks;for(const n of l){var u;const r=null==(u=n.junctionSources)?void 0:u.find((r=>r.layerId===i));if(r){var d;const o=null==(d=r.assetGroups)?void 0:d.find((r=>r.assetGroupCode===e));if(o){var c;const r=null==(c=o.assetTypes)?void 0:c.find((r=>r.assetTypeCode===t));if(r){s=r.terminalConfigurationId;break}}}}if(null!=s){const r=this.dataElement.terminalConfigurations,e=null==r?void 0:r.find((r=>r.terminalConfigurationId===s));return e?n.fromJSON(e):null}return null}async _loadNamedTraceConfigurationsFromNetwork(r){var e;if(0===(null==(e=this.sharedNamedTraceConfigurations)?void 0:e.length))return;const t=this.sharedNamedTraceConfigurations.map((r=>r.globalId)),o=await this._fetchTraceConfigData(this.networkServiceUrl,t,r);for(const i of this.sharedNamedTraceConfigurations){const r=null==o?void 0:o.find((r=>r.globalId===i.globalId));r&&i.read(r,{origin:"service"})}}_fetchTraceConfigData(r,t,o){return e(`${r}/traceConfigurations/query`,{responseType:"json",query:{globalIds:JSON.stringify(t),f:"json"},...o}).then((r=>r.data.traceConfigurations))}};r([t({type:[a],json:{origins:{"web-map":{read:{source:"traceConfigurations"},write:{target:"traceConfigurations"}},service:{read:{source:"traceConfigurations"}}},read:!1}})],s.prototype,"sharedNamedTraceConfigurations",void 0),r([t({type:["utility"],readOnly:!0,json:{read:!1,write:!1}})],s.prototype,"type",void 0),r([t({readOnly:!0})],s.prototype,"serviceTerritoryFeatureLayerId",null),r([t({readOnly:!0})],s.prototype,"terminalConfigurations",null),s=r([o("esri.networks.UtilityNetwork")],s);var l=s;export default l;
