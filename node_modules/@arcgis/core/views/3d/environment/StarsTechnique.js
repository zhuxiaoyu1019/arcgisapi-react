/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{m as e,d as r}from"../../../chunks/mat4.js";import{c as i}from"../../../chunks/mat4f64.js";import{S as t}from"../../../chunks/Stars.glsl.js";import{ReloadableShaderModule as o}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as n}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{Default3D as s}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as a}from"../webgl-engine/lib/Program.js";import{makePipelineState as m,separateBlendingParams as l,defaultColorWriteParams as c}from"../../webgl/renderState.js";class f extends n{initializeProgram(e){const r=f.shader.get().build();return new a(e.rctx,r,s)}initializePipeline(){return m({blending:l(770,1,771,771),depthTest:{func:515},colorWrite:c})}bindPass({camera:r,modelMatrix:i}){const t=this.makeInfiniteProjectionMatrix(r.projectionMatrix,r.near,p);e(t,t,r.viewMatrix),e(t,t,i),this.program.setUniformMatrix4fv("transform",t),this.program.setUniform4fv("viewport",r.fullViewport),this.program.setUniform1f("pixelRatio",r.pixelRatio)}makeInfiniteProjectionMatrix(e,i,t){const o=24e-8;return r(t,e),t[10]=o-1,t[11]=-1,t[14]=(o-2)*i,t}}f.shader=new o(t,(()=>import("./Stars.glsl.js")));const p=i();export{f as StarsTechnique};
