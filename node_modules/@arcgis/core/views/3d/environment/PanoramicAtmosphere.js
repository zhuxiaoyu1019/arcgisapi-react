/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../core/Logger.js";import{disposeMaybe as t,abortMaybe as r}from"../../../core/maybe.js";import{createResolver as o,createAbortController as i,isAbortError as s}from"../../../core/promiseUtils.js";import{d as n}from"../../../chunks/mat4.js";import{c as a}from"../../../chunks/mat4f64.js";import{requestImage as m}from"../../../support/requestImageUtils.js";import{SimpleAtmosphereTechniqueConfiguration as l,SimpleAtmosphereTechnique as h}from"./SimpleAtmosphereTechnique.js";import c from"./resources/SimpleAtmosphereTexture.js";import{glLayout as p}from"../support/buffer/glUtil.js";import{newLayout as u}from"../support/buffer/InterleavedLayout.js";import{bindProjectionMatrix as f}from"../webgl-engine/core/shaderLibrary/util/View.glsl.js";import{Default3D as g}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import d from"../webgl-engine/lib/GeometryUtil.js";import _ from"../../webgl/BufferObject.js";import y from"../../webgl/Texture.js";import{vertexCount as b}from"../../webgl/Util.js";import x from"../../webgl/VertexArrayObject.js";const j=e.getLogger("esri.views.3d.environment.PanoramicAtmosphere");class v{constructor(){this.slot=14,this._atmosphereTechniqueConfig=new l,this._readyResolver=o(),this._readyController=i()}get canRender(){return null!=this._texture}destroy(){this._readyResolver.reject(),this._texture=t(this._texture),this._vao=t(this._vao),this._readyController=r(this._readyController)}when(){return this._readyResolver.promise}initializeRenderContext(e){this._atmosphereTechniqueConfig.geometry=1,this._atmosphereTechnique=e.shaderTechniqueRep.acquire(h,this._atmosphereTechniqueConfig);const t=e.renderContext.rctx;this._vao=this._createVertexArrayObject(t),this._vaoCount=b(this._vao,"geometry"),m(c,{signal:this._readyController.signal}).then((r=>{this._texture=new y(t,{pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!0},r),e.requestRender(),this._readyController=null,this._readyResolver.resolve()})).catch((e=>{s(e)||j.error("Unable to initialize atmosphere: image request failed",e),this._readyResolver.reject()}))}uninitializeRenderContext(){this.destroy()}render(e){if(e.slot!==this.slot||0!==e.pass)return!1;const t=e.rctx,r=this._atmosphereTechnique.program;return t.useProgram(r),this._atmosphereTechnique.bindPipelineState(t),r.bindTexture(this._texture,"tex"),f(r,e.camera.projectionMatrix),w(C,e.camera.viewMatrix),r.setUniformMatrix4fv("view",C),r.setUniform4f("color",1,1,1,1),e.scenelightingData.setLightDirectionUniform(r),t.bindVAO(this._vao),r.assertCompatibleVertexAttributeLocations(this._vao),t.drawArrays(4,0,this._vaoCount),!0}_createVertexArrayObject(e){const t=d.createPolySphereGeometry(1,2,!1),r=t.indices.get("position");for(let n=0;n<r.length;n+=3){const e=r[n];r[n]=r[n+2],r[n+2]=e}const o=t.vertexAttributes.get("position").data,i=q.createBuffer(r.length),s=i.position;for(let n=0;n<r.length;++n){const e=3*r[n];s.set(n,0,o[e]),s.set(n,1,o[e+1]),s.set(n,2,o[e+2])}return new x(e,g,{geometry:p(q)},{geometry:_.createVertex(e,35044,i.buffer)})}}function w(e,t){n(e,t),e[12]=0,e[13]=0,e[14]=0,e[15]=1}const C=a(),q=u().vec3f("position");export default v;
