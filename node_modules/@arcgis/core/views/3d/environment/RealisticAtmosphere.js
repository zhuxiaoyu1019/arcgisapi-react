/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../core/Handles.js";import{on as t}from"../../../core/watchUtils.js";import{a}from"../../../chunks/mat4.js";import{c as r}from"../../../chunks/mat4f64.js";import{s}from"../../../chunks/vec2.js";import{a as i}from"../../../chunks/vec2f64.js";import{s as n,l as o,g as h,a as d,b as c}from"../../../chunks/vec3.js";import{c as m,f as l,a as u}from"../../../chunks/vec3f64.js";import{s as p}from"../../../chunks/vec4.js";import{c as _,f as v}from"../../../chunks/vec4f64.js";import{earth as f}from"../../../geometry/support/Ellipsoid.js";import{computeInnerAltitudeFade as D,INNER_ATMOSPHERE_DEPTH as g}from"./atmosphereUtils.js";import{RealisticAtmosphereTechniqueConfiguration as w,RealisticAtmosphereTechnique as b}from"./RealisticAtmosphereTechnique.js";import{glLayout as j}from"../support/buffer/glUtil.js";import{newLayout as P}from"../support/buffer/InterleavedLayout.js";import{Default3D as x}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import T from"../../webgl/BufferObject.js";import B from"../../webgl/VertexArrayObject.js";class S{constructor(e){this._view=e,this.canRender=!0,this._skyslot=14,this._hazeSlot=15,this._renderData={texDepth:i(),cameraPosition:m(),projectionInverse:r(),viewInverse:r(),heightParameters:_(),atmosphereParameters1:_(),atmosphereParameters2:_(),atmosphereParameters3:m(),invWavelength:E,invWavelengthScaled:H,radii:i(),scale:0,scaleDepth:q,lowerAlphaBlendBound:0,scaleOverScaleDepth:0,oneOverScaleDepth:0,scaleDepthBlue:U,oneOverScaleDepthBlue:F,scaleOverScaleDepthBlue:0,g:k,g2:k*k,miePhaseCoefficients:z,nearFar:i(),cameraHeight:0,cameraHeightSq:0,C:0,CSur:0,innerFadeDistance:0,altitudeFade:0},this._lowerElevationBoundRadius=0,this._lowerBoundEarthRadius=f.radius,this._updateRadius(f.radius)}destroy(){this._handles&&(this._handles.destroy(),this._handles=null),this._vao&&(this._vao.dispose(),this._vao=null)}when(){return Promise.resolve()}initializeRenderContext(a){const r=a.renderContext.rctx;this._handles=new e,this._updateElevation({spatialReference:this._view.basemapTerrain.spatialReference,tile:this._view.basemapTerrain.rootTiles[0],extent:this._view.basemapTerrain.rootTiles[0].extent,context:"ground"}),this._handles.add(t(this._view,"basemapTerrain","elevation-change",(e=>this._updateElevation(e)),(()=>this._updateElevation()))),this._handles.add(t(this._view,"basemapTerrain","elevation-bounds-change",(()=>this._updateVisibleElevationBounds()),(()=>this._updateVisibleElevationBounds())));const s=new w;s.haze=!1,this._atmosphereTechnique=a.shaderTechniqueRep.acquire(b,s),s.haze=!0,this._atmosphereHazeTechnique=a.shaderTechniqueRep.acquire(b,s),this._vao=this._createVertexArrayObject(r)}uninitializeRenderContext(){this.destroy()}render(e){return(e.slot===this._hazeSlot||e.slot===this._skyslot)&&0===e.pass&&(this._update(e.camera),e.slot===this._skyslot&&this._renderSky(e),e.slot===this._hazeSlot&&this._renderHaze(e),!0)}_renderSky(e){const t=e.rctx,a=this._atmosphereTechnique.program;t.useProgram(a),this._atmosphereTechnique.bindPipelineState(t),a.setUniform3fv("atmosphereParameters3",this._renderData.atmosphereParameters3),this._renderCommon(a,e)}_renderHaze(e){const t=e.rctx,a=e.offscreenRenderingHelper,r=this._atmosphereHazeTechnique.program;t.useProgram(r),this._atmosphereHazeTechnique.bindPipelineState(t),a.renderDepthDetached((()=>{const t=a.depthTexture;r.bindTexture(t,"depthTex"),this._renderCommon(r,e)}))}_renderCommon(e,t){const a=t.rctx;e.setUniform3fv("invWavelength",this._renderData.invWavelength),e.setUniform3fv("invWavelengthScaled",this._renderData.invWavelengthScaled),t.scenelightingData.setLightDirectionUniform(e),e.setUniform4fv("heightParameters",this._renderData.heightParameters),e.setUniform3fv("cameraPosition",this._renderData.cameraPosition),e.setUniformMatrix4fv("projectionInverse",this._renderData.projectionInverse),e.setUniformMatrix4fv("viewInverse",this._renderData.viewInverse),e.setUniform2fv("nearFar",this._renderData.nearFar),e.setUniform2fv("radii",this._renderData.radii),e.setUniform4fv("atmosphereParameters1",this._renderData.atmosphereParameters1),e.setUniform4fv("atmosphereParameters2",this._renderData.atmosphereParameters2),e.setUniform1f("innerFadeDistance",this._renderData.innerFadeDistance),e.setUniform1f("altitudeFade",this._renderData.altitudeFade),a.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),a.drawArrays(5,0,4)}_createVertexArrayObject(e){const t=I.createBuffer(4);return t.position.setVec(0,[-1,-1]),t.position.setVec(1,[1,-1]),t.position.setVec(2,[-1,1]),t.position.setVec(3,[1,1]),t.uv0.setVec(0,[0,0]),t.uv0.setVec(1,[1,0]),t.uv0.setVec(2,[0,1]),t.uv0.setVec(3,[1,1]),new B(e,x,{geometry:j(I)},{geometry:T.createVertex(e,35044,t.buffer)})}_adjustRadiusForTesselation(e){const t=16,a=4,r=Math.PI/2**a/t;return e*Math.cos(r)}_updateElevation(e){const t=e?e.tile:this._view.basemapTerrain.rootTiles[0];if(0!==t.lij[0])return;const a=this._adjustRadiusForTesselation(f.radius+t.elevationBounds[0]);a!==this._lowerElevationBoundRadius&&(this._lowerElevationBoundRadius=a,this._lowerBoundEarthRadius=-1,this._updateVisibleElevationBounds())}_updateVisibleElevationBounds(){const e=this._adjustRadiusForTesselation(f.radius+this._view.basemapTerrain.elevationBounds.min);(this._lowerBoundEarthRadius<0||e<this._lowerBoundEarthRadius)&&this._updateRadius(e)}_updateRadius(e){this._lowerBoundEarthRadius=e;const t=e,a=t/10*10.25,r=1/(a-t),i=r/q,o=r/U,h=.3*(a-t)+t,d=this._renderData;p(d.atmosphereParameters1,r,q,i,C),p(d.atmosphereParameters2,k,U,o,F),n(d.atmosphereParameters3,k*k,z,h),s(d.radii,t,a),d.scale=r,d.lowerAlphaBlendBound=h,d.scaleOverScaleDepth=i,d.scaleOverScaleDepthBlue=o;const c=g;d.innerFadeDistance=2*Math.sqrt((2*t-c)*c)}_update(e){e&&(this._renderData.cameraHeight=o(e.eye),this._renderData.cameraHeightSq=this._renderData.cameraHeight*this._renderData.cameraHeight,this._renderData.C=this._renderData.cameraHeightSq-this._renderData.radii[1]*this._renderData.radii[1],this._renderData.CSur=this._renderData.cameraHeightSq-this._renderData.radii[0]*this._renderData.radii[0],this._renderData.heightParameters=v(this._renderData.cameraHeight,this._renderData.cameraHeightSq,this._renderData.C,this._renderData.CSur),h(this._renderData.cameraPosition,e.eye),a(this._renderData.projectionInverse,e.projectionMatrix),a(this._renderData.viewInverse,e.viewMatrix),s(this._renderData.nearFar,e.near,e.far),this._renderData.altitudeFade=D(this._renderData.cameraHeight-this._lowerBoundEarthRadius))}static isSupported(e){return e.renderContext.rctx.capabilities.depthTexture}}const R=.001,V=4*.005*Math.PI,y=4*R*Math.PI,E=l(1/.65**4,1/.57**4,1/.475**4),H=u(E);d(H,H,V),c(H,H,l(y,y,y));const q=.25,U=.05,C=1/q,F=1/U,k=-.99999,z=(1-k*k)/(2+k*k)*1.5,I=P().vec2f("position").vec2f("uv0");export{S as RealisticAtmosphere};
