/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{S as r}from"../../../chunks/SimpleAtmosphere.glsl.js";import{ReloadableShaderModule as i}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as t}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as o,parameter as n}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as s}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as l}from"../webgl-engine/lib/Program.js";import{makePipelineState as m,separateBlendingParams as g,backFaceCullingParams as c,defaultColorWriteParams as a}from"../../webgl/renderState.js";class h extends t{initializeProgram(e){const r=h.shader.get(),i=this.configuration,t=r.build({geometry:i.geometry});return new l(e.rctx,t,s)}initializePipeline(){return 1===this.configuration.geometry?m({blending:g(770,1,771,771),culling:c,depthTest:{func:515},colorWrite:a}):m({blending:g(770,1,771,771),depthTest:{func:515},colorWrite:a})}}h.shader=new i(r,(()=>import("./SimpleAtmosphere.glsl.js")));class u extends o{constructor(){super(...arguments),this.geometry=0}}e([n({count:3})],u.prototype,"geometry",void 0);export{h as SimpleAtmosphereTechnique,u as SimpleAtmosphereTechniqueConfiguration};
