/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../core/Logger.js";import{lerp as t,clamp as r}from"../../../core/mathUtils.js";import{createResolver as i,createAbortController as s,isAbortError as a}from"../../../core/promiseUtils.js";import{init as o}from"../../../core/watchUtils.js";import{l as n}from"../../../chunks/mat4.js";import{c as h}from"../../../chunks/mat4f64.js";import{s as l}from"../../../chunks/vec2.js";import{a as m}from"../../../chunks/vec2f64.js";import{l as c,a as d,b as u,i as p,c as f,p as _}from"../../../chunks/vec3.js";import{c as g}from"../../../chunks/vec3f64.js";import{getReferenceEllipsoid as x}from"../../../geometry/projectionEllipsoid.js";import{isMars as V}from"../../../geometry/support/spatialReferenceUtils.js";import{requestImage as C}from"../../../support/requestImageUtils.js";import{computeInnerAltitudeFade as R,INNER_ATMOSPHERE_DEPTH as j}from"./atmosphereUtils.js";import{SimpleAtmosphereTechniqueConfiguration as v,SimpleAtmosphereTechnique as y}from"./SimpleAtmosphereTechnique.js";import b from"./resources/MarsAtmosphereTexture.js";import U from"./resources/SimpleAtmosphereTexture.js";import{makePiecewiseLinearFunction as D}from"../support/mathUtils.js";import{glLayout as w}from"../support/buffer/glUtil.js";import{newLayout as A}from"../support/buffer/InterleavedLayout.js";import{Default3D as F}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{createQuadVAO as q}from"../webgl-engine/lib/glUtil3D.js";import{project as M}from"../webgl-engine/lib/Util.js";import S from"../../webgl/BufferObject.js";import T from"../../webgl/Texture.js";import{vertexCount as W}from"../../webgl/Util.js";import k from"../../webgl/VertexArrayObject.js";const L=e.getLogger("esri.views.3d.environment.SimpleAtmosphere"),O=128,H=-j,P=0,z=50,B=()=>1-511/512,I=D([[50,.1015625],[500,.21875],[5e3,1-250/512],[5e4,.4140625]]);class E{constructor(e){this.view=e,this.slot=14,this._renderData={texV:m(),silCircleCenter:g(),silCircleV1:g(),silCircleV2:g(),altitudeFade:0,innerScale:0,undergroundFadeAlpha:0},this._fadeVaoCount=0,this._readyResolver=i(),this._readyController=s(),this.texV1=1,this.isOnMars=V(e.spatialReference);const t=x(e.spatialReference);this.planetRadius=t.radius,this.outerRimWidth=t.outerAtmosphereRimWidth,this.innerRimFactor=(this.planetRadius+H)/this.planetRadius,this.middleRimFactor=(this.planetRadius+P)/this.planetRadius,this.outerRimFactor=(this.planetRadius+this.outerRimWidth)/this.planetRadius,this.texV0=P/this.outerRimWidth,this.texVScale=this.texV1-this.texV0}get canRender(){return null!=this._texture}when(){return this._readyResolver.promise}initializeRenderContext(e){const t=e.renderContext.rctx;this._cameraChangeHandle=o(this.view,"state.camera",(()=>e.requestRender()),!0);const r=new v;r.geometry=0,this._atmosphereConeTechnique=e.shaderTechniqueRep.acquire(y,r),r.geometry=2,this._atmosphereUndergroundTechnique=e.shaderTechniqueRep.acquire(y,r),this._vao=this._createRibbon(t),this._vaoCount=W(this._vao,"geometry"),this._fadeVao=q(t),this._fadeVaoCount=W(this._fadeVao,"geometry"),C(this.isOnMars?b:U,{signal:this._readyController.signal}).then((r=>{this._texture=new T(t,{pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!0},r),e.requestRender(),this._readyController=null,this._readyResolver.resolve()})).catch((e=>{a(e)||L.error("Unable to initialize simple atmosphere: image request failed",e),this._readyResolver.reject()}))}uninitializeRenderContext(){this.destroy()}destroy(){this._readyResolver.reject(),this._cameraChangeHandle&&(this._cameraChangeHandle.remove(),this._cameraChangeHandle=null),this._texture&&(this._texture.dispose(),this._texture=null),this._fadeVao&&(this._fadeVao.dispose(),this._fadeVao=null),this._vao&&(this._vao.dispose(),this._vao=null),this._readyController&&(this._readyController.abort(),this._readyController=null)}render(e){if(e.slot!==this.slot||0!==e.pass)return!1;this._update(e.camera);const t=e.rctx;if(this._atmosphereConeTechnique.bindPipelineState(t),this._renderData.undergroundFadeAlpha<1){const r=this._atmosphereConeTechnique.program;t.useProgram(r),r.setUniformMatrix4fv("proj",e.camera.projectionMatrix),r.setUniformMatrix4fv("view",e.camera.viewMatrix),r.setUniform3fv("silCircleCenter",this._renderData.silCircleCenter),r.setUniform3fv("silCircleV1",this._renderData.silCircleV1),r.setUniform3fv("silCircleV2",this._renderData.silCircleV2),r.setUniform2fv("texV",this._renderData.texV),r.bindTexture(this._texture,"tex"),e.scenelightingData.setLightDirectionUniform(r),r.setUniform1f("altitudeFade",this._renderData.altitudeFade),r.setUniform1f("innerScale",this._renderData.innerScale),t.bindVAO(this._vao),t.drawArrays(4,0,this._vaoCount)}if(this._renderData.undergroundFadeAlpha>0){const r=this._atmosphereUndergroundTechnique.program;t.useProgram(r),r.setUniform1f("undergroundFadeAlpha",this._renderData.undergroundFadeAlpha),e.scenelightingData.setLightDirectionUniform(r),r.setUniform3fv("cameraPosition",e.camera.eye),t.bindVAO(this._fadeVao),t.drawArrays(5,0,this._fadeVaoCount)}return!0}_update(e){const i=g(),s=this.planetRadius,a=c(e.eye),o=a-s;if(o<0){const e=Math.min(-o/5e3,1);this._renderData.undergroundFadeAlpha=e}else this._renderData.undergroundFadeAlpha=0;const n=Math.max(z,o),h=s+H;this._renderData.innerScale=Q(s+n,s,h)-1,this._renderData.altitudeFade=R(o),d(i,e.eye,(s+z)/a),G(i,e.center,e.up,s,this._renderData);const m=this._computeScreenRimWidth(e,i,e.up,this._renderData),u=B(),p=I(o);let f=this.texV0+u*this.texVScale,_=this.texV0+m*p*this.texVScale;if(o>z){G(e.eye,e.center,e.up,s,this._renderData);const i=this._computeScreenRimWidth(e,e.eye,e.up,this._renderData),a=r((i-1.5)/(m-1.5),0,1);f=this.texV0+a*u*this.texVScale,_=this.texV0+t(this.texV1,m*p,a)*this.texVScale}l(this._renderData.texV,f,_)}_createRibbon(e){const t=new Float32Array(3+3*O*3),r=new Uint32Array(3*O*5);t[0]=0,t[1]=0,t[2]=-1;for(let a=0;a<O;a++){const e=9*a+3;t[e+0]=a,t[e+1]=this.innerRimFactor,t[e+2]=-1,t[e+3]=a,t[e+4]=this.middleRimFactor,t[e+5]=0,t[e+6]=a,t[e+7]=this.outerRimFactor,t[e+8]=1;const i=3*a+1,s=a===O-1?1:i+3,o=15*a;r[o+0]=i,r[o+1]=i+1,r[o+2]=s+1,r[o+3]=s+1,r[o+4]=s,r[o+5]=i,r[o+6]=i+1,r[o+7]=i+2,r[o+8]=s+2,r[o+9]=s+2,r[o+10]=s+1,r[o+11]=i+1,r[o+12]=i,r[o+13]=s,r[o+14]=0}const i=X.createBuffer(r.length),s=i.position;for(let a=0;a<r.length;++a){const e=3*r[a];s.set(a,0,t[e]),s.set(a,1,t[e+1]),s.set(a,2,t[e+2])}return new k(e,F,{geometry:w(X)},{geometry:S.createVertex(e,35044,i.buffer)})}_computeScreenRimWidth(e,t,r,i){return u(K,i.silCircleCenter,i.silCircleV2),d(N,K,this.outerRimFactor),n(J,t,K,r),M(K,J,e.projectionMatrix,e.viewport),M(N,J,e.projectionMatrix,e.viewport),p(K,N)/e.height}}function G(e,t,r,i,s){const a=c(e),o=i*Math.sqrt(a*a-i*i)/a,n=Math.sqrt(i*i-o*o),h=s.silCircleV1,l=s.silCircleV2;return d(s.silCircleCenter,e,n/a),f(h,e,t),_(h)<1&&f(h,e,r),d(h,h,o/c(h)),f(l,h,e),d(l,l,o/c(l)),o}const J=h(),K=g(),N=g();function Q(e,t,r){return e*e/(Math.sqrt(e*e-t*t)*Math.sqrt(e*e-r*r)+t*r)}const X=A().vec3f("position");export default E;
