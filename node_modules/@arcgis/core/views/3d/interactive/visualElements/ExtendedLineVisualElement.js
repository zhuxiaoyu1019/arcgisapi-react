/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import"../../../../core/has.js";import e from"../../../../core/Handles.js";import{isSome as t,unwrap as s,isNone as i,unwrapOr as r}from"../../../../core/maybe.js";import{g as n,f as a,k as l,o}from"../../../../chunks/vec3.js";import{c as h,f as d}from"../../../../chunks/vec3f64.js";import{g as p,c as _}from"../../../../chunks/vec4.js";import{f as u,a as c}from"../../../../chunks/vec4f32.js";import{fromRay as f,getStart as m,getEnd as y,create as g}from"../../../../geometry/support/clipRay.js";import{intersectClipRay as x}from"../../../../geometry/support/frustum.js";import{fromPoints as w,pointAt as b,create as R}from"../../../../geometry/support/lineSegment.js";import{create as E,fromPoints as O}from"../../../../geometry/support/ray.js";import{LaserlineVisualElement as j}from"./LaserlineVisualElement.js";import{Object3DVisualElement as C}from"./Object3DVisualElement.js";import v from"../../webgl-engine/lib/GeometryUtil.js";import{RibbonLineMaterial as M}from"../../webgl-engine/materials/RibbonLineMaterial.js";class P extends C{constructor(t){super(t),this._ray=E(),this._externalResources=null,this._handles=new e,this._isWorldDown=!1,this._start=h(),this._end=d(1,0,0),this._width=1,this._color=u(1,0,1,1),this._polygonOffset=!1,this._writeDepthEnabled=!0,this._innerWidth=0,this._innerColor=u(1,1,1,1),this._stippleIntegerRepeats=!0,this._stipplePattern=null,this._stippleOffColor=null,this._falloff=0,this._extensionType=0,this._laserlineStyle=null,this._laserlineEnabled=!1,this._renderOccluded=4,this._fadedExtensions=G,this.applyProps(t)}createExternalResources(){const e=new M(this.materialParameters);this._handles.add(this.view.state.watch("camera",(()=>{this.updateGeometry()})));const t=new j({view:this.view,attached:this._laserlineEnabled});this._externalResources={material:e,laserline:t}}destroyExternalResources(){t(this._externalResources)&&this._externalResources.laserline.destroy(),this._externalResources=null,this._handles.removeAll()}forEachExternalMaterial(e){t(this._externalResources)&&e(this._externalResources.material)}createGeometries(e){const t=[h(),h()],i=3===this.extensionType;i&&t.push(h(),h());const r=i?new Float32Array([1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0]):null,n=v.createPolylineGeometry(t,null,r);e.addGeometry(n,s(this._externalResources).material),this.updateVertices(n)}updateVisibility(e){super.updateVisibility(e),t(this._externalResources)&&(this._externalResources.laserline.visible=e)}setStartEndFromWorldDownAtLocation(e){this._isWorldDown=!0,n(this._start,e),this.view.renderCoordsHelper.worldUpAtPosition(e,this._end),a(this._end,e,this._end),O(this._start,this._end,this._ray),this.updateGeometry()}get start(){return this._start}set start(e){this._isWorldDown=!1,l(this._start,e)||(n(this._start,e),O(this._start,this._end,this._ray),this.updateGeometry())}get end(){return this._end}set end(e){this._isWorldDown=!1,l(this._end,e)||(n(this._end,e),O(this._start,this._end,this._ray),this.updateGeometry())}get width(){return this._width}set width(e){e!==this._width&&(this._width=e,this.updateMaterial())}get color(){return this._color}set color(e){p(e,this._color)||(_(this._color,e),this.updateMaterial())}get polygonOffset(){return this._polygonOffset}set polygonOffset(e){e!==this._polygonOffset&&(this._polygonOffset=e,this.updateMaterial())}get writeDepthEnabled(){return this._writeDepthEnabled}set writeDepthEnabled(e){this._writeDepthEnabled!==e&&(this._writeDepthEnabled=e,this.updateMaterial())}get innerWidth(){return this._innerWidth}set innerWidth(e){e!==this._innerWidth&&(this._innerWidth=e,this.updateMaterial())}get innerColor(){return this._innerColor}set innerColor(e){p(e,this._innerColor)||(_(this._innerColor,e),this.updateMaterial())}get stippleIntegerRepeats(){return this._stippleIntegerRepeats}set stippleIntegerRepeats(e){e!==this._stippleIntegerRepeats&&(this._stippleIntegerRepeats=e,this.updateMaterial())}get stipplePattern(){return this._stipplePattern}set stipplePattern(e){const s=t(e)!==t(this._stipplePattern);this._stipplePattern=e,s?this.recreate():this.updateMaterial()}get stippleOffColor(){return this._stippleOffColor}set stippleOffColor(e){(i(e)||i(this._stippleOffColor)||!p(e,this._stippleOffColor))&&(this._stippleOffColor=t(e)?c(e):null,this.updateMaterial())}get falloff(){return this._falloff}set falloff(e){e!==this._falloff&&(this._falloff=e,this.updateMaterial())}get extensionType(){return this._extensionType}set extensionType(e){e!==this._extensionType&&(this._extensionType=e,this.updateGeometry())}get _laserlineAttached(){return this._laserlineEnabled&&t(this._laserlineStyle)}get laserlineStyle(){return this._laserlineStyle}set laserlineStyle(e){this._laserlineStyle=e,t(this._externalResources)&&(this._externalResources.laserline.attached=this._laserlineAttached,t(e)&&(this._externalResources.laserline.style=e))}get laserlineEnabled(){return this._laserlineEnabled}set laserlineEnabled(e){this._laserlineEnabled!==e&&(this._laserlineEnabled=e,t(this._externalResources)&&(this._externalResources.laserline.attached=this._laserlineAttached))}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this.updateMaterial())}get fadedExtensions(){return this._fadedExtensions}set fadedExtensions(e){this._fadedExtensions=r(e,G),this.recreateGeometry()}updateMaterial(){if(i(this._externalResources))return;this._externalResources.material.setParameterValues(this.materialParameters)}get materialParameters(){return{width:this._width,color:this._color,stippleOffColor:this._stippleOffColor,stipplePattern:this._stipplePattern,stippleIntegerRepeats:this._stippleIntegerRepeats,innerWidth:this._innerWidth,innerColor:this._innerColor,falloff:this._falloff,polygonOffset:this._polygonOffset,renderOccluded:this._renderOccluded,writeDepth:this._writeDepthEnabled}}updateGeometry(){t(this.object)&&this.updateVertices(this.object.geometries[0])}updateVertices(e){const s=3===this._extensionType?this.updateLineSegmentFinite(S):this.updateLineSegmentInfinite(this._extensionType,S);this.updateVertexAttributes(e,s),t(this._externalResources)&&(this._externalResources.laserline.intersectsLine=s)}updateLineSegmentFinite(e){return w(this._start,this._end,e)}updateLineSegmentInfinite(e,t){const s=this.view.state.camera;switch(f(this._ray,D),e){case 0:D.c0=-Number.MAX_VALUE;break;case 1:case 2:{const e=this._ray.origin,t=r(this.view.elevationProvider.getElevation(e[0],e[1],e[2],this.view.renderCoordsHelper.spatialReference,"ground"),0),s=this.view.renderCoordsHelper.getAltitude(e);this._isWorldDown&&s<t&&o(D.ray.direction,D.ray.direction),2===this._extensionType&&null!=t&&(D.c1=Math.abs(s-t));break}}if(!x(s.frustum,D))return w(this._start,this._end,t);const i=m(D,A),n=y(D,W);return w(i,n,t)}updateVertexAttributes(e,s){const i=e.getMutableAttribute("position").data;if(3===this.extensionType){const e=b(s,-this.fadedExtensions.start,A);i[0]=e[0],i[1]=e[1],i[2]=e[2];const t=b(s,0,A);i[3]=t[0],i[4]=t[1],i[5]=t[2];const r=b(s,1,A);i[6]=r[0],i[7]=r[1],i[8]=r[2];const n=b(s,1+this.fadedExtensions.end,A);i[9]=n[0],i[10]=n[1],i[11]=n[2]}else{const e=b(s,0,A);i[0]=e[0],i[1]=e[1],i[2]=e[2];const t=b(s,1,A);i[3]=t[0],i[4]=t[1],i[5]=t[2]}t(this.object)&&this.object.geometryVertexAttrsUpdated(0)}}const D=g(),A=h(),W=h(),S=R(),V=1/3,G={start:V,end:V};export{P as ExtendedLineVisualElement};
