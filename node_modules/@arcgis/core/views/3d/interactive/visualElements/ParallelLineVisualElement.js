/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../core/Handles.js";import{unwrap as t,isSome as s,isNone as r}from"../../../../core/maybe.js";import{createScreenPointArray as i}from"../../../../core/screenUtils.js";import{I as o}from"../../../../chunks/mat4f64.js";import{f as a,a as c,b as h,s as n,i as l}from"../../../../chunks/vec2.js";import{k as d,g as m,n as u,f as _,b as p}from"../../../../chunks/vec3.js";import{c as f,f as g}from"../../../../chunks/vec3f64.js";import{g as y,c as j}from"../../../../chunks/vec4.js";import{f as w}from"../../../../chunks/vec4f32.js";import{Object3DVisualElement as x}from"./Object3DVisualElement.js";import b from"../../webgl-engine/lib/GeometryUtil.js";import{RibbonLineMaterial as G}from"../../webgl-engine/materials/RibbonLineMaterial.js";class R extends x{constructor(t){super(t),this._handles=new e,this._location=f(),this._direction=g(1,0,0),this._width=1,this._offset=1,this._length=18,this._color=w(1,0,1,1),this._renderOccluded=4,this.applyProps(t)}get location(){return this._location}set location(e){d(this._location,e)||(m(this._location,e),this.updateGeometry())}get direction(){return this._direction}set direction(e){d(this._direction,e)||(m(this._direction,e),this.updateGeometry())}setDirectionFromPoints(e,t){u(this._direction,_(this._direction,t,e)),this.updateGeometry()}get width(){return this._width}set width(e){e!==this._width&&(this._width=e,this.updateMaterial())}get offset(){return this._offset}set offset(e){e!==this._offset&&(this._offset=e,this.updateGeometry())}get length(){return this._length}set length(e){e!==this._length&&(this._length=e,this.updateGeometry())}get color(){return this._color}set color(e){y(e,this._color)||(j(this._color,e),this.updateMaterial())}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this.updateMaterial())}createExternalResources(){const e=new G(this.materialParameters);this._handles.add(this.view.state.watch("camera",(()=>{this.updateGeometry()}))),this._externalResources={material:e}}destroyExternalResources(){this._handles.removeAll(),this._externalResources=null}createGeometries(e){const s=b.createPolylineGeometry([f(),f()]),r=b.createPolylineGeometry([f(),f()]),i=t(this._externalResources).material;e.addGeometry(s,i,o),e.addGeometry(r,i,o),this.updateVertices(e)}forEachExternalMaterial(e){s(this._externalResources)&&e(this._externalResources.material)}updateMaterial(){if(r(this._externalResources))return;this._externalResources.material.setParameterValues(this.materialParameters)}get materialParameters(){return{width:this._width,color:this._color,renderOccluded:this._renderOccluded}}updateGeometry(){const e=this.object;r(e)||this.updateVertices(e)}updateVertices(e){const t=this.view.state.camera;t.projectToScreen(this.location,V),p(O,this.location,this.direction),t.projectToScreen(O,v),a(v,c(v,v,V)),this.updateVertexAttributes(t,e,0,V,v,1),this.updateVertexAttributes(t,e,1,V,v,-1)}updateVertexAttributes(e,t,s,r,i,o){const a=t.geometryRecords[s].geometry.getMutableAttribute("position").data,c=h(P,n(P,i[1]*o,i[0]*-o),this.offset+this.width/2),d=l(k,l(k,l(k,r,h(k,i,this.length/2)),c),c),m=l(M,d,h(M,i,-this.length));e.unprojectFromScreen(d,O),a[0]=O[0],a[1]=O[1],a[2]=O[2],e.unprojectFromScreen(m,O),a[3]=O[0],a[4]=O[1],a[5]=O[2],t.geometryVertexAttrsUpdated(s)}}const O=f(),V=i(),v=i(),P=i(),k=i(),M=i();export{R as ParallelLineVisualElement};
