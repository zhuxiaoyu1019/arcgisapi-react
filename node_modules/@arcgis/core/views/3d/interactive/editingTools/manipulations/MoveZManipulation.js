/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{darken as t}from"../../../../../core/colorUtils.js";import e from"../../../../../core/Evented.js";import r from"../../../../../core/Handles.js";import{clamp as a}from"../../../../../core/mathUtils.js";import{unwrap as i}from"../../../../../core/maybe.js";import{t as o,b as s,s as n}from"../../../../../chunks/mat4.js";import{c as l}from"../../../../../chunks/mat4f64.js";import{j as m,f as p,n as u,d as c,c as h,a as d}from"../../../../../chunks/vec3.js";import{c as f,f as M}from"../../../../../chunks/vec3f64.js";import{Manipulator3D as _}from"../../Manipulator3D.js";import{createManipulatorMaterial as g}from"../../manipulatorUtils.js";import{screenToZConstrained as y}from"../dragEventPipeline3D.js";import{settings as j}from"../settings.js";import{DISC_RADIUS as v}from"./config.js";import{Manipulation as w}from"./Manipulation.js";import{createGraphicMoveDragPipeline as k}from"./moveUtils.js";import z from"../../../webgl-engine/lib/GeometryUtil.js";import{createManipulatorDragEventPipeline as b,addScreenDelta as P}from"../../../../interactive/dragEventPipeline.js";class x extends w{constructor(t){super(),this._handles=new r,this._radius=v,this.events=new e,this._tool=t.tool,this._view=t.view,null!=t.radius&&(this._radius=t.radius),this.createManipulator(),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}destroy(){this._handles.destroy(),this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()}))}forEachManipulator(t){t(this._manipulator,0)}createGraphicDragPipeline(t,e,r){const a=i(e.graphic.geometry).spatialReference;return k(e,r,(e=>this.createDragPipeline(((r,a,i,o,s)=>e(r,t(r,a,i,o,s),i)),a)),this._view.state.viewingMode)}createDragPipeline(t,e){const r=this._view;return b(this._manipulator,((a,i,o,s,n)=>{const l=i.next((t=>({...t,manipulatorType:0}))).next(y(r,a.renderLocation,e)).next(P());t(a,l,o,s,n)}))}get radius(){return this._radius}set radius(t){t!==this._radius&&(this._radius=t,this.updateManipulator())}updateManipulator(){const e=this._radius/v,r=j.zManipulator.height*e,a=j.zManipulator.coneHeight*e,i=j.zManipulator.coneWidth*e,m=j.zManipulator.width*e,p=[M(0,0,0),M(0,0,r)],u=z.createTubeGeometry(p,m/2,16,!1),c=z.createConeGeometry(a,i/2,16,!1),h=[M(0,0,0),M(0,0,r+a)],d=(t=>{const e=l();if(o(e,e,[0,0,r]),s(e,e,Math.PI/2),t){const r=1+2*t/i;n(e,e,[r,r,r])}return e})(0),f=(e,r)=>{const a=t(j.zManipulator.color,r);return[a.r/255,a.g/255,a.b/255,j.zManipulator.color.a*e]},_=g(f(1,.25),1),y=g(f(1,0),1),w=g(f(.7,0),j.zManipulator.renderOccluded),k=g(f(.85,0),j.zManipulator.renderOccluded);this._manipulator.renderObjects=[{geometry:c,transform:d,material:_,stateMask:1},{geometry:u,material:_,stateMask:1},{geometry:c,transform:d,material:y,stateMask:2},{geometry:u,material:y,stateMask:2},{geometry:c,transform:d,material:w,stateMask:1},{geometry:u,material:w,stateMask:1},{geometry:c,transform:d,material:k,stateMask:2},{geometry:u,material:k,stateMask:2}],this._manipulator.radius=m/2+2,this._manipulator.collisionType={type:"line",paths:[h]}}createManipulator(){const t=new _({view:this._view,autoScaleRenderObjects:!1,worldSized:!1,selectable:!1,cursor:"ns-resize",elevationInfo:this.elevationInfo,worldOriented:!0,collisionPriority:1.6});t.applyObjectTransform=t=>{const e=this._view.state.camera,r=D;this._view.renderCoordsHelper.toRenderCoords(this._manipulator.elevationAlignedLocation,r);const i=m(e.eye,r),o=e.computeRenderPixelSizeAtDist(i),s=p(E,r,e.eye);u(s,s);const n=O;this._view.renderCoordsHelper.worldUpAtPosition(D,n);const l=Math.abs(c(s,n)),f=h(E,s,n),M=h(E,f,n),_=a(l,.01,1),g=1-Math.sqrt(1-_*_)/_/e.fullWidth,y=this._radius/v,w=j.zManipulator.width*y;d(M,u(M,M),(1/g-1)*i+o*w),t[12]-=E[0],t[13]-=E[1],t[14]-=E[2]},this._manipulator=t,this.updateManipulator()}get test(){return{manipulator:this._manipulator}}}const D=f(),E=f(),O=f();export{x as MoveZManipulation};
