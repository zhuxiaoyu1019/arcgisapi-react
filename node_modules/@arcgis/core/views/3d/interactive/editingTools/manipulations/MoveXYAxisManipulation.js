/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import t from"../../../../../Color.js";import a from"../../../../../core/Evented.js";import r from"../../../../../core/Handles.js";import{handlesGroup as e}from"../../../../../core/handleUtils.js";import{unwrap as i}from"../../../../../core/maybe.js";import{q as o,i as s,z as n,m as l,c as p,v as u}from"../../../../../chunks/mat4.js";import{c as h}from"../../../../../chunks/mat4f64.js";import{s as m}from"../../../../../chunks/vec3.js";import{f as c}from"../../../../../chunks/vec3f64.js";import{sv3d as d,sm4d as f}from"../../../../../geometry/support/vectorStacks.js";import{getGraphicEffectiveElevationInfo as _}from"../../../../../support/elevationInfoUtils.js";import{Manipulator3D as g}from"../../Manipulator3D.js";import{screenToMapXYAtLocation as M}from"../dragEventPipeline3D.js";import{colors as w}from"../settings.js";import{DISC_RADIUS as v,DISC_HEIGHT as j,DISC_TRANSLATE_ARROW_OFFSET as y,DISC_TRANSLATE_ARROW_SIZE as A}from"./config.js";import{Manipulation as I}from"./Manipulation.js";import{createGraphicMoveDragPipeline as T}from"./moveUtils.js";import b from"../../../webgl-engine/lib/GeometryUtil.js";import{ColorMaterial as D}from"../../../webgl-engine/materials/ColorMaterial.js";import{createManipulatorDragEventPipeline as x,dragAtLocation as P,constrainToMapAxis as k,addScreenDelta as E}from"../../../../interactive/dragEventPipeline.js";class S extends I{constructor(t){super(),this._handles=new r,this._arrowManipulatorInfos=new Array,this._opaqueMaterial=this.createMaterial(),this._transparentMaterial=this.createMaterial(.5),this._angle=0,this._scale=1,this._radius=v,this._updateAfterDrag=!1,this.events=new a,this._tool=t.tool,this._view=t.view,null!=t.radius&&(this._radius=t.radius),this._createManipulators(),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}set orthogonalAvailable(t){this._arrowManipulatorInfos[1].manipulator.available=t,this._arrowManipulatorInfos[3].manipulator.available=t}destroy(){this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()})),this._handles.removeAll(),this._tool=null,this._view=null,this._arrowManipulatorInfos.length=0}forEachManipulator(t){this._arrowManipulatorInfos.map((({manipulator:a})=>t(a,1)))}createGraphicDragPipeline(t,a,r){const e=a.graphic,o=_(e),s=i(e.geometry).spatialReference;return T(a,r,(a=>this.createDragPipeline(((r,e,i,o,s)=>a(r,t(r,e,i,o,s),i)),o,s,e)),this._view.state.viewingMode)}createDragPipeline(t,a,r,i){return e(this._arrowManipulatorInfos.map((({manipulator:e},o)=>x(e,((e,s,n,l,p)=>{const u=s.next((t=>({...t,manipulatorType:1}))).next(P(this._view,e.elevationAlignedLocation)).next(M(this._view,e.elevationAlignedLocation,a,r,i)).next(k(e.location,this.angle+(o+1)*Math.PI*.5)).next(E());t(e,u,n,l,p)})))))}get angle(){return this._angle}set angle(t){this._angle=t,this.dragging?this._updateAfterDrag=!0:this._updateManipulatorTransform()}get displayScale(){return this._scale}set displayScale(t){this._scale=t,this._updateManipulatorTransform()}get radius(){return this._radius}set radius(t){this._radius!==t&&(this._radius=t,this._updateManipulators())}_updateManipulators(){for(let t=0;t<this._arrowManipulatorInfos.length;t++)this._updateArrowManipulator(this._arrowManipulatorInfos[t],t);this._updateManipulatorTransform()}_updateArrowManipulator({manipulator:t,transform:a},r){const e=this._radius/v,i=A*e,p=i*Math.sqrt(3)/2,u=b.createExtrudedTriangle(p,i/2,i/2,j);b.transformInPlace(u,o(f.get(),m(d.get(),0,-p/3,0))),t.renderObjects=[{geometry:u,material:this._opaqueMaterial,stateMask:2},{geometry:u,material:this._transparentMaterial,stateMask:1}],t.radius=p/3*2*1.2;const h=s(f.get());n(h,r*Math.PI/2);const c=s(f.get());o(c,m(d.get(),0,y*e,0)),l(a,h,c)}_createManipulators(){for(let t=0;t<4;t++){const a=this._createArrowManipulator(t);this._arrowManipulatorInfos.push(a)}this._updateManipulatorTransform()}_updateManipulatorTransform(){const t=this.angle,a=s(f.get());p(a,a,t,c(0,0,1));const r=u(f.get(),m(d.get(),this.displayScale,this.displayScale,this.displayScale)),e=s(f.get());l(e,r,a);for(const i of this._arrowManipulatorInfos){const t=l(f.get(),e,i.transform);i.manipulator.modelTransform=t}}_createArrowManipulator(t){const a=new g({view:this._view,autoScaleRenderObjects:!1,worldOriented:!0,focusMultiplier:1,touchMultiplier:1,collisionType:{type:"disc",direction:c(0,0,1)}}),r={manipulator:a,transform:h()};return this._updateArrowManipulator(r,t),this._handles.add(a.events.on("drag",(t=>{this._updateAfterDrag&&"end"===t.action&&!this.dragging&&(this._updateManipulatorTransform(),this._updateAfterDrag=!1)}))),r}createMaterial(a=1){const r=t.toUnitRGBA(w.main);return r[3]*=a,new D({color:r,transparent:1!==a,cullFace:2,renderOccluded:2})}get test(){return{arrowManipulators:this._arrowManipulatorInfos.map((({manipulator:t})=>t))}}}export{S as MoveXYAxisManipulation};
