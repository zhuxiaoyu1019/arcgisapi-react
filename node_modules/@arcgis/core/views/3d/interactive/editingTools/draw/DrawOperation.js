/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../geometry.js";import t from"../../../../../core/Evented.js";import{HandleOwner as i}from"../../../../../core/HandleOwner.js";import r from"../../../../../core/Handles.js";import{clone as n}from"../../../../../core/lang.js";import{isSome as s,abortMaybe as o,isNone as a}from"../../../../../core/maybe.js";import{createTask as p}from"../../../../../core/promiseUtils.js";import{createScreenPoint as h}from"../../../../../core/screenUtils.js";import{property as c}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/has.js";import"../../../../../core/Logger.js";import{subclass as d}from"../../../../../core/accessorSupport/decorators/subclass.js";import{pointEquals as l}from"../../../../../layers/graphics/dehydratedFeatureComparison.js";import{SnappingPipeline as m}from"../../SnappingDragPipelineStep.js";import{SnappingVisualizer3D as g}from"../../SnappingVisualizer3D.js";import{DrawManipulator as u}from"./DrawManipulator.js";import{defaultDrawingMode as y}from"../../../../draw/DrawingMode.js";import{createCoordinateHelper as v}from"../../../../interactive/coordinateHelper.js";import{createManipulatorDragEventPipeline as _}from"../../../../interactive/dragEventPipeline.js";import{EditGeometryHelper as x}from"../../../../interactive/editGeometry/EditGeometryHelper.js";import{SnappingContext as f}from"../../../../interactive/snapping/SnappingContext.js";import{TaskPriority as T,ImmediateTask as S}from"../../../../support/Scheduler.js";import{EditGeometry as V,Component as w}from"../../../../interactive/editGeometry/EditGeometry.js";import M from"../../../../../geometry/Point.js";let D=class extends(t.EventedMixin(i)){constructor(e){super(e),this._manipulator=null,this._stagedVertex=null,this.elevationInfo=null,this.snapToSceneEnabled=null,this._handles=new r,this._snappingPipeline=new m,this._createOperationCompleted=!1,this._pointerDownStates=new Set,this._snappingTask=null}set drawingMode(e){this._set("drawingMode",null!=e?e:y)}get updating(){return this.updatingHandles.updating}get isCompleted(){return this._createOperationCompleted}get _snappingEnabled(){return s(this.snappingManager)&&this.snappingManager.options.effectiveEnabled}initialize(){var e,t;this.coordinateHelper=v(this.hasZ,this.hasM,this.view.spatialReference,this.view.viewingMode);const i=null==(e=this.view)||null==(t=e.resourceController)?void 0:t.scheduler;this._frameTask=i?i.registerTask(T.SNAPPING):S,this._editGeometry=new x(new V(this.coordinateHelper),"segment"===this.geometryType?"polyline":this.geometryType),this._activeComponent=new w(this._editGeometry.editGeometry),this._editGeometry.editGeometry.components.push(this._activeComponent),this._editGeometry.on(["vertex-add","vertex-update","vertex-remove"],(e=>{const t=e.vertices.map((e=>({componentIndex:0,vertexIndex:e.index,coordinates:this.coordinateHelper.toArray(e.pos)}))),i=t.map((e=>e.coordinates));switch(e.type){case"vertex-add":this.emit(e.type,{...e,added:i,vertices:t});break;case"vertex-update":this.emit(e.type,{...e,updated:i,vertices:t});break;case"vertex-remove":this.emit(e.type,{...e,removed:i,vertices:t})}})),this._manipulator=new u({grabbableForEvent:e=>"click"!==this.drawingMode||"touch"===e.pointerType&&this._snappingEnabled&&1===this._pointerDownStates.size}),this.manipulators.add(this._manipulator),this._manipulator.grabbable="point"!==this.geometryType;const r=this.createManipulatorDragPipeline(this._manipulator),n=this._manipulator.events.on("immediate-double-click",(e=>{this._manipulator.dragging||"point"===this.geometryType||(this.complete(),e.stopPropagation())})),a=this._manipulator.events.on("immediate-click",(e=>{if(this._manipulator.dragging)return;const t=this._activeComponent,i=this._closeOnClickVertexIndex(e.screenPoint);if(s(i))this.discardStagedVertex(),this.complete();else{const i=this._screenToMap(e.screenPoint);if(s(i))switch(this.drawingMode){case"freehand":"point"===this.geometryType&&(this.hasStagedVertex?this.commitStagedVertex():this._editGeometry.appendVertex(this.coordinateHelper.fromPoint(i)),this.complete());break;case"click":case"hybrid":this._snappingTask=o(this._snappingTask),this.hasStagedVertex?this.commitStagedVertex():this._editGeometry.appendVertex(this.coordinateHelper.fromPoint(i)),("point"===this.geometryType||"segment"===this.geometryType&&2===t.vertices.length||"segment"===this.geometryType&&"hybrid"===this.drawingMode&&1===t.vertices.length)&&this.complete()}}e.stopPropagation()}));this._handles.add([r,a,n])}createManipulatorDragPipeline(e){switch(this.drawingMode){case"click":return this.createManipulatorDragPipelineClick(e);case"freehand":return this.createManipulatorDragPipelineFreehand(e);case"hybrid":return this.createManipulatorDragPipelineHybrid(e)}}createManipulatorDragPipelineClick(e){return _(e,((e,t,i,r)=>{const n="touch"===r&&this._snappingEnabled;!this.isCompleted&&n&&(t.next(this._screenToMapDragEventStep()).next((e=>("start"===e.action&&(this.stagedVertex=e.mapStart,("segment"===this.geometryType||n&&0===this.numVertices)&&this.commitStagedVertex()),e))).next(this._snappingPipeline.createSnapDragEventPipelineStep({predicate:()=>n,cancel:i,snappingManager:this.snappingManager,snappingContext:new f({geometry:this._editGeometry,elevationInfo:this.elevationInfo,pointer:r,visualizer:new g}),updatingHandles:this.updatingHandles}),this._snappingPipeline.next).next((e=>(n&&(this.stagedVertex=e.mapEnd,"end"===e.action&&this.commitStagedVertex()),e))).next((e=>("end"===e.action&&("segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()),e))),i.next((()=>{n&&s(this.snappingManager)&&this.snappingManager.doneSnapping()})))}))}createManipulatorDragPipelineFreehand(e){return _(e,((e,t)=>{this.isCompleted||t.next(this._screenToMapDragEventStep()).next((e=>("start"===e.action&&(this.stagedVertex=e.mapStart,"segment"===this.geometryType&&this.commitStagedVertex()),e))).next((e=>{switch(e.action){case"start":case"update":this.stagedVertex=e.mapEnd,"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case"end":this.complete()}return e}))}))}createManipulatorDragPipelineHybrid(e){return _(e,((e,t)=>{this.isCompleted||t.next(this._screenToMapDragEventStep()).next((e=>("start"===e.action&&(this.stagedVertex=e.mapStart,this.commitStagedVertex()),e))).next((e=>{switch(e.action){case"start":case"update":this.stagedVertex=e.mapEnd,"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case"end":"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()}return e}))}))}destroy(){this._handles.destroy(),this._handles=null,this._editGeometry.destroy(),this._frameTask.remove()}onInputEvent(e){switch(e.type){case"pointer-down":this._pointerDownStates.add(e.pointerId);break;case"pointer-up":this._pointerDownStates.delete(e.pointerId)}switch(e.type){case"pointer-move":return this._onPointerMove(e);case"hold":return this._onHold(e)}}get canRedo(){return this._editGeometry.canRedo}redo(){this._editGeometry.redo()}get canUndo(){return this._editGeometry.canUndo}undo(){s(this.snappingManager)&&this.snappingManager.doneSnapping(),this._editGeometry.undo()}complete(e=!1){o(this._snappingTask),s(this.snappingManager)&&this.snappingManager.doneSnapping(),"polyline"===this.geometryType||"polygon"===this.geometryType?this.discardStagedVertex():this.commitStagedVertex();const t="polyline"===this.geometryType&&this.numVertices<2||"polygon"===this.geometryType&&this.numVertices<3;this._createOperationCompleted=!t,(this.isCompleted||e)&&this.emit("complete",{vertices:this.vertices.map(((e,t)=>({componentIndex:0,vertexIndex:t,coordinates:e}))),aborted:e,type:"complete"})}cancel(){this.complete(!0)}get interactive(){return this._manipulator.interactive}set interactive(e){this._manipulator.interactive=e}get numVertices(){return s(this._stagedVertex)?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}get numCommittedVertices(){return this._activeComponent.vertices.length}get vertices(){const e=this.committedVertices;return s(this._stagedVertex)&&e.push(this.coordinateHelper.pointToArray(this._stagedVertex)),e}get committedVertices(){return this._activeComponent.vertices.map((e=>this.coordinateHelper.toArray(e.pos)))}get spatialReference(){return this.view.spatialReference}get hasStagedVertex(){return s(this._stagedVertex)}get stagedVertex(){return this._stagedVertex}set stagedVertex(e){if(a(e))this.discardStagedVertex();else{if(a(this._stagedVertex))this._stagedVertex=n(e);else{if(l(this._stagedVertex,e))return;this._stagedVertex.x=e.x,this._stagedVertex.y=e.y,this._stagedVertex.z=e.z,this._stagedVertex.m=e.m,this._stagedVertex.hasZ=e.hasZ,this._stagedVertex.hasM=e.hasM,this._stagedVertex.spatialReference=e.spatialReference}this.emit("cursor-update",{updated:null,vertices:[{componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(e)}],operation:"apply",type:"vertex-update"})}}commitStagedVertex(){if(this._snappingTask=o(this._snappingTask),s(this._stagedVertex)){const e=this._stagedVertex;this._stagedVertex=null,this._editGeometry.appendVertex(this.coordinateHelper.fromPoint(e))}}discardStagedVertex(){this._stagedVertex=null}_onPointerMove(e){if(o(this._snappingTask),this._manipulator.dragging||this._pointerDownStates.has(e.pointerId)||this._manipulator.grabbing||!this._manipulator.interactive)return;const t=h(e.x,e.y),i=this._closeOnClickVertexIndex(t);if(s(i)){this.discardStagedVertex();const e={componentIndex:0,vertexIndex:i,coordinates:this.coordinateHelper.toArray(this._activeComponent.vertices[i].pos)};this.emit("cursor-update",{updated:null,vertices:[e],operation:"apply",type:"vertex-update"})}else{const i=this._screenToMap(t);if(this._manipulator.cursor=s(i)?"crosshair":null,s(i))if(s(this.snappingManager)){const t=this.snappingManager,r=new f({geometry:this._editGeometry,elevationInfo:this.elevationInfo,pointer:e.pointerType,visualizer:new g});this.stagedVertex=t.update(i,r),this._snappingTask=p((async e=>{const n=await this._frameTask.schedule((()=>t.snap(i,r,e)),e);n.valid&&await this._frameTask.schedule((()=>{this.stagedVertex=n.apply()}),e)})),this.updatingHandles.addPromise(this._snappingTask.promise)}else this.stagedVertex=i}e.stopPropagation()}_onHold(e){o(this._snappingTask),"click"===this.drawingMode&&"touch"===e.pointerType&&this._snappingEnabled&&(this.stagedVertex=e.mapPoint),e.stopPropagation()}_screenToMapDragEventStep(){let e=null;return t=>{if("start"===t.action&&(e=this._screenToMap(t.screenStart)),a(e))return null;const i=this._screenToMap(t.screenEnd);return s(i)?{...t,mapStart:e,mapEnd:i}:null}}_screenToMap(e){return this._getDrawSurface().screenToMap(e)}_mapToScreen(e){return this._getDrawSurface().mapToScreen(e)}_getDrawSurface(){if(!this.coordinateHelper.hasZ)return this.elevationDrawSurface.defaultZ=null,this.elevationDrawSurface;let e=this.defaultZ,t=!1;s(this.elevationInfo)&&"absolute-height"===this.elevationInfo.mode&&(t=!0),s(this.snapToSceneEnabled)&&(t=this.snapToSceneEnabled),s(this.elevationInfo)&&"on-the-ground"===this.elevationInfo.mode&&(t=!1);const i=this._activeComponent.vertices.length;return("segment"===this.geometryType||"polygon"===this.geometryType)&&i>0&&(e=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),t=!1),t?this.sceneDrawSurface:(this.elevationDrawSurface.defaultZ=e,this.elevationDrawSurface)}_vertexWithinPointerDistance(e,t){const i=25,r=this._mapToScreen(e);return!!s(r)&&P(r,t,i)}_closeOnClickVertexIndex(e){const t=this._activeComponent;if("polygon"===this.geometryType&&t.vertices.length>2){if(this._vertexWithinPointerDistance(this.coordinateHelper.toPoint(t.vertices[0].pos,b),e))return 0;if(this._vertexWithinPointerDistance(this.coordinateHelper.toPoint(t.vertices[t.vertices.length-1].pos,b),e))return t.vertices.length-1}return null}};function P(e,t,i){const r=e.x-t.x,n=e.y-t.y;return r*r+n*n<=i}e([c({constructOnly:!0})],D.prototype,"view",void 0),e([c({value:y})],D.prototype,"drawingMode",null),e([c({constructOnly:!0})],D.prototype,"geometryType",void 0),e([c({constructOnly:!0})],D.prototype,"elevationInfo",void 0),e([c()],D.prototype,"snapToSceneEnabled",void 0),e([c({constructOnly:!0})],D.prototype,"manipulators",void 0),e([c({constructOnly:!0})],D.prototype,"hasZ",void 0),e([c({constructOnly:!0})],D.prototype,"hasM",void 0),e([c()],D.prototype,"defaultZ",void 0),e([c({constructOnly:!0})],D.prototype,"sceneDrawSurface",void 0),e([c({constructOnly:!0})],D.prototype,"elevationDrawSurface",void 0),e([c({constructOnly:!0})],D.prototype,"snappingManager",void 0),e([c({readOnly:!0})],D.prototype,"updating",null),D=e([d("esri.views.3d.interactive.editingTools.draw3D.DrawOperation")],D);const b=new M({x:0,y:0,z:0});export{D as DrawOperation};
