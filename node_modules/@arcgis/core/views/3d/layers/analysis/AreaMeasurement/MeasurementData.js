/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{deg2rad as e}from"../../../../../core/mathUtils.js";import t from"../../../../../core/Quantity.js";import{e as s}from"../../../../../chunks/earcut.js";import{s as i,d as o}from"../../../../../chunks/vec2.js";import{a as r}from"../../../../../chunks/vec2f64.js";import{n,i as h,g as a,c as d,o as g,f as l,d as p,a as c,b as m}from"../../../../../chunks/vec3.js";import{c as _}from"../../../../../chunks/vec3f64.js";import{c as u}from"../../../../../chunks/vec4f64.js";import{canProjectWithoutEngine as f,canProjectToWGS84ComparableLonLat as C,projectPointToVector as S,projectPointToWGS84ComparableLonLat as L,projectDirection as R,projectVectorToVector as w}from"../../../../../geometry/projection.js";import{getSphericalPCPF as P,getReferenceEllipsoid as j}from"../../../../../geometry/projectionEllipsoid.js";import A from"../../../../../geometry/SpatialReference.js";import{segmentIntersects as W}from"../../../../../geometry/support/intersectsBase.js";import{segmentLengthGeodesicVector as v,bestFitPlane as I,fitHemisphere as U,triangleAreaEuclidean as G,triangleAreaGeodesic as z,planePointDistance as M,boundingSphere as V}from"../support/measurementUtils.js";import{midpoint as T}from"../support/viewUtils.js";import{makeOrthonormal as F,tangentFrame as y}from"../../../support/mathUtils.js";class k{constructor(e,t){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.areaCentroidWorldCoords=_(),this.areaCentroidRenderCoords=_(),this.geodesicAreaCentroidRenderCoords=_(),this._length=0,this._centroidRenderCoords=_(),this._planeWorldCoords=u(),this._worldUp=_(),this._worldTangent=_(),this._frame=[_(),_(),_()],this._pathVersion=-1,this._validMeasurement=!1,this._tempU=_(),this._tempV=_(),this._tempVec3=_(),this._tempSphere={center:_(),radius:0},this._sceneView=e,this.unitNormalizer=t}update(e,s,i,o){const r=this.unitNormalizer,h=this._sceneView.renderSpatialReference,a=this.unitNormalizer.spatialReference;if(this._pathVersion===e.version&&this._validMeasurement===i)return;this._pathVersion=e.version,this._validMeasurement=i;const d=e.numVertices;this._resize(d);const g=P(s.spatialReference),l=f(s.spatialReference,g)&&C(s.spatialReference),p=this.positionsGeographic,c=this.positionsWorldCoords,m=this.positionsRenderCoords,_=this.positionsSpherical;e.forEachVertexPosition(((e,t)=>{S(e,c[t],a),S(e,m[t],h),l&&(L(e,p[t]),S(e,_[t],g),n(_[t],_[t]))}));const u=this._updatePathLengths(i);if(this.pathLength=this._length>1?new t(r.normalizeDistance(u),"meters"):null,l){const e=this._updateGeodesicPathLengths(i,a);this.geodesicPathLength=this._length>1?new t(e,"meters"):null}else this.geodesicPathLength=null;if(!i)return this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),void this.geodesicIntersectingSegments.clear();this._updateArea(s,r,h,a,o),l&&this._updateGeodesicArea(s)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,unitNormalizer:this.unitNormalizer}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(_()),this.positionsRenderCoords.push(_()),this.positionsProjectedWorldCoords.push(r()),this.positionsFittedRenderCoords.push(_()),this.positionsGeographic.push(_()),this.positionsSpherical.push(_()),this.positionsStereographic.push(r()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorldCoords,s=this.pathSegmentLengths;let i=0;for(let o=0;o<this._length;++o){const r=s[o]=h(t[o],t[(o+1)%this._length]);(o<this._length-1||e)&&(i+=r)}return i}_updateGeodesicPathLengths(e,t){const s=this.positionsGeographic,i=this.geodesicPathSegmentLengths;let o=0;for(let r=0;r<this._length;++r){const n=i[r]=v(s[r],s[(r+1)%this._length],t);(r<this._length-1||e)&&(o+=n)}return o}_updateArea(e,s,o,r,n){const h=e.renderCoordsHelper,_=this.positionsWorldCoords,u=this.positionsRenderCoords,f=this.positionsProjectedWorldCoords,C=this.positionsFittedRenderCoords,S=this._planeWorldCoords,L=this._centroidRenderCoords;T(u,L),h.worldUpAtPosition(L,this._worldUp),h.worldBasisAtPosition(L,0,this._worldTangent),R(L,this._worldUp,o,this._worldUp,r),R(L,this._worldTangent,o,this._worldTangent,r),_.length>2&&I(_,S),this.fittingMode=this._selectFittingMode(S,_,this._worldUp,n);let P=0;if("horizontal"===this.fittingMode){let e=-1/0;u.forEach(((t,s)=>{const i=h.getAltitude(u[s]);i>e&&(e=i,P=s)}))}const j=_[P];let A=S,W=this._worldTangent;"horizontal"===this.fittingMode?A=this._worldUp:"vertical"===this.fittingMode&&(A=this._tempVec3,W=this._worldUp,F(S,this._worldUp,A)),a(this._frame[2],A),F(W,A,this._frame[0]),d(this._frame[1],this._frame[0],this._frame[2]),g(this._frame[1],this._frame[1]);const v=this._tempVec3,U=this._tempU,G=this._tempV;for(let t=0;t<this._length;++t){const e=f[t],s=C[t];l(v,_[t],j),i(e,p(this._frame[0],v),p(this._frame[1],v)),c(U,this._frame[0],e[0]),c(G,this._frame[1],e[1]),m(v,U,G),m(v,v,j),w(v,r,s,o)}this.perimeterLength=this._length>0?new t(s.normalizeDistance(this._updatePerimeterLengths()),"meters"):null,T(C,this.areaCentroidRenderCoords),w(this.areaCentroidRenderCoords,o,this.areaCentroidWorldCoords,r),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?new t(s.normalizeArea(this._computeArea()),"square-meters"):null}_updateGeodesicArea(e){const s=e.renderCoordsHelper,o=this.positionsSpherical,r=this.positionsStereographic,n=this._tempVec3,h=U(o,n);if(!h)return void(this.geodesicArea=null);const a=this._tempU,d=this._tempV;y(n,a,d);for(let t=0;t<this._length;++t){const e=p(o[t],a),s=p(o[t],d),h=p(o[t],n);i(r[t],e/h,s/h)}c(n,n,j(e.spatialReference).radius),s.toRenderCoords(n,P(e.spatialReference),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=h&&0===this.geodesicIntersectingSegments.size?new t(this._computeGeodesicArea(),"square-meters"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths;let s=0;for(let i=0;i<this._length;++i){s+=t[i]=o(e[i],e[(i+1)%this._length])}return s}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];W(o,r,n,h)&&(t.add(s),t.add(i))}}_computeArea(){const e=this.positionsProjectedWorldCoords,t=x(e,2),i=this.triangleIndices=new Uint32Array(s(t,[],2));let o=0;for(let s=0;s<i.length;s+=3)o+=G(e[i[s]],e[i[s+1]],e[i[s+2]]);return o}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];W(o,r,n,h)&&(t.add(s),t.add(i))}}_computeGeodesicArea(){const e=this.positionsGeographic,t=x(this.positionsStereographic,2),i=this.geodesicTriangleIndices=new Uint32Array(s(t,[],2));let o=0;for(let s=0;s<i.length;s+=3)o+=z(e[i[s]],e[i[s+1]],e[i[s+2]],A.WGS84);return o}_selectFittingMode(t,s,i,o){const r=s.map((e=>Math.abs(M(t,e)))).reduce(((e,t)=>Math.max(e,t)),0);V(s,this._tempSphere);const n=r/(2*this._tempSphere.radius),h=n<o.maxRelativeErrorCoplanar,a=n<o.maxRelativeErrorAlmostCoplanar;let d="horizontal";if(h)d="oblique";else if(a){d=Math.abs(p(i,t))>Math.cos(e(o.verticalAngleThreshold))?"horizontal":"vertical"}return d}}function x(e,t){const s=new Float64Array(e.length*t);for(let i=0;i<e.length;++i){const o=e[i];for(let e=0;e<t;++e)s[i*t+e]=o[e]}return s}export{k as MeasurementDataManager};
