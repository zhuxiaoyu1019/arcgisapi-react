/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import t from"../../../../../core/Accessor.js";import s from"../../../../../core/Handles.js";import{rad2deg as i,acosClamped as r,deg2rad as o}from"../../../../../core/mathUtils.js";import{destroyMaybe as a,isNone as n}from"../../../../../core/maybe.js";import c from"../../../../../core/Quantity.js";import{whenOnce as l}from"../../../../../core/watchUtils.js";import{property as m}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/Logger.js";import{subclass as p}from"../../../../../core/accessorSupport/decorators/subclass.js";import{reactionInit as d}from"../../../../../core/accessorSupport/trackingUtils.js";import{i as h}from"../../../../../chunks/vec3.js";import{c as u}from"../../../../../chunks/vec3f64.js";import{geodesicLength as f}from"../../../../../geometry/geometryEngine.js";import _ from"../../../../../geometry/Polyline.js";import{canProjectWithoutEngine as g,projectPointToVector as j,projectPointToWGS84ComparableLonLat as y}from"../../../../../geometry/projection.js";import{getSphericalPCPF as v,getReferenceEllipsoid as w,SphericalECEFSpatialReference as D,WGS84ECEFSpatialReference as z}from"../../../../../geometry/projectionEllipsoid.js";import{isSupported as P,geodesicLengths as b,inverseGeodeticSolver as M}from"../../../../../geometry/support/geodesicUtils.js";import{UnitNormalizer as k}from"../support/UnitNormalizer.js";let A=class extends t{constructor(e){super(e),this._unitNormalizer=new k,this._handles=new s,this._tempStartPosition=u(),this._tempEndPosition=u(),this._tempCornerPosition=u()}initialize(){this._handles.add(l(this.view,"ready",(()=>this._initialize()),!0))}destroy(){this._handles=a(this._handles)}_initialize(){const e=this.view.spatialReference,t=v(e),s=t===D?z:t;this._sphericalPCPF=s;const i=g(e,s);this._unitNormalizer.spatialReference=i?s:e,this._handles.add(d((()=>({result:this._computedResult,viewData:this.viewData})),(({result:e,viewData:t})=>{t.result=e})))}get _computedResult(){const{startPoint:e,endPoint:t}=this.layer;if(n(e)||n(t))return null;const s=this._euclideanDistances(e,t),i=this._exactGeodesicDistanceAndAngle(e,t,s.horizontal.value);return{directDistance:s.direct,horizontalDistance:s.horizontal,verticalDistance:s.vertical,geodesicDistance:i.distance,geodesicAngle:i.angle}}_euclideanDistances(e,t){const s=e.clone();s.z=t.z;const i=this._tempStartPosition,r=this._tempEndPosition,o=this._tempCornerPosition,a=this.view.spatialReference,n=this._sphericalPCPF,l=g(a,n)?n:a;j(e,i,l),j(t,r,l),j(s,o,l);const m=h(i,r),p=h(o,r),d=Math.abs(t.z-e.z),u=e=>this._unitNormalizer.normalizeDistance(e),f=u(m),_=u(p),y=u(d);return{direct:new c(f,"meters"),horizontal:new c(_,"meters"),vertical:new c(y,"meters")}}_exactGeodesicDistanceAndAngle(e,t,s){const i=e.spatialReference,r=new _({spatialReference:i});r.addPath([e,t]);const o=i.isGeographic&&P(i)?b([r],"meters")[0]:i.isWebMercator?f(r,"meters"):void 0,{distance:a,angle:n}=o?{distance:o,angle:this._fallbackGeodesicAngle(o,i)}:this._fallbackGeodesicDistance(e,t,s);return{distance:new c(a,"meters"),angle:new c(n,"degrees")}}_fallbackGeodesicAngle(e,t){return e/w(t).metersPerDegree}_fallbackGeodesicDistance(e,t,s){if(y(e,R)){y(t,G);const e=o(R[0]),s=o(R[1]),a=o(G[0]),n=o(G[1]),c=Math.abs(a-e),l=r(Math.sin(s)*Math.sin(n)+Math.cos(s)*Math.cos(n)*Math.cos(c)),m=i(l),p={distance:0};return M(p,[R[0],R[1]],[G[0],G[1]]),{distance:p.distance,angle:m}}const a=e.spatialReference,n=s;return{distance:n,angle:this._fallbackGeodesicAngle(n,a)}}};e([m()],A.prototype,"view",void 0),e([m()],A.prototype,"layer",void 0),e([m()],A.prototype,"viewData",void 0),e([m()],A.prototype,"_computedResult",null),A=e([p("esri.views.3d.layers.analysis.DirectLineMeasurement/DirectLineMeasurementController")],A);const R=u(),G=u();export{A as DirectLineMeasurementController};
