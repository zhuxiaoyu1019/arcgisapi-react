/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as i}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import{lerp as s}from"../../../../core/mathUtils.js";import{isNone as e,isSome as r}from"../../../../core/maybe.js";import a from"../../../../core/PooledArray.js";import{property as o}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/Logger.js";import{subclass as c}from"../../../../core/accessorSupport/decorators/subclass.js";import{a as n}from"../../../../chunks/mat4.js";import{c as h}from"../../../../chunks/mat4f64.js";import{a as l}from"../../../../chunks/vec2f64.js";import{m as p,a as u,s as d,g as f}from"../../../../chunks/vec3.js";import{Z as m,c as g}from"../../../../chunks/vec3f64.js";import{s as b,t as v,b as y}from"../../../../chunks/vec4.js";import{c as G}from"../../../../chunks/vec4f64.js";import{getReferenceEllipsoid as S}from"../../../../geometry/projectionEllipsoid.js";import{create as B,empty as w,offset as D,width as V,height as j,expand as N,intersects as _}from"../../../../geometry/support/aaBoundingRect.js";import{a as P,c as C,e as I}from"../../../../chunks/boundedPlane.js";import{create as x}from"../../../../geometry/support/ray.js";import{d as A,g as M,i as z,c as O}from"../../../../chunks/sphere.js";import{drawAccelerationStruct as T,prepare as E,drawPoly as F}from"./deconflictorDebug.js";import X from"../../support/debugFlags.js";import Y from"../../webgl-engine/lib/Camera.js";import{applyPrecomputedScaleFactor as R}from"../../webgl-engine/lib/screenSizePerspectiveUtils.js";import{HUDMaterial as k}from"../../webgl-engine/materials/HUDMaterial.js";const W=g(),L=G(),U=G(),H=g(),Z=h(),q=O(),J=x(),K=g(),Q=B();class ${constructor(){this.aabr=B(),this.distance=0,this.culled=!1,this.visible=!1}}class ii{constructor(i,t,s={}){this.graphics3DGraphic=i,this.slicePlaneEnabled=t,this.info=s}}class ti{constructor(){this.active=new Map,this.visible=new Map}clear(){this.active.clear(),this.visible.clear()}}class si{}class ei{constructor(){this.sortArray=new a({allocator:i=>i||new si})}}class ri{constructor(){this.camera=new Y,this.slicePlane=P(),this.slicePlaneEnabled=!1}copyFrom(i){this.camera.copyFrom(i.camera),C(i.slicePlane,this.slicePlane),this.slicePlaneEnabled=i.slicePlaneEnabled}}let ai=class extends t{constructor(){super(...arguments),this._dirty=!1,this._runningViewState=new ri,this._state=0,this.graphics=new ti,this.iterators=new ei,this.accBinsNumX=15,this.accBinsNumY=20,this.accBinsSizeX=0,this.accBinsSizeY=0,this.accBins=null,this.accNumTests=0}get dirty(){return this._dirty}get state(){return this._state}destroy(){this.graphics.clear(),this.iterators=null}setDirty(){!this._dirty&&this.graphics.active.size>0&&(this._dirty=!0,this.notifyChange("updating"))}get updating(){return 0!==this._state||this._dirty}get updatingProgress(){if(!this.updating)return 1;const i=this._state/4;return this._dirty?.5*i:i}get running(){return this.view.ready&&null!=this.view.state&&this.updating}runTask(i){switch(this._state){case 0:this.startUpdate(),i.madeProgress();case 1:if(this._state=1,!this.processActiveGraphics(i))return;case 2:if(this._state=2,!this.sortVisibleGraphics(i))return;case 3:if(this._state=3,!this.deconflictVisibleGraphics(i))return;default:T(this,this.graphics.visible),this._state=0,this.notifyChange("updating")}}modifyGraphics(i,t){t?i.forEach((i=>this.addToActiveGraphics(i))):i.forEach((i=>this.removeFromActiveGraphics(i))),this.setDirty()}layerSupportsDeconfliction(i){if(e(i)||"object3d"!==i.type)return!1;const t=i.stageObject;if(1!==(t?t.getNumGeometryRecords():0))return!1;return t.getGeometryRecord(0).material instanceof k}startUpdate(){E(this.view),this._dirty=!1,this._runningViewState.copyFrom(this.viewState);const{fullWidth:i,fullHeight:t}=this._runningViewState.camera;this.initBins(i,t),this.resetIterators()}addToActiveGraphics(i){i.info[this.visibilityGroup]=new $,this.graphics.active.set(i.graphics3DGraphic.graphic.uid,i),this.setDirty()}removeFromActiveGraphics(i){this.removeFromVisibleGraphics(i),oi(i,this.visibilityGroup),delete i.info[this.visibilityGroup],this.graphics.active.delete(i.graphics3DGraphic.graphic.uid),this.setDirty()}addToVisibleGraphics(i){this.graphics.visible.set(i.graphics3DGraphic.graphic.uid,i)}removeFromVisibleGraphics(i){this.graphics.visible.delete(i.graphics3DGraphic.graphic.uid)}processActiveGraphics(i){const t=this.ensureActiveGraphicsIterator(),s=n(Z,this._runningViewState.camera.projectionMatrix),e="global"===this.view.viewingMode&&1===this.view.map.ground.opacity&&this._runningViewState.camera.relativeElevation>0?q:null;let a=0;for(r(e)&&(p(e,m,this._runningViewState.camera.viewMatrix),e[3]=S(this.view.spatialReference).radius,a=A(e,m));!i.done;){i.madeProgress();const r=t.next();if(r.done)return this.resetActiveGraphicsIterator(),!0;const o=r.value,c=o&&o.info[this.visibilityGroup];c&&(this.collectGraphics3DGraphics(o,s,e,a),c.culled?this.removeFromVisibleGraphics(o):this.addToVisibleGraphics(o))}return!1}sortVisibleGraphics(i){const t=this.ensureSortGraphicsIterator();for(;!i.done;){const s=t.next();if(i.madeProgress(),s.done)return this.resetSortGraphicsIterator(),!0}return!1}deconflictVisibleGraphics(i){const t=this.ensureVisibleGraphicsIterator(),s=1===this.visibilityGroup;for(;!i.done;){i.madeProgress();const e=t.next();if(e.done)return this.resetVisibleGraphicsIterator(),!0;const r=e.value,a=r.info[this.visibilityGroup];if(!a||a.culled)continue;const o=r.graphics3DGraphic,c=(!s||o.isVisible())&&!this.isConflicted(r);c&&this.addToBins(r),a.visible=c,this.setGraphicVisibility(r,c),F(a,c)}return!1}resetIterators(){this.iterators.active=null,this.iterators.visible=null,this.iterators.sort=null}ensureActiveGraphicsIterator(){return this.iterators.active||(this.iterators.active=ci(this.graphics.active)),this.iterators.active}resetActiveGraphicsIterator(){this.iterators.active=null}ensureVisibleGraphicsIterator(){return this.iterators.visible||(this.iterators.visible=ci(this.graphics.visible)),this.iterators.visible}resetVisibleGraphicsIterator(){this.iterators.visible=null}ensureSortGraphicsIterator(){return this.iterators.sort||(this.iterators.sort=ni(this.graphics.visible,this.iterators.sortArray,this.visibilityGroup)),this.iterators.sort}resetSortGraphicsIterator(){this.iterators.sort=null}collectGraphics3DGraphics(i,t,s,a){const o=i.graphics3DGraphic;if(o.destroyed)return;const c=i.info[this.visibilityGroup];if(!o.isVisible(0,3))return void(c.culled=!0);const n=this.getGraphicsLayers(o);w(c.aabr);let h=null;for(const l of n){if(!this.layerSupportsDeconfliction(l))continue;const o=l.stageObject.getGeometryRecord(0).material;if(e(h)){if(h=this.getProjectionInfo(l,t,pi),h.isOutsideScreen||this.isCulledBySlice(i,W)||r(s)&&this.isCulledByHorizon(h,s,a))return void(c.culled=!0);!X.DISABLE_DECONFLICTOR_VISIBILITY_OFFSET&&c.visible&&(h.distance*=.7)}this.expandBoundingRect(c,l,o,h)}e(h)?c.culled=!0:(c.distance=h.distance,c.culled=!1)}getProjectionInfo(i,t,s){const e=this._runningViewState.camera,r=i.stageObject,a=r.getGeometryRecord(0),o=a.material,c=M(r.boundingVolumeWorldSpace.bounds);p(W,c,e.viewMatrix);const n=a.geometry.vertexAttributes,h=n.get("normal").data,l=n.get("auxpos1").data;return o.applyShaderOffsetsView(W,h,r.transformation,l,e,s.scaleInfo,W),b(L,W[0],W[1],W[2],1),v(U,L,e.projectionMatrix),u(s.positionNDC,U,1/U[3]),o.applyShaderOffsetsNDC(s.positionNDC,l,e,s.positionNDC,H),s.distanceWithoutPolygonOffset=e.depthNDCToWorld(H[2]),s.distance=H[2]===s.positionNDC[2]?s.distanceWithoutPolygonOffset:e.depthNDCToWorld(s.positionNDC[2]),b(U,s.positionNDC[0],s.positionNDC[1],s.positionNDC[2],1),v(L,U,t),y(L,L,1/L[3]),d(s.positionView,W[0],W[1],W[2]),s}isCulledByHorizon(i,t,s){return f(J.direction,i.positionView),d(J.origin,0,0,0),!!z(t,J,K)&&i.distanceWithoutPolygonOffset>s}isCulledBySlice(i,t){return i.slicePlaneEnabled&&this._runningViewState.slicePlaneEnabled&&I(this._runningViewState.slicePlane,t)}expandBoundingRect(i,t,e,{positionNDC:r,scaleInfo:a}){const o=this._runningViewState.camera,c=t.getScreenSize(hi);R(c,a.factor,c),c[0]*=o.pixelRatio,c[1]*=o.pixelRatio;const n=D(e.calculateRelativeScreenBounds(c,a.factorAlignment.scale,Q),s(0,o.fullWidth,.5+.5*r[0]),s(0,o.fullHeight,.5+.5*r[1])),h=this.iconMarginFactor;if(0!==h){const i=h*Math.min(V(n),j(n));n[0]-=i,n[1]-=i,n[2]+=i,n[3]+=i}N(i.aabr,n)}isConflicted(i){const t=i.graphics3DGraphic.graphic.uid,s=i.info[this.visibilityGroup];for(let e=Math.floor(s.aabr[0]/this.accBinsSizeX);e<=Math.floor(s.aabr[2]/this.accBinsSizeX);e++)if(!(e<0||e>=this.accBinsNumX))for(let i=Math.floor(s.aabr[1]/this.accBinsSizeY);i<=Math.floor(s.aabr[3]/this.accBinsSizeY);i++){if(i<0||i>=this.accBinsNumY)continue;const r=this.accBins[e][i];for(let i=0;i<r.length;i++){const e=r.data[i],a=e.info[this.visibilityGroup];if(a&&a.visible&&(e.graphics3DGraphic.graphic.uid!==t&&(this.accNumTests++,_(a.aabr,s.aabr))))return!0}}return!1}initBins(i,t){if(null==this.accBins){this.accBins=[];for(let i=0;i<this.accBinsNumX;i++){this.accBins.push([]);const i=this.accBins[this.accBins.length-1];for(let t=0;t<this.accBinsNumY;t++)i.push(new a)}}else for(let s=0;s<this.accBinsNumX;s++)for(let i=0;i<this.accBinsNumY;i++)this.accBins[s][i].clear();this.accBinsSizeX=i/this.accBinsNumX,this.accBinsSizeY=t/this.accBinsNumY,this.accNumTests=0}addToBins(i){const t=i.info[this.visibilityGroup],s=Math.floor(t.aabr[0]/this.accBinsSizeX),e=Math.floor(t.aabr[2]/this.accBinsSizeX),r=Math.floor(t.aabr[1]/this.accBinsSizeY),a=Math.floor(t.aabr[3]/this.accBinsSizeY);for(let o=s;o<=e;o++)if(!(o<0||o>=this.accBinsNumX))for(let t=r;t<=a;t++)t<0||t>=this.accBinsNumY||this.accBins[o][t].push(i)}setGraphicVisibility(i,t){const s=i.graphics3DGraphic;s.destroyed||(s.setVisibilityFlag(3,t,this.visibilityGroup),1===this.visibilityGroup&&this.view.labeler.setLabelGraphicVisibility(s,t))}};function oi(i,t){const s=i.graphics3DGraphic;s.destroyed||s.clearVisibilityFlag(3,t)}function*ci(i){if(Map.prototype.entries){const t=i.entries();for(let i=t.next();!i.done;i=t.next())yield i.value[1]}else yield*i.values()}function*ni(i,t,s){t.clear(),i.forEach(((i,e)=>{const r=t.pushNew();r.id=e,r.prio=i.info?-i.info[s].distance:Number.MAX_VALUE})),yield;const e=t.iterableSort(((i,t)=>t.prio-i.prio));for(let r=e.next();!r.done;r=e.next())yield;t.forAll((t=>{const s=i.get(t.id);s&&(i.delete(t.id),i.set(t.id,s))})),t.clear()}i([o({constructOnly:!0})],ai.prototype,"view",void 0),i([o({type:Boolean,readOnly:!0})],ai.prototype,"updating",null),ai=i([c("esri.views.3d.layers.graphics.Deconflictor")],ai);const hi=l();class li{constructor(){this.positionView=g(),this.positionNDC=g(),this.distance=0,this.distanceWithoutPolygonOffset=0,this.scaleInfo={factor:{scale:0,factor:0,minPixelSize:0,paddingPixels:0},factorAlignment:{scale:0,factor:0,minPixelSize:0,paddingPixels:0}}}get isOutsideScreen(){const i=this.positionNDC;return i[0]<-1||i[1]<-1||i[2]<-1||i[0]>=1||i[1]>=1}}const pi=new li;export{ai as Deconflictor,ii as DeconflictorGraphic,ri as DeconflictorViewState};
