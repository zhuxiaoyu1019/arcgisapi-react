/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../Color.js";import"../../../../core/has.js";import{isSome as t,isNone as r,get as o}from"../../../../core/maybe.js";import{f as a,t as s}from"../../../../chunks/mat3.js";import{c as n}from"../../../../chunks/mat3f64.js";import{q as i,m as l,a as c}from"../../../../chunks/mat4.js";import{b as u,c as m}from"../../../../chunks/mat4f64.js";import{b as h,a as p,d as f,n as d,f as g,c as x}from"../../../../chunks/vec3.js";import{Z as _,O as y,c as b}from"../../../../chunks/vec3f64.js";import{O as v}from"../../../../chunks/vec4f64.js";import{projectVectorToDehydratedPoint as T,projectBuffer as C,computeLinearTransformation as w,canProjectWithoutEngine as A}from"../../../../geometry/projection.js";import{empty as M,expandWithBuffer as j,intersectsClippingArea as P,create as B}from"../../../../geometry/support/aaBoundingBox.js";import R from"../../../../geometry/support/MeshComponent.js";import E from"../../../../geometry/support/MeshMaterialMetallicRoughness.js";import{BufferViewVec3f64 as F,BufferViewVec3f as O}from"../../../../geometry/support/buffer/BufferView.js";import{t as I,a as S}from"../../../../chunks/vec32.js";import{transformPosition as N,transformNormal as V,projectNormalToPCPF as U,transformTangent as L,projectTangentToPCPF as G}from"../../../../geometry/support/meshUtils/projection.js";import{makeDehydratedPoint as $}from"../../../../layers/graphics/dehydratedFeatures.js";import{perObjectElevationAligner as D}from"./ElevationAligners.js";import{needsElevationUpdates3D as z}from"./elevationAlignmentUtils.js";import{ElevationContext as k}from"./ElevationContext.js";import{Graphics3DObject3DGraphicLayer as H}from"./Graphics3DObject3DGraphicLayer.js";import{Graphics3DSymbolLayer as q}from"./Graphics3DSymbolLayer.js";import{createMaterial as W}from"../support/edgeUtils.js";import{parseColorMixMode as Y,encodeSymbolColor as Z}from"../support/symbolColorUtils.js";import J from"../../support/debugFlags.js";import{Geometry as K}from"../../webgl-engine/lib/Geometry.js";import{generateDefaultIndexArray as Q}from"../../webgl-engine/lib/geometryDataUtils.js";import{Object3D as X}from"../../webgl-engine/lib/Object3D.js";import{Texture as ee}from"../../webgl-engine/lib/Texture.js";import{DefaultMaterial as te}from"../../webgl-engine/materials/DefaultMaterial.js";import{NativeLineMaterial as re}from"../../webgl-engine/materials/NativeLineMaterial.js";const oe=["mesh"];class ae extends q{constructor(e,t,r,o){super(e,t,r,o),this._materials=new Map,this._textures=new Map,this.ensureDrapedStatus(!1)}async doLoad(){J.DRAW_MESH_GEOMETRY_NORMALS&&(this._debugVertexNormalMaterial=new re({color:[1,0,1,1]}),this._debugFaceNormalMaterial=new re({color:[0,1,1,1]}))}destroy(){super.destroy(),this._context.stage.removeMany(Array.from(this._materials.values(),(e=>e.material))),this._context.stage.removeMany(Array.from(this._textures.values())),this._materials.clear(),this._textures.clear()}createGraphics3DGraphic(e){const t=e.graphic;if(!this._validateGeometry(t.geometry,oe,"fill on mesh-3d"))return null;const r=this.setGraphicElevationContext(t,new k),o=e.renderingInfo;return this._createAs3DShape(t,o,r,t.uid)}layerOpacityChanged(e,r){const o=this._getLayerOpacity();return this._materials.forEach((e=>{e.material.setParameterValues({layerOpacity:o});const t=e.material.params;this._setMaterialTransparentParameter(t,e),e.material.setParameterValues({transparent:t.transparent})})),e.forEach((e=>{const a=r(e);t(a)&&a.layerOpacityChanged(o,this._context.isAsync)})),!0}layerElevationInfoChanged(e,t){return this.updateGraphics3DGraphicElevationInfo(e,t,z)}slicePlaneEnabledChanged(e,r){return this._materials.forEach((e=>{e.material.setParameterValues({slicePlaneEnabled:this._context.slicePlaneEnabled})})),e.forEach((e=>{const o=r(e);t(o)&&o.slicePlaneEnabledChanged(this._context.slicePlaneEnabled,this._context.isAsync)})),!0}physicalBasedRenderingChanged(){const e=this._usePBR();return this._materials.forEach((t=>t.material.setParameterValues({usePBR:e}))),!0}pixelRatioChanged(){return!0}_requiresSymbolVertexColors(){return this._drivenProperties.color||this._drivenProperties.opacity}_colorOrTextureUid(t){return r(t)?"-":t instanceof e?t.toHex():t.contentHash}_materialPropertiesDefault(e,t){const r=this._requiresSymbolVertexColors(),o=!!e.vertexAttributes.color,a=!!e.vertexAttributes.tangent;return{hasSymbolVertexColors:r,hasVertexColors:o,hasVertexTangents:a,uid:`vc:${o},vt:${a},vct${t},svc:${r}`}}_materialProperties(e,t,r){const o=this._materialPropertiesDefault(e,r);if(!t.material)return o;const{color:a,colorTexture:s,normalTexture:n,doubleSided:i,alphaCutoff:l,alphaMode:c}=t.material,u=this._colorOrTextureUid(a),m=this._colorOrTextureUid(s),h=this._colorOrTextureUid(n);if(o.color=a,o.colorTexture=s,o.normalTexture=n,o.uid=`${o.uid},cmuid:${u},ctmuid:${m},ntmuid:${h},ds:${i},ac:${l},am:${c}`,t.material instanceof E){const{metallic:e,roughness:r,metallicRoughnessTexture:a,emissiveColor:s,emissiveTexture:n,occlusionTexture:i}=t.material,l=this._colorOrTextureUid(a),c=this._colorOrTextureUid(s),u=this._colorOrTextureUid(n),m=this._colorOrTextureUid(i);o.metallic=e,o.roughness=r,o.metallicRoughnessTexture=a,o.emissiveColor=s,o.emissiveTexture=n,o.occlusionTexture=i,o.uid=`${o.uid},mrm:${e},mrr:${r},mrt:${l},emuid:${c},etmuid:${u},otmuid:${m}`}return o}_setInternalColorValueParameters(t,r){r.diffuse=e.toUnitRGB(t),r.opacity=t.a}_getLoadableTextureResource(e){return e.data?e.data:e.url}_getInternalTextureId(e){const t=this._getLoadableTextureResource(e);if(!t)return;const r=e.contentHash;let o=this._textures.get(r);return o||(o=new ee(t,{mipmap:!0,wrap:this._castTextureWrap(e.wrap),noUnpackFlip:!0,preMultiplyAlpha:!0}),this._textures.set(r,o),this._context.stage.add(o)),o.id}_castTextureWrap(e="repeat"){if("string"==typeof e){const t=this._castTextureWrapIndividual(e);return{s:t,t}}return{s:this._castTextureWrapIndividual(e.horizontal),t:this._castTextureWrapIndividual(e.vertical)}}_castTextureWrapIndividual(e){switch(e){case"clamp":return 33071;case"mirror":return 33648;case"repeat":default:return 10497}}_setInternalMaterialParameters(r,o){t(r.color)&&this._setInternalColorValueParameters(r.color,o),t(r.colorTexture)&&(o.textureId=this._getInternalTextureId(r.colorTexture)),t(r.normalTexture)&&(o.normalTextureId=this._getInternalTextureId(r.normalTexture)),t(r.emissiveColor)&&(o.emissiveFactor=e.toUnitRGB(r.emissiveColor)),t(r.emissiveTexture)&&(o.emissiveTextureId=this._getInternalTextureId(r.emissiveTexture)),t(r.occlusionTexture)&&(o.occlusionTextureId=this._getInternalTextureId(r.occlusionTexture)),t(r.metallicRoughnessTexture)&&(o.metallicRoughnessTextureId=this._getInternalTextureId(r.metallicRoughnessTexture))}_setExternalMaterialParameters(r){const o=this._drivenProperties.color;let a=t(this.symbolLayer.material)?this.symbolLayer.material.colorMixMode:null;if(o)r.externalColor=v;else{const o=t(this.symbolLayer.material)?this.symbolLayer.material.color:null;t(o)?r.externalColor=e.toUnitRGBA(o):(a=null,r.externalColor=v)}a&&(r.colorMixMode=a),r.castShadows=!!this.symbolLayer.castShadows}_hasTransparentVertexColors(e){const t=e.vertexAttributes.color;if(r(t))return!1;for(let r=3;r<t.length;r+=4)if(255!==t[r])return!0;return!1}_getOrCreateMaterial(e,r){const o=r.material&&r.material.color,a=r.material&&r.material.colorTexture,s=r.material&&"blend"===r.material.alphaMode,n=!(r.material&&"opaque"===r.material.alphaMode)&&(this._hasTransparentVertexColors(e)||t(o)&&o.a<1||t(a)&&a.transparent||s),i=this._materialProperties(e,r,n),l=this._materials.get(i.uid);if(l)return l.material;const c={material:null,isComponentTransparent:n,alphaMode:r.material?r.material.alphaMode:"opaque"},u=null==i.metallicRoughnessTexture&&null==i.metallic&&null==i.roughness,m={usePBR:this._usePBR(),isSchematic:u,vertexColors:i.hasVertexColors,symbolColors:i.hasSymbolVertexColors,vertexTangents:i.hasVertexTangents,ambient:_,diffuse:y,opacity:1,doubleSided:!0,doubleSidedType:"winding-order",cullFace:0,textureAlphaPremultiplied:!0,layerOpacity:this._getLayerOpacity(),slicePlaneEnabled:this._context.slicePlaneEnabled,initTextureTransparent:!0};u||(m.mrrFactors=[null!=i.metallic?i.metallic:1,null!=i.roughness?i.roughness:1,.5]),r.material&&(m.doubleSided=r.material.doubleSided,m.cullFace=r.material.doubleSided?0:2,m.textureAlphaCutoff=r.material.alphaCutoff),this._setInternalMaterialParameters(i,m),this._setExternalMaterialParameters(m),this._setMaterialTransparentParameter(m,c);const h=new te(m);return c.material=h,this._materials.set(i.uid,c),this._context.stage.add(h),h}_usePBR(){return this._context.physicalBasedRenderingEnabled}_setMaterialTransparentParameter(e,t){e.transparent=this.needsDrivenTransparentPass||t.isComponentTransparent||e.layerOpacity<1||e.opacity<1||e.externalColor&&e.externalColor[3]<1,"auto"===t.alphaMode?e.textureAlphaMode=e.transparent?3:1:e.textureAlphaMode="opaque"===t.alphaMode?1:"mask"===t.alphaMode?2:0}_addDebugNormals(e,t,r,o){const a=t.length,s=e.spatialReference.isGeographic?20015077/180:1,n=.1*Math.max(e.extent.width*s,e.extent.height*s,e.extent.zmax-e.extent.zmin),i=[],l=[],c=[],m=[];for(let u=0;u<a;u++){const e=t[u],r=e.vertexAttributes.get("position"),o=e.vertexAttributes.get("normal"),a=e.indices.get("position"),s=e.indices.get("normal"),f=r.data,d=o.data;for(let t=0;t<a.length;t++){const e=3*a[t],r=3*s[t];for(let t=0;t<3;t++)i.push(f[e+t]);for(let t=0;t<3;t++)i.push(f[e+t]+d[r+t]*n);if(l.push(l.length),l.push(l.length),t%3==0){this._calculateFaceNormal(f,a,t,ce),this._getFaceVertices(f,a,t,ne,ie,le),h(ne,ne,ie),h(ne,ne,le),p(ne,ne,1/3);for(let e=0;e<3;e++)c.push(ne[e]);for(let e=0;e<3;e++)c.push(ne[e]+ce[e]*n);m.push(m.length),m.push(m.length)}}}const f=new K([["position",{data:i,size:3,exclusive:!0}]],[["position",new Uint32Array(l)]],2);t.push(f),r.push(this._debugVertexNormalMaterial),o.push(u(o[0]));const d=new K([["position",{data:c,size:3,exclusive:!0}]],[["position",new Uint32Array(m)]],2);t.push(d),r.push(this._debugFaceNormalMaterial),o.push(u(o[0]))}_createAs3DShape(e,r,o,a){const s=e.geometry;if("mesh"!==s.type)return null;const n=this._createGeometryInfo(s,r);if(!n)return null;const{geometries:i,materials:l,transformations:c,objectTransformation:u}=n;J.DRAW_MESH_GEOMETRY_NORMALS&&this._addDebugNormals(s,i,l,c);const m=new X({geometries:i,materials:l,transformations:c,metadata:{layerUid:this._context.layer.uid,graphicUid:a}});m.transformation=u;const h=D,p=this._createEdgeMaterial(),f=t(p)?{baseMaterial:l[0],edgeMaterials:[p],properties:{mergeGeometries:!0,slicePlaneEnabled:this._context.slicePlaneEnabled}}:null,d=new H(this,m,i,null,null,h,o,f);return d.needsElevationUpdates=z(o.mode),d.useObjectOriginAsAttachmentOrigin=!0,d.elevationContext.centerPointInElevationSR=this.getCenterPointInElevationSR(m),d.alignedSampledElevation=h(d,d.elevationContext,this._context.elevationProvider,this._context.renderCoordsHelper),d}getCenterPointInElevationSR(e){const t=$(0,0,0,this._context.elevationProvider.spatialReference);return T([e.transformation[12],e.transformation[13],e.transformation[14]],this._context.renderCoordsHelper.spatialReference,t),t}_createComponentNormals(e,t,r,o){switch(r.shading||"flat"){case"source":return this._createComponentNormalsSource(e,t,r,o);case"flat":return this._createComponentNormalsFlat(e,o);case"smooth":return this._createComponentNormalsSmooth(e,o);default:return}}_createComponentNormalsSource(e,t,o,a){if(r(t))return this._createComponentNormalsFlat(e,a);let s=!1;if(!o.trustSourceNormals)for(let r=0;r<a.length;r+=3){this._calculateFaceNormal(e,a,r,ce);for(let e=0;e<3;e++){const o=3*a[r+e];ne[0]=t[o+0],ne[1]=t[o+1],ne[2]=t[o+2],f(ce,ne)<0&&(t[o+0]=-t[o+0],t[o+1]=-t[o+1],t[o+2]=-t[o+2],s=!0)}}return{normals:t,indices:a,didFlipNormals:s}}_createComponentNormalsFlat(e,t){const r=new Float32Array(t.length),o=new Uint32Array(3*t.length);for(let a=0;a<t.length;a+=3){const s=this._calculateFaceNormal(e,t,a,ce);for(let e=0;e<3;e++)r[a+e]=s[e],o[a+e]=a/3}return{normals:r,indices:o,didFlipNormals:!1}}_createComponentNormalsSmooth(e,t){const r={};for(let s=0;s<t.length;s+=3){const o=this._calculateFaceNormal(e,t,s,ce);for(let e=0;e<3;e++){const a=t[s+e];let n=r[a];n||(n={normal:b(),count:0},r[a]=n),h(n.normal,n.normal,o),n.count++}}const o=new Float32Array(3*t.length),a=new Uint32Array(3*t.length);for(let s=0;s<t.length;s++){const e=r[t[s]];1!==e.count&&(d(e.normal,e.normal),e.count=1);for(let t=0;t<3;t++)o[3*s+t]=e.normal[t];a[s]=s}return{normals:o,indices:a,didFlipNormals:!1}}_getFaceVertices(e,t,r,o,a,s){const n=3*t[r+0],i=3*t[r+1],l=3*t[r+2];o[0]=e[n+0],o[1]=e[n+1],o[2]=e[n+2],a[0]=e[i+0],a[1]=e[i+1],a[2]=e[i+2],s[0]=e[l+0],s[1]=e[l+1],s[2]=e[l+2]}_calculateFaceNormal(e,t,r,o){return this._getFaceVertices(e,t,r,ne,ie,le),g(ie,ie,ne),g(le,le,ne),x(ne,ie,le),d(o,ne),o}_getOrCreateComponents(e){return e.components?e.components:pe}_createPositionBuffer(e,r){let o=e.vertexAttributes.position;const a=1===r.reprojection?r.transformBeforeProject:null;if(t(a)&&(o=N(o,new Float64Array(o.length),a)),0===r.reprojection)return r.needsBufferCopy?new Float64Array(o):o;const s=t(a)?o:new Float64Array(o.length);return C(o,e.spatialReference,0,s,this._context.renderCoordsHelper.spatialReference,0,o.length/3),s}_createNormalBuffer(e,o,a){let s=e.vertexAttributes.normal;if(r(s))return null;const n=1===a.reprojection?a.transformBeforeProject:null;t(n)&&(s=V(s,new Float32Array(s.length),n));if("local"===this._context.layerView.view.viewingMode||0===a.reprojection)return a.needsBufferCopy&&e.vertexAttributes.normal===s?new Float32Array(s):s;const i=e.vertexAttributes.position,l=t(n)?s:new Float32Array(s.length);return U(s,i,o,e.spatialReference,l)}_createTangentBuffer(e,o,a){let s=e.vertexAttributes.tangent;if(r(s))return null;const n=1===a.reprojection?a.transformBeforeProject:null;t(n)&&(s=L(s,new Float32Array(s.length),n));if("local"===this._context.layerView.view.viewingMode||0===a.reprojection)return a.needsBufferCopy&&e.vertexAttributes.normal===s?new Float32Array(s):s;const i=e.vertexAttributes.position,l=t(n)?s:new Float32Array(s.length);return G(s,i,o,e.spatialReference,l)}_createColorBuffer(e){return e.vertexAttributes.color}_createSymbolColorBuffer(e){if(this._requiresSymbolVertexColors()){const t=this._getVertexOpacityAndColor(e),r=Y(o(this.symbolLayer,"material","colorMixMode")),a=new Uint8Array(4);return Z(t,r,a),a}return null}_createBuffers(e,r){const o=e.vertexAttributes&&e.vertexAttributes.position;if(!o)return this.logger.warn("Mesh geometry must contain position vertex attributes"),null;const a=e.vertexAttributes.normal,s=e.vertexAttributes.uv,n=e.vertexAttributes.tangent;if(t(a)&&a.length!==o.length)return this.logger.warn("Mesh normal vertex buffer must contain the same number of elements as the position buffer"),null;if(t(n)&&n.length/4!=o.length/3)return this.logger.warn("Mesh tangent vertex buffer must contain the same number of elements as the position buffer"),null;if(t(s)&&s.length/2!=o.length/3)return this.logger.warn("Mesh uv vertex buffer must contain the same number of elements as the position buffer"),null;const i=this._computeReprojectionInfo(e),l=this._createPositionBuffer(e,i),c=this._createColorBuffer(e),u=this._createSymbolColorBuffer(r),h=this._createNormalBuffer(e,l,i),p=this._createTangentBuffer(e,l,i);return{positionBuffer:l,normalBuffer:h,tangentBuffer:p,uvBuffer:s,colorBuffer:c,symbolColorBuffer:u,objectTransformation:0===i.reprojection&&t(i.objectTransformation)?i.objectTransformation:this._transformOriginLocal(e,l,h,p),geometryTransformation:0===i.reprojection&&t(i.geometryTransformation)?i.geometryTransformation:m()}}_computeReprojectionInfo(e){const r=t(e.transform)&&e.transform.geographic||2===this._context.renderCoordsHelper.viewingMode?0:1;let o=null;if(t(e.transform)){if(0===r){const t=m();w(e.spatialReference,e.transform.origin,t,this._context.renderCoordsHelper.spatialReference);return{reprojection:r,objectTransformation:t,geometryTransformation:u(e.transform.localMatrix),needsBufferCopy:!1}}return o=i(m(),e.transform.origin),l(o,o,e.transform.localMatrix),{reprojection:r,transformBeforeProject:o,needsBufferCopy:!0}}return{reprojection:r,needsBufferCopy:!0}}_transformOriginLocal(e,r,o,n){const i=this._context.renderCoordsHelper.spatialReference,l=e.anchor;se[0]=l.x,se[1]=l.y,se[2]=l.z;const u=m();w(e.spatialReference,se,u,i);const h=F.fromTypedArray(r);if(c(ue,u),I(h,h,ue),t(o)||t(n)){if(a(me,u),s(me,me),t(o)){const e=O.fromTypedArray(o);S(e,e,me)}if(t(n)){const e=O.fromTypedArray(n,4*n.BYTES_PER_ELEMENT);S(e,e,me)}}return u}_validateFaces(e,t){const r=e.vertexAttributes.position.length/3,o=t.faces;if(o){let e=-1;for(let t=0;t<o.length;t++){const r=o[t];r>e&&(e=r)}if(r<=e)return this.logger.warn(`Vertex index ${e} is out of bounds of the mesh position buffer`),!1}else if(r%3!=0)return this.logger.warn("Mesh position buffer length must be a multiple of 9 if no component faces are defined (3 values per vertex * 3 vertices per triangle)"),!1;return!0}_getOrCreateFaces(e,t){return t.faces?t.faces:Q(e.vertexAttributes.position.length/3)}_isOutsideClippingArea(e){if(!this._context.clippingExtent)return!1;const t=e.vertexAttributes&&e.vertexAttributes.position;if(!t)return!1;const r=this._context.elevationProvider.spatialReference;let o;const a=t.length/3;return e.spatialReference.equals(r)?o=t:(o=new Float64Array(t.length),C(e.vertexAttributes.position,e.spatialReference,0,o,r,0,a)),M(he),j(he,o,0,a),!P(he,this._context.clippingExtent)}_createGeometryInfo(e,o){if(!A(e.spatialReference,this._context.layerView.view.spatialReference))return this.logger.warn("Geometry spatial reference is not compatible with the view"),null;if(this._isOutsideClippingArea(e))return null;const a=this._createBuffers(e,o);if(r(a))return null;const{positionBuffer:s,uvBuffer:n,colorBuffer:i,symbolColorBuffer:l,normalBuffer:c,tangentBuffer:u,objectTransformation:m,geometryTransformation:h}=a,p=this._getOrCreateComponents(e),f=[],d=[],g=[];let x=!1;for(const r of p){if(!this._validateFaces(e,r))return null;const o=this._getOrCreateFaces(e,r);if(0===o.length)continue;const a=this._createComponentNormals(s,c,r,o);a.didFlipNormals&&(x=!0);const m=[["position",{size:3,data:s,exclusive:!0}],["normal",{size:3,data:a.normals,exclusive:!0}]],p=[["position",o],["normal",a.indices]];t(i)&&(m.push(["color",{size:4,data:i,exclusive:!0}]),p.push(["color",o])),t(l)&&(m.push(["symbolColor",{size:4,data:l,exclusive:!0}]),p.push(["symbolColor",new Uint16Array(o.length)])),t(n)&&(m.push(["uv0",{size:2,data:n,exclusive:!0}]),p.push(["uv0",o])),t(u)&&(m.push(["tangent",{size:4,data:u,exclusive:!0}]),p.push(["tangent",o]));const _=new K(m,p);f.push(_),d.push(h),g.push(this._getOrCreateMaterial(e,r))}return x&&this.logger.warn("Normals have been automatically flipped to be consistent with the counter clock wise face winding order. It is better to generate mesh geometries that have consistent normals."),{geometries:f,transformations:d,materials:g,objectTransformation:m}}_createEdgeMaterial(){const e={opacity:this._getLayerOpacity()};return W(this.symbolLayer,e)}}const se=b(),ne=b(),ie=b(),le=b(),ce=b(),ue=m(),me=n(),he=B(),pe=[new R];export default ae;export{ae as Graphics3DMeshFillSymbolLayer};
