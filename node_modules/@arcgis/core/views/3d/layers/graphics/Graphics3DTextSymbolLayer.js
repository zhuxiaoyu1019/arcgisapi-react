/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../core/Error.js";import{isNone as t,get as r,isSome as n}from"../../../../core/maybe.js";import{pt2px as s}from"../../../../core/screenUtils.js";import{a as o}from"../../../../chunks/vec2f64.js";import{isCalloutSupport as i}from"../../../../symbols/callouts/calloutUtils.js";import{perObjectElevationAligner as a}from"./ElevationAligners.js";import{SymbolUpdateType as l,needsElevationUpdates2D as c}from"./elevationAlignmentUtils.js";import{ElevationContext as d}from"./ElevationContext.js";import{Graphics3DObject3DGraphicLayer as h}from"./Graphics3DObject3DGraphicLayer.js";import{Graphics3DSymbolLayer as f}from"./Graphics3DSymbolLayer.js";import{validateSymbolLayerSize as m,namedAnchorToHUDMaterialAnchorPos as p}from"./graphicUtils.js";import{placePointOnGeometry as u,createStageObjectForHUD as g,extendPointGraphicElevationContext as y}from"./pointUtils.js";import x from"../../webgl-engine/lib/GeometryUtil.js";import{TextRenderParameters as v}from"../../webgl-engine/lib/TextRenderParameters.js";import b from"../../webgl-engine/lib/TextTexture.js";import{HUDMaterial as O}from"../../webgl-engine/materials/HUDMaterial.js";const P=[0,0,1];class E extends f{constructor(e,t,r,n){super(e,t,r,n),this._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},this.ensureDrapedStatus(!1)}async doLoad(){if(!this._drivenProperties.size){const t=m(this.symbolLayer.size);if(t)throw new e("graphics3dtextsymbollayer:invalid-size",t)}this._createTextRenderParameters()}_createTextRenderParameters(){const e=this._context.layerView.view.pixelRatio;this._textRenderParameters=v.fromSymbol(this.symbolLayer,e)}destroy(){super.destroy()}createGraphics3DGraphic(e){const r=e.graphic,n=u(r.geometry);if(t(n))return this.logger.warn(`unsupported geometry type for text symbol: ${r.geometry.type}`),null;const s=this.symbolLayer.text;if(!s)return null;const o=i(this.symbol)&&this.symbol.hasVisibleVerticalOffset()?this.symbol:null;return this._createAs3DShape(r,n,s,o)}createLabel(e,r,n,s){const o=e.graphic,i=u(o.geometry);if(t(i))return this.logger.warn(`unsupported geometry type for label: ${o.geometry.type}`),null;const a=r.text;return!a||/^\s+$/.test(a)?null:this._createAs3DShape(o,i,a,r,r,n,s)}setGraphicElevationContext(e,t,r=0){const n=super.setGraphicElevationContext(e,t);return n.addOffsetRenderUnits(r),n}layerOpacityChanged(){return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"),!1}layerElevationInfoChanged(e,t){return S(e,t,((e,t)=>{this.updateGraphicElevationContext(t,e)})),l.UPDATE}slicePlaneEnabledChanged(e,t){return S(e,t,(e=>{for(const t of e.stageObject.geometryRecords)t.material.setParameterValues({slicePlaneEnabled:this._context.slicePlaneEnabled})})),!0}physicalBasedRenderingChanged(){return!0}pixelRatioChanged(){return!1}updateGraphicElevationContext(e,t){this.setGraphicElevationContext(e,t.elevationContext,t.metadata.elevationOffset),t.needsElevationUpdates=c(t.elevationContext.mode)||"absolute-height"===t.elevationContext.mode}_defaultElevationInfoNoZ(){return w}_createAs3DShape(e,i,l,f,m=j,u,v){const E=this.setGraphicElevationContext(e,new d,m.elevationOffset),S="polyline"===r(e.geometry,"type"),w=e.uid,_=this._context.stage.renderView.renderingContext,C=m.anchor in p?m.anchor:"center",G=p[C],L=t(v)?new b(_,l,this._textRenderParameters):null,D={occlusionTest:!0,screenOffset:m.screenOffset,anchorPos:G,polygonOffset:!0,color:[1,1,1,1],centerOffsetUnits:m.centerOffsetUnits,debugDrawBorder:m.debugDrawBorder,drawInSecondSlot:!0};if(n(L)&&(D.textureId=L.id,D.texCoordScale=L.texcoordScale),n(v)&&(D.textureId=v.id),n(f)&&n(f.verticalOffset)){const{screenLength:e,minWorldLength:t,maxWorldLength:r}=f.verticalOffset;D.verticalOffset={screenLength:s(e),minWorldLength:t||0,maxWorldLength:null!=r?r:1/0}}if(this._context.screenSizePerspectiveEnabled){const{screenSizePerspectiveSettings:e,screenSizePerspectiveSettingsLabels:t}=this._context.sharedResources;D.screenSizePerspective=t.overridePadding(this._textRenderParameters.haloSize),D.screenSizePerspectiveAlignment=e}let U;if(S&&(D.shaderPolygonOffset=1e-4),D.slicePlaneEnabled=this._context.slicePlaneEnabled,n(u)){const e=JSON.stringify(D);U=u.get(e),t(U)&&(U=new O(D),u.add(e,U))}else U=new O(D);const R=[U],z=m.translation,T=n(L)?[L.displayWidth,L.displayHeight]:[0,0],A=m.centerOffset,W=P,I=[0,0],V=[x.createPointGeometry(W,z,null,T,A,I,null)],B=this._context.layer.uid,H=g(this._context,i,V,R,null,null,E,B,w);if(null===H)return null;const $=a,N=new h(this,H.object,V,t(u)?R:null,n(L)?[L]:null,$,E);N.alignedSampledElevation=H.sampledElevation,N.needsElevationUpdates=c(E.mode)||"absolute-height"===E.mode;const{displayWidth:k,displayHeight:J}=n(L)?L:m;N.getScreenSize=(e=o())=>(e[0]=k,e[1]=J,e);const M={labelText:l,elevationOffset:m.elevationOffset};return N.metadata=M,y(N,i,this._context.elevationProvider),N}}function S(e,t,r){e&&e.forEach((e=>{const s=t(e);n(s)&&r(s,e.graphic)}))}const w={mode:"relative-to-ground",offset:0},j={text:null,translation:[0,0,0],elevationOffset:0,centerOffset:[0,0,0,1],screenOffset:[0,0],anchor:"center",verticalOffset:null,centerOffsetUnits:null,debugDrawBorder:!1,displayWidth:0,displayHeight:0};export default E;export{E as Graphics3DTextSymbolLayer};
