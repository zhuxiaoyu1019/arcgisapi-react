/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{clone as t}from"../../../../core/lang.js";import{isSome as e,isNone as n}from"../../../../core/maybe.js";import{attributeLookup as r}from"../support/attributeUtils.js";const o={setAttribute(){},rollback(){},commit(){}};function s(e,r){const s=r.attributes[e.objectIdField],i=e.sessions.get(s);if(i)return i;const a=t(r.attributes),u=new Set;if(null==s)return o;const c=e.attributeOverrides.createInteractiveEditSession(s),f=new Map,l=(t,e)=>{const n=f.get(t);if(null==n){const n=e.indexOf(s);return f.set(t,n),n}return n};let d=0;const b={setAttribute(t,o){if(0!==d)return;const s=e.fieldsIndex.get(t);if(n(s))return;const i=e.attributeStorageInfo.findIndex((t=>t.name===s.name));if(i<0)return;c.set(i,o);const a=e.attributeStorageInfo[i];let f=!1;u.add(t),e.forEachNode(((t,n)=>{const s=l(t,n);if(-1===s)return;const i=e.getAttributeData(t.index);if(i){const n=i[a.name];n&&(n[s]=o,e.setAttributeData(t.index,i,r),f=!0)}})),f&&e.clearMemCache()},rollback(){if(0===d){for(const t of u)this.setAttribute(t,a[t]);c.rollback(),d=1,e.sessions.delete(s)}},commit(){0===d&&(c.commit(),d=2,e.sessions.delete(s))}};return e.sessions.set(s,b),b}function i(t,n){const r=a(t,n);if(0===r.size)return;const o=new Map;for(let e=0;e<t.attributeStorageInfo.length;e++)o.set(t.attributeStorageInfo[e].name,e);let s=!1;r.forEach(((n,r)=>{const i=t.getAttributeData(r);let a=!1;n.forEach(((n,r)=>{const u=e(i)?i[r]:null,c=o.get(r);for(const{featureIndex:e,value:o,featureId:i}of n)u&&(u[e]=o,a=!0,s=!0),t.attributeOverrides.updateValue(i,c,o)})),a&&t.setAttributeData(r,i,null)})),s&&t.clearMemCache()}function a(t,e){const n=e.edits.updateFeatures;if(!n||0===n.length)return new d;const o=f(e),s=new d,i=new Map;for(let r=0;r<t.attributeStorageInfo.length;r++)i.set(t.attributeStorageInfo[r].name,r);const a=t.fieldsIndex,c=t.objectIdField,l=n.filter((t=>{const e=r(a,t.attributes,c);return o.has(e)}));return t.forEachNode(((e,n)=>{const o=new Set(n);for(const i of l){const f=r(a,i.attributes,c);if(!o.has(f))continue;const l=n.indexOf(f);for(const n in i.attributes){const r=t.fieldsIndex.normalizeFieldName(n),o=u(s,e.index,r),a=i.attributes[n];o.push({featureIndex:l,featureId:f,value:a})}}})),s}function u(t,e,n){const r=c(t,e),o=r.get(n);if(o)return o;const s=new Array;return r.set(n,s),s}function c(t,e){const n=t.get(e);if(n)return n;const r=new l;return t.set(e,r),r}function f(t){const e=new Set;if(!t.updatedFeatures)return e;for(const n of t.updatedFeatures)null!=n.objectId&&null==n.error&&e.add(n.objectId);return e}const l=Map,d=Map;export{s as createInteractiveEditSession,i as processAttributeEdits};
