/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{createScreenPointArray as e,createRenderScreenPointArray3 as t}from"../../../../core/screenUtils.js";import{a as i,b as s}from"../../../../chunks/vec3.js";import{c as r}from"../../../../chunks/vec3f64.js";import{create as o,fromValues as n,distance as a,empty as c,expandPointInPlace as l,expand as h,intersection as m}from"../../../../geometry/support/aaBoundingRect.js";import{signedDistance as u,normal as p}from"../../../../geometry/support/plane.js";import{areaPoints2d as d}from"../../../../geometry/support/triangle.js";import{FeatureTileVisibility3D as f}from"./FeatureTileVisibility3D.js";import S from"../../webgl-engine/lib/Camera.js";class j{constructor(e){this.camera=new S,this.focusOnMap=[0,0],this.screenRect=o(),this.tileSize=e.tileSize,this.renderCoordsHelper=e.renderCoordsHelper,this.tilingScheme=e.tilingScheme,this.visibility=new f(e.renderCoordsHelper)}begin(e,t,i){this.camera.copyFrom(e),this.surfaceElevation=i,this.focusOnMap[0]=t.x,this.focusOnMap[1]=t.y,n(0,0,e.fullWidth,e.fullHeight,this.screenRect),this.visibility.begin(this.camera,i)}end(){this.visibility.end()}updateTile(e){e.measures.visibility=this.visibility.calculate(e),e.measures.distance=a(e.extent,this.focusOnMap),0!==e.measures.visibility&&this.updateScreenMeasure(e)}updateScreenMeasure(e){const t=y,i=1<<t,s=e.measures.screenRect;c(s);let r=0;const o=e.lij[0]+t,n=e.lij[1]<<t,a=e.lij[2]<<t,l=this.tileSizeWithBias(e),h=l*l;for(let c=0;c<i;c++)for(let t=0;t<i;t++)if(r+=this.computeScreenArea(e,o,n+c,a+t,s),r>h)return void(e.measures.shouldSplit=!0);e.measures.shouldSplit=!1}tileSizeWithBias(e){return 1===e.measures.visibility?this.tileSize*v:this.tileSize}computeScreenArea(e,t,i,s,r){const o=1===e.measures.visibility;this.projectToScreen(t,i,s,o,R),c(g);for(let n=0;n<4;n++)l(g,R[n]);return h(r,g),m(g,this.screenRect,b),d(R[0],R[1],R[2])+d(R[0],R[2],R[3])}projectToScreen(e,t,i,s,r){this.tilingScheme.ensureMaxLod(e),this.tilingScheme.getExtent(e,t,i,C),this.toRenderCoords(C,0,3,M[0]),this.toRenderCoords(C,2,3,M[1]),this.toRenderCoords(C,2,1,M[2]),this.toRenderCoords(C,0,1,M[3]),s&&(this.projectToPlane(M,this.camera.frustum[4]),this.projectToPlane(M,this.camera.frustum[3]),this.projectToPlane(M,this.camera.frustum[2]));for(let o=0;o<4;o++)this.camera.projectToRenderScreen(M[o],z),this.camera.renderToScreen(z,r[o])}projectToPlane(e,t){for(let i=0;i<4;i++)x[i]=u(t,e[i]);const r=Math.max(x[0],x[1],x[2],x[3]);if(r>0){const o=i(T,p(t),-r);for(let t=0;t<4;t++)s(e[t],e[t],o)}}toRenderCoords(e,t,i,s){return T[0]=e[t],T[1]=e[i],T[2]=this.surfaceElevation,this.renderCoordsHelper.toRenderCoords(T,this.tilingScheme.spatialReference,s),s}}const g=o(),b=o(),y=2,v=5,R=[e(),e(),e(),e()],C=o(),T=r(),M=[r(),r(),r(),r()],x=[0,0,0,0],z=t();export default j;export{j as FeatureTileMeasurements3D};
