/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{g as t,r as i}from"../../../chunks/vec3.js";import{c as s}from"../../../chunks/vec3f64.js";import{create as e,createPoints as r,fromMatrix as n,computePlanes as o,intersectsSphere as u,intersectsRay as h,intersectsLineSegment as p,intersectsPoint as l,planePointIndices as d}from"../../../geometry/support/frustum.js";class c{constructor(t){this.renderCoordsHelper=t,this.frustum=e(),this._points=r(),this.lines=new Array(12),this._origin=s(),this._direction=s(),this._altitude=null;for(let i=0;i<12;i++)this.lines[i]={origin:null,direction:s(),endpoint:null}}get planes(){return this.frustum}get points(){return this._points}get mutablePoints(){return this._points}get direction(){return this._direction}update(i){n(i.viewMatrix,i.projectionMatrix,this.frustum,this._points),t(this._origin,i.eye),t(this._direction,i.viewForward),this._altitude=this.renderCoordsHelper.getAltitude(this._origin),this.updateLines()}updatePoints(i){for(let s=0;s<this._points.length;s++)t(this._points[s],i[s]);o(this.frustum,this._points),this.updateLines()}get altitude(){return this._altitude}intersectsSphere(t){return u(this.frustum,t)}intersectsRay(t){return h(this.frustum,t)}intersectsLineSegment(t,i){return p(this.frustum,t,i)}intersectsPoint(t){return l(this.frustum,t)}updateLines(){const t=this._points;for(let i=0;i<4;i++){const s=i+4;a(this.lines[i],t[i],t[s]),a(this.lines[i+4],t[i],3===i?t[0]:t[i+1]),a(this.lines[i+8],t[s],3===i?t[4]:t[s+1])}}}function a(t,s,e){t.origin=s,t.endpoint=e,i(t.direction,s,e)}c.planePointIndices=d,c.nearFarLineIndices=[[0,4],[1,5],[2,6],[3,7]];export{c as Frustum};
