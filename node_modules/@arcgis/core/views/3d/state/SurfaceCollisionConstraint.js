/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import r from"../../../core/Handles.js";import{property as s}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/Logger.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/mathUtils.js";import"../../../geometry/support/ray.js";import"../../../chunks/sphere.js";import"../../../geometry/support/vectorStacks.js";import{applySurfaceCollisionConstraint as i}from"../camera/constraintUtils/surfaceCollision.js";import"../../../geometry/projectionEllipsoid.js";import{eyeWithinExtent as a}from"../camera/intersectionUtils.js";let n=class extends t{constructor(e){super(e),this.handles=new r}initialize(){this.handles.add(this.view.basemapTerrain.on("elevation-change",(e=>this.handleElevationChangeEvent(e))))}destroy(){this.handles&&(this.handles.destroy(),this.handles=null)}handleElevationChangeEvent(e){if(this.view.state.cameraController)return;const t=this.view.state.camera;a(this.view,t,e.extent,e.spatialReference)&&this.applyToCurrentCamera()}applyToCurrentCamera(){this.view.state.updateCamera((e=>{i(this.view,e,1)}))}};e([s({constructOnly:!0})],n.prototype,"view",void 0),n=e([o("esri.views.3d.state.ElevationCollisionConstraint")],n);var p=n;export default p;export{n as SurfaceCollisionConstraint};
