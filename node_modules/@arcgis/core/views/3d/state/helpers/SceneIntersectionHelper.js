/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{isNone as e,isSome as t,unwrapOr as r}from"../../../../core/maybe.js";import i from"../../../../core/PooledArray.js";import{castRenderScreenPointArray3 as n,createRenderScreenPointArray as s}from"../../../../core/screenUtils.js";import{b as o,n as a,a as c,l,i as d}from"../../../../chunks/vec3.js";import{c as h}from"../../../../chunks/vec3f64.js";import{create as u}from"../../../../geometry/support/ray.js";import{sv3d as m}from"../../../../geometry/support/vectorStacks.js";import{fromRenderAtEye as p,fromScreen as y}from"../../support/geometryUtils/ray.js";import{Intersector as g}from"../../webgl-engine/lib/Intersector.js";import{sliceFilterPredicate as f}from"../../webgl-engine/lib/intersectorUtils.js";class v{constructor(e,t,r){this.viewingMode=e,this.layerProvider=t,this.view=r,this.externalIntersectionHandlers=new i,this.tolerance=g.DEFAULT_TOLERANCE,this.tmpRay=u(),this.validateHUDIntersector=new g(this.viewingMode),this.validateHUDIntersector.options.hud=!1}intersectScreen(e,t){return this.intersectRay(this.getPickRay(e,this.tmpRay),x(this.viewingMode),t)}intersectScreenFreePointFallback(e,t){return this.intersectRayFreePointFallback(this.getPickRay(e,this.tmpRay),t)}intersectRayFreePointFallback(e,t){return this.intersectRay(e,x(this.viewingMode),t)||this.intersectRayFreePointLocal(e,t)}intersectRay(e,t,r,i){return t.options.selectionMode=!1,t.options.store=0,this.computeIntersection(e,t,i),!!t.results.min&&t.results.min.getIntersectionPoint(r)}getCenterRayWithSubpixelOffset(e,t,r=.5,i=.5){return e.getRenderCenter(M,r,i),M[0]+=.0466,M[1]-=.0123,p(e,M,t)}intersectIntersectorScreen(e,t,r){this.computeIntersection(this.getPickRay(e,this.tmpRay),t,r)}intersectToolIntersectorScreen(e,t,r){const i=this.getPickRay(e,this.tmpRay);this.intersectToolIntersectorRay(i,t,r)}intersectToolIntersectorRay(e,t,r){t.options.selectionMode=!0,this.computeIntersection(e,t,r);const i=t.results.min;!!this.view.basemapTerrain&&this.view.basemapTerrain.opaque||i.hasIntersectionPoint&&"TerrainRenderer"!==i.intersector||(t.options.selectionMode=!1,this.computeIntersection(e,t,r))}setTolerance(e=g.DEFAULT_TOLERANCE){this.tolerance=e}addIntersectionHandler(e){this.externalIntersectionHandlers.push(e),this.externalIntersectionHandlers.sort(((e,t)=>"Terrain"===e.type?1:"Terrain"===t.type?-1:0))}removeIntersectionHandler(e){this.externalIntersectionHandlers.removeUnordered(e),this.externalIntersectionHandlers.sort(((e,t)=>"Terrain"===e.type?1:"Terrain"===t.type?-1:0))}getPickRay(e,t=u()){const r=this.view.state.camera;return y(r,e,t)}intersectRayFreePointLocal(t,r){if(2!==this.viewingMode||e(t))return!1;const i=this.view.dataExtent,n={x:i.xmax-i.xmin,y:i.ymax-i.ymin,z:8*Math.max(i.xmax-i.xmin,i.ymax-i.ymin)},s=Math.max(n.x,n.y,n.z);if(0===s)return o(r,t.origin,a(m.get(),t.direction)),!0;const d=this.view.state.camera,h=Math.max(0,i.xmin-d.eye[0],d.eye[0]-i.xmax),u=Math.max(0,i.ymin-d.eye[1],d.eye[1]-i.ymax),p=Math.sqrt(h*h+u*u),y=Math.abs(d.relativeElevation)+Number.MIN_VALUE,g=Math.max(0,Math.log(s/y))**2;let f=s/Math.max(1,g);f=Math.max(f,Math.min(p,s));const v=c(m.get(),t.direction,f/l(t.direction));return o(r,t.origin,v),!0}intersectElevationFromScreen(e,t,r=0,i=null){return this.intersectElevation(this.getPickRay(e,this.tmpRay),t,r,i)}intersectElevation(i,s,a=0,c=null){if(e(i))return null;const l=t(s)?s.mode:"absolute-height",d=t(s)?r(s.offset,0):0,h="on-the-ground"!==l?d+a:0,u=h/this.view.renderCoordsHelper.unitInMeters;if("absolute-height"===l){if(this.view.renderCoordsHelper.intersectInfiniteManifold(i,h,b)){const e=this.view.computeMapPointFromVec3d(b);return e.z-=d,e}return null}const p=this.view.state.camera,y=n(m.get());p.projectToRenderScreen(i.origin,y);const v=this.prepareFilters(null,w),R=this.view.slicePlane,I=t(R)?f(R):null,x=new g(this.viewingMode);x.options.store=0,x.options.verticalOffset=u;const P=i.origin,M=o(m.get(),P,i.direction);x.reset(P,M),x.point=y,x.camera=p,x.filterPredicate=null;const H=t(c)?"type"in c&&"graphics"===c.type?e=>e.metadata.layerUid!==c.uid:e=>e.metadata.graphicUid!==c.uid:null;switch(l){case"relative-to-scene":{const t=t=>(e(H)||H(t))&&t.metadata&&t.metadata.isElevationSource;x.intersect(v.layers,y,p,this.tolerance,null,t),this.externalIntersectionHandlers.forAll((e=>{if("I3S"===e.type||"Terrain"===e.type){const t=e.slicePlane?I:null;e.intersect(x,t,x.rayBeginPoint,x.rayEndPoint,y)}}))}break;case"on-the-ground":case"relative-to-ground":this.externalIntersectionHandlers.forAll((e=>{if(e.isGround){const t=e.slicePlane?I:null;e.intersect(x,t,x.rayBeginPoint,x.rayEndPoint,y)}}))}if(x.results.min.getIntersectionPoint(b)){const e=this.view.computeMapPointFromVec3d(b);return e.z=a,e}return null}computeIntersection(i,s,a){if(e(i))return;const c=this.view.state.camera,l=n(m.get());c.projectToRenderScreen(i.origin,l);const h=this.prepareFilters(a,w);s.options.selectOpaqueTerrainOnly=!a||!("include"in a||"exclude"in a);const u=i.origin,p=o(m.get(),i.origin,i.direction);s.reset(u,p),s.intersect(h.layers,l,c,this.tolerance);const y=this.view.slicePlane,g=t(y)?f(y):null;s.intersect(h.sliceableLayers,l,c,this.tolerance,g);const v=a&&(a.requiresGroundFeedback||a.enableDraped);this.externalIntersectionHandlers.forAll((e=>{if(s.options.isFiltered=!h.filterLayerUid(e.intersectionHandlerId),e.isGround&&v||!s.options.isFiltered){const t=e.slicePlane?g:null;e.intersect(s,t,u,p,l)}}));const R=m.get();if(a&&a.enableDraped&&s.results.ground.getIntersectionPoint(R)){const e=this.view.basemapTerrain.overlayManager.renderer,t=this.view.renderCoordsHelper.spatialReference,i=m.get();this.view.renderCoordsHelper.fromRenderCoords(R,i,this.view.spatialReference),i[2]=r(this.view.elevationProvider.getElevation(R[0],R[1],R[2],t,"ground"),0),e.intersect(s,i,h.filterRenderGeometry)}s.sortResults();const I=s.results.hud;if(I.hasIntersectionPoint){const e=n(m.get()),t=m.get(),r=m.get();this.unprojectHUDResultRay(I.center,e,t,r);const i=d(I.center,t)/d(t,r)*.99;this.validateHUDIntersector.reset(t,r),this.validateHUDIntersector.intersect(h.layers,e,c,this.tolerance),this.validateHUDIntersector.intersect(h.sliceableLayers,e,c,this.tolerance,g),this.externalIntersectionHandlers.forAll((i=>{if(!h.filterLayerUid(i.intersectionHandlerId))return;const n=i.slicePlane?g:null;i.intersect(this.validateHUDIntersector,n,t,r,e)}));const o=this.validateHUDIntersector.results.min;(null==o.dist||i<=o.dist)&&(s.results.min.copyFrom(I),s.results.all.splice(0,0,I))}}prepareFilters(e,t){const r=[],i=[];return this.layerProvider.forEachLayer((e=>{e.isPickable&&(e.isSliceable?i:r).push(e)})),t.include=e&&e.include,t.exclude=e&&e.exclude,t.layers.length=0,t.sliceableLayers.length=0,R(r,t.filterLayer,t.layers),R(i,t.filterLayer,t.sliceableLayers),t}unprojectHUDResultRay(e,t,r,i){const s=this.view.state.camera;s.projectToRenderScreen(e,t);const o=n(m.get());o[0]=t[0],o[1]=t[1],o[2]=0,s.unprojectFromRenderScreen(o,r),o[2]=1,s.unprojectFromRenderScreen(o,i)}}function R(e,t,r){for(const i of e)t&&!t(i)||r.push(i);return r}let I;function x(e){return I||(I=new g(e)),I.viewingMode=e,I}const w={include:null,exclude:null,layers:[],sliceableLayers:[],filterLayer:e=>w.filterLayerUid(e.apiLayerUid),filterLayerUid(t){const{include:r,exclude:i}=w;return e(t)?null==r&&null==i:(null==r||r.has(t))&&(null==i||!i.has(t))},filterRenderGeometry:e=>w.filterLayerUid(e.layerUid)};function P(e){return"object"==typeof e&&"intersect"in e}const b=h(),M=s();export{v as SceneIntersectionHelper,P as isIntersectionHandler};
