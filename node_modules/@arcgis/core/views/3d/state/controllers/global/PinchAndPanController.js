/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import{deg2rad as i}from"../../../../../core/mathUtils.js";import{createScreenPointArray as e,screenPointObjectToArray as n,createRenderScreenPointArray3 as s}from"../../../../../core/screenUtils.js";import{property as o}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/Logger.js";import{subclass as r}from"../../../../../core/accessorSupport/decorators/subclass.js";import{c as a}from"../../../../../chunks/vec2.js";import{g as h,o as m,l as c,f as p,n as u,b as l,a as P,d}from"../../../../../chunks/vec3.js";import{c as g}from"../../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as v}from"../../../../../geometry/projectionEllipsoid.js";import{wrapAxisAngle as C}from"../../../../../geometry/support/axisAngle.js";import{create as M,fromPositionAndNormal as S,normal as w}from"../../../../../geometry/support/plane.js";import{c as b}from"../../../../../chunks/sphere.js";import{disableContextNavigation as f}from"../../../../../support/featureFlags.js";import{pixelDistanceToInteractionFactor as j,applyAll as y}from"../../../camera/constraintUtils.js";import{ExponentialFalloff as k}from"../../../input/util.js";import{InteractiveController as E}from"../InteractiveController.js";import{PanPlanarMomentumController as O}from"../momentum/PanPlanarMomentumController.js";import{PanSphericalMomentumController as z}from"../momentum/PanSphericalMomentumController.js";import{RotationMomentumController as A}from"../momentum/RotationMomentumController.js";import{ZoomPlanarMomentumController as R}from"../momentum/ZoomPlanarMomentumController.js";import{ZoomSphericalMomentumController as x}from"../momentum/ZoomSphericalMomentumController.js";import{NavigationMode as H,pickPointAndInitSphere as F,decideNavigationMode as T,sphereOrPlanePointFromScreenPoint as D,intersectPlaneFromScreenPoint as U,applyZoomOnSphere as I,preserveHeadingThreshold as G,applyPanSphericalPreserveHeading as Z,applyPanSphericalDirectRotation as V,normalizeRotationDelta as _,applyRotation as L,applyPanPlanar as q,applyZoomToPoint as B}from"../../utils/navigationUtils.js";import{cyclicalPI as J}from"../../../support/mathUtils.js";import K from"../../../webgl-engine/lib/Camera.js";import{PanPlanarMomentumEstimator as N}from"../../../../navigation/PanPlanarMomentumEstimator.js";import{PanSphericalMomentumEstimator as Q}from"../../../../navigation/PanSphericalMomentumEstimator.js";import{RotationMomentumEstimator as W}from"../../../../navigation/RotationMomentumEstimator.js";import{ZoomMomentumEstimator as X}from"../../../../navigation/ZoomMomentumEstimator.js";let Y=class extends E{constructor(t){super(t),this.view=null,this.smoothRotation=new k(.05),this.rotationAxis=g(),this.panningPlane=M(),this.smoothScaling=new k(.05),this.zoomCenterScreen=e(),this.zoomMomentumEstimator=new X,this.rotationMomentumEstimator=new W,this.panSphericalMomentumEstimator=new Q,this.panPlanarMomentumEstimator=new N,this.adjustedSphere=b(),this.tmp3d=g(),this.tmpScreenPointArray=e(),this.beginScreenPoint=e(),this.beginScenePoint=g(),this.screenPickPoint=e(),this.navMode=H.Horizontal,this.tmpInteractionDirection=g(),this.constraintOptions={selection:15,interactionType:0,interactionFactor:0,interactionStartCamera:new K,interactionDirection:null,tiltMode:0}}get intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;const e=this.view.navigation.momentumEnabled;this.zoomMomentumEstimator.enabled=e,this.rotationMomentumEstimator.enabled=e,this.panPlanarMomentumEstimator.enabled=e,this.panSphericalMomentumEstimator.enabled=e,this.beginHeading=-J.normalize(i(this.view.camera.heading)),this.beginRadius=t.radius,this.pointerCount=t.pointers.size,this.beginAngle=t.angle,this.smoothRotation.reset(),n(t.center,this.screenPickPoint),a(this.beginScreenPoint,this.screenPickPoint);const s=v(this.view.spatialReference),o=F(this.intersectionHelper,this.startCamera,this.screenPickPoint,!0,s);this.scenePickPoint=o.scenePickPoint,this.sphere=o.sphere,h(this.beginScenePoint,this.scenePickPoint),this.navMode=T(this.startCamera,this.screenPickPoint,o.hasGeometryIntersection,s),this.navMode===H.Vertical&&this.preparePlanarPanMode(t),this.constraintOptions.interactionStartCamera.copyFrom(this.startCamera)}preparePlanarPanMode(t){const i=m(this.tmp3d,this.startCamera.viewForward);S(this.scenePickPoint,i,this.panningPlane);const o=e(this.screenPickPoint[0],0),r=g(),a=c(this.startCamera.eye);this.adjustedSphere[3]=a<this.sphere[3]?a-100:this.sphere[3],D(this.adjustedSphere,this.startCamera,o,r);const v=s();this.startCamera.projectToRenderScreen(r,v);const C=.9*v[1];if(this.screenPickPoint[1]=Math.min(this.screenPickPoint[1],C),this.intersectionHelper.intersectScreen(this.screenPickPoint,this.scenePickPoint)&&S(this.scenePickPoint,w(this.panningPlane),this.panningPlane),!f()){const t=g(),i=g(),e=g(),n=80,s=5,o=50;p(t,this.scenePickPoint,this.currentCamera.eye),u(t,t);const r=s*Math.max(Math.abs(this.view.camera.position.z),o),a=this.view._stage.renderView.getMinimalDepthForArea(this.screenPickPoint[0],this.screenPickPoint[1],this.view.state.camera,n),m=a?Math.min(a,r):r;h(e,l(i,this.currentCamera.eye,P(i,t,m))),this.panningPlane[3]=-d(this.panningPlane,e),this.startCamera.center=l(i,this.startCamera.eye,P(i,this.startCamera.viewForward,m))}const M=n(t.center,this.tmpScreenPointArray);U(this.panningPlane,this.startCamera,M,this.beginScenePoint)}update(t){if(!this.active)return;this.currentCamera.copyFrom(this.startCamera);const i=t.pointers.size>1;this.navMode===H.Horizontal?(i&&this.zoomSpherical(t),this.panningSpherical(t),i&&this.rotateSpherical(t)):(i&&this.zoomPlanar(t),this.panningPlanar(t),i&&this.rotatePlanar(t))}end(t){t.pointers.size===this.pointerCount&&this.update(t),this.finishController();const i=this.zoomMomentumEstimator.evaluateMomentum();if(i)return this.navMode===H.Horizontal?new x({view:this.view,momentum:i,screenCenter:this.zoomCenterScreen,sceneCenter:this.beginScenePoint,radius:this.sphere[3]}):new R({view:this.view,momentum:i,zoomCenter:this.beginScenePoint});const e=this.rotationMomentumEstimator.evaluateMomentum();if(e)return new A({view:this.view,momentum:e,center:this.sphere,axis:this.rotationAxis});if(this.navMode===H.Horizontal){const t=this.panSphericalMomentumEstimator.evaluateMomentum();if(t)return new z({view:this.view,momentum:t})}else{const t=this.panPlanarMomentumEstimator.evaluateMomentum();if(t)return new O({view:this.view,momentum:t})}return null}zoomSpherical(t){const i=this.beginRadius/t.radius,e=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=e,this.smoothScaling.update(i),I(this.sphere,this.currentCamera,this.smoothScaling.value),n(t.center,this.zoomCenterScreen),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),this.constraintOptions.interactionType=1,this.constraintOptions.interactionFactor=j(t.radius-this.beginRadius),y(this.view,this.currentCamera,this.constraintOptions)}panningSpherical(t){const i=n(t.center,this.tmpScreenPointArray);D(this.sphere,this.currentCamera,i,this.tmp3d),G(this.beginScenePoint,d(this.currentCamera.up,this.beginScenePoint),this.sphere[3],this.beginHeading,this.view.camera.tilt,this.startCamera)?(Z(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.beginHeading,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumPreserveHeading(i,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere,this.beginHeading,this.view.camera.tilt)):(V(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumDirectRotation(i,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere[3],this.view.camera.tilt)),this.constraintOptions.interactionType=4,this.constraintOptions.interactionFactor=j(this.screenPickPoint,i),y(this.view,this.currentCamera,this.constraintOptions)}rotateSpherical(t){u(this.rotationAxis,this.scenePickPoint),this.currentCamera.aboveGround||m(this.rotationAxis,this.rotationAxis);const i=this.smoothRotation.value,e=i+_(t.angle-i),n=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=n,this.smoothRotation.update(e);const s=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(s,.001*t.timestamp),L(this.currentCamera,this.sphere,C(this.rotationAxis,s)),this.constraintOptions.interactionType=2,this.constraintOptions.interactionFactor=j(t.radius*e),y(this.view,this.currentCamera,this.constraintOptions)}panningPlanar(t){const i=n(t.center,this.tmpScreenPointArray);U(this.panningPlane,this.currentCamera,i,this.tmp3d)&&(q(this.currentCamera,this.beginScenePoint,this.tmp3d),this.panPlanarMomentumEstimator.add(i,this.tmp3d,.001*t.timestamp),this.constraintOptions.interactionType=4,this.constraintOptions.interactionFactor=j(this.beginScreenPoint,i),this.constraintOptions.interactionDirection=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,this.tmpInteractionDirection),y(this.view,this.currentCamera,this.constraintOptions),this.constraintOptions.interactionDirection=null)}zoomPlanar(t){const i=this.beginRadius/t.radius,e=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=e,this.smoothScaling.update(i),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),B(this.currentCamera,this.beginScenePoint,this.smoothScaling.value,this.view.state.constraints.minimumPoiDistance),this.constraintOptions.interactionType=1,this.constraintOptions.interactionFactor=j(t.radius-this.beginRadius),y(this.view,this.currentCamera,this.constraintOptions)}rotatePlanar(t){h(this.rotationAxis,this.beginScenePoint),this.currentCamera.aboveGround||m(this.rotationAxis,this.rotationAxis);const i=this.smoothRotation.value;let e=t.angle-i;e=_(e);const n=i+e,s=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=s,this.smoothRotation.update(n);const o=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(o,.001*t.timestamp),L(this.currentCamera,this.sphere,C(this.rotationAxis,o)),this.constraintOptions.interactionType=2,this.constraintOptions.interactionFactor=j(t.radius*o),y(this.view,this.currentCamera,this.constraintOptions)}};t([o({constructOnly:!0})],Y.prototype,"view",void 0),Y=t([r("esri.views.3d.state.controllers.global.PinchAndPanController")],Y);export{Y as PinchAndPanController};
