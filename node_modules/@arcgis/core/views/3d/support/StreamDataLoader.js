/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../request.js";import s from"../../../core/Accessor.js";import{removeUnordered as r}from"../../../core/arrayUtils.js";import o from"../../../core/Error.js";import{clone as a}from"../../../core/lang.js";import{removeMaybe as n,isSome as i}from"../../../core/maybe.js";import{createResolver as u,onAbort as l,createAbortError as d,throwIfAborted as h,isAbortError as c,createAbortController as p}from"../../../core/promiseUtils.js";import{property as m}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/has.js";import"../../../core/Logger.js";import{subclass as g}from"../../../core/accessorSupport/decorators/subclass.js";import{AsyncWorkerQueue as k}from"./AsyncWorkerQueue.js";import f from"./StreamDataLoaderTask.js";import{assert as b}from"../webgl-engine/lib/Util.js";import{TaskPriority as y}from"../../support/Scheduler.js";let L=class extends s{constructor(){super(...arguments),this.tasks=new Map,this.onLoadQueue=new Array,this.doneQueue=new Array,this.updating=!1}setup(e,t,s){this.loadQueue=new k(((e,t)=>this.startLoading(e,t)),((e,t)=>this.doneLoadingCallback(e,t)),e,t),s&&(this.taskHandle=s.registerTask(y.STREAM_DATA_LOADER,this))}destroy(){this.taskHandle=n(this.taskHandle),this.tasks.forEach((e=>{e.abortController&&e.abortController.abort()})),this.loadQueue.destroy(),this.loadQueue=null,this.onLoadQueue=null,this.doneQueue=null,this.tasks=null}hasDownloadSlots(e){return this.loadQueue.hasQuota(e)}request(e,t,s,r={}){const o=u();o.__signal=i(r)?r.signal:null;const a=this.createOrUpdateTask(e,t,s,r,o);return l(r,(()=>this.cancelRequest(a,o))),o.promise}createTask(e,t,s,r,o,a){const n=new f(e,t,s,r,o);return this.updateTask(n,a),this.tasks.set(o,n),1===this.tasks.size&&this._set("updating",!0),this.loadQueue.push(n),n}cancelRequest(e,t){r(e.resolvers,t),t.reject(d()),0===e.resolvers.length&&(2===e.status&&(e.status=4,this.loadQueue.cancel(e),e.abortController.abort(),e.request=null,e.abortController=null),e.status=4,this.tasks.delete(e.key),0===this.tasks.size&&this._set("updating",!1))}taskKey(e,t,s){return`${e}:${t}:${s}`}updateTask(e,t){e.resolvers.push(t)}createOrUpdateTask(e,t,s,r,o){const a=i(r)&&r.uid||e,n=this.taskKey(a,t,s),u=this.tasks.get(n);return u?(this.updateTask(u,o),u):this.createTask(e,r,t,s,n,o)}doneLoadingCallback(e,t){this.loadQueue&&(b(2===e.status),e.status=3,this.taskHandle?this.doneQueue.push({task:e,err:t}):this.doneLoading(e,t))}get running(){return this.doneQueue.length>0||this.onLoadQueue.length>0}runTask(e){for(;!e.done&&this.onLoadQueue.length>0;){const t=this.onLoadQueue.shift();h(t.task.abortController),t.task.abortController=null,t.callback(t.task),e.madeProgress()}for(;!e.done&&this.doneQueue.length>0;){const t=this.doneQueue.shift();3!==t.task.status&&(t.err=t.err||d()),this.doneLoading(t.task,t.err),e.madeProgress()}}doneLoading(e,t){let s=e.result instanceof HTMLImageElement?0:e.resolvers.length;for(const r of e.resolvers)if(t)c(t)?r.reject(t):r.reject(new o("stream-data-loader:request-error",`Failed to request resource at '${e.url}'. ${t}`,{url:e.url,error:t}));else{--s;const t=s<=0?e.result:a(e.result);r.resolve(t)}this.tasks.delete(e.key),0===this.tasks.size&&this._set("updating",!1)}startLoading(e,s){if(4===e.status)return!1;let r,o;switch(e.startTime=performance.now(),e.status=2,e.docType){case"binary":o="array-buffer",r=0;break;case"image":o="image";break;case"image+type":o="array-buffer";break;default:o="json"}e.abortController=p();const a=e.abortController.signal;e.request=t(e.url,{...e.options,responseType:o,timeout:r,signal:a});let n=()=>{};const i=t=>{e.duration=performance.now()-e.startTime,e.size=t instanceof ArrayBuffer?t.byteLength:e.size||0,e.result=t,this.taskHandle?this.onLoadQueue.push({callback:s,task:e}):(e.abortController=null,s(e))},u=t=>{2===e.status&&s(e,t),n()};return"image+type"!==e.docType?(e.request.then((e=>i(e.data)),u),!0):(e.request.then((s=>{const l=s.data,d=j(l);if(o="image",e.size=l.byteLength,"unknown"===d)return e.request=t(e.url,{responseType:o,timeout:r,signal:a}),void e.request.then((e=>i(e.data)),u);const h=new Blob([l],{type:d}),c=window.URL.createObjectURL(h);n=()=>window.URL.revokeObjectURL(c),e.request=t(c,{responseType:o,timeout:r,signal:a}),e.request.then((e=>i(new Q(e.data,d,n))),u)}),u),!0)}get test(){return{loadQueue:this.loadQueue}}};function j(e){if(e.byteLength<2)return"unknown";const t=new Uint8Array(e,0,e.byteLength);return 137===t[0]&&80===t[1]?"image/png":71===t[0]&&73===t[1]?"image/gif":66===t[0]&&77===t[1]?"image/bmp":255===t[0]&&216===t[1]?"image/jpeg":"unknown"}e([m({readOnly:!0})],L.prototype,"updating",void 0),L=e([g("esri.views.3d.support.StreamDataLoader")],L);class Q{constructor(e,t,s){this.image=e,this.type=t,this.release=s}get isOpaque(){return"image/jpeg"===this.type}}var w=L;export default w;export{Q as ImageWithType,L as StreamDataLoader};
