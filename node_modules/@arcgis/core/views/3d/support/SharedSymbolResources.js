/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{removeUnordered as e}from"../../../core/arrayUtils.js";import t from"../../../core/Handles.js";import{getReferenceEllipsoid as s}from"../../../geometry/projectionEllipsoid.js";import{TextureCollection as i}from"./TextureCollection.js";import{getSettings as r,getLabelSettings as n}from"../webgl-engine/lib/screenSizePerspectiveUtils.js";class c{constructor(e){this.textures=null,this.streamDataRequester=null,this.graphicsOwners=[],this.screenSizePerspectiveHandles=null,this.cimSymbolRasterizer=null,this.viewState=e.viewState,this.view=e.view,this.pointsOfInterest=e.pointsOfInterest,this.objectResourceCache=e.objectResourceCache,this.streamDataRequester=e.resourceController.createStreamDataRequester(4),this.textures=new i(this.streamDataRequester,e.view._stage,{preMultiplyAlpha:!0,wrap:{s:33071,t:33071}},e.resourceController.scheduler);const t=s(this.view.spatialReference).radius;this.screenSizePerspectiveSettings=r(e.viewingMode,t),this.screenSizePerspectiveSettingsLabels=n(e.viewingMode,t)}destroy(){this.textures.destroy(),this.textures=null,this.streamDataRequester=null}addGraphicsOwner(t){if(!t)return{remove(){}};this.graphicsOwners.push(t);const s="layer"in t?t.watch("layer.screenSizePerspectiveEnabled",(()=>this.updateScreenSizePerspectiveEnabled())):null;return this.updateScreenSizePerspectiveEnabled(),{remove:()=>{s&&(s.remove(),e(this.graphicsOwners,t),this.updateScreenSizePerspectiveEnabled())}}}updateScreenSizePerspectiveEnabled(){const e=this.graphicsOwners.some((e=>!0===e.get("layer.screenSizePerspectiveEnabled")));if(e&&!this.screenSizePerspectiveHandles){this.screenSizePerspectiveHandles=new t;const e=()=>this.updateScreenSizePerspectiveSettings();this.screenSizePerspectiveHandles.add([this.pointsOfInterest.centerOnSurfaceInfrequent.watch("distance",e,!0),this.viewState.events.on("camera-projection-changed",e)]),this.updateScreenSizePerspectiveSettings()}else!e&&this.screenSizePerspectiveHandles&&(this.screenSizePerspectiveHandles.destroy(),this.screenSizePerspectiveHandles=null)}updateScreenSizePerspectiveSettings(){const e=this.pointsOfInterest;a.distance=e.centerOnSurfaceInfrequent.distance,a.fovY=this.viewState.camera.fovY,this.screenSizePerspectiveSettings.update(a),this.screenSizePerspectiveSettingsLabels.update(a),this.view._stage.renderView.setNeedsRender()}}const a={distance:0,fovY:0};export default c;export{c as SharedSymbolResources};
