/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import"../../../geometry.js";import{result as e}from"../../../core/asyncUtils.js";import r from"../../../core/Error.js";import{getMetersPerUnitForSR as t}from"../../../core/unitUtils.js";import{getReferenceEllipsoid as o}from"../../../geometry/projectionEllipsoid.js";import{create as i}from"../../../portal/support/geometryServiceUtils.js";import s from"../../../rest/support/ProjectParameters.js";import a from"../../../geometry/Point.js";import m from"../../../geometry/SpatialReference.js";class c{constructor(r,i,s=null){this.spatialReference=i,this.unitInMeters=t(this.spatialReference,o(this.spatialReference).metersPerDegree),this._geometryServicePromise=e(this.loadGeometryService(r,s))}async loadGeometryService(e,t){if(t)return t;try{return await i(e&&e.get("portalItem"))}catch{throw new r("mapcoordshelper:missing-geometry-service","Must specify geometryService in esri/config")}}async awaitGeometryService(){const e=await this._geometryServicePromise;if(!0===e.ok)return e.value;throw e.error}async toGeographic(e){const r=await this.awaitGeometryService();let t,o=!0;Array.isArray(e[0])&&"number"!=typeof e[0]?t=e:(t=[e],o=!1);const i=t.map((e=>e instanceof a?e:new a(e,this.spatialReference))),c=new s({geometries:i,outSpatialReference:m.WGS84}),p=(await r.project(c)).map((e=>"point"===e.type?[e.x,e.y]:void 0));return o?p:p[0]}}export default c;export{c as MapCoordsHelper};
