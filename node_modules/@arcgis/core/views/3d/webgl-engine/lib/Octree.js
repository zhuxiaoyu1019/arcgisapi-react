/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import t from"../../../../core/ObjectPool.js";import n from"../../../../core/PooledArray.js";import{a as i,b as o,g as s,e as r}from"../../../../chunks/vec3.js";import{f as h,c as a}from"../../../../chunks/vec3f64.js";import{intersectsSphere as l}from"../../../../geometry/support/frustum.js";import{wrap as d}from"../../../../geometry/support/ray.js";import{h as c,j as u,c as f,g as m}from"../../../../chunks/sphere.js";import{rayBoxTest as _}from"./Util.js";class p{constructor(e,t){this._objectToBoundingSphere=e,this._maximumObjectsPerNode=10,this._maximumDepth=20,this._degenerateObjects=new Set,this._root=new b,this._objectCount=0,t&&(void 0!==t.maximumObjectsPerNode&&(this._maximumObjectsPerNode=t.maximumObjectsPerNode),void 0!==t.maximumDepth&&(this._maximumDepth=t.maximumDepth))}get bounds(){return this._root.bounds}get halfSize(){return this._root.halfSize}get root(){return this._root.node}get maximumObjectsPerNode(){return this._maximumObjectsPerNode}get maximumDepth(){return this._maximumDepth}get objectCount(){return this._objectCount}destroy(){this._degenerateObjects.clear(),b.clearPool(),v[0]=null,B.prune(),C.prune()}add(e,t=e.length){this._objectCount+=t,this._grow(e,t);const n=b.acquire();for(let i=0;i<t;i++){const t=e[i];this._isDegenerate(t)?this._degenerateObjects.add(t):(n.init(this._root),this._add(t,n))}b.release(n)}remove(t,n=null){this._objectCount-=t.length;const i=b.acquire();for(const o of t){const t=e(n)?n:c(this._objectToBoundingSphere(o),I);z(t[3])?(i.init(this._root),this._remove(o,t,i)):this._degenerateObjects.delete(o)}b.release(i),this._shrink()}update(e,t){if(!z(t[3])&&this._isDegenerate(e))return;const n=A(e);this.remove(n,t),this.add(n)}forEachAlongRay(e,t,n){const i=d(e,t);this._forEachNode(this._root,(e=>{if(!this._intersectsNode(i,e))return!1;const t=e.node;return t.terminals.forAll((e=>{this._intersectsObject(i,e)&&n(e)})),null!==t.residents&&t.residents.forAll((e=>{this._intersectsObject(i,e)&&n(e)})),!0}))}forEachAlongRayWithVerticalOffset(e,t,n,i){const o=d(e,t);this._forEachNode(this._root,(e=>{if(!this._intersectsNodeWithOffset(o,e,i))return!1;const t=e.node;return t.terminals.forAll((e=>{this._intersectsObjectWithOffset(o,e,i)&&n(e)})),null!==t.residents&&t.residents.forAll((e=>{this._intersectsObjectWithOffset(o,e,i)&&n(e)})),!0}))}forEach(e){this._forEachNode(this._root,(t=>{const n=t.node;return n.terminals.forAll(e),null!==n.residents&&n.residents.forAll(e),!0})),this._degenerateObjects.forEach(e)}forEachDegenerateObject(e){this._degenerateObjects.forEach(e)}findClosest(e,t,n,s=(()=>!0),r=1/0){let h=1/0,a=1/0,d=null;const c=N(e,t),u=i=>{if(--r,!s(i))return;const o=this._objectToBoundingSphere(i);if(!l(n,o))return;const c=M(e,t,m(o)),u=c-o[3],f=c+o[3];u<h&&(h=u,a=f,d=i)};return this._forEachNodeDepthOrdered(this._root,(s=>{if(r<=0||!l(n,s.bounds))return!1;i(k,c,s.halfSize),o(k,k,s.bounds);if(M(e,t,k)>a)return!1;const h=s.node;return h.terminals.forAll((e=>u(e))),null!==h.residents&&h.residents.forAll((e=>u(e))),!0}),e,t),d}forEachInDepthRange(e,t,n,s,r,h,a){let d=-1/0,c=1/0;const u={setRange:e=>{1===n?(d=Math.max(d,e.near),c=Math.min(c,e.far)):(d=Math.max(d,-e.far),c=Math.min(c,-e.near))}};u.setRange(s);const f=M(t,n,e),_=N(t,n),p=N(t,-1*n),b=e=>{if(!a(e))return;const i=this._objectToBoundingSphere(e),o=m(i),s=M(t,n,o)-f,_=s-i[3],p=s+i[3];_>c||p<d||!l(h,i)||r(e,u)};this._forEachNodeDepthOrdered(this._root,(e=>{if(!l(h,e.bounds))return!1;i(k,_,e.halfSize),o(k,k,e.bounds);if(M(t,n,k)-f>c)return!1;i(k,p,e.halfSize),o(k,k,e.bounds);if(M(t,n,k)-f<d)return!1;const s=e.node;return s.terminals.forAll((e=>b(e))),null!==s.residents&&s.residents.forAll((e=>b(e))),!0}),t,n)}forEachNode(e){this._forEachNode(this._root,(t=>e(t.node,t.bounds,t.halfSize)))}_intersectsNode(e,t){return S(t.bounds,2*-t.halfSize,q),S(t.bounds,2*t.halfSize,w),_(e.origin,e.direction,q,w)}_intersectsNodeWithOffset(e,t,n){return S(t.bounds,2*-t.halfSize,q),S(t.bounds,2*t.halfSize,w),n.applyToMinMax(q,w),_(e.origin,e.direction,q,w)}_intersectsObject(e,t){const n=this._objectToBoundingSphere(t);return!(n[3]>0)||u(n,e)}_intersectsObjectWithOffset(e,t,n){const i=this._objectToBoundingSphere(t);return!(i[3]>0)||u(n.applyToBoundingSphere(i),e)}_forEachNode(e,t){let n=b.acquire().init(e);const i=[n];for(;0!==i.length;){if(n=i.pop(),t(n)&&!n.isLeaf())for(let e=0;e<n.node.children.length;e++){n.node.children[e]&&i.push(b.acquire().init(n).advance(e))}b.release(n)}}_forEachNodeDepthOrdered(e,t,n,i=1){let o=b.acquire().init(e);const s=[o];for(O(n,i,W);0!==s.length;){if(o=s.pop(),t(o)&&!o.isLeaf())for(let e=7;e>=0;--e){const t=W[e];o.node.children[t]&&s.push(b.acquire().init(o).advance(t))}b.release(o)}}_remove(e,t,n){B.clear();const i=n.advanceTo(t,((e,t)=>{B.push(e.node),B.push(t)}))?n.node.terminals:n.node.residents;if(i.removeUnordered(e),0===i.length)for(let o=B.length-2;o>=0;o-=2){const e=B.data[o],t=B.data[o+1];if(!this._purge(e,t))break}}_nodeIsEmpty(e){if(0!==e.terminals.length)return!1;if(null!==e.residents)return 0===e.residents.length;for(let t=0;t<e.children.length;t++)if(e.children[t])return!1;return!0}_purge(e,t){return t>=0&&(e.children[t]=null),!!this._nodeIsEmpty(e)&&(null===e.residents&&(e.residents=new n({shrink:!0})),!0)}_add(e,t){t.advanceTo(this._objectToBoundingSphere(e))?t.node.terminals.push(e):(t.node.residents.push(e),t.node.residents.length>this._maximumObjectsPerNode&&t.depth<this._maximumDepth&&this._split(t))}_split(e){const t=e.node.residents;e.node.residents=null;for(let n=0;n<t.length;n++){const i=b.acquire().init(e);this._add(t.getItemAt(n),i),b.release(i)}}_grow(e,t){if(0!==t&&(x(e,t,(e=>this._objectToBoundingSphere(e)),P),z(P[3])&&!this._fitsInsideTree(P)))if(this._nodeIsEmpty(this._root.node))c(P,this._root.bounds),this._root.halfSize=1.25*P[3];else{const e=this._rootBoundsForRootAsSubNode(P);this._placingRootViolatesMaxDepth(e)?this._rebuildTree(P,e):this._growRootAsSubNode(e),b.release(e)}}_rebuildTree(e,t){s(R,t.bounds),R[3]=t.halfSize,x([e,R],2,(e=>e),F);const n=b.acquire().init(this._root);this._root.initFrom(null,F,1.25*F[3]),this._forEachNode(n,(e=>(this.add(e.node.terminals.data,e.node.terminals.length),null!==e.node.residents&&this.add(e.node.residents.data,e.node.residents.length),!0))),b.release(n)}_placingRootViolatesMaxDepth(e){const t=Math.log(e.halfSize/this._root.halfSize)*Math.LOG2E;let n=0;return this._forEachNode(this._root,(e=>(n=Math.max(n,e.depth),n+t<=this._maximumDepth))),n+t>this._maximumDepth}_rootBoundsForRootAsSubNode(e){const t=e[3],n=e;let i=-1/0;const o=this._root.bounds,s=this._root.halfSize;for(let r=0;r<3;r++){const e=o[r]-s-(n[r]-t),h=n[r]+t-(o[r]+s),a=Math.max(0,Math.ceil(e/(2*s))),l=Math.max(0,Math.ceil(h/(2*s)))+1,d=2**Math.ceil(Math.log(a+l)*Math.LOG2E);i=Math.max(i,d),L[r].min=a,L[r].max=l}for(let r=0;r<3;r++){let e=L[r].min,t=L[r].max;const n=(i-(e+t))/2;e+=Math.ceil(n),t+=Math.floor(n);const h=o[r]-s-e*s*2;y[r]=h+(t+e)*s}return y[3]=i*s*D,b.acquire().initFrom(null,y,i*s,0)}_growRootAsSubNode(e){const t=this._root.node;s(P,this._root.bounds),P[3]=this._root.halfSize,this._root.init(e),e.advanceTo(P,null,!0),e.node.children=t.children,e.node.residents=t.residents,e.node.terminals=t.terminals}_shrink(){for(;;){const e=this._findShrinkIndex();if(-1===e)break;this._root.advance(e),this._root.depth=0}}_findShrinkIndex(){if(0!==this._root.node.terminals.length||this._root.isLeaf())return-1;let e=null;const t=this._root.node.children;let n=0,i=0;for(;i<t.length&&null==e;)n=i++,e=t[n];for(;i<t.length;)if(t[i++])return-1;return n}_isDegenerate(e){return!z(this._objectToBoundingSphere(e)[3])}_fitsInsideTree(e){const t=this._root.bounds,n=this._root.halfSize;return e[3]<=n&&e[0]>=t[0]-n&&e[0]<=t[0]+n&&e[1]>=t[1]-n&&e[1]<=t[1]+n&&e[2]>=t[2]-n&&e[2]<=t[2]+n}}class b{constructor(){this.bounds=f(),this.halfSize=0,this.initFrom(null,null,0,0)}init(e){return this.initFrom(e.node,e.bounds,e.halfSize,e.depth)}initFrom(t,n,i,o=this.depth){return this.node=e(t)?t:b.createEmptyNode(),e(n)&&c(n,this.bounds),this.halfSize=i,this.depth=o,this}advance(e){let t=this.node.children[e];t||(t=b.createEmptyNode(),this.node.children[e]=t),this.node=t,this.halfSize/=2,this.depth++;const n=E[e];return this.bounds[0]+=n[0]*this.halfSize,this.bounds[1]+=n[1]*this.halfSize,this.bounds[2]+=n[2]*this.halfSize,this.bounds[3]=this.halfSize*D,this}advanceTo(e,t,n=!1){for(;;){if(this.isTerminalFor(e))return t&&t(this,-1),!0;if(this.isLeaf()){if(!n)return t&&t(this,-1),!1;this.node.residents=null}const i=this._childIndex(e);t&&t(this,i),this.advance(i)}}isLeaf(){return null!=this.node.residents}isTerminalFor(e){return e[3]>this.halfSize/2}_childIndex(e){const t=this.bounds;return(t[0]<e[0]?1:0)+(t[1]<e[1]?2:0)+(t[2]<e[2]?4:0)}static createEmptyNode(){return{children:[null,null,null,null,null,null,null,null],terminals:new n({shrink:!0}),residents:new n({shrink:!0})}}static acquire(){return b._pool.acquire()}static release(e){b._pool.release(e)}static clearPool(){b._pool.prune()}}function g(e,t){e[0]=Math.min(e[0],t[0]-t[3]),e[1]=Math.min(e[1],t[1]-t[3]),e[2]=Math.min(e[2],t[2]-t[3])}function j(e,t){e[0]=Math.max(e[0],t[0]+t[3]),e[1]=Math.max(e[1],t[1]+t[3]),e[2]=Math.max(e[2],t[2]+t[3])}function S(e,t,n){n[0]=e[0]+t,n[1]=e[1]+t,n[2]=e[2]+t}function x(e,t,n,i){if(1===t){const t=n(e[0]);c(t,i)}else{q[0]=1/0,q[1]=1/0,q[2]=1/0,w[0]=-1/0,w[1]=-1/0,w[2]=-1/0;for(let i=0;i<t;i++){const t=n(e[i]);z(t[3])&&(g(q,t),j(w,t))}r(i,q,w,.5),i[3]=Math.max(w[0]-q[0],w[1]-q[1],w[2]-q[2])/2}}function O(e,t,n){if(!C.length)for(let i=0;i<8;++i)C.push({index:0,distance:0});for(let i=0;i<8;++i){const n=E[i];C.data[i].index=i,C.data[i].distance=M(e,t,n)}C.sort(((e,t)=>e.distance-t.distance));for(let i=0;i<8;++i)n[i]=C.data[i].index}function N(e,t){let n=1/0,i=null;for(let o=0;o<8;++o){const s=M(e,t,T[o]);s<n&&(n=s,i=T[o])}return i}function M(e,t,n){return t*(e[0]*n[0]+e[1]*n[1]+e[2]*n[2])}function z(e){return!isNaN(e)&&e!==-1/0&&e!==1/0&&e>0}b._pool=new t(b);const E=[h(-1,-1,-1),h(1,-1,-1),h(-1,1,-1),h(1,1,-1),h(-1,-1,1),h(1,-1,1),h(-1,1,1),h(1,1,1)],T=[h(-1,-1,-1),h(-1,-1,1),h(-1,1,-1),h(-1,1,1),h(1,-1,-1),h(1,-1,1),h(1,1,-1),h(1,1,1)],D=Math.sqrt(3),v=[null];function A(e){return v[0]=e,v}const y=f(),k=a(),q=a(),w=a(),B=new n,I=f(),P=f(),R=f(),F=f(),L=[{min:0,max:0},{min:0,max:0},{min:0,max:0}],C=new n,W=[0,0,0,0,0,0,0,0];export default p;
