/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{all as e}from"../../../../../core/promiseUtils.js";import{c as t}from"../../../../../chunks/mat4f64.js";import{a as s}from"../../../../../chunks/vec2f64.js";import{f as a,d as n,m as i}from"../../../../../chunks/vec3.js";import{c as r}from"../../../../../chunks/vec3f64.js";import{c as l}from"../../../../../chunks/vec4f64.js";import o from"../../../support/debugFlags.js";import{glLayout as c}from"../../../support/buffer/glUtil.js";import{bindOutputHighlight as h}from"../../core/shaderLibrary/output/OutputHighlight.glsl.js";import d from"../Camera.js";import{Default3D as u}from"../DefaultVertexAttributeLocations.js";import{assert as p}from"../Util.js";import{InstanceData as m,StateFlags as _}from"./InstanceData.js";import{InstanceOctree as f}from"./InstanceOctree.js";import{LevelSelector as g}from"./LevelSelector.js";import{LodLevel as I}from"./LodLevel.js";import{RenderInstanceData as y}from"./RenderInstanceData.js";import{DefaultMaterial as D}from"../../materials/DefaultMaterial.js";import{colorMixModes as v}from"../../materials/internal/MaterialUtil.js";import{encodeDoubleVec3 as b}from"../../materials/renderers/utils.js";import{bindVertexBufferLayout as C,unbindVertexBufferLayout as R}from"../../../../webgl/Util.js";let E=function(e){const t=e.baseBoundingSphere.radius,s=e.levels.map((e=>e.minScreenSpaceRadius));return new g(t,s)};function T(e){E=e}class L{constructor(e,t,a,n){this.type="Lod",this.isGround=!1,this._inverseViewport=s(),this._levels=[],this._defaultRenderInstanceData=[],this._highlightRenderInstanceData=[],this._instanceIndex=0,this._slicePlane=!1,this._enableLevelSelection=!0,this._lastCamera=new d,this._updateCyclesWithStaticCamera=-1,this._needFullCycle=!1,this.canRender=!0,this._symbol=e,this._optionalFields=t,this._metadata=a,this._instanceBufferLayout=D.getInstanceBufferLayout({instancedDoublePrecision:!0,instanced:t}),this._glInstanceBufferLayout=c(this._instanceBufferLayout,1),this._instanceData=new m(this._optionalFields,n),this._instanceData.on("instance-added",(()=>{this.requestUpdateCycle()})),this._instanceData.on("instance-removed",(()=>{this.requestUpdateCycle()})),this._instanceData.on("instance-transform-changed",(e=>{this.requestUpdateCycle(),this._metadata.notifyGraphicGeometryChanged(e.index)})),this._instanceData.on("instance-visibility-changed",(e=>{this.requestUpdateCycle(!0),this._metadata.notifyGraphicVisibilityChanged(e.index)})),this._instanceData.on("instance-highlight-changed",(()=>{this.requestUpdateCycle(!0)})),this._enableLevelSelection=this._symbol.levels.length>1}get levels(){return this._levels}get baseBoundingBox(){return this._levels[this._levels.length-1].boundingBox}get baseBoundingSphere(){return this._levels[this._levels.length-1].boundingSphere}get baseMaterial(){return this._levels[this._levels.length-1].components[0].material}get slicePlane(){return this._slicePlane}set slicePlane(e){this._slicePlane=e}get intersectionHandlerId(){return this._metadata.layerUid}get instanceData(){return this._instanceData}get memoryUsage(){const e={cpu:0,gpu:0};return this._defaultRenderInstanceData.forEach((t=>{const s=t.memoryUsage;e.cpu+=s.cpu,e.gpu+=s.gpu})),this._highlightRenderInstanceData.forEach((t=>{const s=t.memoryUsage;e.cpu+=s.cpu,e.gpu+=s.gpu})),e}get renderStats(){const e=this._instanceData.size,t=[];return this._levels.forEach(((e,s)=>{const a=this._defaultRenderInstanceData[s],n=this._highlightRenderInstanceData[s],i=a.size+n.size,r=e.triangleCount;t.push({renderedInstances:i,renderedTriangles:i*r,trianglesPerInstance:r})})),{totalInstances:e,renderedInstances:t.reduce(((e,t)=>e+t.renderedInstances),0),renderedTriangles:t.reduce(((e,t)=>e+t.renderedTriangles),0),levels:t}}async initializeRenderContext(t,s){this._context=t;const a=t.renderContext.rctx;this._levels=await e(this._symbol.levels.map((e=>(this._defaultRenderInstanceData.push(new y(a,this._instanceBufferLayout)),this._highlightRenderInstanceData.push(new y(a,this._instanceBufferLayout)),I.create(t,e,s))))),this._levelSelector=E(this)}uninitializeRenderContext(){this.invalidateOctree(),this._levels.forEach((e=>e.destroy())),this._defaultRenderInstanceData.forEach((e=>e.destroy())),this._highlightRenderInstanceData.forEach((e=>e.destroy()))}get slots(){return[4,6]}get needsHighlight(){return this._highlightRenderInstanceData.reduce(((e,t)=>e+t.size),0)>0}prepareRender(e,t){if(o.LOD_INSTANCE_RENDERER_DISABLE_UPDATES)return;if(this._enableLevelSelection){const e=t.equals(this._lastCamera);this._lastCamera.copyFrom(t),e||this.requestUpdateCycle()}const s=this._needFullCycle?this._instanceData.size:2e3;this._needFullCycle=!1,this.updateInstances(t,s),this.needsUpdates&&this._context.requestRender()}render(e){const t=e.rctx,s=4===e.slot?3:6===e.slot?5:null;if(!s)return;if(!this.baseMaterial.isVisible()||!this.baseMaterial.isVisibleInPass(e.pass))return!1;const a=e.camera;this._inverseViewport[0]=1/a.fullViewport[2],this._inverseViewport[1]=1/a.fullViewport[3];const n={slot:s,origin:[0,0,0],camera:a,inverseViewport:this._inverseViewport,shadowMap:e.shadowMap,shadowMappingEnabled:e.shadowMap.enabled,ssaoHelper:e.ssaoHelper,ssaoEnabled:e.ssaoHelper.enabled,screenToWorldRatio:null,screenToWorldRatioGlobalWM:null,slicePlane:e.sliceHelper&&e.sliceHelper.plane,hudVisibilityTexture:e.offscreenRenderingHelper?e.offscreenRenderingHelper.hudVisibilityTexture:null,highlightDepthTexture:e.offscreenRenderingHelper?e.offscreenRenderingHelper.depthTexture:null,hasOccludees:!1,linearDepthTexture:null,lastFrameColorTexture:null,reprojectionMat:null,ssrEnabled:!1,lighting:e.scenelightingData,transparencyPassType:e.transparencyPassType,terrainLinearDepthTexture:e.multipassTerrainParams.terrainLinearDepthTexture,geometryLinearDepthTexture:e.multipassGeometryParams.geometryLinearDepthTexture,multipassTerrainEnabled:e.multipassTerrainParams.multipassTerrainEnabled,cullAboveGround:e.multipassTerrainParams.cullAboveGround,multipassGeometryEnabled:e.multipassGeometryParams.multipassGeometryEnabled,highlightColorTexture:null};t.bindVAO();const i=5!==e.pass&&7!==e.pass,r=6!==e.pass;return i&&this._renderComponents(e,s,n,this._defaultRenderInstanceData),r&&this._renderComponents(e,s,n,this._highlightRenderInstanceData),!0}intersect(e,t,s,n){if(!this.baseMaterial.isVisible())return;const l=r();a(l,n,s);const o=a=>{this._instanceData.getCombinedModelTransform(a,V),e.transform.set(V),i(w,s,e.transform.inverse),i(H,n,e.transform.inverse);const r=this._instanceData.getState(a),l=this._instanceData.getLodLevel(a);p(r&_.ACTIVE,"invalid instance state"),p(l>=0&&l<this._levels.length,"invaid lod level"),this._levels[l].intersect(e,t,w,H,a,this._metadata)};this.baseMaterial.params.verticalOffset?this.octree.forEach(o):this.octree.forEachAlongRay(s,l,o)}queryDepthRange(e){return this.queryDepthRangeOctree(e)}notifyShaderTransformationChanged(){this.invalidateOctree()}requestUpdateCycle(e=!1){this._updateCyclesWithStaticCamera=-1,e&&(this._needFullCycle=!0),this.needsUpdates&&this._context.requestRender()}get needsUpdates(){return this._instanceData.size>0&&this._updateCyclesWithStaticCamera<1}get octree(){return this._octree||(this._octree=this.buildOctree()),this._octree}invalidateOctree(){this._octree&&(this._octree.destroy(),this._octree=null)}buildOctree(){const e=new f(this._instanceData,this.baseBoundingSphere),t=this._instanceData,s=t.view?t.view.state:null;for(let a=0;a<this._instanceData.capacity;++a){s.get(a)&_.ACTIVE&&e.addInstance(a)}return e}queryDepthRangeOctree(e){const t=e.eye,s=e.viewForward,i=this.octree.findClosest(s,1,e.frustum),r=this.octree.findClosest(s,-1,e.frustum);if(null!=i&&null!=r){this._instanceData.view.boundingSphere.getVec(i,U),a(U,U,t);const l=n(U,s)-U[3];this._instanceData.view.boundingSphere.getVec(r,U),a(U,U,t);const o=n(U,s)+U[3];return{near:Math.max(e.near,l),far:Math.min(e.far,o)}}return{near:1/0,far:-1/0}}startUpdateCycle(){this._updateCyclesWithStaticCamera++,this._defaultRenderInstanceData.forEach((e=>{e.startUpdateCylce()})),this._highlightRenderInstanceData.forEach((e=>{e.startUpdateCylce()})),this.needsUpdates&&this._context.requestRender()}updateInstances(e,t){const s=this._enableLevelSelection,a=this._levelSelector;a.updateCamera(e),this._defaultRenderInstanceData.forEach((e=>{e.beginUpdate()})),this._highlightRenderInstanceData.forEach((e=>{e.beginUpdate()}));const n=this._instanceData,i=this._instanceData.view,r=n.size,l=n.capacity;let o=this._instanceIndex;t=Math.min(r,t);for(let c=0;c<t;++c){0===o&&this.startUpdateCycle();const e=i.state.get(o);let r=0;if(!(e&_.ALLOCATED)){o=(o+1)%l,t++;continue}const c=i.lodLevel.get(o);if(e&_.DEFAULT_ACTIVE&&this._defaultRenderInstanceData[c].freeTail(),e&_.HIGHLIGHT_ACTIVE&&this._highlightRenderInstanceData[c].freeTail(),e&_.REMOVE)n.freeInstance(o);else if(e&_.VISIBLE){let t=0;s&&(i.modelOrigin.getVec(o,S),t=a.selectLevel(S,n.getCombinedMedianScaleFactor(o))),r=e&~(_.ACTIVE|_.TRANSFORM_CHANGED),t>=0&&(e&_.HIGHLIGHT?(x(this._highlightRenderInstanceData[t],i,o),r|=_.HIGHLIGHT_ACTIVE):(x(this._defaultRenderInstanceData[t],i,o),r|=_.DEFAULT_ACTIVE)),i.state.set(o,r),i.lodLevel.set(o,t)}else r=e&~(_.ACTIVE|_.TRANSFORM_CHANGED),i.state.set(o,r);if(this._octree){const t=!!(e&_.ACTIVE),s=!!(r&_.ACTIVE);!t&&s?this._octree.addInstance(o):t&&!s?this._octree.removeInstance(o):t&&s&&e&_.TRANSFORM_CHANGED&&(this._octree.removeInstance(o),this._octree.addInstance(o))}o=(o+1)%l}this._instanceIndex=o,this._defaultRenderInstanceData.forEach((e=>{e.endUpdate()})),this._highlightRenderInstanceData.forEach((e=>{e.endUpdate()}))}_renderComponents(e,t,s,a){this.levels.forEach(((n,i)=>{n.components.forEach((n=>{this._renderComponent(e,t,s,a[i],n,i)}))}))}_renderComponent(e,t,s,a,n,i){const r=n.glMaterials.get(e.pass);if(!r||!r.beginSlot(t)||0===a.size)return;const l=e.rctx,c=l.capabilities.instancing;r.ensureParameters(s);const d=r.technique,m=d.program,_=r.getPipelineState(t);l.setPipelineState(_),l.useProgram(m),r.bind(s),l.bindVAO(n.vao),d.ensureAttributeLocations(n.vao),e.isHighlightPass&&h(m,s),d.bindDraw(s,{},{}),o.LOD_INSTANCE_RENDERER_COLORIZE_BY_LEVEL&&0===e.pass&&(m.setUniform4fv("externalColor",O[Math.min(i,O.length-1)]),m.setUniform1i("colorMixMode",v.replace));const f=a.capacity,g=a.headIndex,I=a.tailIndex,y=a.firstIndex,D=this._glInstanceBufferLayout,b=(e,t)=>{C(l,u,a.buffer,D,e),c.drawArraysInstanced(d.primitiveType,0,n.vertexCount,t-e),R(l,u,a.buffer,D)};n.material.params.transparent&&null!=y?g>I?(p(y>=I&&y<=g,"invalid firstIndex"),b(y,g),b(I,y)):g<I&&(y<=g?(p(y>=0&&y<=g,"invalid firstIndex"),b(y,g),b(I,f),b(0,y)):(p(y>=I&&y<=f,"invalid firstIndex"),b(y,f),b(0,g),b(I,y))):g>I?b(I,g):g<I&&(b(0,g),b(I,f)),l.bindVAO(null)}}function x(e,t,s){const a=e.allocateHead();A(t,s,e.view,a)}function A(e,t,s,a){b(e.modelOrigin,t,s.modelOriginHi,s.modelOriginLo,a),s.model.copyFrom(a,e.model,t),s.modelNormal.copyFrom(a,e.modelNormal,t),e.color&&s.color&&s.color.copyFrom(a,e.color,t),e.featureAttribute&&s.featureAttribute&&s.featureAttribute.copyFrom(a,e.featureAttribute,t)}const S=r(),U=l(),V=t(),w=r(),H=r(),O=[[1,0,1,1],[0,0,1,1],[0,1,0,1],[1,1,0,1],[1,0,0,1]];export{L as LodRenderer,T as setLevelSelectorFactory};
