/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{T as r}from"../../../../chunks/TextureOnly.glsl.js";import{ReloadableShaderModule as o}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as t}from"../core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as i,parameter as s}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as a}from"./DefaultVertexAttributeLocations.js";import{Program as n}from"./Program.js";import{makePipelineState as l,separateBlendingParams as h,defaultColorWriteParams as c}from"../../../webgl/renderState.js";class u extends t{initializeProgram(e){const r=u.shader.get().build();return new n(e.rctx,r,a)}initializePipeline(){return this.configuration.hasAlpha?l({blending:h(770,1,771,771),colorWrite:c}):l({colorWrite:c})}}u.shader=new o(r,(()=>import("../core/shaderLibrary/util/TextureOnly.glsl.js")));class m extends i{constructor(){super(...arguments),this.hasAlpha=!1}}e([s()],m.prototype,"hasAlpha",void 0);export{u as TextureTechnique,m as TextureTechniqueConfiguration};
