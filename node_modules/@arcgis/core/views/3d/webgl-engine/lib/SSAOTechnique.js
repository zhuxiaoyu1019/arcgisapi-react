/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as s}from"../core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as t,parameter as o}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as i}from"./DefaultVertexAttributeLocations.js";import{Program as a}from"./Program.js";import{S as u}from"../../../../chunks/SSAO.glsl.js";import{makePipelineState as n,defaultColorWriteParams as p}from"../../../webgl/renderState.js";const m=4;class l extends s{initializeProgram(e){const r=l.shader.get(),s=this.configuration,t=3===s.samples?64:2===s.samples?32:1===s.samples?16:8,o=r.build({output:s.output,samples:t,radius:m});return new a(e.rctx,o,i)}initializePipeline(){return n({colorWrite:p})}}l.shader=new r(u,(()=>import("../shaders/SSAO.glsl.js")));class c extends t{constructor(){super(...arguments),this.output=0,this.samples=3}}e([o({count:2})],c.prototype,"output",void 0),e([o()],c.prototype,"samples",void 0);export{m as FILTER_RADIUS,l as SSAOTechnique,c as SSAOTechniqueConfiguration};
