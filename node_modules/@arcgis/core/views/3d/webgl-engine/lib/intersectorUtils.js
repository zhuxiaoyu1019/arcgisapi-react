/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{d as t}from"../../../../chunks/mat4.js";import{c as r}from"../../../../chunks/mat4f64.js";import{e as i,a as s,l as e,b as a,g as n,n as o}from"../../../../chunks/vec3.js";import{c as h,a as d}from"../../../../chunks/vec3f64.js";import{t as c}from"../../../../chunks/vec4.js";import{c as m}from"../../../../chunks/vec4f64.js";import{e as l}from"../../../../chunks/boundedPlane.js";import{create as u,copy as p}from"../../../../geometry/support/ray.js";import{Object3D as y}from"./Object3D.js";function g(t){return(r,s,e)=>(i(v,r,s,e),!l(t,v))}class f{constructor(){this.min=new j,this.max=new j,this.hud=new j,this.ground=new j}init(t){this.min.init(t),this.max.init(t),this.hud.init(t),this.ground.init(t),this.all=[]}}class j{constructor(t){this.normal=h(),this.transformation=r(),this._ray=u(),this.init(t)}get ray(){return this._ray}get hasIntersectionPoint(){return null!=this.dist}get distanceInRenderSpace(){if(null!=this.dist)return s(O,this.ray.direction,this.dist),e(O)}getIntersectionPoint(t){return!!this.hasIntersectionPoint&&(s(O,this.ray.direction,this.dist),a(t,this.ray.origin,O),!0)}getTransformedNormal(t){return n(I,this.normal),I[3]=0,c(I,I,this.transformation),n(t,I),o(t,t),t}init(t){this.dist=void 0,this.target=void 0,this.name=void 0,this.drapedLayerOrder=void 0,this.drapedLayerGraphicOrder=void 0,this.center=null,this.geometryId=null,this.triangleNr=null,this.intersector="Stage",t?p(t,this._ray):this._ray=u()}set(r,i,s,e,a,o,h,c,m,l){r instanceof y&&(r={type:"stage",obj:r}),this.dist=s,n(this.normal,e),t(this.transformation,a),this.target=r,this.name=i,this.drapedLayerOrder=o,this.center=h?d(h):null,this.geometryId=c,this.triangleNr=m,this.drapedLayerGraphicOrder=l}copyFrom(r){p(r.ray,this._ray),this.dist=r.dist,this.target=r.target,this.name=r.name,this.drapedLayerOrder=r.drapedLayerOrder,this.center=r.center?d(r.center):null,this.geometryId=r.geometryId,this.triangleNr=r.triangleNr,this.intersector=r.intersector,this.drapedLayerGraphicOrder=r.drapedLayerGraphicOrder,n(this.normal,r.normal),t(this.transformation,r.transformation)}}const v=h(),O=h(),I=m();export{j as IntersectorResult,f as IntersectorResults,g as sliceFilterPredicate};
