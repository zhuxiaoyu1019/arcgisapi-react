/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{log2 as e}from"../../../../../core/mathUtils.js";import{releaseMaybe as t,isNone as s}from"../../../../../core/maybe.js";import r from"../../../../../core/PooledArray.js";import{t as i,e as n,g as o}from"../../../../../chunks/mat3.js";import{c as a}from"../../../../../chunks/mat3f32.js";import{g as l,s as h}from"../../../../../chunks/vec3.js";import{c}from"../../../../../chunks/vec3f64.js";import d from"../../../support/debugFlags.js";import{ComponentDrawParameters as m}from"../../collections/Component/Material/ComponentTechnique.js";import{bindSliceUniforms as u}from"../../core/shaderLibrary/Slice.glsl.js";import{VertexPosition as f}from"../../core/shaderLibrary/attributes/VertexPosition.glsl.js";import{bindMultipassTerrainTexture as g}from"../../core/shaderLibrary/shading/MultipassTerrainTest.glsl.js";import{doublePrecisionRequiresObfuscation as b}from"../../core/shaderLibrary/util/DoublePrecision.glsl.js";import{TwoVectorPosition as p}from"../../core/util/TwoVectorPosition.js";import{EdgeShaderTechnique as y}from"./EdgeShaderTechnique.js";const T=8,R=128,v={type:"uber",slicePlaneEnabled:!1,sliceHighlightDisabled:!1,strokesTexture:null,legacy:!0};class x{constructor(){this._value=0}get value(){return this._value}increment(){this._value++}decrement(){this._value--}}const P={solid:0,sketch:1,uber:2};class S{constructor(e,t,s){this.rctx=e,this.shaderTechniqueRepository=t,this.config=new y.Configuration,this.technique=null,this.refCount=new x,this.renderables=new Set,this.sortedRenderables={1:{1:new r,2:new r},2:{1:new r,2:new r}},this.renderablesDirty=!1,this.settings={...v,...s},this.key=S.getKey(this.settings.type,this.settings.slicePlaneEnabled,this.settings.legacy);const i=this.settings.strokesTexture.variants;this.writerSettings={variants:i,reducedPrecision:d.DISABLE_ELEVATION_ALIGNERS_ITERATIVE_UPDATES},this.config.legacy=this.settings.legacy,this.config.mode=P[this.settings.type],this.config.silhouette=!1,this.config.antialiasing=!!this.rctx.capabilities.blendMinMax,this.config.slicePlaneEnabled=this.settings.slicePlaneEnabled,this.config.doublePrecisionRequiresObfuscation=b(e)}dispose(){this.technique=t(this.technique)}addRenderable(e){this.renderables.add(e),this.renderablesDirty=!0}removeRenderable(e){this.renderables.delete(e),this.renderablesDirty=!0}setRenderablesDirty(){this.renderablesDirty=!0}forEachRenderable(e,t){this.renderablesDirty&&this.sortRenderables(),this.sortedRenderables[t][1].forAll(e),this.sortedRenderables[t][2].forAll(e)}setMultipassParameters(e){this.config.multipassTerrainEnabled=!!e.multipassTerrainEnabled&&e.multipassTerrainEnabled,this.config.cullAboveGround=!!e.cullAboveGround&&e.cullAboveGround}bindRegularEdges(e,t){this.setMultipassParameters(e),this.config.silhouette=!1,this.technique=this.shaderTechniqueRepository.releaseAndAcquire(y,this.config,this.technique),this.technique.bindPass({bindParameters:e,edgeRenderParameters:t}),this.rctx.setPipelineState(this.technique.pipeline),this.rctx.useProgram(this.technique.program)}bindSilhouetteEdges(e,t){this.setMultipassParameters(e),this.config.silhouette=!0,this.technique=this.shaderTechniqueRepository.releaseAndAcquire(y,this.config,this.technique),this.technique.bindPass({bindParameters:e,edgeRenderParameters:t}),this.rctx.setPipelineState(this.technique.pipeline),this.rctx.useProgram(this.technique.program)}renderRegularEdges(e,t,s){this.render(e,e.regular.vao,t,s)}renderSilhouetteEdges(e,t,s){this.render(e,e.silhouette.vao,t,s)}render(e,t,s,r){this.setUniforms(e,s),this.rctx.bindVAO(t),this.rctx.capabilities.instancing.drawArraysInstanced(6,0,4,r)}setUniforms(e,t){const s=this.technique.program;if(e.components.buffer.textureBuffer.bind(s,w,E),t.multipassTerrainEnabled&&(s.setUniform2fv("cameraNearFar",t.camera.nearFar),s.setUniform2fv("inverseViewport",t.inverseViewport),g(s,t)),"origin"in e.transform)s.setUniformMatrix4fv("uView",t.localViewMatrixForEdges),s.setUniformMatrix4fv("uModel",e.transform.modelMatrix),u(s,this.settings,t.slicePlane,e.transform.origin.vec3);else{const r=new p(e.transform.position),a=i(q,n(q,e.transform.rotationScale)),c=new m;l(c.worldFromModel_TL,r.low),l(c.worldFromModel_TH,r.high),o(c.worldFromModel_RS,e.transform.rotationScale),o(c.transformNormal_GlobalFromModel,a),f.bindModelTransform(s,c),s.setUniformMatrix3fv("uTransformNormal_GlobalFromModel",c.transformNormal_GlobalFromModel);const d=t.camera.viewInverseTransposeMatrix,g=h(M,d[3],d[7],d[11]);u(s,this.settings,t.slicePlane,g)}"uber"!==this.settings.type&&"sketch"!==this.settings.type||this.setSketchUniforms(s),s.setUniform1f("uWorldLineRadiusPerDistance",Math.tan(t.camera.fovY/2)/(t.camera.fullViewport[3]/2))}setSketchUniforms(t){const r=this.settings.strokesTexture,i=r.texture;s(i)||(t.bindTexture(i,"uStrokesTexture"),t.setUniform2f("uStrokesTextureScale",1/i.descriptor.width,1/i.descriptor.height),t.setUniform1f("uStrokesLog2Resolution",e(r.resolution)),t.setUniform1f("uStrokesNormalizationScale",r.normalizationScale),t.setUniform1f("uStrokesAmplitude",r.amplitude),t.setUniform1f("uStrokeVariants",r.variants))}sortRenderables(){this.renderablesDirty=!1,this.sortedRenderables[1][1].clear(),this.sortedRenderables[1][2].clear(),this.sortedRenderables[2][1].clear(),this.sortedRenderables[2][2].clear(),this.renderables.forEach((e=>{0!==e.objectTransparency&&0!==e.edgeTransparency&&this.sortedRenderables[e.objectTransparency][e.edgeTransparency].push(e)}));const e=(e,t)=>"origin"in e.transform&&"origin"in t.transform?e.transform.origin.id<t.transform.origin.id?-1:e.transform.origin.id>t.transform.origin.id?1:0:0;this.sortedRenderables[1][1].sort(e),this.sortedRenderables[1][2].sort(e),this.sortedRenderables[2][1].sort(e),this.sortedRenderables[2][2].sort(e)}static getKey(e,t,s){return`edges-t:${e}:${t}:${s}`}}const w="uComponentDataTex",E="uComponentDataTexInvDim",q=a(),M=c();export{R as EXTENSION_LENGTH_OFFSET,S as EdgeRenderer,T as LINE_WIDTH_FRACTION_FACTOR,E as componentDataInvDimName,w as componentDataTexName};
