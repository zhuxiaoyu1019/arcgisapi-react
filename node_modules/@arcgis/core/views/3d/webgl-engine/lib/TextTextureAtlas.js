/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import s from"../../../../core/Evented.js";import{someMap as i}from"../../../../core/MapUtils.js";import{nextHighestPowerOfTwo as r}from"../../../../core/mathUtils.js";import{isSome as a,removeMaybe as n}from"../../../../core/maybe.js";import{generateUID as h}from"../../../../core/uid.js";import{property as o}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/Logger.js";import{subclass as l}from"../../../../core/accessorSupport/decorators/subclass.js";import{TaskPriority as d,noBudget as c}from"../../../support/Scheduler.js";import m from"../../../webgl/Texture.js";var p;const g=512,u=4096,x=.85,T=.95;let v=p=class extends t{constructor(e){super(e),this.type=4,this.id=h(),this.events=new s,this.glTexture=null,this.needsClear=!1,this.elementsToAddOrUpdate=new Map,this.elementsToRemove=new Map,this.elementsToRender=new Map,this.elements=new Map,this.stageObjects=new Map,this.updating=!1}initialize(){this.stage=this.view._stage,this.canvas=this.create2DCanvas(),this.ctx=this.canvas.getContext("2d"),this.stage.add(this);const e=this.computeAtlasResolution(this.view.width,this.view.height);this.createAtlasRegion(e),this.update2DCanvasSize(),this.resetAtlasCursor()}unload(){a(this.glTexture)&&(this.glTexture.dispose(),this.glTexture=null),this.events.emit("unloaded")}get width(){return this.atlas.size.width}get height(){return this.atlas.size.height}get requiresFrameUpdates(){return!1}createDescriptor(e){return{target:3553,pixelFormat:6408,dataType:5121,wrapMode:33071,flipped:!0,samplingMode:9987,hasMipmap:!0,preMultiplyAlpha:!0,maxAnisotropy:e.parameters.maxMaxAnisotropy}}load(e){if(a(this.glTexture))return this.glTexture;this.glTexture=new m(e,this.createDescriptor(e),this.canvas);const t=this.view.resourceController.scheduler;return this.frameWorker=t.registerTask(d.TEXT_TEXTURE_ATLAS,this),this.setDirty(),this.glTexture}dispose(){this.elements=null,this.elementsToAddOrUpdate=null,this.elementsToRemove=null,this.elementsToRender=null,this.frameWorker=n(this.frameWorker),this.glTexture&&(this.stage.remove(this),this.glTexture=null),this.canvas.width=0,this.canvas.height=0,this.canvas=null,this.ctx=null}create2DCanvas(){const e=document.createElement("canvas");return e.setAttribute("id","canvas2d"),e.setAttribute("style","display:none"),e.setAttribute("width",g.toString()),e.setAttribute("height",g.toString()),e}update2DCanvasSize(){this.canvas.setAttribute("width",this.atlas.size.width.toString()),this.canvas.setAttribute("height",this.atlas.size.height.toString())}createAtlasRegion(e=g){this.atlas={size:{width:e,height:e},cursor:{x:0,y:0},lineHeight:0}}computeAtlasResolution(e,t){let s=Math.max(e,t);return s+=256,s=r(s),s=Math.min(s,u),s}resizeAtlas(e,t){t=t||e;const s=this.atlas;s.size.width=e,s.size.height=t,a(this.glTexture)&&this.glTexture.resize(e,t),this.update2DCanvasSize()}resetAtlasCursor(){const e=this.atlas;e.cursor.x=f,e.cursor.y=f+y,e.lineHeight=0,this.needsClear=!0}getAtlasUsage(){const e=this.atlas;return(e.cursor.x+e.cursor.y*e.size.width)/(e.size.width*e.size.height)}getExpectedAtlasUsage(){const e=this.elementsToRemove.size,t=this.elementsToAddOrUpdate.size,s=this.elements.size;return this.getAtlasUsage()/s*(s+t-e)}addAtlasElement(e,t,s,i){const r=this.atlas,{renderedWidth:a,renderedHeight:n,displayWidth:h,displayHeight:o}=e.textRenderer;e.placement.offset.x=r.cursor.x,e.placement.offset.y=r.cursor.y,e.placement.size.width=a,e.placement.size.height=n,e.placement.size.displayWidth=h,e.placement.size.displayHeight=o,e.placement.uvMinMax=[e.placement.offset.x/r.size.width,1-(e.placement.offset.y+n)/r.size.height,(e.placement.offset.x+a)/r.size.width,1-e.placement.offset.y/r.size.height],r.cursor.x+=s,r.lineHeight=Math.max(r.lineHeight,i),this.elements.set(t,e)}removeAtlasElement(e){if(e&&this.elements.has(e.textId)){const t=e.placement.offset,s=e.placement.size;this.ctx.clearRect(t.x,t.y,s.width,s.height),this.elements.delete(e.textId)}}ensureStageObjects(e){const t=this.stageObjects.get(e);if(t)return t;const s=new Set;return this.stageObjects.set(e,s),s}addStageObject(e,t){this.ensureStageObjects(e).add(t)}removeStageObject(e,t){const s=this.stageObjects.get(e);s&&s.delete(t)&&(t.geometries[0].vertexAttributes.get("size").data=[0,0],t.geometryVertexAttrsUpdated(0))}_processAddition(e,t){const s=this.atlas,i=e.textId,r=e.textRenderer.renderedWidth,a=e.textRenderer.renderedHeight,n=r+f,h=a+f+y;if(s.cursor.x+n<s.size.width&&s.cursor.y+h<s.size.height)this.addAtlasElement(e,i,n,h),this.elementsToRender.set(i,e),this.elementsToAddOrUpdate.delete(i);else{if(!(s.cursor.y+h+s.lineHeight<s.size.height)){const e=this.getExpectedAtlasUsage(),i=e>x&&s.size.width<u;return i&&this.resizeAtlas(2*s.size.width,2*s.size.height),!t||!i&&e>T&&s.size.width===u?(this.processRemovals(),0):(this.repack(),1)}s.cursor.x=f,s.cursor.y+=s.lineHeight,s.lineHeight=0,this.addAtlasElement(e,i,n,h),this.elementsToRender.set(i,e),this.elementsToAddOrUpdate.delete(i)}return 0}processRemovals(){this.elementsToRemove.forEach(((e,t)=>{const s=this.stageObjects.get(t);s&&0!==s.size||this.removeAtlasElement(e),s&&0===s.size&&this.stageObjects.delete(t)})),this.elementsToRemove.clear()}repack(){this.processRemovals(),this.elements.forEach(((e,t)=>{e.rendered=!1,this.elementsToAddOrUpdate.set(t,e)})),this.elements.clear(),this.resetAtlasCursor(),this.elementsToRender.clear()}processRenderingRequest(e){this.ctx.clearRect(e.placement.offset.x,e.placement.offset.y,e.placement.size.width,e.placement.size.height),e.textRenderer.render(this.ctx,e.placement.offset.x,e.placement.offset.y);const t=this.stageObjects.get(e.textId);t&&t.forEach((t=>{t.geometries[0].vertexAttributes.get("uv0").data=new Float32Array(e.placement.uvMinMax),t.geometries[0].vertexAttributes.get("size").data=[e.placement.size.displayWidth,e.placement.size.displayHeight],t.geometryVertexAttrsUpdated(0)})),e.rendered=!0}get running(){return this.updating}runTask(e,t=!0){if(!this.glTexture)return;let s=!1;if(i(this.elementsToAddOrUpdate,((e,i)=>{const r=this.elements.get(i);if(r&&r.rendered){const e=this.stageObjects.get(i);return e&&e.forEach((e=>{const t=e.geometries[0].vertexAttributes,s=this.elements.get(i);t.get("uv0").data=new Float32Array(s.placement.uvMinMax),t.get("size").data=new Float32Array([s.placement.size.displayWidth,s.placement.size.displayHeight]),e.geometryVertexAttrsUpdated(0)})),this.elementsToAddOrUpdate.delete(i),!1}return 1===this._processAddition(this.elementsToAddOrUpdate.get(i),t)&&(s=!0,!0)})),s)return void this.runTask(c,!1);let r=!1;this.elementsToRender.size>0&&this.needsClear&&(this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.needsClear=!1),i(this.elementsToRender,((t,s)=>(this.processRenderingRequest(t),this.elementsToRender.delete(s),r=!0,e.madeProgress(),e.done))),r&&a(this.glTexture)&&this.glTexture.setData(this.canvas),this.updating=this.elementsToRender.size>0,!this.updating&&p.test.orderedRepackingEnabled&&this.repackOrdered()}addTextTexture(e,t){const s=e.key;this.elementsToAddOrUpdate.has(s)||this.elementsToAddOrUpdate.set(s,{textId:s,placement:{offset:{x:0,y:0},size:{width:0,height:0,displayWidth:0,displayHeight:0},uvMinMax:[]},textRenderer:e,rendered:!1}),this.addStageObject(s,t),this.elementsToRemove.delete(s),this.setDirty()}removeTextTexture(e,t){const s=e.key;this.elementsToRemove.set(s,this.elements.get(s)),this.removeStageObject(s,t)}setDirty(){this.updating=!0}repackOrdered(){if(0===this.elements.size)return;const e=[];this.elements.forEach(((t,s)=>e.push({element:t,key:s})));let t=!0;for(let s=0;s<e.length-1;s++)if(e[s].key.localeCompare(e[s+1].key)>0){t=!1;break}if(!t||this.elementsToRemove.size){e.sort(((e,t)=>e.key.localeCompare(t.key))),this.elements.clear();for(const{element:t,key:s}of e)this.elements.set(s,t);this.repack(),this.setDirty()}}get test(){const{elements:e,stageObjects:t,elementsToRemove:s,atlas:i}=this,r=this;return{elements:e,stageObjects:t,elementsToRemove:s,atlas:i,resizeAtlas:(e,t)=>r.resizeAtlas(e,t),run:(e,t)=>r.runTask(e,t)}}};v.test={orderedRepackingEnabled:!1},e([o({constructOnly:!0})],v.prototype,"view",void 0),e([o({type:Boolean})],v.prototype,"updating",void 0),v=p=e([l("esri.views.3d.webgl-engine.lib.TextTextureAtlas")],v);const f=2,y=2;var A=v;export default A;export{v as TextTextureAtlas};
