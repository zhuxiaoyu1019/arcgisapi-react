/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{f as e}from"../../../../chunks/vec2f32.js";import{newLayout as t}from"../../support/buffer/InterleavedLayout.js";import i from"../lib/GLMaterial.js";import{Material as s,materialParametersDefaults as r}from"../lib/Material.js";import{writePosition as n,writeNormal as a,writeBufferVec4 as u}from"./internal/bufferWriterUtils.js";import{LineCalloutTechniqueConfiguration as o,LineCalloutTechnique as c}from"../shaders/LineCalloutTechnique.js";class l extends s{constructor(e){super(e,f),this.techniqueConfig=new o,this._uniqueMaterialIdentifier=l.uniqueMaterialIdentifier(this.params)}get uniqueMaterialIdentifier(){return this._uniqueMaterialIdentifier}dispose(){}getGLMaterial(e){return 0===e.output?new h(e):void 0}getPassParameters(){return this.params}getTechniqueConfig(e,t){return this.techniqueConfig.occlusionTestEnabled=this.params.occlusionTest,this.techniqueConfig.verticalOffset=!!this.params.verticalOffset,this.techniqueConfig.screenSizePerspective=!!this.params.screenSizePerspective,this.techniqueConfig.depthHudEnabled=e,this.techniqueConfig.depthHudAlignStartEnabled=!!this.params.depthHUDAlignStart,this.techniqueConfig.screenCenterOffsetUnitsEnabled="screen"===this.params.centerOffsetUnits?1:0,this.techniqueConfig.slicePlaneEnabled=this.params.slicePlaneEnabled,this.techniqueConfig.multipassGeometryEnabled=!!t&&t.multipassGeometryEnabled,this.techniqueConfig}intersect(){}createBufferWriter(){return new m}validateParameterValues(e){const t=l.uniqueMaterialIdentifier(e);t!==this._uniqueMaterialIdentifier&&(this._uniqueMaterialIdentifier=t)}static uniqueMaterialIdentifier(e){return JSON.stringify({screenOffset:e.screenOffset||[0,0],centerOffsetUnits:e.centerOffsetUnits||"world"})}}class h extends i{constructor(e){super(e),this._isRenderSlot=!0,this.updateParameters()}updateParameters(e){this._technique=this._techniqueRep.releaseAndAcquire(c,this._material.getTechniqueConfig(!1,e),this._technique),this._depthTechnique=this._techniqueRep.releaseAndAcquire(c,this._material.getTechniqueConfig(!0,e),this._depthTechnique)}beginSlot(e){switch(e){case 20:return this._isRenderSlot=!0,!0;case 21:return this._isRenderSlot=!1,!0}return!1}get technique(){return this._isRenderSlot?this._technique:this._depthTechnique}ensureParameters(e){this.updateParameters(e)}bind(e){this.technique.bindPass(this._material.getPassParameters(),e)}}const f={verticalOffset:null,screenSizePerspective:null,screenOffset:[0,0],color:[0,0,0,1],size:1,borderColor:null,occlusionTest:!1,shaderPolygonOffset:1e-5,depthHUDAlignStart:!1,centerOffsetUnits:"world",slicePlaneEnabled:!1,...r},d=t().vec3f("position").vec3f("normal").vec2f("uv0").vec4f("auxpos1"),p=[e(0,0),e(1,0),e(0,1),e(1,0),e(1,1),e(0,1)];class m{constructor(){this.vertexBufferLayout=d}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){return 6*e.indices.get("position").length}write(e,t,i,s){n(t.indices.get("position"),t.vertexAttributes.get("position").data,e.transformation,i.position,s,6),a(t.indices.get("normal"),t.vertexAttributes.get("normal").data,e.invTranspTransformation,i.normal,s,6),u(t.indices.get("auxpos1"),t.vertexAttributes.get("auxpos1").data,i.auxpos1,s,6);for(let r=0;r<p.length;++r)i.uv0.setVec(s+r,p[r])}}export{l as LineCalloutMaterial};
