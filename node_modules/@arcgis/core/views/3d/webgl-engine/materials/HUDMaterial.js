/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{clamp as e,sign as t}from"../../../../core/mathUtils.js";import{isSome as i}from"../../../../core/maybe.js";import{createRenderScreenPointArray3 as s}from"../../../../core/screenUtils.js";import{f as r}from"../../../../chunks/mat3.js";import{c as n}from"../../../../chunks/mat3f64.js";import{a}from"../../../../chunks/mat4.js";import{c as o}from"../../../../chunks/mat4f64.js";import{c}from"../../../../chunks/vec2.js";import{a as l,f as u}from"../../../../chunks/vec2f64.js";import{s as f,m as p,n as h,f as m,a as d,g,l as v,i as x,t as b,d as S,b as A}from"../../../../chunks/vec3.js";import{c as q,f as O}from"../../../../chunks/vec3f64.js";import{isMat4 as P}from"../../../../core/libs/gl-matrix-2/types/mat4.js";import{create as y}from"../../../../geometry/support/aaBoundingRect.js";import{newLayout as z}from"../../support/buffer/InterleavedLayout.js";import{computeAttachmentOriginPoints as C}from"../lib/geometryDataUtils.js";import T from"../lib/GLMaterialTexture.js";import{Material as _,materialParametersDefaults as w}from"../lib/Material.js";import{applyScaleFactor as j,applyPrecomputedScaleFactor as D,precomputeScaleFactor as M}from"../lib/screenSizePerspectiveUtils.js";import{assert as E}from"../lib/Util.js";import{writePosition as V,writeNormal as G,writeColor as I,writeBufferVec4 as R}from"./internal/bufferWriterUtils.js";import{verticalOffsetAtDistance as U}from"./internal/MaterialUtil.js";import{isInstanceHidden as B}from"./renderers/utils.js";import{c as H}from"../../../../chunks/HUDMaterial.glsl.js";import{HUDMaterialTechniqueConfiguration as k,HUDMaterialTechnique as F}from"../shaders/HUDMaterialTechnique.js";class W extends _{constructor(e){super(e,me),this.techniqueConfig=new k}getTechniqueConfig(e,t){return this.techniqueConfig.output=e,this.techniqueConfig.slicePlaneEnabled=this.params.slicePlaneEnabled,this.techniqueConfig.verticalOffset=!!this.params.verticalOffset,this.techniqueConfig.screenSizePerspective=!!this.params.screenSizePerspective,this.techniqueConfig.screenCenterOffsetUnitsEnabled="screen"===this.params.centerOffsetUnits?1:0,this.techniqueConfig.polygonOffsetEnabled=this.params.polygonOffset,this.techniqueConfig.isDraped=this.params.isDraped,this.techniqueConfig.occlusionTestEnabled=this.params.occlusionTest,this.techniqueConfig.pixelSnappingEnabled=this.params.pixelSnappingEnabled,this.techniqueConfig.sdf=this.params.textureIsSignedDistanceField,this.techniqueConfig.vvSize=!!this.params.vvSizeEnabled,this.techniqueConfig.vvColor=!!this.params.vvColorEnabled,0===e&&(this.techniqueConfig.debugDrawBorder=!!this.params.debugDrawBorder),4===e&&(this.techniqueConfig.binaryHighlightOcclusion=this.params.binaryHighlightOcclusion),this.techniqueConfig.depthEnabled=this.params.depthEnabled,this.techniqueConfig.transparencyPassType=t?t.transparencyPassType:3,this.techniqueConfig.multipassGeometryEnabled=!!t&&t.multipassGeometryEnabled,this.techniqueConfig.multipassTerrainEnabled=!!t&&t.multipassTerrainEnabled,this.techniqueConfig.cullAboveGround=!!t&&t.cullAboveGround,this.techniqueConfig}intersect(e,t,i,s,r,n,a,o,c){c?this.intersectDrapedHudGeometry(e,n,a,o):this.intersectHudGeometry(e,t,i,s,a,o)}intersectDrapedHudGeometry(e,t,s,r){const n=e.vertexAttributes.get("position"),a=e.vertexAttributes.get("size"),o=this.params,c=H(o);let l=1,u=1;if(i(r)){const e=r(le);l=e[0],u=e[5]}l*=e.screenToWorldRatio,u*=e.screenToWorldRatio;const f=fe*e.screenToWorldRatio;for(let i=0;i<n.data.length/n.size;i++){const r=i*n.size,p=n.data[r],h=n.data[r+1],m=i*a.size;let d;pe[0]=a.data[m]*l,pe[1]=a.data[m+1]*u,o.textureIsSignedDistanceField&&(d=o.outlineSize*e.screenToWorldRatio/2),X(t,p,h,pe,f,d,o,c)&&s()}}intersectHudGeometry(e,t,s,n,o,c){if(!n.options.selectionMode||!n.options.hud)return;if(B(t))return;const l=this.params;let u=1,b=1;if(r(re,s),i(c)){const e=c(le);u=e[0],b=e[5],Q(re)}const S=e.vertexAttributes.get("position"),A=e.vertexAttributes.get("size"),O=e.vertexAttributes.get("normal"),P=e.vertexAttributes.get("auxpos1");E(S.size>=3);const y=n.point,z=n.camera,C=H(l);u*=z.pixelRatio,b*=z.pixelRatio;const T="screen"===this.params.centerOffsetUnits;for(let i=0;i<S.data.length/S.size;i++){const e=i*S.size;f($,S.data[e],S.data[e+1],S.data[e+2]),p($,$,s);const t=i*A.size;pe[0]=A.data[t]*u,pe[1]=A.data[t+1]*b,p($,$,z.viewMatrix);const r=i*P.size;if(f(oe,P.data[r+0],P.data[r+1],P.data[r+2]),!T&&($[0]+=oe[0],$[1]+=oe[1],0!==oe[2])){const e=oe[2];h(oe,$),m($,$,d(oe,oe,e))}const c=i*O.size;if(f(ee,O.data[c],O.data[c+1],O.data[c+2]),this.normalAndViewAngle(ee,re,z,ce),this.applyVerticalOffsetTransformationView($,ce,z,Y),z.applyProjection($,te),te[0]>-1){let e=Math.floor(te[0])+this.params.screenOffset[0],t=Math.floor(te[1])+this.params.screenOffset[1];T&&(e+=oe[0],0!==oe[1]&&(t+=j(oe[1],Y.factorAlignment))),D(pe,Y.factor,pe);const i=ue*z.pixelRatio;let s;if(l.textureIsSignedDistanceField&&(s=l.outlineSize*z.pixelRatio/2),X(y,e,t,pe,i,s,l,C)){const e=n.ray;if(p(se,$,a(ae,z.viewMatrix)),te[0]=y[0],te[1]=y[1],z.unprojectFromRenderScreen(te,$)){const t=q();g(t,e.direction);const i=1/v(t);d(t,t,i);o(x(e.origin,$)*i,t,-1,1,!0,se)}}}}}computeAttachmentOrigin(e,t){const i=e.vertexAttributes;if(!i)return!1;const s=i.get("position"),r=e.indices.get("position");return C(s,r,t)}createBufferWriter(){return new ge(this)}normalAndViewAngle(e,t,i,s){return P(t)&&(t=r(ne,t)),b(s.normal,e,t),p(s.normal,s.normal,i.viewInverseTransposeMatrix),s.cosAngle=S(ie,he),s}updateScaleInfo(e,t,i){const s=this.params;s.screenSizePerspective?M(i,t,s.screenSizePerspective,e.factor):(e.factor.scale=1,e.factor.factor=0,e.factor.minPixelSize=0,e.factor.paddingPixels=0),s.screenSizePerspectiveAlignment?M(i,t,s.screenSizePerspectiveAlignment,e.factorAlignment):(e.factorAlignment.factor=e.factor.factor,e.factorAlignment.scale=e.factor.scale,e.factorAlignment.minPixelSize=e.factor.minPixelSize,e.factorAlignment.paddingPixels=e.factor.paddingPixels)}applyShaderOffsetsView(e,t,i,s,r,n,a){const o=this.normalAndViewAngle(t,i,r,ce);return this.applyVerticalGroundOffsetView(e,o,r,a),this.applyVerticalOffsetTransformationView(a,o,r,n),this.applyPolygonOffsetView(a,o,s[3],r,a),this.applyCenterOffsetView(a,s,a),a}applyShaderOffsetsNDC(e,t,s,r,n){return this.applyCenterOffsetNDC(e,t,s,r),i(n)&&g(n,r),this.applyPolygonOffsetNDC(r,t,s,r),r}applyPolygonOffsetView(i,s,r,n,a){const o=n.aboveGround?1:-1;let c=t(r);0===c&&(c=o);const l=o*c;if(this.params.shaderPolygonOffset<=0)return g(a,i);const u=e(Math.abs(s.cosAngle),.01,1),f=1-Math.sqrt(1-u*u)/u/n.viewport[2];return d(a,i,l>0?f:1/f),a}applyVerticalGroundOffsetView(e,t,i,s){const r=v(e),n=i.aboveGround?1:-1,a=.5*i.computeRenderPixelSizeAtDist(r),o=d($,t.normal,n*a);return A(s,e,o),s}applyVerticalOffsetTransformationView(e,t,i,s){const r=this.params;if(!r.verticalOffset||!r.verticalOffset.screenLength){if(r.screenSizePerspective||r.screenSizePerspectiveAlignment){const i=v(e);this.updateScaleInfo(s,i,t.cosAngle)}else s.factor.scale=1,s.factorAlignment.scale=1;return e}const n=v(e),a=r.screenSizePerspectiveAlignment||r.screenSizePerspective,o=U(i,n,r.verticalOffset,t.cosAngle,a);return this.updateScaleInfo(s,n,t.cosAngle),d(t.normal,t.normal,o),A(e,e,t.normal)}applyCenterOffsetView(e,t,i){const s="screen"!==this.params.centerOffsetUnits;return i!==e&&g(i,e),s&&(i[0]+=t[0],i[1]+=t[1],t[2]&&(h(ee,i),A(i,i,d(ee,ee,t[2])))),i}applyCenterOffsetNDC(e,t,i,s){const r="screen"!==this.params.centerOffsetUnits;return s!==e&&g(s,e),r||(s[0]+=t[0]/i.fullWidth*2,s[1]+=t[1]/i.fullHeight*2),s}applyPolygonOffsetNDC(e,i,s,r){const n=this.params.shaderPolygonOffset;if(e!==r&&g(r,e),n){const e=s.aboveGround?1:-1,a=e*t(i[3]);r[2]-=(a||e)*n}return r}getGLMaterial(e){return 0===e.output||7===e.output?new N(e):4===e.output?new J(e):void 0}calculateRelativeScreenBounds(e,t,i=y()){return K(this.params,e,t,i),i[2]=i[0]+e[0],i[3]=i[1]+e[1],i}}class L extends T{constructor(e){super({...e,...e.material.params}),this.updateParameters()}beginSlot(e){return e===(this._material.params.drawInSecondSlot?19:18)}updateParameters(e){this.updateTexture(this._material.params.textureId),this.selectProgram(e)}selectProgram(e){this._technique=this._techniqueRep.releaseAndAcquire(F,this._material.getTechniqueConfig(this._output,e),this._technique)}ensureParameters(e){this.updateParameters(e)}bind(e){this.bindTextures(this._technique.program),this.bindTextureScale(this._technique.program),this._technique.bindPass(this._material.params,e)}}class N extends L{constructor(e){super(e),this._isOcclusionSlot=!1}beginSlot(e){const t=this._material.params.drawInSecondSlot?19:18;return this._material.params.occlusionTest?(this._isOcclusionSlot=12===e,12===e||e===t):(this._isOcclusionSlot=!1,e===t)}get technique(){return this._isOcclusionSlot?this._occlusionTechnique:this._technique}selectProgram(e){this._technique=this._techniqueRep.releaseAndAcquire(F,this._material.getTechniqueConfig(this._output,e),this._technique),this._occlusionTechnique=this._techniqueRep.releaseAndAcquire(F,this._material.getTechniqueConfig(6,e),this._occlusionTechnique)}bind(e){const t=this.technique;this._isOcclusionSlot||(this.bindTextures(t.program),this.bindTextureScale(t.program)),t.bindPass(this._material.params,e)}}class J extends L{constructor(e){super({...e,output:4})}}function K(e,t,i,s=Z){return c(s,e.anchorPos),s[0]*=-t[0],s[1]*=-t[1],s[0]+=e.screenOffset[0]*i,s[1]+=e.screenOffset[1]*i,s}function Q(e){const t=e[0],i=e[1],s=e[2],r=e[3],n=e[4],a=e[5],o=e[6],c=e[7],l=e[8],u=1/Math.sqrt(t*t+i*i+s*s),f=1/Math.sqrt(r*r+n*n+a*a),p=1/Math.sqrt(o*o+c*c+l*l);return e[0]=t*u,e[1]=i*u,e[2]=s*u,e[3]=r*f,e[4]=n*f,e[5]=a*f,e[6]=o*p,e[7]=c*p,e[8]=l*p,e}function X(e,t,i,s,r,n,a,o){let c=t-r-(o[0]>0?s[0]*o[0]:0),l=c+s[0]+2*r,u=i-r-(o[1]>0?s[1]*o[1]:0),f=u+s[1]+2*r;if(a.textureIsSignedDistanceField){const e=a.distanceFieldBoundingBox;c+=s[0]*e[0],u+=s[1]*e[1],l-=s[0]*(1-e[2]),f-=s[1]*(1-e[3]),c-=n,l+=n,u-=n,f+=n}return e[0]>c&&e[0]<l&&e[1]>u&&e[1]<f}const Y={factor:{scale:0,factor:0,minPixelSize:0,paddingPixels:0},factorAlignment:{scale:0,factor:0,minPixelSize:0,paddingPixels:0}},Z=l(),$=q(),ee=q(),te=s(),ie=q(),se=q(),re=n(),ne=n(),ae=o(),oe=q(),ce={normal:ie,cosAngle:0},le=o(),ue=1,fe=2,pe=[0,0],he=O(0,0,1),me={texCoordScale:[1,1],occlusionTest:!0,binaryHighlightOcclusion:!0,drawInSecondSlot:!1,color:[1,1,1,1],outlineColor:[1,1,1,1],outlineSize:0,textureIsSignedDistanceField:!1,distanceFieldBoundingBox:null,vvSizeEnabled:!1,vvSizeMinSize:[1,1,1],vvSizeMaxSize:[100,100,100],vvSizeOffset:[0,0,0],vvSizeFactor:[1,1,1],vvColorEnabled:!1,vvColorValues:[0,0,0,0,0,0,0,0],vvColorColors:[1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],screenOffset:[0,0],verticalOffset:null,screenSizePerspective:null,screenSizePerspectiveAlignment:null,slicePlaneEnabled:!1,anchorPos:u(.5,.5),shaderPolygonOffset:1e-5,polygonOffset:!1,textureId:null,centerOffsetUnits:"world",depthEnabled:!0,pixelSnappingEnabled:!0,debugDrawBorder:!1,isDraped:!1,...w},de=z().vec3f("position").vec3f("normal").vec2f("uv0").vec4u8("color").vec2f("size").vec4f("auxpos1").vec4f("auxpos2");class ge{constructor(e){this.material=e,this.vertexBufferLayout=de}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){return 6*e.indices.get("position").length}write(e,t,i,s){V(t.indices.get("position"),t.vertexAttributes.get("position").data,e.transformation,i.position,s,6),G(t.indices.get("normal"),t.vertexAttributes.get("normal").data,e.invTranspTransformation,i.normal,s,6);{const e=t.vertexAttributes.get("uv0").data;let r,n,a,o;if(null==e||e.length<4){const e=this.material.params;r=0,n=0,a=e.texCoordScale[0],o=e.texCoordScale[1]}else r=e[0],n=e[1],a=e[2],o=e[3];a=Math.min(1.99999,a+1),o=Math.min(1.99999,o+1);const c=t.indices.get("position").length,l=i.uv0;let u=s;for(let t=0;t<c;++t)l.set(u,0,r),l.set(u,1,n),u+=1,l.set(u,0,a),l.set(u,1,n),u+=1,l.set(u,0,a),l.set(u,1,o),u+=1,l.set(u,0,a),l.set(u,1,o),u+=1,l.set(u,0,r),l.set(u,1,o),u+=1,l.set(u,0,r),l.set(u,1,n),u+=1}I(t.indices.get("color"),t.vertexAttributes.get("color").data,4,i.color,s,6);{const e=t.indices.get("size"),r=t.vertexAttributes.get("size").data,n=e.length,a=i.size;let o=s;for(let t=0;t<n;++t){const i=r[2*e[t]],s=r[2*e[t]+1];for(let e=0;e<6;++e)a.set(o,0,i),a.set(o,1,s),o+=1}}t.indices.get("auxpos1")&&t.vertexAttributes.get("auxpos1")&&R(t.indices.get("auxpos1"),t.vertexAttributes.get("auxpos1").data,i.auxpos1,s,6),t.indices.get("auxpos2")&&t.vertexAttributes.get("auxpos2")&&R(t.indices.get("auxpos2"),t.vertexAttributes.get("auxpos2").data,i.auxpos2,s,6)}}export{W as HUDMaterial};
