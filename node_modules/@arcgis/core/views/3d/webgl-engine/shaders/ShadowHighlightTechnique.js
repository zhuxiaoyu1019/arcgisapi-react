/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{smoothstep as t,clamp as i}from"../../../../core/mathUtils.js";import{isSome as r}from"../../../../core/maybe.js";import{t as e,a}from"../../../../chunks/mat4.js";import{c as o}from"../../../../chunks/mat4f64.js";import{a as s}from"../../../../chunks/vec2f64.js";import{n as h,s as n,d as m,m as p}from"../../../../chunks/vec3.js";import{c as l}from"../../../../chunks/vec3f64.js";import{c}from"../../../../chunks/vec4f64.js";import{ReloadableShaderModule as g}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as d}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as f}from"../lib/DefaultVertexAttributeLocations.js";import{Program as u}from"../lib/Program.js";import{inverseProjectionInfo as w}from"../lib/Util.js";import{S as v}from"../../../../chunks/ShadowHighlight.glsl.js";import{makePipelineState as T,separateBlendingParams as S,defaultColorWriteParams as x}from"../../../webgl/renderState.js";const M=4e4,j=5e4;class b extends d{constructor(){super(...arguments),this.opacityElevation=1,this.dayNightTerminator=1,this.highlightShadowMapSlot=0,this.defaultSnapshotSlot=1}initializeProgram(t){const i=b.shader.get();this._viewingMode=t.viewingMode;const r=i.build({highlightedThreshold:.99999,selfShadowThreshold:.025});return new u(t.rctx,r,f)}initializePipeline(t){return T({blending:S(770,1,771,771),colorWrite:x,depthTest:null,depthWrite:null})}bindPass(o,s){this.opacityElevation=1-t(M,j,s.camera.relativeElevation);const l=1===this._viewingMode?h(y,s.camera.center):n(y,0,0,1),c=m(l,s.lighting.lightingMainDirection);this.dayNightTerminator=t(0,1,i(30*c,0,1)),this.program.bindTexture(s.linearDepthTexture,"depthMap"),this.program.bindTexture(s.highlightColorTexture,"highlightMap"),p(U,s.lighting.lightingMainDirection,s.camera.viewInverseTransposeMatrix),h(U,U),w(s.camera.projectionMatrix,s.camera.fullWidth,s.camera.fullHeight,k,D),e(z,s.camera.viewMatrix,s.camera.center),a(z,z),this.program.setUniform4fv("color",o.shadowColor),this.program.setUniform1f("opacity",o.shadowOpacity),this.program.setUniform1f("occludedOpacity",o.occludedShadowOpacity),this.program.setUniform1f("terminationFactor",this.opacityElevation*this.dayNightTerminator),this.program.setUniform2fv("nearFar",s.camera.nearFar),this.program.setUniformMatrix4fv("inverseView",z),this.program.setUniform4fv("projInfo",k),this.program.setUniform2fv("zScale",D),this.program.setUniform3fv("lightingMainDirectionView",U),this.program.setUniform2f("texelSize",1/s.linearDepthTexture.descriptor.width,1/s.linearDepthTexture.descriptor.height),s.shadowMap.bind(this.program),s.shadowMap.bindView(this.program,s.camera.center);let g=s.shadowMap.getSnapshot(this.highlightShadowMapSlot);r(g)&&this.program.bindTexture(g,"highlightDepthTex"),g=s.shadowMap.getSnapshot(this.defaultSnapshotSlot),r(g)&&this.program.bindTexture(g,"defaultDepthTex")}get primitiveType(){return 5}}b.shader=new g(v,(()=>import("./ShadowHighlight.glsl.js")));const y=l(),U=l(),D=s(),k=c(),z=o();export{b as ShadowHighlightTechnique};
