/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as o}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as e}from"../core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as t,parameter as i}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as n}from"../lib/DefaultVertexAttributeLocations.js";import{Program as s}from"../lib/Program.js";import{C as a}from"../../../../chunks/Compositing.glsl.js";import{makePipelineState as c,simpleBlendingParams as l,defaultColorWriteParams as u,separateBlendingParams as h}from"../../../webgl/renderState.js";class p extends e{initializeProgram(o){const r=p.shader.get().build(this.configuration);return new s(o.rctx,r,n)}initializePipeline(){if(1===this.configuration.function)return c({colorWrite:{r:!1,g:!0,b:!1,a:!1}});switch(this.configuration.alphaMode){case 0:return c({colorWrite:u});case 1:return c({blending:h(770,1,771,771),colorWrite:u});default:return c({blending:l(1,771),colorWrite:u})}}}p.shader=new r(a,(()=>import("./Compositing.glsl.js")));class d extends t{constructor(){super(...arguments),this.function=0,this.alphaMode=0,this.hasOpacityFactor=!1}}o([i({count:4})],d.prototype,"function",void 0),o([i({count:3})],d.prototype,"alphaMode",void 0),o([i()],d.prototype,"hasOpacityFactor",void 0);export{p as CompositingTechnique,d as CompositingTechniqueConfiguration};
