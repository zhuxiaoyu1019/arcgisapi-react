/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{RgbaFloatEncoding as e}from"../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js";import{glsl as t}from"../../../core/shaderModules/interfaces.js";import{EdgeUtil as a}from"./EdgeUtil.glsl.js";import{UnpackAttributes as r}from"./UnpackAttributes.glsl.js";function u(u,s){const c=u.vertex;u.include(r,s);const l=u.fragment;switch(a.usesSketchLogic(s)&&(c.uniforms.add("uStrokesTextureScale","vec2"),c.uniforms.add("uStrokesLog2Resolution","float"),c.uniforms.add("uStrokeVariants","float"),u.varyings.add("vStrokeUV","vec2"),l.uniforms.add("uStrokesTexture","sampler2D"),l.uniforms.add("uStrokesNormalizationScale","float"),c.code.add(t`void calculateStyleOutputsSketch(float lineLength, UnpackedAttributes unpackedAttributes) {
vec2 sidenessNorm = unpackedAttributes.sidenessNorm;
float lineIndex = clamp(ceil(log2(lineLength)), 0.0, uStrokesLog2Resolution);
vStrokeUV = vec2(exp2(lineIndex) * sidenessNorm.y, lineIndex * uStrokeVariants + variantStroke + 0.5) * uStrokesTextureScale;
vStrokeUV.x += variantOffset;
}`),u.fragment.include(e),l.code.add(t`float calculateLineOffsetSketch() {
float offsetNorm = rgba2float(texture2D(uStrokesTexture, vStrokeUV));
return (offsetNorm - 0.5) * uStrokesNormalizationScale;
}
float calculateLinePressureSketch() {
return rgba2float(texture2D(uStrokesTexture, vStrokeUV + vec2(0.0, 0.5)));
}`)),s.mode){case 0:c.code.add(t`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes) {}`),l.code.add(t`float calculateLineOffset() {
return 0.0;
}
float calculateLinePressure() {
return 1.0;
}`);break;case 1:c.code.add(t`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)
{
calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);
}`),l.code.add(t`float calculateLineOffset() {
return calculateLineOffsetSketch();
}
float calculateLinePressure() {
return calculateLinePressureSketch();
}`);break;case 2:u.varyings.add("vType","float"),c.code.add(t`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)
{
vType = unpackedAttributes.type;
if (unpackedAttributes.type <= 0.0) {
calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);
}
}`),l.code.add(t`float calculateLineOffset() {
if (vType <= 0.0) {
return calculateLineOffsetSketch();
}
else {
return 0.0;
}
}
float calculateLinePressure() {
if (vType <= 0.0) {
return calculateLinePressureSketch();
}
else {
return 1.0;
}
}`)}}export{u as LineOffset};
