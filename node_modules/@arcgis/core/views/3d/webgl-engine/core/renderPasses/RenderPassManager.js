/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{isSome as s}from"../../../../../core/maybe.js";import{f as a,t as e,e as i}from"../../../../../chunks/mat3.js";import{c as t}from"../../../../../chunks/mat3f64.js";import{d as r}from"../../../../../chunks/mat4.js";import{s as h}from"../../../../../chunks/vec2.js";import{b as m,s as n,g as o,f as l}from"../../../../../chunks/vec3.js";import{c as P}from"../../../../../chunks/vec3f64.js";import{c as p}from"../../../../../chunks/vec4.js";import{d as c}from"../../../../../chunks/boundedPlane.js";import{MaterialPassesParameters as d,ShadowMapPassParameters as _,HighlightPassParameters as u}from"./AllRenderPasses.js";import{RenderPass as g}from"./RenderPass.js";import{TwoVectorPosition as w}from"../util/TwoVectorPosition.js";import{union as f}from"../../lib/depthRange.js";class b{constructor(s,a){this.rctx=s,this.shaderTechniqueRepository=a,this.canRender=!0,this._materialPassParams=new d,this._shadowPassParams=new _,this._highlightPassParams=new u,this._systems=new Set,this._passes=new Array,this._shadowMapPass=this._registerPass(new g(s,this.shaderTechniqueRepository)),this.passes={materialOpaque:this._registerPass(new g(s,this.shaderTechniqueRepository)),materialTransparent:this._registerPass(new g(s,this.shaderTechniqueRepository,1)),materialIntegratedMesh:this._registerPass(new g(s,this.shaderTechniqueRepository)),shadowMap:this._shadowMapPass,highlight:this._registerPass(new g(s,this.shaderTechniqueRepository)),highlightIntegratedMesh:this._registerPass(new g(s,this.shaderTechniqueRepository)),highlightShadowMap:this._registerPass(new g(s,this.shaderTechniqueRepository)),defaultShadowMap:this._registerPass(new g(s,this.shaderTechniqueRepository))}}register(s){this._systems.add(s)}prepareRender(s){0!==this._systems.size&&(this._passes.forEach((s=>s.prepareSubmit())),this._systems.forEach((a=>a.submit(this.passes,{camera:s}))),this._passes.forEach((s=>s.finishSubmit())),this.shaderTechniqueRepository.frameUpdate())}render(a){if(0===this._systems.size)return!1;if(4===a.slot)switch(this._configure(a),a.pass){case 0:this._materialPassParams.subPass=0,this._configureMaterialColorPass(a),this.passes.materialOpaque.dispatch(this._materialPassParams);break;case 2:this._materialPassParams.subPass=2,this.passes.materialOpaque.dispatch(this._materialPassParams);break;case 3:this._materialPassParams.subPass=3,this.passes.materialOpaque.dispatch(this._materialPassParams);break;case 5:this.passes.highlight.dispatch(this._highlightPassParams);break;case 4:this._shadowMapPass.dispatch(this._shadowPassParams);break;case 7:s(this.passes.highlightShadowMap)&&this.passes.highlightShadowMap.dispatch(this._shadowPassParams);break;case 6:s(this.passes.defaultShadowMap)&&this.passes.defaultShadowMap.dispatch(this._shadowPassParams)}if(6===a.slot)switch(this._configure(a),a.pass){case 0:this._materialPassParams.subPass=0,this._configureMaterialColorPass(a),this.passes.materialTransparent.dispatch(this._materialPassParams);break;case 1:this._materialPassParams.subPass=1,this._configureMaterialColorPass(a),this.passes.materialTransparent.dispatch(this._materialPassParams);break;case 2:this._materialPassParams.subPass=2,this.passes.materialTransparent.dispatch(this._materialPassParams);break;case 3:this._materialPassParams.subPass=3,this.passes.materialTransparent.dispatch(this._materialPassParams)}if(1===a.slot)switch(this._configure(a),a.pass){case 0:this._materialPassParams.subPass=0,this._configureMaterialColorPass(a),this._materialPassParams.ssrParams=a.ssrParams,this.passes.materialIntegratedMesh.dispatch(this._materialPassParams);break;case 2:this._materialPassParams.subPass=2,this.passes.materialIntegratedMesh.dispatch(this._materialPassParams);break;case 3:this._materialPassParams.subPass=3,this.passes.materialIntegratedMesh.dispatch(this._materialPassParams);break;case 5:this.passes.highlightIntegratedMesh.dispatch(this._highlightPassParams)}return!0}notifyDirty(){this.context.requestRender()}slots(){return[4,6,1]}initializeRenderContext(s){this.context=s}uninitializeRenderContext(){}queryDepthRange(a){const e={near:1/0,far:-1/0};return this._systems.forEach((i=>{const t=i.queryShadowCasterDepthRange(a);s(t)&&f(e,t,e)})),e}get shadowCastingEnabled(){return s(this.passes.shadowMap)}set shadowCastingEnabled(s){s?(this._materialPassParams.shadowsEnabled=!0,this.passes.shadowMap=this._shadowMapPass):(this._materialPassParams.shadowsEnabled=!1,this.passes.shadowMap=null)}get screenSpaceReflectionsEnabled(){return s(this._materialPassParams.ssrParams.ssrEnabled)}set screenSpaceReflectionsEnabled(s){this._materialPassParams.ssrParams.ssrEnabled=!!s}_configureMaterialColorPass(s){this._materialPassParams.bindShadowMap=a=>{s.shadowMap.bind(a);const e=this._materialPassParams.viewTransform;m(M,e.worldFromView_TL,e.worldFromView_TH),s.shadowMap.bindView(a,M)},this._materialPassParams.bindAmbientOcclusion=a=>s.ssaoHelper.bind(a),this._materialPassParams.ambientOcclusionEnabled=!!s.ssaoHelper&&s.ssaoHelper.ready,this._materialPassParams.sceneHasOcludees=s.hasOccludees}_configure(s){const a=4===s.pass||7===s.pass||6===s.pass?this._shadowPassParams:5===s.pass?this._highlightPassParams:this._materialPassParams;this._updateParameters(s,a)}_updateParameters(s,t){const m=s.camera,P=m.viewInverseTransposeMatrix;n(M,P[3],P[7],P[11]),y.set(M),o(t.viewTransform.worldFromView_TH,y.high),o(t.viewTransform.worldFromView_TL,y.low),a(t.viewTransform.viewFromCameraRelative_RS,m.viewMatrix),r(t.viewTransform.projFromView,m.projectionMatrix),0===t.identifier?(this._materialPassParams.transparent=6===s.slot,this._materialPassParams.integratedMesh=1===s.slot,this._materialPassParams.lighting=s.scenelightingData,e(T,t.viewTransform.viewFromCameraRelative_RS),i(t.transformNormal_ViewFromGlobal,T),h(t.cameraNearFar,m.near,m.far)):1===t.identifier?h(t.cameraNearFar,m.near,m.far):2===t.identifier&&(t.highlightDepthTexture=s.highlightDepthTexture,p(t.viewport,m.fullViewport)),0!==t.identifier&&2!==t.identifier||(t.inverseViewport[0]=1/m.fullViewport[2],t.inverseViewport[1]=1/m.fullViewport[3]),c(s.sliceHelper.plane,t.slicePlane),l(t.slicePlane.origin,t.slicePlane.origin,M),t.slicePlaneEnabled=s.sliceHelper.isEnabled,this._materialPassParams.transparencyPassType=s.transparencyPassType,this._materialPassParams.multipassTerrainParams=s.multipassTerrainParams}_registerPass(s){return this._passes.push(s),s}get needsHighlight(){return this.passes.highlight.count>0||this.passes.highlightIntegratedMesh.count>0}}const M=P(),T=t(),y=new w;export{b as RenderPassManager};
