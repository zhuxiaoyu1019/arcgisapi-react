/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{AutoDisposable as t}from"../../lib/AutoDisposable.js";class e extends t{constructor(){super(...arguments),this._bucket=null,this._bucketIndex=0}get bucketKey(){return this._bucket.key}}class s{constructor(){this._buckets=new Map}add(t,e){const s=this._getBucket(t);e._bucket=s,e._bucketIndex=s.count,s.data.push(e),++s.statistics.added}remove(t){++t._bucket.statistics.removed;const e=t._bucket.data,s=e[e.length-1];e[t._bucketIndex]=s,s._bucketIndex=t._bucketIndex,e.pop(),t._bucket=null,t._bucketIndex=0}updateKey(t,e){this.remove(t),this.add(e,t)}getBucket(t){return this._getBucket(t).data}getPerformanceInfo(t){return this._getBucket(t).statistics}forEach(t){this._buckets.forEach((e=>t(e.data,e.key)))}get count(){let t=0;return this._buckets.forEach((e=>t+=e.count)),t}_getBucket(t){const e=this._buckets.get(t);if(e)return e;const s=new c(t);return this._buckets.set(t,s),s}}class c{constructor(t){this.key=t,this.data=new Array,this.statistics={added:0,removed:0}}get count(){return this.data.length}}export{e as BucketStorable,s as BucketedObjectStore};
