/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{glsl as e}from"../../shaderModules/interfaces.js";function t(t,o){t.varyings.add("vtc","vec2"),t.vertex.uniforms.add("texOffsetAndScale","vec4"),t.fragment.uniforms.add("tex","sampler2D"),t.fragment.uniforms.add("compositeBackground","bool"),t.fragment.uniforms.add("textureOpacity","float"),t.fragment.uniforms.add("baseOpacity","float"),o.textureFadingEnabled&&(t.vertex.uniforms.add("nextTexOffsetAndScale","vec4"),t.varyings.add("nvtc","vec2"),t.fragment.uniforms.add("texNext","sampler2D"),t.fragment.uniforms.add("textureFadeFactor","float")),t.vertex.code.add(e`
  void forwardTextureCoordinates(in vec2 uv) {
    vtc = uv * texOffsetAndScale.zw + texOffsetAndScale.xy;
    ${o.textureFadingEnabled?e`nvtc = uv * nextTexOffsetAndScale.zw + nextTexOffsetAndScale.xy;`:e``}
  }
  `),o.useGrid?(t.fragment.code.add(e`float lineFactorAtPosition(float value) {
float pos = value * 129.0;
if(pos < 0.5 || pos > 128.5) {
return 1.0;
}
pos = pos + 0.5;
float modulo = mod(pos, 16.0);
return modulo <= 2.0 ?  1.0 - abs(modulo - 1.0) : 0.0;
}
float lineFactorAtUV(vec2 uv) {
return max(lineFactorAtPosition(uv.x), lineFactorAtPosition(uv.y));
}
float lineFactor(vec2 uv) {
vec2 offset = fwidth(uv) * 0.25;
return (lineFactorAtUV(vec2(uv.x + offset.x, uv.y + offset.y)) +
lineFactorAtUV(vec2(uv.x - offset.x, uv.y + offset.y)) +
lineFactorAtUV(vec2(uv.x + offset.x, uv.y - offset.y)) +
lineFactorAtUV(vec2(uv.x - offset.x, uv.y - offset.y))) / 4.0;
}`),t.fragment.code.add(e`
    vec4 getTileColor() {
      vec4 color = ${o.textureFadingEnabled?e`textureFadeFactor < 1.0 ? mix(texture2D(texNext, nvtc), texture2D(tex, vtc), textureFadeFactor) : texture2D(tex, vtc);`:e`texture2D(tex, vtc);`};
      if(!compositeBackground) {
        return color;
      }

      float line = lineFactor(vtc) * 0.1 + 0.9;
      vec4 gridColor = vec4(1.0, 0.972, 0.918, 1.0) * line * baseOpacity;
      float alpha = textureOpacity * color.a;
      return mix(gridColor, color, alpha);
    }`)):o.hasBackgroundColor?(t.fragment.uniforms.add("backgroundColor","vec4"),t.fragment.code.add(e`
    vec4 getTileColor() {
      vec4 color = ${o.textureFadingEnabled?e`textureFadeFactor < 1.0 ? mix(texture2D(texNext, nvtc), texture2D(tex, vtc), textureFadeFactor) : texture2D(tex, vtc);`:e`texture2D(tex, vtc);`};
      float alpha = textureOpacity * color.a;
      return compositeBackground ? mix(backgroundColor * baseOpacity, color, alpha) : color;
    }`)):t.fragment.code.add(e`
    vec4 getTileColor() {
      return ${o.textureFadingEnabled?e`textureFadeFactor < 1.0 ? mix(texture2D(texNext, nvtc), texture2D(tex, vtc), textureFadeFactor) : texture2D(tex, vtc);`:e`texture2D(tex, vtc);`}
  }
  `)}export{t as TerrainTexture};
