/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{Slice as o}from"../Slice.glsl.js";import{Transform as r}from"../Transform.glsl.js";import{NormalAttribute as e}from"../attributes/NormalAttribute.glsl.js";import{TextureCoordinateAttribute as t}from"../attributes/TextureCoordinateAttribute.glsl.js";import{VertexNormal as i}from"../attributes/VertexNormal.glsl.js";import{OutputDepth as a}from"../output/OutputDepth.glsl.js";import{OutputHighlight as l}from"../output/OutputHighlight.glsl.js";import{VisualVariables as s}from"../shading/VisualVariables.glsl.js";import{DiscardOrAdjustAlpha as d}from"../util/AlphaDiscard.glsl.js";import{glsl as n}from"../../shaderModules/interfaces.js";function u(u,c){const p=u.vertex.code,v=u.fragment.code;1!==c.output&&3!==c.output||(u.include(r,{linearDepth:!0}),u.include(t,c),u.include(s,c),u.include(a,c),u.include(o,c),u.vertex.uniforms.add("cameraNearFar","vec2"),u.varyings.add("depth","float"),c.hasColorTexture&&u.fragment.uniforms.add("tex","sampler2D"),p.add(n`void main(void) {
vpos = calculateVPos();
vpos = subtractOrigin(vpos);
vpos = addVerticalOffset(vpos, localOrigin);
gl_Position = transformPositionWithDepth(proj, view, vpos, cameraNearFar, depth);
forwardTextureCoordinates();
}`),u.include(d,c),v.add(n`
      void main(void) {
        discardBySlice(vpos);
        ${c.hasColorTexture?n`
        vec4 texColor = texture2D(tex, vuv0);
        discardOrAdjustAlpha(texColor);`:""}
        outputDepth(depth);
      }
    `)),2===c.output&&(u.include(r,{linearDepth:!1}),u.include(e,c),u.include(i,c),u.include(t,c),u.include(s,c),c.hasColorTexture&&u.fragment.uniforms.add("tex","sampler2D"),u.vertex.uniforms.add("viewNormal","mat4"),u.varyings.add("vPositionView","vec3"),p.add(n`
      void main(void) {
        vpos = calculateVPos();
        vpos = subtractOrigin(vpos);
        ${0===c.normalType?n`
        vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));`:""}
        vpos = addVerticalOffset(vpos, localOrigin);
        gl_Position = transformPosition(proj, view, vpos);
        forwardTextureCoordinates();
      }
    `),u.include(o,c),u.include(d,c),v.add(n`
      void main() {
        discardBySlice(vpos);
        ${c.hasColorTexture?n`
        vec4 texColor = texture2D(tex, vuv0);
        discardOrAdjustAlpha(texColor);`:""}

        ${3===c.normalType?n`
            vec3 normal = screenDerivativeNormal(vPositionView);`:n`
            vec3 normal = normalize(vNormalWorld);
            if (gl_FrontFacing == false) normal = -normal;`}
        gl_FragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);
      }
    `)),4===c.output&&(u.include(r,{linearDepth:!1}),u.include(t,c),u.include(s,c),c.hasColorTexture&&u.fragment.uniforms.add("tex","sampler2D"),p.add(n`void main(void) {
vpos = calculateVPos();
vpos = subtractOrigin(vpos);
vpos = addVerticalOffset(vpos, localOrigin);
gl_Position = transformPosition(proj, view, vpos);
forwardTextureCoordinates();
}`),u.include(o,c),u.include(d,c),u.include(l),v.add(n`
      void main() {
        discardBySlice(vpos);
        ${c.hasColorTexture?n`
        vec4 texColor = texture2D(tex, vuv0);
        discardOrAdjustAlpha(texColor);`:""}
        outputHighlight();
      }
    `))}export{u as DefaultMaterialAuxiliaryPasses};
