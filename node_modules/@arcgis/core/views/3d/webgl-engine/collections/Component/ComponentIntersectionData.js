/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{p as t,w as i}from"../../../../../chunks/vec3.js";import{f as e,c as n}from"../../../../../chunks/vec3f64.js";import{fromValues as r}from"../../../../../geometry/support/aaBoundingBox.js";import{computeNormal as s}from"../../materials/internal/MaterialUtil.js";const o=40,a=20,c=.8,f=15,h=1e-6;function u(t,i,e){const n=i,r=e;let s=0,o=1/0;for(let a=0;a<3;++a){{const i=t[a];if(n[a]<i){if(r[a]<=h)return!1;const t=(i-n[a])/r[a];s=Math.max(s,t)}else if(r[a]<=-h){const t=(i-n[a])/r[a];o=Math.min(o,t)}if(s>=o)return!1}{const i=t[a+3];if(n[a]>i){if(r[a]>=-h)return!1;const t=(i-n[a])/r[a];s=Math.max(s,t)}else if(r[a]>=h){const t=(i-n[a])/r[a];o=Math.min(o,t)}if(s>=o)return!1}}return!0}class l{constructor(t,i,e,n,r){this.aabb=t,this.axis=i,this.d=e,this.midStartIndex=n,this.rightStartIndex=r}}class d{constructor(t,i,e,n){this.globalTriangleVertexIndices=t,this.firstTriangleIndex=i,this.positionAttribute=n,this.bspNodeTree=new Array,this.vertexPositionBuffer=n.data,this.vertexPositionStride=n.stride;const r=e-i,s=r<=R?new Uint16Array(r):new Uint32Array(r);this.indices=s;for(let o=0;o<r;++o)s[o]=o;{const o=T(t,i,e,n.data,n.stride),h=(t,i,e)=>{const n=p(s,o,t,i),r=i-t;if(r<=a){const e=new l(n,void 0,0,t,i);return this.bspNodeTree.push(e),e}const{axis:u,midValue:d}=b(n),m=N(s,o,t,i,u,d),x=(t,i)=>{if(e>f)return;const n=i-t;return n<a||n>=c*r?void 0:h(t,i,e+1)},g=new l(n,u,d,m.next,m.mid);return this.bspNodeTree.push(g),g.leftNode=x(t,m.next),g.rightNode=x(m.mid,i),g};h(0,r,0),this.triangleVertexIndices=I(s,t,i,e)}}intersectRayTriangleRange(t,i){{if(t>=i)return;const e=this.triangleVertexIndices,n=this.positionAttribute.data,r=this.positionAttribute.stride,o=this.rayOrigin,a=o[0],c=o[1],f=o[2],h=this.rayDirection,u=h[0],l=h[1],d=h[2];for(let m=t,g=3*t;m<i;++m){const t=e[g]*r,i=n[t],o=n[t+1],h=n[t+2],y=e[g+1]*r,N=n[y],p=n[y+1],b=n[y+2],T=e[g+2]*r,I=n[T],R=n[T+1],S=n[T+2];g+=3;const M=N-i,w=p-o,A=b-h,v=I-i,B=R-o,P=S-h,V=l*P-B*d,U=d*v-P*u,j=u*B-v*l,k=M*V+w*U+A*j;if(Math.abs(k)<=Number.EPSILON)continue;const F=a-i,O=c-o,D=f-h,E=F*V+O*U+D*j;if(k>0){if(E<0||E>k)continue}else if(E>0||E<k)continue;const L=O*A-w*D,q=D*M-A*F,z=F*w-M*O,C=u*L+l*q+d*z;if(k>0){if(C<0||E+C>k)continue}else if(C>0||E+C<k)continue;const G=(v*L+B*q+P*z)/k;if(G>=0){const t=this.indices[m]+this.firstTriangleIndex,i=s(M,w,A,v,B,P,x);this.callback(G,i,t)}}}d.numFacesTested+=i-t}intersectRay(i,n){d.numFacesTested=0;const r=e(i.r0[0],i.r0[1],i.r0[2]),s=m(e(i.r1[0],i.r1[1],i.r1[2]),r);if(t(s)<h)return;this.rayOrigin=r,this.rayDirection=s;const o=this.triangleVertexIndices.length/3;this.callback=n;const a=this.bspNodeTree[0];this.intersectRayBSP(a,0,o)}intersectRayBSP(t,i,e){const n=this.rayOrigin,r=this.rayDirection;if(!u(t.aabb,n,r))return;const s=t.axis,o=t.d;if(n[s]<o||r[s]<0){const e=i,n=t.midStartIndex;if(e<n){const i=t.leftNode;void 0!==i?this.intersectRayBSP(i,e,n):this.intersectRayTriangleRange(e,n)}}if(this.intersectRayTriangleRange(t.midStartIndex,t.rightStartIndex),n[s]>o||r[s]>0){const i=t.rightStartIndex,n=e;if(i<n){const e=t.rightNode;void 0!==e?this.intersectRayBSP(e,i,n):this.intersectRayTriangleRange(i,n)}}}}function m(t,e){const r=n();return i(r,t,e),r}d.numFacesTested=0;const x=n(),g=e(1/0,1/0,1/0),y=e(-1/0,-1/0,-1/0);function N(t,i,e,n,r,s){let o=e,a=n;for(;o<a;){const e=t[o];i[6*e+r+3]<=s?++o:(--a,t[o]=t[a],t[a]=e)}let c=o;for(a=n;c<a;){const e=t[a-1];i[6*e+r]>=s?--a:(t[a-1]=t[c],t[c]=e,++c)}return{next:o,mid:c}}function p(t,i,e,n){if(n<=e)return r(NaN,NaN,NaN,NaN,NaN,NaN);{const n=6*t[e];for(let t=0;t<3;++t)g[t]=i[n+0+t],y[t]=i[n+3+t]}for(let r=e+1;r<n;++r){const e=6*t[r];for(let t=0;t<3;++t)g[t]=Math.min(g[t],i[e+0+t]),y[t]=Math.max(y[t],i[e+3+t])}return r(g[0],g[1],g[2],y[0],y[1],y[2])}function b(t){const i=t[3]-t[0],e=t[4]-t[1],n=t[5]-t[2],r=i>e?i>n?0:e>n?1:2:e>n?1:n>i?2:0;return{axis:r,midValue:(t[r]+t[r+3])/2}}function T(t,i,e,n,r){const s=e-i,o=new Float32Array(6*s);for(let a=0;a<s;++a){const e=3*(a+i),s=t[e+0]*r,c=t[e+1]*r,f=t[e+2]*r;for(let t=0;t<3;++t){const i=n[s+t],e=n[c+t],r=n[f+t];o[6*a+t]=Math.min(i,e,r),o[6*a+3+t]=Math.max(i,e,r)}}return o}function I(t,i,e,n){const r=n-e;let s=0;for(let a=e;a<n;++a)for(let t=0;t<3;++t)s=Math.max(i[3*a+t],s);const o=s<=R?new Uint16Array(3*r):new Uint32Array(3*r);for(let a=0;a<r;++a){const n=3*(t[a]+e);for(let t=0;t<3;++t){const e=i[n+t];o[3*a+t]=e}}return o}const R=65535;export{d as ComponentIntersectionData,o as componentMinimalSizeForIntersectionData};
