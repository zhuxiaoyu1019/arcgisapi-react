/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{lerp as t}from"../../../core/mathUtils.js";import{n as i,s,h as e}from"../../../chunks/vec3.js";import{c as r,d as o}from"../../../chunks/vec3f64.js";import{lonLatToSphericalPCPF as h}from"../../../geometry/projection.js";import{getReferenceEllipsoid as a}from"../../../geometry/projectionEllipsoid.js";import{intersectsSphere as n}from"../../../geometry/support/frustum.js";import{copy as l,isPointOutside as d,create as p}from"../../../geometry/support/plane.js";import{createSphericalGlobePatch as c}from"./PatchGeometryFactory.js";import u from"./Tile.js";class m extends u{constructor(t,i,s){super(f),this.obb=new Array(8),this.isWebMercator=!1;for(let e=0;e<8;e++)this.obb[e]=r();void 0!==t&&this.init(t,i,s)}init(s,e,r){super.init(s,e,r),this.isWebMercator=r.tilingScheme.spatialReference.isWebMercator;const a=this.ellipsoid.radius,n=this.extentInRadians[0],l=this.extentInRadians[1],d=this.extentInRadians[2],p=this.extentInRadians[3],c=s[0],u=t(l,p,.5),m=t(n,d,.5),f=0===c?0:Math.min(Math.abs(l),Math.abs(p));this._edgeLen=(d-n)*Math.cos(f)*a,this._edgeLen2=this._edgeLen*this._edgeLen,this._curvatureHeight=a-Math.sqrt(a*a-this._edgeLen2/4),h(this.centerAtSeaLevel,m,u,this.ellipsoid.radius,0);const _=o(this.centerAtSeaLevel);i(_,_),this.up=_,this._updateOBB(),this.updateRadiusAndCenter()}updateRadiusAndCenter(){if(0===this.lij[0])s(this._center[1],0,0,0),s(this._center[0],0,0,0),s(this._center[2],0,0,0),this.ellipsoid||(this.ellipsoid=a(this.surface.tilingScheme.spatialReference)),this._center[1][3]=this.ellipsoid.radius+this.elevationBounds[1];else{this._updateCenter();const t=Math.max(e(this._center[1],this.obb[0]),e(this._center[1],this.obb[1]));this._center[1][3]=Math.sqrt(t)}}_isVisible(t){if(!this.intersectsClippingArea)return!1;if(this.lij[0]<10)return n(t,this._center[1]);const i=this.obb;for(let s=0;s<6;s++){let e,r=t[s];for(4===s&&(r=l(r,_),_[3]-=this.surface.view.state.camera.near),e=0;e<8&&!d(r,i[e]);e++);if(8===e)return!1}return!0}computeElevationBounds(){super.computeElevationBounds(),this._updateOBB()}createGeometry(t,i){const s=this._isPole(this.lij[1],this.lij[0]);c(t,this.extent,i,this.renderData,this.extentInRadians,this.isWebMercator,this.ellipsoid,s),this.setMemoryDirty()}_updateOBB(){const t=this.extentInRadians,i=this.obb;for(let s=0;s<2;s++){const e=this.elevationBounds[s];let r=4*s;h(i[r++],t[0],t[1],this.ellipsoid.radius,e),h(i[r++],t[0],t[3],this.ellipsoid.radius,e),h(i[r++],t[2],t[3],this.ellipsoid.radius,e),h(i[r++],t[2],t[1],this.ellipsoid.radius,e)}if(this.isWebMercator){const t=this._isPole(this.lij[1],this.lij[0]);2===t?(s(i[1],0,0,this.ellipsoid.radius),s(i[2],0,0,this.ellipsoid.radius),s(i[5],0,0,this.ellipsoid.radius),s(i[6],0,0,this.ellipsoid.radius)):1===t&&(s(i[0],0,0,-this.ellipsoid.radius),s(i[3],0,0,-this.ellipsoid.radius),s(i[4],0,0,-this.ellipsoid.radius),s(i[7],0,0,-this.ellipsoid.radius))}}_isPole(t,i){let s=0;return t===(1<<i)-1&&(s+=1),0===t&&(s+=2),s}}const f=[128,64,32,16,16,8,8,4],_=p();export{m as SphericalPatch};
