/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{B as r}from"../../../chunks/BlendLayers.glsl.js";import{ReloadableShaderModule as i}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as n,parameter as t}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as s}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as l}from"../webgl-engine/lib/Program.js";import{simpleBlendingParams as a,makePipelineState as c,defaultColorWriteParams as d}from"../../webgl/renderState.js";class m extends o{initializeProgram(e){const r=m.shader.get().build();return new l(e.rctx,r,s)}initializePipeline(){const e=2===this.configuration.mode?a(1,771):1===this.configuration.mode?a(0,770):null;return c({blending:e,colorWrite:d})}}m.shader=new i(r,(()=>import("../webgl-engine/core/shaderLibrary/util/BlendLayers.glsl.js")));class g extends n{constructor(){super(...arguments),this.mode=0}}e([t({count:3})],g.prototype,"mode",void 0);export{m as BlendLayersTechnique,g as BlendLayersTechniqueConfiguration};
