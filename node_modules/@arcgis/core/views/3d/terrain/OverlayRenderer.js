/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import r from"../../../core/Accessor.js";import t from"../../../core/Handles.js";import s from"../../../core/Logger.js";import{someMap as i}from"../../../core/MapUtils.js";import{releaseMaybe as a,disposeMaybe as n,isSome as o,unwrapOr as h,isNone as l,unwrap as d}from"../../../core/maybe.js";import u from"../../../core/PooledArray.js";import{someSet as g}from"../../../core/SetUtils.js";import{init as c}from"../../../core/watchUtils.js";import{property as p}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as y}from"../../../core/accessorSupport/decorators/subclass.js";import{o as m,i as _,t as f}from"../../../chunks/mat4.js";import{a as R}from"../../../chunks/vec2f64.js";import{f as T,c as b}from"../../../chunks/vec3f64.js";import w from"../support/debugFlags.js";import{Overlay as x}from"./Overlay.js";import{OverlayFramebufferObject as v}from"./OverlayFramebufferObject.js";import{OverlayRenderTarget as O}from"./OverlayRenderTarget.js";import{ShaderTechniqueRepository as C}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueRepository.js";import{AutoDisposableMixin as j,autoDispose as L}from"../webgl-engine/lib/AutoDisposable.js";import S from"../webgl-engine/lib/Camera.js";import G from"../webgl-engine/lib/GLMaterialRep.js";import{createEmptyDepthTexture as V,createQuadVAO as D}from"../webgl-engine/lib/glUtil3D.js";import{GridLocalOriginFactory as P}from"../webgl-engine/lib/GridLocalOriginFactory.js";import{IntersectorResult as M}from"../webgl-engine/lib/intersectorUtils.js";import{OverlayRenderContext as A}from"../webgl-engine/lib/RenderContext.js";import{SortedRenderGeometryRenderer as E}from"../webgl-engine/lib/SortedRenderGeometryRenderer.js";import{TextureTechniqueConfiguration as U,TextureTechnique as W}from"../webgl-engine/lib/TextureTechnique.js";import{AmbientLight as H}from"../webgl-engine/lighting/Lightsources.js";import{SceneLighting as q}from"../webgl-engine/lighting/SceneLighting.js";import{StippleTextureRepository as F}from"../webgl-engine/materials/StippleTextureRepository.js";import{TaskPriority as B,noBudget as k}from"../../support/Scheduler.js";import z from"../../webgl/Texture.js";import{vertexCount as I}from"../../webgl/Util.js";const X=s.getLogger("esri.views.3d.webgl-engine.lib.OverlayRenderer");let Y=class extends(j(r)){constructor(e){super(e),this._overlays=null,this._overlayRenderTarget=null,this._hasHighlights=!1,this._rendersOccluded=!1,this._hasWater=!1,this._lighting=new q,this._handles=new t,this._layerRenderers=new Map,this._sortedLayerRenderersDirty=!1,this._sortedLayerRenderers=new u,this._geometries=new Map,this.globalUnitScale=1,this.longitudeCyclical=null}initialize(){const e=this.view._stage.renderView;this._rctx=e.renderingContext,this._renderContext=new A(this._rctx);const r=e.waterTextureRepository;this._stippleTextureRepository=new F(e.renderingContext),this._shaderTechniqueRepository=new C({rctx:this._rctx,viewingMode:2,stippleTextureRepository:this._stippleTextureRepository,waterTextureRepository:r}),this._handles.add([c(r,"loadingState",(()=>this.emitContentChanged())),c(this,"spatialReference",(e=>this._localOrigins=new P(e)))]),this._materialRepository=new G(e.textureRepository,this._shaderTechniqueRepository),this._materialRepository.onMaterialChanged=e=>{(e.renderOccluded&ee)>0!==this._rendersOccluded&&this.updateRendersOccluded(),this.emitContentChanged(),this.notifyChange("updating")},this._lighting.groundLightingFactor=1,this._lighting.globalFactor=0,this._lighting.set([new H(T(1,1,1))]),this._bindParameters={slot:null,highlightDepthTexture:V(this._rctx),camera:N,inverseViewport:R(),origin:null,screenToWorldRatio:null,screenToWorldRatioGlobalWM:null,shadowMappingEnabled:!1,slicePlane:null,ssaoEnabled:!1,hasOccludees:!1,linearDepthTexture:null,lastFrameColorTexture:null,reprojectionMat:null,ssrEnabled:!1,lighting:this._lighting,transparencyPassType:3,terrainLinearDepthTexture:null,geometryLinearDepthTexture:null,multipassTerrainEnabled:!1,cullAboveGround:!1,multipassGeometryEnabled:!1,highlightColorTexture:null},this._handles.add(this.view.resourceController.scheduler.registerTask(B.STAGE,this))}dispose(){this._handles.destroy(),this._layerRenderers.forEach((e=>e.dispose())),this._layerRenderers.clear(),this._debugTextureTechnique=a(this._debugTextureTechnique),this._debugPatternTexture=n(this._debugPatternTexture),this._bindParameters.highlightDepthTexture=n(this._bindParameters.highlightDepthTexture),this._shaderTechniqueRepository=n(this._shaderTechniqueRepository),this._temporaryFBO=n(this._temporaryFBO),this._quadVAO=n(this._quadVAO),this._overlayRenderTarget=n(this._overlayRenderTarget)}get updating(){return this._sortedLayerRenderersDirty||i(this._layerRenderers,(e=>e.updating))}get hasOverlays(){return o(this._overlays)&&o(this._overlayRenderTarget)}get gpuMemoryUsage(){return o(this._overlayRenderTarget)?this._overlayRenderTarget.gpuMemoryUsage:0}collectUnusedRenderTargetMemory(e){let r=!1;if(o(this._overlayRenderTarget))for(const t of this._overlayRenderTarget.renderTargets){const s=this.overlays[0].validTargets[t.type]||!this.overlays[1].validTargets[t.type];r=this._overlayRenderTarget.validateUsageForTarget(s,t,e)||r}return r}get overlays(){return h(this._overlays,[])}ensureDrapeTargets(e){o(this._overlays)&&this._overlays.forEach((r=>{r.hasTargetWithoutRasterImage=g(e,(e=>1===e.drapeTargetType))}))}ensureDrapeSources(e){o(this._overlays)&&this._overlays.forEach((r=>{r.hasDrapedFeatureSource=i(e,((e,r)=>1===r.drapeSourceType)),r.hasDrapedRasterSource=i(e,((e,r)=>0===r.drapeSourceType))}))}ensureOverlays(e,r){l(this._overlays)&&(this._overlayRenderTarget=new O(this._rctx),this._overlays=[new x(0,this._overlayRenderTarget),new x(1,this._overlayRenderTarget)]),this.ensureDrapeTargets(e),this.ensureDrapeSources(r)}disposeOverlays(){o(this._overlayRenderTarget)&&this._overlayRenderTarget.disposeRenderTargetMemory()}get running(){return this.updating}runTask(e,r=(()=>!0)){let t=!1;for(const[s,i]of this._layerRenderers){if(e.done)break;r(s)&&(i.commitChanges()&&(t=!0,e.madeProgress()),i.isEmpty&&(this._sortedLayerRenderersDirty=!0,this._layerRenderers.delete(s),this._handles.remove(s)))}this._sortedLayerRenderersDirty&&(this.updateSortedLayerRenderers(),t=!0),t&&(o(this._overlays)&&0===this._layerRenderers.size&&this.disposeOverlays(),this.notifyChange("updating"),this.emitContentChanged(),this.updateHasHighlights(),this.updateRendersOccluded(),this.updateHasWater())}processSyncLayers(){this.runTask(k,(e=>1===e.updatePolicy))}addGeometries(e,r,t){for(const s of e)l(s.origin)&&(s.origin=this._localOrigins.getOrigin(s.boundingSphere)),this._geometries.set(s.id,s);this.ensureLayerRenderer(r).add(e),2===t&&this.notifyGraphicGeometryChanged(e,r)}removeGeometries(e,r,t){for(const i of e)this._geometries.delete(d(i.id));const s=this._layerRenderers.get(r);s&&(s.remove(e),2===t&&this.notifyGraphicGeometryChanged(e,r))}updateGeometries(e,r,t){const s=this._layerRenderers.get(r);if(s)switch(s.modify(e,t),t){case 4:case 2:return this.notifyGraphicGeometryChanged(e,r);case 1:return this.notifyGraphicVisibilityChanged(e,r)}else X.warn("Attempted to update geometry for nonexistent layer")}notifyGraphicGeometryChanged(e,r){if(l(r.notifyGraphicGeometryChanged))return;let t;for(const s of e){const e=s.graphicUid;o(e)&&e!==t&&(r.notifyGraphicGeometryChanged(e),t=e)}}notifyGraphicVisibilityChanged(e,r){if(l(r.notifyGraphicVisibilityChanged))return;let t;for(const s of e){const e=s.graphicUid;o(e)&&e!==t&&(r.notifyGraphicVisibilityChanged(e),t=e)}}updateHighlights(e,r){const t=this._layerRenderers.get(r);t?t.modify(e,8):X.warn("Attempted to update highlights for nonexistent layer")}isEmpty(){return 0===this._geometries.size&&!w.OVERLAY_DRAW_DEBUG_TEXTURE}get hasHighlights(){return this._hasHighlights}get hasWater(){return this._hasWater}get rendersOccluded(){return this._rendersOccluded}updateLogic(e){let r=!1;return this._layerRenderers.forEach((t=>{t.updateLogic(e)&&(r=!0)})),r}updateLayerOrder(){this._sortedLayerRenderersDirty=!0}drawTarget(e,r,t){const s=e.canvasGeometries;if(0===s.numViews)return!1;const i=e.pixelRatio*t;this._screenToWorldRatio=i*Math.abs(s.extents[0][2]-s.extents[0][0])/Math.abs(e.viewport[2]-e.viewport[0]);const a=r.renderPass;if(this.isEmpty()||5===a&&!this.hasHighlights||3===a&&!this.hasWater)return!1;if(!e.hasSomeSizedView())return!1;const n=r.fbo,h=2*e.resolution,l=e.resolution,u=1===r.type?2:4===r.type?1:0;if(!n.isValid())return!1;n.resize(h,l);const g=this._rctx;if(N.pixelRatio=i||1,this._renderContext.pass=a,this._bindParameters.screenToWorldRatio=this._screenToWorldRatio,this._bindParameters.screenToWorldRatioGlobalWM=this._screenToWorldRatio*this.globalUnitScale,e.applyViewport(this._rctx),n.bind(g),0===e.index&&(g.setClearColor(0,0,0,0),g.clearSafe(16384)),1===u&&(this._renderContext.renderOccludedMask=ee),w.OVERLAY_DRAW_DEBUG_TEXTURE&&1!==u)for(let o=0;o<s.numViews;o++)this.setViewParameters(s.extents[o],e,N),this.drawDebugTexture(e.resolution,K[e.index%K.length]);return this._layerRenderers.size>0&&this._sortedLayerRenderers.forAll((({layerView:r,renderer:t})=>{if(2===u&&o(r)&&0===r.drapeSourceType)return;const i=o(r)&&o(r.fullOpacity)&&r.fullOpacity<1&&0===a;i&&(this.bindTemporaryFramebuffer(this._rctx,h,l),g.clearSafe(16384));for(let a=0;a<s.numViews;a++)this.setViewParameters(s.extents[a],e,N),t.render(this._renderContext,this._bindParameters);i&&o(this._temporaryFBO)&&(n.bind(g),this.view._stage.renderView.compositingHelper.composite(this._temporaryFBO.getTexture(),2,d(d(r).fullOpacity),3,e.index))})),g.bindFramebuffer(null),n.generateMipMap(),this._renderContext.resetRenderOccludedMask(),!0}bindTemporaryFramebuffer(e,r,t){l(this._temporaryFBO)&&(this._temporaryFBO=new v(e,!1)),this._temporaryFBO.resize(r,t),this._temporaryFBO.bind(e)}async reloadShaders(){await this._shaderTechniqueRepository.hotReload()}intersect(e,r,t){let s=0;this._geometries.forEach((i=>{if(t&&!t(i))return;this.intersectRenderGeometry(i,r,0,e,s);const a=this.longitudeCyclical;a&&(i.boundingSphere[0]-i.boundingSphere[3]<a.min&&this.intersectRenderGeometry(i,r,a.range,e,s),i.boundingSphere[0]+i.boundingSphere[3]>a.max&&this.intersectRenderGeometry(i,r,-a.range,e,s)),s++}))}intersectRenderGeometry(e,r,t,s,i){if(!e.instanceParameters.visible)return;let a=0;o(e.transformation)&&(t+=e.transformation[12],a=e.transformation[13]),Q[0]=r[0]-t,Q[1]=r[1]-a,Q[2]=1,Z[0]=r[0]-t,Z[1]=r[1]-a,Z[2]=0,e.screenToWorldRatio=this._screenToWorldRatio,e.material.intersect(e,null,e.getShaderTransformation(),s,Q,Z,((r,t,a)=>{this.addIntersectionResult(a,e.material.renderPriority,i,s,e.layerUid,e.graphicUid)}),e.calculateShaderTransformation,!0)}addIntersectionResult(e,r,t,s,i,a){const n={type:"external",metadata:{layerUid:i,graphicUid:a}},o=i=>{i.set(n,null,s.results.ground.dist,s.results.ground.normal,s.results.ground.transformation,r,null,null,e,t),i.intersector="OverlayRenderer"};if((null==s.results.min.drapedLayerOrder||r>=s.results.min.drapedLayerOrder)&&(null==s.results.min.dist||s.results.ground.dist<=s.results.min.dist)&&o(s.results.min),0!==s.options.store&&(null==s.results.max.drapedLayerOrder||r<s.results.max.drapedLayerOrder)&&(null==s.results.max.dist||s.results.ground.dist>s.results.max.dist)&&o(s.results.max),2===s.options.store){const e=new M(s.ray);o(e),s.results.all.push(e)}}stopAnimationsAtTime(e){this._sortedLayerRenderers.forAll((r=>r.renderer.stopAnimationsAtTime(e)))}ensureLayerRenderer(e){let r=this._layerRenderers.get(e);return r||(r=new E({rctx:this._rctx,materialRepository:this._materialRepository}),this._layerRenderers.set(e,r),this._sortedLayerRenderersDirty=!0,"fullOpacity"in e&&this._handles.add(e.watch("fullOpacity",(()=>this.emitContentChanged())),e),this._handles.add(c(r,"updating",(()=>this.notifyChange("updating"))),e)),r}updateSortedLayerRenderers(){if(!this._sortedLayerRenderersDirty)return;if(this._sortedLayerRenderersDirty=!1,this._sortedLayerRenderers.clear(),0===this._layerRenderers.size)return;const e=new Set(this._layerRenderers.values());this.view.allLayerViews.forEach((r=>{const t=r,s=this._layerRenderers.get(t);s&&(this._sortedLayerRenderers.push(new J(t,s)),e.delete(s))})),e.forEach((e=>this._sortedLayerRenderers.push(new J(null,e))))}setViewParameters(e,r,t){t.viewport=r.viewport,m(t.projectionMatrix,0,e[2]-e[0],0,e[3]-e[1],t.near,t.far),_(t.viewMatrix),f(t.viewMatrix,t.viewMatrix,[-e[0],-e[1],0]),this._renderContext.camera=t,this._bindParameters.camera=t,this._bindParameters.inverseViewport[0]=1/t.fullViewport[2],this._bindParameters.inverseViewport[1]=1/t.fullViewport[3]}emitContentChanged(){this.onContentChanged&&this.onContentChanged()}updateHasWater(){const e=i(this._layerRenderers,(e=>e.hasWater));e!==this._hasWater&&(this._hasWater=e,this.onHasWaterChanged&&this.onHasWaterChanged(e))}updateHasHighlights(){const e=i(this._layerRenderers,(e=>e.hasHighlights));e!==this._hasHighlights&&(this._hasHighlights=e,this.onHasHighlightsChanged&&this.onHasHighlightsChanged(this._hasHighlights))}updateRendersOccluded(){const e=i(this._layerRenderers,(e=>e.rendersOccluded));e!==this._rendersOccluded&&(this._rendersOccluded=e,this.onRendersOccludedChanged&&this.onRendersOccludedChanged(this.rendersOccluded))}drawDebugTexture(e,r){const t=this._rctx;this.ensureDebugPatternResources(e,e);const s=this._debugTextureTechnique.program;t.useProgram(s),t.setPipelineState(this._debugTextureTechnique.pipeline),s.setUniform4f("color",r[0],r[1],r[2],1),s.bindTexture(this._debugPatternTexture,"tex"),t.bindVAO(this._quadVAO),t.drawArrays(5,0,I(this._quadVAO,"geometry"))}ensureDebugPatternResources(e,r){if(this._debugPatternTexture)return;const t=new Uint8Array(e*r*4);let s=0;for(let a=0;a<r;a++)for(let i=0;i<e;i++){const n=Math.floor(i/10),o=Math.floor(a/10);n<2||o<2||10*n>e-20||10*o>r-20?(t[s++]=255,t[s++]=255,t[s++]=255,t[s++]=255):(t[s++]=255,t[s++]=255,t[s++]=255,t[s++]=1&n&&1&o?1&i^1&a?0:255:1&n^1&o?0:128)}this._debugPatternTexture=new z(this._rctx,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,width:e,height:r},t);const i=new U;i.hasAlpha=!0,this._debugTextureTechnique=this._shaderTechniqueRepository.acquire(W,i),this._quadVAO=D(this._rctx)}get test(){return{layerRenderers:this._layerRenderers}}};e([L()],Y.prototype,"_shaderTechniqueRepository",void 0),e([L()],Y.prototype,"_stippleTextureRepository",void 0),e([p({constructOnly:!0})],Y.prototype,"view",void 0),e([p()],Y.prototype,"globalUnitScale",void 0),e([p()],Y.prototype,"spatialReference",void 0),e([p({type:Boolean,readOnly:!0})],Y.prototype,"updating",null),Y=e([y("esri.views.3d.terrain.OverlayRenderer")],Y);class J{constructor(e,r){this.layerView=e,this.renderer=r}}const K=[[1,.5,.5],[.5,.5,1],[.5,1,.5]],N=new S;N.near=1,N.far=1e4,N.relativeElevation=null;const Q=b(),Z=b(),$=-2,ee=4;export{$ as DRAPED_Z,Y as OverlayRenderer,ee as overlayRenderOccludedFlag};
