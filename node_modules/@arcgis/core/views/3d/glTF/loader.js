/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{isSome as e,isNone as t}from"../../../core/maybe.js";import{b as o}from"../../../chunks/mat4f64.js";import{DefaultErrorContext as s}from"./DefaultErrorContext.js";import{makeMaterialParameters as r,makeTextureSource as a}from"./LoaderResult.js";import{Resource as i}from"./internal/Resource.js";let n=0;async function l(s,r,a={},l=!0){const m=await i.load(s,p,r,a),x="gltf_"+n++,h={lods:[],materials:new Map,textures:new Map,meta:u(m)},T=!(!m.json.asset.extras||"symbolResource"!==m.json.asset.extras.ESRI_type);return await c(m,(async(s,r,i,n)=>{const u=void 0!==s.mode?s.mode:4,c=4===u||5===u||6===u?u:null;if(t(c))return void p.warnUnsupported("Unsupported primitive mode ("+f[u]+"). Skipping primitive.");if(!m.hasPositions(s))return void p.warn("Skipping primitive without POSITION vertex attribute.");const T=await m.getMaterial(s,a,l),g={transform:o(r),attributes:{position:await m.getPositionData(s,a),normal:null,texCoord0:null,color:null,tangent:null},indices:await m.getIndexData(s,a),primitiveType:c,material:d(h,T,x)};m.hasNormals(s)&&(g.attributes.normal=await m.getNormalData(s,a)),m.hasTangents(s)&&(g.attributes.tangent=await m.getTangentData(s,a)),m.hasTextureCoordinates(s)&&(g.attributes.texCoord0=await m.getTextureCoordinates(s,a)),m.hasVertexColors(s)&&(g.attributes.color=await m.getVertexColors(s,a));let w=null;e(h.meta)&&e(h.meta.ESRI_lod)&&"screenSpaceRadius"===h.meta.ESRI_lod.metric&&(w=h.meta.ESRI_lod.thresholds[i]),h.lods[i]=h.lods[i]||{parts:[],name:n,lodThreshold:w},h.lods[i].parts.push(g)})),{model:h,meta:{isEsriSymbolResource:T,uri:m.uri},customMeta:{}}}function u(t){const o=t.json;let s=null;return o.nodes.forEach((t=>{const o=t.extras;e(o)&&(o.ESRI_proxyEllipsoid||o.ESRI_lod)&&(s=o)})),s}async function c(e,t){const o=e.json,s=o.scenes[o.scene||0].nodes,r=s.length>1;for(const i of s){const e=o.nodes[i],t=[a(i,0)];if(m(e)&&!r){const o=e.extensions.MSFT_lod.ids;t.push(...o.map(((e,t)=>a(e,t+1))))}await Promise.all(t)}async function a(s,r){const i=o.nodes[s],n=e.getNodeTransform(s);if(p.warnUnsupportedIf(null!=i.weights,"Morph targets are not supported."),null!=i.mesh){const e=o.meshes[i.mesh];for(const o of e.primitives)await t(o,n,r,e.name)}for(const e of i.children||[])await a(e,r)}}function m(e){return e.extensions&&e.extensions.MSFT_lod&&Array.isArray(e.extensions.MSFT_lod.ids)}function d(e,t,o){const s=t=>{const s=`${o}_tex_${t&&t.id}${t&&t.name?"_"+t.name:""}`;if(t&&!e.textures.has(s)){const o=a(t.data,{wrap:{s:t.wrapS,t:t.wrapT},mipmap:x.some((e=>e===t.minFilter)),noUnpackFlip:!0});e.textures.set(s,o)}return s},i=`${o}_mat_${t.id}_${t.name}`;if(!e.materials.has(i)){const o=r({color:[t.color[0],t.color[1],t.color[2]],opacity:t.color[3],alphaMode:t.alphaMode,alphaCutoff:t.alphaCutoff,doubleSided:t.doubleSided,colorMixMode:t.ESRI_externalColorMixMode,textureColor:t.colorTexture?s(t.colorTexture):void 0,textureNormal:t.normalTexture?s(t.normalTexture):void 0,textureOcclusion:t.occlusionTexture?s(t.occlusionTexture):void 0,textureEmissive:t.emissiveTexture?s(t.emissiveTexture):void 0,textureMetallicRoughness:t.metallicRoughnessTexture?s(t.metallicRoughnessTexture):void 0,emissiveFactor:[t.emissiveFactor[0],t.emissiveFactor[1],t.emissiveFactor[2]],metallicFactor:t.metallicFactor,roughnessFactor:t.roughnessFactor});e.materials.set(i,o)}return i}const p=new s,x=[9987,9985],f=["POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"];export{l as load};
