/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../request.js";import r from"../../../core/Handles.js";import{clamp as s}from"../../../core/mathUtils.js";import{isNone as t,isSome as i,disposeMaybe as a}from"../../../core/maybe.js";import{createTask as o}from"../../../core/promiseUtils.js";import{isSVG as n}from"../../../core/urlUtils.js";import{init as l}from"../../../core/watchUtils.js";import h from"../../webgl/BufferObject.js";import"../../webgl/FramebufferObject.js";import"../../../core/has.js";import"../../webgl/enums.js";import"../../webgl/RenderingContext.js";import"../../../chunks/builtins.js";import m from"../../webgl/Texture.js";import u from"../../webgl/VertexArrayObject.js";import{DisplayObject as d}from"../engine/DisplayObject.js";import{WGLDrawPhase as c}from"../engine/webgl/enums.js";import{createMagnifierProgram as p,magnifierProgramTemplate as _}from"../engine/webgl/shaders/MagnifierPrograms.js";import{loadMagnifierResources as g}from"../../magnifier/resources.js";class f extends d{constructor(){super(),this._handles=new r,this._resourcePixelRatio=1,this.visible=!1}destroy(){this._handles.destroy(),this._handles=null,this._disposeRenderResources(),this._resourcesTask&&(this._resourcesTask.abort(),this._resourcesTask=null)}get background(){return this._background}set background(e){this._background=e,this.requestRender()}get magnifier(){return this._magnifier}set magnifier(e){this._magnifier=e,this._handles.removeAll(),this._handles.add([l(e,"version",(()=>{this.visible=e.visible&&i(e.position)&&e.size>0,this.requestRender()})),e.watch(["mask","overlay"],(()=>this._reloadResources())),e.watch("size",(()=>{this._disposeRenderResources(),this.requestRender()}))])}doRender(e){var r;const i=e.context;if(!this._resourcesTask)return void this._reloadResources();if(e.drawPhase!==c.MAP||!this._canRender())return;this._updateResources(e);const a=this._magnifier;if(t(a.position))return;const o=e.pixelRatio,n=a.size*o,l=1/a.factor,h=Math.ceil(l*n);this._readbackTexture.resize(h,h);const{size:m}=e.state,u=o*m[0],d=o*m[1],p=.5*h,_=.5*h,g=s(o*a.position.x,p,u-p-1),f=s(d-o*a.position.y,_,d-_-1);i.setBlendingEnabled(!0);const b=g-p,x=f-_,y=this._readbackTexture;i.bindTexture(y,0),i.gl.copyTexImage2D(y.descriptor.target,0,y.descriptor.pixelFormat,b,x,h,h,0);const k=null==(r=this.background)?void 0:r.color,T=k?[k.a*k.r/255,k.a*k.g/255,k.a*k.b/255,k.a]:[1,1,1,1],v=(g+a.offset.x*o)/u*2-1,R=(f-a.offset.y*o)/d*2-1,w=n/u*2,j=n/d*2,A=this._program;i.bindVAO(this._vertexArrayObject),i.bindTexture(this._overlayTexture,6),i.bindTexture(this._maskTexture,7),i.useProgram(A),A.setUniform4fv("u_background",T),A.setUniform1i("u_readbackTexture",0),A.setUniform1i("u_overlayTexture",6),A.setUniform1i("u_maskTexture",7),A.setUniform4f("u_drawPos",v,R,w,j),A.setUniform1i("u_maskEnabled",a.maskEnabled?1:0),A.setUniform1i("u_overlayEnabled",a.overlayEnabled?1:0),i.setStencilTestEnabled(!1),i.setColorMask(!0,!0,!0,!0),i.drawArrays(5,0,4),i.bindVAO()}_canRender(){return this.mask&&this.overlay&&null!=this._magnifier}_reloadResources(){this._resourcesTask&&this._resourcesTask.abort();const r=i(this._magnifier)?this._magnifier.maskUrl:null,s=i(this._magnifier)?this._magnifier.overlayUrl:null;this._resourcesTask=o((async a=>{const o=t(r)||t(s)?g(a):null,n=i(r)?e(r,{responseType:"image",signal:a}).then((e=>e.data)):o.then((e=>e.mask)),l=i(s)?e(s,{responseType:"image",signal:a}).then((e=>e.data)):o.then((e=>e.overlay)),[h,m]=await Promise.all([n,l]);this.mask=h,this.overlay=m,this._disposeRenderResources(),this.requestRender()}))}_disposeRenderResources(){this._readbackTexture=a(this._readbackTexture),this._overlayTexture=a(this._overlayTexture),this._maskTexture=a(this._maskTexture),this._vertexArrayObject=a(this._vertexArrayObject),this._program=a(this._program)}_updateResources(e){if(e.pixelRatio!==this._resourcePixelRatio&&this._disposeRenderResources(),this._readbackTexture)return;const r=e.context;this._resourcePixelRatio=e.pixelRatio;const s=Math.ceil(this._magnifier.size*e.pixelRatio);this._program=p(r);const t={geometry:[{name:"a_pos",count:2,type:5123,offset:0,stride:4,normalized:!1,divisor:0}]},i=new Uint16Array([0,1,0,0,1,1,1,0]),a=_.attributes;this._vertexArrayObject=new u(r,a,t,{geometry:h.createVertex(r,35044,i)}),this.overlay.width=s,this.overlay.height=s,this._overlayTexture=new m(r,{target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9728,flipped:!0,preMultiplyAlpha:!n(this.overlay.src)||!e.driverTestResult.svgAlwaysPremultipliesAlpha},this.overlay),this.mask.width=s,this.mask.height=s,this._maskTexture=new m(r,{target:3553,pixelFormat:6406,internalFormat:6406,dataType:5121,wrapMode:33071,samplingMode:9728,flipped:!0},this.mask);const o=1/this._magnifier.factor;this._readbackTexture=new m(r,{target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!1,width:Math.ceil(o*s),height:Math.ceil(o*s)})}}export default f;
