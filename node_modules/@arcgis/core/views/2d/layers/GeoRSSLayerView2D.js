/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import r from"../../../Graphic.js";import s from"../../../PopupTemplate.js";import i from"../../../core/Collection.js";import{init as o}from"../../../core/watchUtils.js";import"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/Logger.js";import{subclass as t}from"../../../core/accessorSupport/decorators/subclass.js";import p from"../../../renderers/SimpleRenderer.js";import{fromJSON as a}from"../../../renderers/support/jsonUtils.js";import l from"../../../rest/support/FeatureSet.js";import{LayerView2DMixin as h}from"./LayerView2D.js";import n from"./graphics/GraphicContainer.js";import m from"./graphics/GraphicsView2D.js";import c from"../../layers/LayerView.js";let y=class extends(h(c)){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}hitTest(e,r){if(this.suspended||!this.graphicsViews.length)return Promise.resolve(null);const s=this.graphicsViews.reverse().map((s=>s.hitTest(e,r)));return Promise.all(s).then((e=>e.filter(((e,r)=>(e&&(e.popupTemplate=this._popupTemplates.get(this.graphicsViews[r]),e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){if(this.graphicsViews)for(const r of this.graphicsViews)r.processUpdate(e)}attach(){this.layer.featureCollections.forEach((e=>{const o=l.fromJSON(e.featureSet),t=new(i.ofType(r))(o.features);let p;if(this._graphicsViewMap[o.geometryType])p=this._graphicsViewMap[o.geometryType],p.graphics.addMany(t);else{const r=e.layerDefinition.drawingInfo,i=e.popupInfo?s.fromJSON(e.popupInfo):null,l=a(r.renderer);p=new m({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:t,renderer:l,container:new n(this.view.featuresTilingScheme)}),this._graphicsViewMap[o.geometryType]=p,this._popupTemplates.set(p,i),"polygon"!==o.geometryType||this.layer.polygonSymbol?"polyline"!==o.geometryType||this.layer.lineSymbol?"point"!==o.geometryType||this.layer.pointSymbol||(this.layer.pointSymbol=l.symbol):this.layer.lineSymbol=l.symbol:this.layer.polygonSymbol=l.symbol,this.graphicsViews.push(p),this.container.addChild(p.container)}})),this.handles.add([o(this.layer,"polygonSymbol",(e=>{this._graphicsViewMap.polygon.renderer=new p({symbol:e})})),o(this.layer,"lineSymbol",(e=>{this._graphicsViewMap.polyline.renderer=new p({symbol:e})})),o(this.layer,"pointSymbol",(e=>{this._graphicsViewMap.point.renderer=new p({symbol:e})}))])}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};y=e([t("esri.views.2d.layers.GeoRSSLayerView2D")],y);var g=y;export default g;
