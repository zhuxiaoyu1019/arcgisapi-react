/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import e from"../../../../core/Accessor.js";import{HandleOwnerMixin as i}from"../../../../core/HandleOwner.js";import"../../../../core/has.js";import{isSome as s,isNone as r}from"../../../../core/maybe.js";import{throwIfAborted as o,isAbortError as a,createAbortController as h}from"../../../../core/promiseUtils.js";import{createScreenPoint as n}from"../../../../core/screenUtils.js";import{property as d}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/Logger.js";import{subclass as p}from"../../../../core/accessorSupport/decorators/subclass.js";import l from"../../../../geometry/Polygon.js";import c from"../../../../geometry/SpatialReference.js";import{width as g,height as u,create as m}from"../../../../geometry/support/aaBoundingRect.js";import{closeRingsAndFixWinding as _}from"../../../../geometry/support/coordsUtils.js";import{getJsonType as f,isPolygon as y,isPolyline as S,isExtent as w,isPoint as b,isMultipoint as T}from"../../../../geometry/support/jsonUtils.js";import{normalizeCentralMeridianSync as v}from"../../../../geometry/support/normalizeUtilsSync.js";import{getInfo as I}from"../../../../geometry/support/spatialReferenceUtils.js";import{checkProjectionSupport as G,project as U}from"../../../../layers/graphics/data/projectionSupport.js";import{expandSymbol as j}from"../../../../symbols/cim/cimSymbolUtils.js";import{errorPolylineSymbol2D as C,errorPolygonSymbol2D as P,errorPointSymbol2D as x}from"../../../../symbols/support/defaults.js";import{FILTER_FLAG_0 as A}from"../../engine/webgl/definitions.js";import{GraphicTile as M}from"../../engine/webgl/GraphicTile.js";import{TileData as R}from"../../engine/webgl/TileData.js";import F from"../../engine/webgl/WGLDisplayObject.js";import{MeshData as q}from"../../engine/webgl/mesh/MeshData.js";import{WGLMeshFactory as D}from"../../engine/webgl/mesh/factories/WGLMeshFactory.js";import{WGLTemplateStore as O}from"../../engine/webgl/mesh/templates/WGLTemplateStore.js";import{bidiText as z}from"../../engine/webgl/util/BidiText.js";import{createMatcher as H}from"../../engine/webgl/util/Matcher.js";import{createMatcherSchema as k,createSymbolSchema as E}from"../features/schemaUtils.js";import V from"../features/support/AttributeStore.js";import{ComputedAttributeStorage as N}from"../features/support/ComputedAttributeStorage.js";import{GraphicsReader as L}from"../features/support/GraphicsReader.js";import B from"../features/support/TileStore.js";import W from"./GraphicStore.js";import{intersectingInternationalDateline as J,isMarkerSymbol as Z,isTextSymbol as K,TILE_SIZE as Q,PIXEL_BUFFER as X}from"./graphicsUtils.js";import{GraphicsView as Y}from"../../../layers/GraphicsView.js";import $ from"../../../webgl/capabilities.js";function tt(t,e,i){if(i.has(t))return i.get(t);const s={tile:e,addedOrModified:[],removed:[]};return i.set(t,s),s}let et=class extends(Y(i(e))){constructor(t){super(t),this._storage=new N,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._highlightIds=new Map,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashTpExpandedSymbolPromise=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}_createMatcher(t,e){if(t){const i=k({indexCount:0,fields:{}},"feature",t);this._matcher=H(i,e,null)}}_createDisplayId(t){return this._displayIds.has(t)||this._displayIds.set(t,this._storage.createDisplayId()),this._displayIds.get(t)}initialize(){this._tileStore=new B(this.view.featuresTilingScheme),this._attributeStore=new V({type:"local",initialize:t=>Promise.resolve(this.container.attributeView.initialize(t)),update:t=>this.container.attributeView.requestUpdate(t),render:()=>this.container.requestRender()},$());const t=t=>{this._createDisplayId(t.uid),this._setFilterState(t.uid,t.visible)},e=t=>{const e=this._displayIds.get(t.uid);this._displayIds.delete(t.uid),this._storage.releaseDisplayId(e)};this._graphicStore=new W(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,t,e);const i=new O(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._createMatcher(this.renderer,i),this._meshFactory=new D(null,this.uid,i),this._templateStore=i,this.watch("renderer",(t=>{this._createMatcher(t,i);for(const e of this.graphics)this._pendingUpdate.updated.add(e);this.requestUpdate()})),this._tileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",(()=>{this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",(t=>this._graphicsChangeHandler(t))),"graphics"),this._attached=!0,this.notifyChange("updating")}))}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._tileStore.destroy(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null}get updating(){return!this._attached||null!==this._updatingGraphicsTimer||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0}hitTest(t,e){if(!this.view||!this.view.position)return Promise.resolve(null);const i=this.view.toMap(n(t,e));return this.searchFeatures(i).then((t=>t&&t.length?t[0]:null))}async searchFeatures(t,e=2){return this._graphicStore.hitTest(t.x,t.y,e,this.view.state.resolution,this.view.state.rotation)}update(t){o(this._controller.signal);const e=t.state,i=this.view.featuresTilingScheme.getClosestInfoForScale(e.scale).level;if(this._graphicStore.updateLevel(i),this._tileStore.setViewState(e),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(t){this.updateRequested&&(this.updateRequested=!1,this.update(t))}graphicUpdateHandler(t){const{graphic:e,property:i,newValue:s}=t;switch(i){case"attributes":break;case"geometry":case"symbol":this._pendingUpdate.updated.add(e),this.requestUpdate();break;case"visible":this._setFilterState(e.uid,s),this._attributeStore.sendUpdates()}}addHighlight(t){for(const e of t)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e);this._highlightIds.set(e,t+1)}else this._highlightIds.set(e,1);this._updateHighlight()}removeHighlight(t){for(const e of t)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e)-1;0===t?this._highlightIds.delete(e):this._highlightIds.set(e,t)}this._updateHighlight()}_updateHighlight(){const t=Array.from(this._highlightIds.keys()),e=t.map((t=>this._displayIds.get(t)));this._attributeStore.setHighlight(t,e)}_getIntersectingTiles(t){const e=this._graphicStore.getBounds(t);if(!e||0===g(e)||0===u(e))return[];const i=J(e,this.view.spatialReference);return s(i)?[...this._tileStore.boundsIntersections(i[0]),...this._tileStore.boundsIntersections(i[1])]:this._tileStore.boundsIntersections(e)}async _updateTile(t){o(this._controller.signal);const e=t.tile,i=this._getGraphicsData(this._templateStore,e,t.addedOrModified),s=await this._processGraphics(e,i);return o(this._controller.signal),this._patchTile(e.key,{type:"update",addOrUpdate:s,remove:t.removed,end:!0,clear:!1}),s}_patchTile(t,e){if(!this._tiles.has(t))return;const i=this._tiles.get(t);this.container.onTileData(i,e),this.container.requestRender()}_graphicsChangeHandler(t){const e=this._pendingUpdate;for(const i of t.added)e.added.add(i);for(const i of t.moved)e.updated.add(i);for(const i of t.removed)this._pendingUpdate.added.has(i)?e.added.delete(i):e.removed.add(i);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const t={added:[],removed:[],updated:[]};if(!this.graphics)return t;const e=this._pendingUpdate;for(const i of this.graphics.items)e.added.has(i)?t.added.push(i):e.updated.has(i)&&t.updated.push(i);for(const i of e.removed)this._graphicStore.has(i)&&t.removed.push(i);return e.added.clear(),e.removed.clear(),e.updated.clear(),t}async _updateGraphics(){this._processing=!0;const{added:t,removed:e,updated:i}=this._getGraphicsToUpdate(),s=this._tilesToUpdate;let r;try{if(!this._graphicStoreUpdate){const t=this.view.state,e=this.view.featuresTilingScheme.getClosestInfoForScale(t.scale).level;this._graphicStore.updateLevel(e),this._tileStore.setViewState(t)}const o=[],a=new Array(t.length+e.length);for(let t=0;t<i.length;t++){const e=i[t],h=this._getIntersectingTiles(e);for(const t of h){r=t.id;tt(r,t,s).removed.push(this._displayIds.get(e.uid))}o.push(this._updateGraphic(e,null)),a[t]=e}const h=i.length;for(let e=0;e<t.length;e++){const i=t[e];a[h+e]=i,this._graphicsSet.add(i),o.push(this._addGraphic(i))}for(const t of e){this._abortProcessingGraphic(t.uid);const e=this._getIntersectingTiles(t);for(const i of e){r=i.id;tt(r,i,s).removed.push(this._displayIds.get(t.uid))}this._graphicsSet.delete(t),this._graphicStore.remove(t)}let n;this._flipUpdatingGraphics(),await Promise.all(o);for(let t=0;t<a.length;t++){n=a[t];const e=this._getIntersectingTiles(n);for(const t of e){r=t.id;tt(r,t,s).addedOrModified.push(n)}}this._graphicStore.updateZ();const d=[];for(const[t,e]of s)d.push(this._updateTile(e));await Promise.all(d)}catch(o){a(o),0}for(const h of e)try{const t=await this._getSymbolForGraphic(h,{});t&&this._hashToExpandedSymbol.delete(t.hash())}catch(o){a(o),0}s.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(t){const e=(t.attributes?Object.keys(t.attributes):[]).map((e=>({name:e,alias:e,type:"string"==typeof t.attributes[e]?"esriFieldTypeString":"esriFieldTypeDouble"})));return r(t.geometry)?null:{geometryType:f(t.geometry),spatialReference:c.fromJSON(t.geometry.spatialReference),fields:e}}async _getSymbolForGraphic(t,e){return o(this._controller.signal),s(t.symbol)?t.symbol:s(this.renderer)?this.renderer.getSymbolAsync(t,{scale:this.view.scale,abortOptions:e}):this._getNullSymbol(t)}async _getSymbolResources(t,e){if(o(this._controller.signal),!this.container.stage)return null;const i=await this._getSymbolForGraphic(t,e),s=i.hash();let r=this._hashToExpandedSymbol.get(s);if(!r){let h=this._hashTpExpandedSymbolPromise.get(s);if(h)r=await h,o(this._controller.signal);else{const n=this._getArcadeInfo(t),d=E(i);h=j(d,n,e),this._hashTpExpandedSymbolPromise.set(s,h);try{r=await h,this._hashTpExpandedSymbolPromise.delete(s),this._hashToExpandedSymbol.set(s,r)}catch(a){this._hashTpExpandedSymbolPromise.delete(s),o(a)}}}if("esriTS"===r.type){const t=[],[e]=z(r.text);for(let r=0;r<e.length;r++)t.push(e.charCodeAt(r));const i={symbol:r,id:0,glyphIds:t},[{mosaicItem:s}]=await this.container.getMaterialItems([i]);return{symbol:r,mosaicItem:s}}return{symbol:r,mosaicItem:null}}async _projectAndNormalizeGeometry(t,e){if(o(this._controller.signal),r(t.geometry)||"mesh"===t.geometry.type)return null;let i=t.geometry;if(y(i)){const t=i.rings;i.rings=t}else if(S(i)){const t=i.paths;i.paths=t}else if(w(i)){const s=await this._getSymbolForGraphic(t,e);if(o(this._controller.signal),Z(s.type)||K(s.type)){i=i.center}else i=l.fromExtent(i)}await G(i.spatialReference,this.view.spatialReference);const s=v(i),a=U(s,i.spatialReference,this.view.spatialReference);return _(a),a}_onTileUpdate(t){const e=I(this.view.spatialReference);if(t.added&&t.added.length>0)for(const i of t.added)this._addNewTile(i,e);if(t.removed&&t.removed.length>0)for(const i of t.removed)this._removeTile(i.key)}async _addGraphic(t){this._abortProcessingGraphic(t.uid),o(this._controller.signal);const e=h();this._graphicIdToAbortController.set(t.uid,e);const i={signal:e.signal};try{await this._addOrUpdateGraphic(t,i),o(this._controller.signal),this._graphicIdToAbortController.delete(t.uid)}catch(s){if(this._graphicIdToAbortController.delete(t.uid),!a(s))throw s}}async _updateGraphic(t,e){o(this._controller.signal);const i=this._projectAndNormalizeGeometry(t,e),s=this._getSymbolResources(t,e),[r,a]=await Promise.all([i,s]);o(this._controller.signal),this._graphicStore.addOrModify(t,a,r)}async _addOrUpdateGraphic(t,e){o(this._controller.signal);const i=this._projectAndNormalizeGeometry(t,e),s=this._getSymbolResources(t,e);try{const[e,r]=await Promise.all([i,s]);o(this._controller.signal),this._addProjectedGraphic(t,r,e)}catch(r){if(!a(r))throw r}}_addProjectedGraphic(t,e,i){this._graphicsSet.has(t)&&this._graphicStore.addOrModify(t,e,i)}_addTile(t){const e=this.view.featuresTilingScheme.getTileBounds(m(),t),i=new M(t,e);return this._tiles.set(t,i),this.container.addChild(i),i}_addNewTile(t,e){const i=this._addTile(t.key),s=this._graphicStore.queryTileData(this._templateStore,t);if(e){const i=Math.round((e.valid[1]-e.valid[0])/t.resolution);for(const t of s)t.geometry&&(b(t.geometry)||T(t.geometry))&&this._wrapPoints(t,i)}const r=t.key;this._tileUpdateSet.add(t.key),this.notifyChange("updating"),this._processGraphics(t,s).then((t=>{const e={type:"update",clear:!1,addOrUpdate:t,remove:[],end:!0};i.patch(e),this._tileUpdateSet.delete(r),this.notifyChange("updating")})).catch((t=>{if(this._tileUpdateSet.delete(r),this.notifyChange("updating"),!a(t))throw t}))}_removeTile(t){if(!this._tiles.has(t))return;const e=this._tiles.get(t);this.container.removeChild(e),e.destroy(),this._tiles.delete(t)}_setFilterState(t,e){const i=this._displayIds.get(t),s=this._attributeStore.getHighlightFlag(t);this._attributeStore.setData(i,0,0,s|(e?A:0))}_getGraphicsData(t,e,i){const s=I(this.view.spatialReference),r=this._graphicStore.getGraphicsData(t,e,i);if(s){const t=Math.round((s.valid[1]-s.valid[0])/e.resolution);for(const e of r)e.geometry&&(b(e.geometry)||T(e.geometry))&&this._wrapPoints(e,t)}return r}_wrapPoints(t,e){const i=t.geometry;T(i)?this._wrapMultipoint(i,e):this._wrapPoint(t,e)}_wrapMultipoint(t,e){const i=t.points,s=[];let r=0,o=0;for(const[a,h]of i){if(s.push([a+r,h]),r=0,e===Q){const t=5*X;a+o<t?(s.push([e,0]),r=-e):a+o>Q-t&&(s.push([-e,0]),r=e)}else a+o<-X?(s.push([e,0]),r=-e):a+o>Q+X&&(s.push([-e,0]),r=e);o+=a}t.points=s}_wrapPoint(t,e){const i=t.geometry;if(e===Q){const s=5*X;i.x<s?t.geometry={points:[[i.x,i.y],[e,0]]}:i.x>Q-s&&(t.geometry={points:[[i.x,i.y],[-e,0]]})}else i.x<-X?t.geometry={points:[[i.x,i.y],[e,0]]}:i.x>Q+X&&(t.geometry={points:[[i.x,i.y],[-e,0]]})}async _processGraphics(t,e,i){if(!(e&&e.length)||!this._meshFactory)return null;const s=L.from(e),r=this._meshFactory,o=await this._matcher;return await r.analyzeGraphics(s,o,null,null,i),this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(t,s)}_processAnalyzedGraphics(t,e){const i=this._meshFactory,s=e.getSize(),r=e.getCursor(),o={features:s,records:s,metrics:0},a=new q(t.key.id,o,!1,!1,!1),h=[];for(;r.next();){const e=r.readGraphic();e.insertAfter=-1===e.insertAfter?-1:this._displayIds.get(e.insertAfter),e.displayId=this._displayIds.get(e.attributes[this.uid]);const s=new F(e.displayId);s.insertAfter=e.insertAfter,h.push(s),i.writeGraphic(a,r,t.level)}const n=t.tileInfoView.tileInfo.isWrappable,d=a.serialize(n);if(1!==d.length)return new R;const p=d[0].message;return R.fromVertexData(p,h)}_abortProcessingGraphic(t){if(this._graphicIdToAbortController.has(t)){this._graphicIdToAbortController.get(t).abort()}}_getNullSymbol(t){const e=t.geometry;return S(e)?C:y(e)||w(e)?P:x}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout((()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")}),160),this.notifyChange("updating")}};t([d({constructOnly:!0})],et.prototype,"requestUpdateCallback",void 0),t([d()],et.prototype,"container",void 0),t([d({constructOnly:!0})],et.prototype,"graphics",void 0),t([d()],et.prototype,"updating",null),t([d()],et.prototype,"view",void 0),t([d()],et.prototype,"updateRequested",void 0),et=t([p("esri.views.2d.layers.support.GraphicsView2D")],et);var it=et;export default it;
