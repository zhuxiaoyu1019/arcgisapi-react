/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{isNone as t}from"../../../../core/maybe.js";import{create as e,containsPointWithMargin as s}from"../../../../geometry/support/aaBoundingRect.js";import{polygonCentroid as o}from"../../../../geometry/support/centroid.js";import{isPolygon as r,isPolyline as i,isMultipoint as n}from"../../../../geometry/support/jsonUtils.js";import{quantizePoint as l,quantizeGeometry as h}from"../../../../geometry/support/quantizationUtils.js";import{convertFromPolyline as u,generalizeOptimizedGeometry as a,quantizeOptimizedGeometry as m,convertToPolyline as p}from"../../../../layers/graphics/featureConversionUtils.js";import c from"../../../../layers/graphics/OptimizedGeometry.js";import{isMarkerSymbol as g,isTextSymbol as y,getBounds as f}from"./graphicsUtils.js";const d=new c,b=new c,j="esriGeometryPolyline";function _(t){t.coords.length=0,t.lengths.length=0}class z{constructor(){this.bounds=e(),this.graphic=null,this.size=[0,0,0,0]}static acquire(t=null,e,s,o,r,i){let n;return 0===z._pool.length?n=new z:(n=z._pool.pop(),this._set.delete(n)),n.acquire(t,e,s,o,r,i),n}static release(t){t&&!this._set.has(t)&&(t.release(),this._pool.push(t),this._set.add(t))}static getCentroidQuantized(e,s){if(r(e.geometry)){const r=e.symbol;if(t(r))return null;if(g(r.type)||y(r.type)){const t=o(e.geometry);return l(s,{},{x:t[0],y:t[1]},!1,!1)}}return null}acquire(t=null,e,s,o,r,i){t&&this.set(t,e,s,o,r,i)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(t,e,s,o,r,i){this.graphic=t,this.geometry=s,this.symbolResource=e,this.resolution=o,this.updateBounds(o,r,i)}updateBounds(t,e,s){f(this.bounds,this.size,this.symbolResource,this.geometry,t,e,s)}getGeometryQuantized(t,e){const o=this.geometry;if(r(o)){const e=o.rings;if(1===e.length&&2===e[0].length)return h(t,{paths:[[e[0][0],e[0][1]]]})}else{if(i(o))return _(d),_(b),u(d,o),a(b,d,o.hasZ,o.hasM,j,t.scale[0]),m(d,b,o.hasZ,o.hasM,j,t),p(d,o.hasZ,o.hasM);if(n(o)){const r=.5*this.resolution*this.size[0],i=o.points.filter((t=>s(e,t,r)));return 0===i.length?{points:i}:h(t,{points:i})}}return h(t,this.geometry)}}z._pool=[],z._set=new Set;export default z;
