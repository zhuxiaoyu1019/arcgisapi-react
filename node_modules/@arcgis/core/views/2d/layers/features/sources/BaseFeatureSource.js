/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../../request.js";import t from"../../../../../core/Error.js";import r from"../../../../../core/has.js";import s from"../../../../../core/Logger.js";import{isSome as i,unwrapOr as o,isNone as n}from"../../../../../core/maybe.js";import{throwIfAborted as a,isAbortError as u}from"../../../../../core/promiseUtils.js";import c from"../../../../../rest/support/Query.js";import{createSourceAdapter as l}from"../controllers/support/sourceAdapters.js";import{DataTileSource as p}from"./DataTileSource.js";import{QueueProcessor as d}from"../../../../support/QueueProcessor.js";const y=s.getLogger("esri.views.2d.layers.features.sources.BaseFeatureSource"),h=4;class m extends p{constructor(e){super(e),this.type="feature",this.mode="on-demand",this._adapter=l(e.serviceInfo),this._queue=new d({concurrency:8,process:async e=>{if(a(e),i(e.tile)){const t=e.tile.key.id,{signal:s}=e,i=r("esri-tiles-debug")?{tile:t.replace(/\//g,"."),depth:e.depth}:void 0;return this._adapter.executeQuery(e.query,{query:i,signal:s})}return this._adapter.executeQuery(e.query,e)}}),this._patchQueue=new d({concurrency:8,process:async e=>{if(a(e),i(e.tile)){const t=e.tile.key.id,{signal:s}=e,i=r("esri-tiles-debug")?{tile:t.replace(/\//g,"."),depth:e.depth}:void 0;return this._adapter.executeQuery(e.query,{query:i,signal:s})}return this._adapter.executeQuery(e.query,e)}})}destroy(){super.destroy(),this._adapter.destroy(),this._queue.destroy(),this._patchQueue.destroy()}get updating(){return!!this._queue.length||Array.from(this._subscriptions.values()).some((e=>!e.done))}get maxRecordCountFactor(){const{query:e}=this._serviceInfo.capabilities;return e.supportsMaxRecordCountFactor?h:null}get maxPageSize(){var e;const{query:t}=this._serviceInfo.capabilities;return(null!=(e=t.maxRecordCount)?e:8e3)*o(this.maxRecordCountFactor,1)}get pageSize(){return Math.min(8e3,this.maxPageSize)}enableEvent(e,t){}subscribe(e){super.subscribe(e);const r=this._subscriptions.get(e.id);this._fetchDataTile(e).catch((r=>{u(r)||y.error(new t("mapview-query-error","Encountered error when fetching tile",{tile:e,error:r}))})).then((()=>r.end()))}unsubscribe(e){super.unsubscribe(e)}readers(e){return this._subscriptions.get(e).readers()}async query(e){return this._adapter.executeQuery(e)}async queryLastEditDate(){const t=this._serviceInfo.source,r={...t.query,f:"json"};return(await e(t.path,{query:r,responseType:"json"})).data.editingInfo.lastEditDate}createTileQuery(e){const t=this.createQuery();return t.quantizationParameters=e.getQuantizationParameters(),t.resultType="tile",t.geometry=e.extent,"esriGeometryPolyline"===this._serviceInfo.geometryType&&(t.maxAllowableOffset=e.resolution),this._serviceInfo.capabilities.query.supportsQuantization||(t.quantizationParameters=null,t.maxAllowableOffset=e.resolution),t}_createQuery(e,t){const r=this._queryInfo.historicMoment?new Date(this._queryInfo.historicMoment):null,s=new c({...this._queryInfo,historicMoment:r,...t});return this._serviceInfo.capabilities.query.supportsQuantization||(t.quantizationParameters=null,s.maxAllowableOffset=e.resolution),t.quantizationParameters&&"esriGeometryPolyline"===this._serviceInfo.geometryType&&(s.maxAllowableOffset=e.resolution),s.resultType="tile",s.geometry=e.extent,s}async _executePatchQuery(e,t,r,s){const o=t.clone();o.outFields=[this._serviceInfo.objectIdField,...r],o.returnCentroid=!1,o.returnGeometry=!1;const n=i(o.start)?o.start/8e3:0,a=s.signal;return this._patchQueue.push({tile:e,query:o,signal:a,depth:n})}async _resend(e,t){const{query:r,message:s}=e,o=i(r.outFields)?r.outFields:[],u=this._queryInfo.outFields,c=u.filter((e=>-1===o.indexOf(e)));if(n(s.addOrUpdate))this._onMessage({...s,type:"append"});else if(c.length)try{const e=this._subscriptions.get(s.id).tile,i=await this._executePatchQuery(e,r,c,t);a(t),r.outFields=u,s.addOrUpdate.joinAttributes(i),this._onMessage({...s,end:s.end,type:"append"})}catch(l){}else this._onMessage({...s,type:"append"})}async _resendSubscription(e){if(e.empty)return this._onMessage({id:e.tile.id,addOrUpdate:null,end:!1,type:"append"});const t=e.signal;for(const r of e.requests.done)await this._resend(r,{signal:t});return i(e.edits)?this._onMessage(e.edits):void 0}async resend(){const e=Array.from(this._subscriptions.values());await Promise.all(e.map((e=>this._resendSubscription(e))))}}export{m as BaseFeatureSource};
