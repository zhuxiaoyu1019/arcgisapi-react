/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../../TimeExtent.js";import t from"../../../../../core/Evented.js";import s from"../../../../../core/has.js";import{isSome as i}from"../../../../../core/maybe.js";import{createResolver as r,eachAlwaysValues as o,eachAlways as n}from"../../../../../core/promiseUtils.js";import{diff as u,hasDiff as c,hasDiffAny as h}from"../../../../../core/accessorSupport/diffUtils.js";import a from"../../../../../rest/support/Query.js";import{DataTileSubscription as d}from"./DataTileSubscription.js";function l(e,t){const s=new Set;return e&&e.forEach((e=>s.add(e))),t&&t.forEach((e=>s.add(e))),s.has("*")?["*"]:Array.from(s)}class p{constructor(e){this.events=new t,this._resolver=r(),this._didEdit=!1,this._subscriptions=new Map,this._outSR=e.outSR,this._serviceInfo=e.serviceInfo,this._onTileUpdateMessage=e.onMessage}destroy(){}async _onMessage(e){var t;const s=this._subscriptions.get(e.id);if(!s)return;const i={...e,remove:null!=(t=e.remove)?t:[],status:e.status};return this._onTileUpdateMessage(i,s.options)}update(t,i){var r;const o=i.fields.length;i.outFields=l(null==(r=this._schema)?void 0:r.outFields,i.outFields),i.outFields=i.outFields.length>=.75*o?["*"]:i.outFields,i.outFields.sort();const n=u(this._schema,i);if(!n)return;s("esri-2d-update-debug")&&console.debug("Applying Update - Source:",n);const a={returnCentroid:s("esri-2d-query-centroid-enabled")&&"esriGeometryPolygon"===this._serviceInfo.geometryType,returnGeometry:!0,outFields:i.outFields,outSpatialReference:this._outSR,orderByFields:[`${this._serviceInfo.objectIdField} ASC`],where:i.definitionExpression||"1=1",gdbVersion:i.gdbVersion,historicMoment:i.historicMoment,timeExtent:e.fromJSON(i.timeExtent)},d=this._schema&&c(n,"outFields");this._schema&&h(n,["timeExtent","definitionExpression","gdbVersion","historicMoment"])&&(t.why.mesh.push("Layer filter changed"),t.why.source.push("Layer filter changed"),t.mesh=!0,t.source=!0,t.queryFilter=!0),d&&(t.why.source.push("Layer required fields changed"),t.source=!0),u(a,this._queryInfo)&&(this._queryInfo=a),this._schema=i,this._resolver.resolve()}whenInitialized(){return this._resolver.promise}async applyUpdate(e){if(e.queryFilter||e.source&&this._didEdit)return this.refresh(),void(this._didEdit=!1);this._subscriptions.forEach((t=>t.applyUpdate(e))),await this.resend()}refresh(){for(const e of this._tiles())this.unsubscribe(e),this.subscribe(e)}subscribe(e){const t=new d(e);this._subscriptions.set(e.id,t)}unsubscribe(e){const t=this.get(e.id);i(t)&&t.abort(),this._subscriptions.delete(e.id)}createQuery(e={}){const t=this._queryInfo.historicMoment?new Date(this._queryInfo.historicMoment):null;return new a({...this._queryInfo,historicMoment:t,...e})}get(e){return this._subscriptions.has(e)?this._subscriptions.get(e):null}async queryLastEditDate(){throw new Error("Service does not support query type")}async query(e){throw new Error("Service does not support query")}*_tiles(){const e=Array.from(this._subscriptions.values());for(const t of e)yield t.tile}async edit(e,t){const s=Array.from(this._subscriptions.values()),i=s.map((({tile:e})=>e));for(const r of s)r.removeIds(t);if(e.length){const s=i.map((t=>{const s=this.createTileQuery(t);return s.objectIds=e,{tile:t,query:s}})).map((async({tile:e,query:t})=>({tile:e,result:await this.query(t),query:t}))),r=(await o(s)).map((async({tile:s,result:i})=>{if(!i.hasFeatures&&!t.length&&!e.length)return;const r=this._subscriptions.get(s.key.id);r&&r.edit(i,e)}));await n(r)}this._didEdit=!0}}export{p as DataTileSource};
