/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import t from"../../../../../core/Accessor.js";import{createAbortController as i,isPromiseLike as s}from"../../../../../core/promiseUtils.js";import{schedule as o}from"../../../../../core/scheduling.js";import{property as n}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/Logger.js";import{subclass as l}from"../../../../../core/accessorSupport/decorators/subclass.js";import{d as r}from"../../../../../chunks/vec2.js";import"../../../tiling/PagedTileQueue.js";import"../../../tiling/TileInfoView.js";import h from"../../../tiling/TileKey.js";import"../../../tiling/TileQueue.js";import"../../../tiling/TileStrategy.js";const u=[0,0];let a=class extends t{constructor(e){super(e),this._queue=new Map,this._isPaused=!1,this._scheduledNextHandle=null,this._timestamp=Date.now(),this.tileInfoView=null,this._next=this._next.bind(this),this._finalize=this._finalize.bind(this)}get length(){return this._queue.size}get updating(){return this._queue.size>0||null!=this._onGoingTile}abort(e){this._onGoingTile&&this._onGoingTile.tileId===e&&(this._onGoingTile.abortController.abort(),this._onGoingTile=null),this._queue.delete(e),this._scheduleNext(),this.notifyChange("updating")}clear(){this._queue.clear(),this._onGoingTile&&(this._onGoingTile.abortController.abort(),this._onGoingTile=null),this._cancelNext(),this.notifyChange("updating")}has(e){return this._queue.has(e)}isOngoing(e){return this._onGoingTile&&this._onGoingTile.tileId===e}pause(){this._isPaused||(this._isPaused=!0,this._cancelNext())}push(e,t){if(this._queue.has(e))return;const s=i();this._queue.set(e,{tileId:e,key:h.pool.acquire(e),timestamp:t||this._timestamp,abortController:s}),this._scheduleNext(),this.notifyChange("updating")}refresh(){this._timestamp=Date.now(),this.reset()}reset(){const e=this._onGoingTile;if(e){const{tileId:t}=e;this.push(t,this._timestamp)}this.notifyChange("updating")}resume(){this._isPaused&&(this._isPaused=!1,this._scheduleNext()),this.notifyChange("updating")}_finalize(){this._onGoingTile=null,this.notifyChange("updating"),this._scheduleNext()}_cancelNext(){this._scheduledNextHandle&&(this._scheduledNextHandle.remove(),this._scheduledNextHandle=null)}_scheduleNext(){this._isPaused||this._scheduledNextHandle||0===this._queue.size||null!=this._onGoingTile||(this._scheduledNextHandle=o(this._next))}async _next(){if(null==this._scheduledNextHandle||0===this._queue.size||this._onGoingTile)return void(this._scheduledNextHandle=null);this._scheduledNextHandle=null;const e=this._peek(),t=e.abortController.signal,{tileId:i,key:o}=e;h.pool.release(o),this._queue.delete(i),this._onGoingTile=e;const n=this.process(i,this._timestamp,{signal:t});if(this.notifyChange("updating"),s(n))try{await n}catch(l){}this._finalize()}_peek(){if(!this.state)throw new Error("state not set");const e=this.tileInfoView,t=this.state.center;let i=Number.NEGATIVE_INFINITY,s=Number.POSITIVE_INFINITY,o=null;return this._queue.forEach((n=>{e.getTileCoords(u,n.key);const l=this._timestamp-n.timestamp;if(isNaN(l)){const e=r(u,t);e<s&&(s=e,o=n)}else if(l===i){const e=r(u,t);e<s&&(s=e,o=n)}else l>i&&(i=l,s=Number.POSITIVE_INFINITY,o=n)})),o}};e([n({readOnly:!0})],a.prototype,"length",null),e([n({constructOnly:!0})],a.prototype,"process",void 0),e([n()],a.prototype,"state",void 0),e([n({constructOnly:!0})],a.prototype,"tileInfoView",void 0),e([n({readOnly:!0})],a.prototype,"updating",null),a=e([l("esri.views.2d.layers.features.support.TileUpdateQueue")],a);var d=a;export default d;
