/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{DisplayIdGenerator as t}from"./displayIdUtils.js";import{StaticBitSet as e}from"./StaticBitSet.js";function s(t,e,s){if(!(t.length>e))for(;t.length<=e;)t.push(s)}const i=2147483647,n=2147483648,r=(t,e)=>((e?n:0)|t)>>>0;class u{constructor(){this._numerics=[],this._strings=[],this._idGenerator=new t,this._allocatedSize=256,this._bitsets=[],this._instanceIds=[],this._bounds=[]}createBitset(){const t=this._bitsets.length;return this._bitsets.push(e.create(this._allocatedSize,i)),t+1}getBitset(t){return this._bitsets[t-1]}_expand(){this._allocatedSize<<=1;for(const t of this._bitsets)t.resize(this._allocatedSize)}_ensureNumeric(t,e){this._numerics[t]||(this._numerics[t]=[]);s(this._numerics[t],e,0)}_ensureInstanceId(t){s(this._instanceIds,t,0)}_ensureString(t,e){this._strings[t]||(this._strings[t]=[]);s(this._strings[t],e,null)}createDisplayId(t=!1){const e=this._idGenerator.createId();return e>this._allocatedSize&&this._expand(),r(e,t)}releaseDisplayId(t){for(const e of this._bitsets)e.unset(t);return this._idGenerator.releaseId(t&i)}getComputedNumeric(t,e){return this.getComputedNumericAtIndex(t&i,0)}setComputedNumeric(t,e,s){return this.setComputedNumericAtIndex(t&i,s,0)}getComputedString(t,e){return this.getComputedStringAtIndex(t&i,0)}setComputedString(t,e,s){return this.setComputedStringAtIndex(t&i,0,s)}getComputedNumericAtIndex(t,e){const s=t&i;return this._ensureNumeric(e,s),this._numerics[e][s]}setComputedNumericAtIndex(t,e,s){const n=t&i;this._ensureNumeric(e,n),this._numerics[e][n]=s}getInstanceId(t){const e=t&i;return this._ensureInstanceId(e),this._instanceIds[e]}setInstanceId(t,e){const s=t&i;this._ensureInstanceId(s),this._instanceIds[s]=e}getComputedStringAtIndex(t,e){const s=t&i;return this._ensureString(e,s),this._strings[e][s]}setComputedStringAtIndex(t,e,s){const n=t&i;this._ensureString(e,n),this._strings[e][n]=s}getXMin(t){return this._bounds[4*(t&i)]}getYMin(t){return this._bounds[4*(t&i)+1]}getXMax(t){return this._bounds[4*(t&i)+2]}getYMax(t){return this._bounds[4*(t&i)+3]}setBounds(t,e){const n=e.readHydratedGeometry();if(!n||!n.coords.length)return!1;let r=1/0,u=1/0,h=-1/0,o=-1/0;n.forEachVertex(((t,e)=>{r=Math.min(r,t),u=Math.min(u,e),h=Math.max(h,t),o=Math.max(o,e)}));const d=t&i;return s(this._bounds,4*d+4,0),this._bounds[4*d]=r,this._bounds[4*d+1]=u,this._bounds[4*d+2]=h,this._bounds[4*d+3]=o,!0}}export{u as ComputedAttributeStorage};
