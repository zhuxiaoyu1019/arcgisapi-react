/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import{HandleOwner as e}from"../../../../core/HandleOwner.js";import"../../../../core/has.js";import{property as r}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/Logger.js";import{subclass as o}from"../../../../core/accessorSupport/decorators/subclass.js";import s from"../../../../layers/support/TileInfo.js";import{loadProcessorModule as i}from"./processors.js";import l from"./controllers/FeatureController2D.js";import n from"./support/TileStore.js";import{UpdateToken as c}from"./support/UpdateToken.js";import a from"../../tiling/TileInfoView.js";const p=new Set;function h(){return p}let u=class extends e{constructor(){super(...arguments),this.controller=null,this.processor=null,this.remoteClient=null,this.tileStore=null,this.service=null,this.viewState=null}initialize(){this.handles.add(this.watch("updating",(t=>{this.remoteClient.invoke("setUpdating",t).catch((t=>{}))})))}destroy(){var t,e,r;null==(t=this.controller)||t.destroy(),null==(e=this.processor)||e.destroy(),null==(r=this.tileStore)||r.destroy(),this.controller=this.processor=this.tileStore=this.remoteClient=null}get updating(){return!this.controller||this.controller.updating}async startup({service:t,config:e,tileInfo:r,tiles:o}){if(this.service=t,!this.tileStore){const t=new a(s.fromJSON(r));this.tileStore=new n(t)}this.tileStore.clear(),await this._createProcessorAndController(e),await this.update({config:e},!0),this.tileStore.updateTiles(o)}async updateTiles(t){this.tileStore.updateTiles(t)}async update({config:t},e=!1){const r=c.empty();return e||this.controller.pause(),await Promise.all([this.processor.update(r,t),this.controller.update(r,t)]),r.toJSON()}async applyUpdate(t){return this.controller.applyUpdate(c.create(t))}async _createProcessorAndController(t){await Promise.all([this._handleControllerConfig(t),this._handleProcessorConfig(t)]),this.controller.processor=this.processor}async _handleControllerConfig(t){const e=await this._createController(this.service,t);return await e.startup(),e}async _handleProcessorConfig(t){return this._createProcessor(this.service,t)}async _createController(t,e){this.controller&&this.controller.destroy();const{tileStore:r,remoteClient:o}=this,s=new l({service:t,config:e,tileStore:r,remoteClient:o});return this.controller=s,s}async _createProcessor(t,e){const r=e.schema.processors[0].type,o=(await i(r)).default,{remoteClient:s,tileStore:l}=this,n=new o({service:t,config:e,tileStore:l,remoteClient:s});return this.processor&&this.processor.destroy(),this.processor=n,n}};t([r()],u.prototype,"controller",void 0),t([r()],u.prototype,"processor",void 0),t([r()],u.prototype,"updating",null),t([r()],u.prototype,"viewState",void 0),u=t([o("esri.views.2d.layers.features.Pipeline")],u);var d=u;export default d;export{h as getInstances};
