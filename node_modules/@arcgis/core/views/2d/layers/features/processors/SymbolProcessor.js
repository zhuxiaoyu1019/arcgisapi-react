/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/Error.js";import t from"../../../../../core/has.js";import s from"../../../../../core/Logger.js";import{isSome as r,andThen as i,isNone as a,unwrapOrThrow as o,unwrap as n}from"../../../../../core/maybe.js";import{throwIfAborted as l,all as c,isAbortError as d}from"../../../../../core/promiseUtils.js";import"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/accessorSupport/ensureType.js";import{subclass as m}from"../../../../../core/accessorSupport/decorators/subclass.js";import{diff as u,hasDiff as f}from"../../../../../core/accessorSupport/diffUtils.js";import h from"../../../../../geometry/SpatialReference.js";import{forEachGeometryType as p}from"../../../engine/webgl/Utils.js";import{DisplayRecordReader as g}from"../../../engine/webgl/cpuMapped/DisplayRecordReader.js";import{MeshData as y}from"../../../engine/webgl/mesh/MeshData.js";import{WGLMeshFactory as _}from"../../../engine/webgl/mesh/factories/WGLMeshFactory.js";import{WGLTemplateStore as b}from"../../../engine/webgl/mesh/templates/WGLTemplateStore.js";import{bidiText as S}from"../../../engine/webgl/util/BidiText.js";import{createMatcher as w}from"../../../engine/webgl/util/Matcher.js";import{codepoints as v}from"../textUtils.js";import D from"./BaseProcessor.js";import{isAggregateId as T}from"../support/AttributeStore.js";function j(e,t){return(!e.minScale||e.minScale>=t)&&(!e.maxScale||e.maxScale<=t)}function k(e){const t=e.message,s={message:{data:{},tileKey:t.tileKey},transferList:new Array};for(const a in t.data){const e=t.data[a];if(s.message.data[a]=null,r(e)){const t=e.stride,r=e.indices.slice(0),o=e.vertices.slice(0),n=e.records.slice(0),l={stride:t,indices:r,vertices:o,records:n,metrics:i(e.metrics,(e=>e.slice(0)))};s.transferList.push(r,o,n),s.message.data[a]=l}}return s}s.getLogger("esri.views.2d.layers.features.processors.SymbolProcessor");let x=class extends D{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}destroy(){}get supportsTileUpdates(){return!0}async update(e,s){const r=s.schema.processors[0];if("symbol"!==r.type)return;const i=u(this._schema,r);f(i,"mesh")&&(t("esri-2d-update-debug")&&console.debug("Applying Update - Processor:",i),e.mesh=!0,e.why.mesh.push("Symbology changed"),this._schema=r,this._factory=this._createFactory(r),this._factory.update(r,this.tileStore.tileScheme.tileInfo))}onTileMessage(e,t,s,r){return l(r),this._onTileData(e,t,s,r)}onTileClear(e){const t={clear:!0};return this._bufferData.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t})}onTileError(e,t,s){const r=s.signal,i={tileKey:e.id,error:t};return this.remoteClient.invoke("tileRenderer.onTileError",i,{signal:r})}onTileUpdate(e){for(const t of e.removed){if(!this._bufferData.has(t.key.id))continue;this._bufferData.get(t.key.id).forEach((e=>{const t=new Set;p((s=>{const i=e.message.data[s];if(r(i)){const e=g.from(i.records).getCursor();for(;e.next();)t.add(e.id)}}));const s=e.message.tileKey,i={type:"update",addOrUpdate:null};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:s,data:i})})),this._bufferData.delete(t.key.id)}for(const t of e.added)this._bufferData.forEach((e=>{for(const s of e)s.message.tileKey===t.id&&this._updateTileMesh("append",t,k(s),[],!1,!1,null)}))}_addBufferData(e,t){this._bufferData.has(e)||this._bufferData.set(e,[]),this._bufferData.get(e).push(k(t))}_createFactory(e){const{geometryType:t,objectIdField:s,fields:r}=this.service,a=(e,t)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",e,t),o={geometryType:t,fields:r,spatialReference:h.fromJSON(this.spatialReference)},n=new b(a,this.tileStore.tileScheme.tileInfo),{matcher:l,aggregateMatcher:c}=e.mesh;return this._store=n,this._matchers.feature=w(l,n,o),this._matchers.aggregate=i(c,(e=>w(e,n,o))),new _(t,s,n)}async _onTileData(e,t,s,r){const{type:i,addOrUpdate:o,remove:n}=t,l=t.end;if(!o){const t={type:i,addOrUpdate:null,remove:n,clear:!1,end:l};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const d=this._processFeatures(e,o,s,r);try{const s=await d;if(a(s)){const t={type:i,addOrUpdate:null,remove:n,clear:!1,end:l};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}for(const t of s)e.key.id!==t.message.tileKey&&this._addBufferData(e.key.id,t);await c(s.map((s=>{const a=e.key.id===s.message.tileKey,o=a?t.remove:[],n=a&&t.end;return this._updateTileMesh(i,e,s,o,n,t.clear,r.signal)})))}catch(m){this._handleError(e,m,r)}}async _updateTileMesh(e,t,s,r,a,o,c){const d=e,m=s.message.tileKey;m!==t.key.id&&(a=!1);const u=i(s,(e=>e.message)),f=i(s,(e=>e.transferList))||[],h={type:d,addOrUpdate:u,remove:r,clear:!1,end:a},p={transferList:n(f)||[],signal:c};return l(p),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:m,data:h},p)}async _processFeatures(e,t,s,r){if(a(t)||!t.hasFeatures)return null;const i={transform:e.transform,hasZ:!1,hasM:!1},o=this._factory,n={viewingMode:"",scale:e.scale},c=await this._matchers.feature,d=await this._matchers.aggregate;l(r);const m=this._getLabelInfos(e,t);return await o.analyze(t.getCursor(),c,d,i,n),l(r),this._writeFeatureSet(e,t,i,m,o,s)}_writeFeatureSet(e,t,s,i,a,o){const n=t.getSize(),l="simple"===this._schema.mesh.matcher.type&&this._schema.mesh.matcher.isDotDensity,c=new y(e.key.id,{features:n,records:n,metrics:0},l,o,!0),d={viewingMode:"",scale:e.scale},m=t.getCursor();for(;m.next();)try{const t=m.getDisplayId(),o=r(i)?i.get(t):null;a.writeCursor(c,m,s,d,e.level,o)}catch(f){}const u=e.tileInfoView.tileInfo.isWrappable;return c.serialize(u)}_handleError(e,t,s){if(!d(t)){const r={tileKey:e.id,error:t.message};return this.remoteClient.invoke("tileRenderer.onTileError",r,{signal:s.signal})}}_getLabelingSchemaForScale(e){const t=this._schema.mesh.labels;if(a(t))return null;if("subtype"===t.type){const s={type:"subtype",classes:{}};let r=!1;for(const i in t.classes){const a=t.classes[i].filter((t=>j(t,e.scale)));r=r||!!a.length,s.classes[i]=a}return r?s:null}const s=t.classes.filter((t=>j(t,e.scale)));return s.length?{type:"simple",classes:s}:null}_getLabels(e,t){if("subtype"===t.type){var s;const r=this.service.subtypeField,i=o(r,"Expected to find subtype Field"),a=e.readAttribute(i);return null==a?[]:null!=(s=t.classes[a])?s:[]}return t.classes}_getLabelInfos(e,t){const s=this._getLabelingSchemaForScale(e);if(a(s))return null;const r=new Map,i=t.getCursor();for(;i.next();){const e=i.getDisplayId(),t=[],a=T(e),o=a&&1!==i.readAttribute("cluster_count")?"aggregate":"feature",n=this._getLabels(i,s);for(const s of n){if(s.target!==o)continue;const r=i.getStorage(),n=a&&"feature"===o?r.getComputedStringAtIndex(i.readAttribute("referenceId"),s.fieldIndex):r.getComputedStringAtIndex(e,s.fieldIndex);if(!n)continue;const l=S(n.toString()),c=l[0],d=l[1];this._store.getMosaicItem(s.symbol,v(c)).then((e=>{t[s.index]={glyphs:e.glyphMosaicItems,rtl:d,index:s.index}}))}r.set(e,t)}return r}};x=e([m("esri.views.2d.layers.features.processors.SymbolProcessor")],x);var I=x;export default I;
