/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import{MIN_PRIORITY as t}from"../../../../core/MemCache.js";import{throwIfAborted as o}from"../../../../core/promiseUtils.js";import{f as i}from"../../../../chunks/mat3f32.js";import{create as s}from"../../../../geometry/support/aaBoundingRect.js";import{VectorTile as r}from"./VectorTile.js";import{TileHandler as n}from"./TileHandler.js";import{declutterSingleTile as l}from"./decluttering/jobsUtil.js";import a from"../../tiling/TileKey.js";class g extends n{constructor(e,t,o,i,s){super(e,t,o),this._memCache=i,this._loader=s,this._ongoingTileRequests=new Map,this._ongoingRequestToController=new Map}destroy(){this._ongoingRequestToController.forEach((e=>e.abort())),this._ongoingRequestToController.clear(),this._ongoingTileRequests.clear()}async getVectorTile(n,g,h,c){const m=new a(n,g,h,0);let u=this._memCache.get(m.id);if(e(u))return u.retain(),u;const _=await this._getVectorTileData(m);if(o(c),!this._vectorTileLayer)return null;if(u=this._memCache.get(m.id),e(u))return u.retain(),u;const T=this._vectorTileLayer.tileInfo.getTileBounds(s(),m);return u=new r(m,this._styleRepository,T,[512,512],this._memCache),e(_)&&_.tileData?(u.setData(_.tileData),u.retain(),this._memCache.put(m.id,u,u.memoryUsage*u.referenced,t)):u.setData(null),u.neededForCoverage=!0,u.transforms.tileUnitsToPixels=i(1/8,0,0,0,1/8,0,0,0,1),l(u,this._styleRepository),u}_getVectorTileData(e){const t=e.id;if(this._ongoingTileRequests.has(t))return this._ongoingTileRequests.get(t);const o=new AbortController,i={signal:o.signal},s=this._getParsedVectorTileData(e,i).then((e=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),e))).catch((()=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),null)));return this._ongoingTileRequests.set(t,s),this._ongoingRequestToController.set(t,o),s}_getParsedVectorTileData(e,t){return this.fetchTileData(e,t).then((o=>this.parseTileData({key:e,data:o},t)))}request(e,t){return this._loader.request(e,"binary",t)}}export default g;
