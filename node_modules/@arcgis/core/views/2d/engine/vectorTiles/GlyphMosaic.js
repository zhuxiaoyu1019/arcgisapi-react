/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import"../../../webgl/BufferObject.js";import"../../../webgl/FramebufferObject.js";import"../../../../core/has.js";import"../../../webgl/enums.js";import"../../../webgl/RenderingContext.js";import"../../../../chunks/builtins.js";import t from"../../../webgl/Texture.js";import"../../../webgl/VertexArrayObject.js";import e from"./RectangleBinPack.js";import i from"../webgl/Rect.js";class s{constructor(t,i,s){this.width=0,this.height=0,this._dirties=[],this._glyphData=[],this._currentPage=0,this._glyphIndex={},this._textures=[],this._rangePromises=new Map,this.width=t,this.height=i,this._glyphSource=s,this._binPack=new e(t-4,i-4),this._glyphData.push(new Uint8Array(t*i)),this._dirties.push(!0),this._textures.push(void 0)}getGlyphItems(t,s){const h=[],r=this._glyphSource,n=new Set,o=1/256;for(const e of s){const t=Math.floor(e*o);n.add(t)}const a=[];return n.forEach((e=>{if(e<=256){const i=t+e;if(this._rangePromises.has(i))a.push(this._rangePromises.get(i));else{const s=r.getRange(t,e).then((()=>{this._rangePromises.delete(i)}),(()=>{this._rangePromises.delete(i)}));this._rangePromises.set(i,s),a.push(s)}}})),Promise.all(a).then((()=>{let n=this._glyphIndex[t];n||(n={},this._glyphIndex[t]=n);for(const o of s){const s=n[o];if(s){h[o]={sdf:!0,rect:s.rect,metrics:s.metrics,page:s.page,code:o};continue}const a=r.getGlyph(t,o);if(!a||!a.metrics)continue;const l=a.metrics;let c;if(0===l.width)c=new i(0,0,0,0);else{const t=3,i=l.width+2*t,s=l.height+2*t;let h=i%4?4-i%4:4,r=s%4?4-s%4:4;1===h&&(h=5),1===r&&(r=5),c=this._binPack.allocate(i+h,s+r),c.isEmpty&&(this._dirties[this._currentPage]||(this._glyphData[this._currentPage]=null),this._currentPage=this._glyphData.length,this._glyphData.push(new Uint8Array(this.width*this.height)),this._dirties.push(!0),this._textures.push(void 0),this._binPack=new e(this.width-4,this.height-4),c=this._binPack.allocate(i+h,s+r));const n=this._glyphData[this._currentPage],o=a.bitmap;let g,p;if(o)for(let e=0;e<s;e++){g=i*e,p=this.width*(c.y+e+1)+c.x;for(let t=0;t<i;t++)n[p+t+1]=o[g+t]}}n[o]={rect:c,metrics:l,tileIDs:null,page:this._currentPage},h[o]={sdf:!0,rect:c,metrics:l,page:this._currentPage,code:o},this._dirties[this._currentPage]=!0}return h}))}removeGlyphs(t){for(const e in this._glyphIndex){const i=this._glyphIndex[e];if(!i)continue;let s;for(const e in i)if(s=i[e],s.tileIDs.delete(t),0===s.tileIDs.size){const t=this._glyphData[s.page],h=s.rect;let r,n;for(let e=0;e<h.height;e++)for(r=this.width*(h.y+e)+h.x,n=0;n<h.width;n++)t[r+n]=0;delete i[e],this._dirties[s.page]=!0}}}bind(e,i,s,h=0){this._textures[s]||(this._textures[s]=new t(e,{pixelFormat:6406,dataType:5121,width:this.width,height:this.height},new Uint8Array(this.width*this.height)));const r=this._textures[s];r.setSamplingMode(i),this._dirties[s]&&r.setData(this._glyphData[s]),e.bindTexture(r,h),this._dirties[s]=!1}dispose(){this._binPack=null;for(const t of this._textures)t&&t.dispose();this._textures.length=0}}export default s;
