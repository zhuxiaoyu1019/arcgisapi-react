/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{clone as e}from"../../../../../core/lang.js";import{urlToObject as t,objectToQuery as i,isAbsolute as l,join as r}from"../../../../../core/urlUtils.js";import s from"../../../../../geometry/Extent.js";import{readServiceTileInfo as o}from"../../../../../layers/support/serviceTileInfoProperty.js";import{TilemapCache as a}from"../../../../../layers/support/TilemapCache.js";import n from"../TileIndex.js";class p{constructor(p,h,u){this.tileMapURL="",this.tilemapCache=null,this.parsedUrl=null,this.tileInfo=null,this.capabilities=null,this.tileIndex=null,this.fullExtent=null,this.name=p,this.sourceUrl=h,h&&(this.parsedUrl=t(this.sourceUrl));const c=this.parsedUrl.path,m=this.parsedUrl.query?"?"+i(this.parsedUrl.query):"",f=e(u),d=f.tiles;h&&d.forEach(((e,t)=>{l(e)||(d[t]=r(c,e)+m)})),this.tileServers=d,u.tileMap&&(this.tileMapURL=r(h,u.tileMap));const x=u.capabilities&&u.capabilities.split(",").map((e=>e.toLowerCase().trim())),g=!!u.exportTilesAllowed,y=!!x&&-1!==x.indexOf("tilemap"),M=g&&u.hasOwnProperty("maxExportTilesCount")?u.maxExportTilesCount:0;this.capabilities={operations:{supportsExportTiles:g,supportsTileMap:y},exportTiles:g?{maxExportTilesCount:+M}:null},this.tileInfo=o(f.tileInfo,f,null,{ignoreMinMaxLOD:!0}),y&&(this.type="vector-tile",this.tilemapCache=new a({layer:this}),this.tilemapCache&&(this.tileIndex=new n(this.tilemapCache))),this.fullExtent=s.fromJSON(u.fullExtent)}getRefKey(e,t){return this.tileIndex?this.tileIndex.dataKey(e,t):Promise.resolve(e)}getSourceTileUrl(e,t,i){let l=this.tileServers[t%this.tileServers.length];return l=l.replace(/\{z\}/gi,e.toString()).replace(/\{y\}/gi,t.toString()).replace(/\{x\}/gi,i.toString()),l}isCompatibleWith(e){const t=this.tileInfo,i=e.tileInfo;if(!t.spatialReference.equals(i.spatialReference))return!1;if(!t.origin.equals(i.origin))return!1;if(Math.round(t.dpi)!==Math.round(i.dpi))return!1;const l=t.lods,r=i.lods,s=Math.min(l.length,r.length);for(let o=0;o<s;o++){const e=l[o],t=r[o];if(e.level!==t.level||Math.round(e.scale)!==Math.round(t.scale))return!1}return!0}}export default p;
