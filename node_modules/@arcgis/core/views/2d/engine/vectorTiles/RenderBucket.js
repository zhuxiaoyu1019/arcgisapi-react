/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{isNone as e,isSome as t,unwrap as r}from"../../../../core/maybe.js";import i from"../../../webgl/BufferObject.js";import"../../../webgl/FramebufferObject.js";import"../../../../core/has.js";import"../../../webgl/enums.js";import"../../../webgl/RenderingContext.js";import"../../../../chunks/builtins.js";import"../../../webgl/Texture.js";import s from"../../../webgl/VertexArrayObject.js";import{deserializeSymbols as n}from"./decluttering/util.js";class f{constructor(e,t){this.layerUIDs=[],this.isDestroyed=!1,this.data=e,this.memoryUsed=e.byteLength;let r=1;const i=new Uint32Array(e);this.layerUIDs=[];const s=i[r++];for(let n=0;n<s;n++)this.layerUIDs[n]=i[r++];this.bufferDataOffset=r,t&&(this.layer=t.getStyleLayerByUID(this.layerUIDs[0]))}get isPreparedForRendering(){return e(this.data)}get offset(){return this.bufferDataOffset}destroy(){this.isDestroyed||(this.doDestroy(),this.isDestroyed=!0)}prepareForRendering(t){e(this.data)||(this.doPrepareForRendering(t,this.data,this.bufferDataOffset),this.data=null)}}class o extends f{constructor(e,t){super(e,t),this.type=2,this.lineIndexStart=0,this.lineIndexCount=0;const r=new Uint32Array(e);let i=this.bufferDataOffset;this.lineIndexStart=r[i++],this.lineIndexCount=r[i++];const s=r[i++];if(s>0){const e=new Map;for(let t=0;t<s;t++){const t=r[i++],s=r[i++],n=r[i++];e.set(t,[s,n])}this.patternMap=e}this.bufferDataOffset=i}hasData(){return this.lineIndexCount>0}triangleCount(){return this.lineIndexCount/3}doDestroy(){t(this.lineVertexArrayObject)&&this.lineVertexArrayObject.dispose(),t(this.lineVertexBuffer)&&this.lineVertexBuffer.dispose(),t(this.lineIndexBuffer)&&this.lineIndexBuffer.dispose(),this.lineVertexArrayObject=null,this.lineVertexBuffer=null,this.lineIndexBuffer=null,this.memoryUsed=0}doPrepareForRendering(e,t,r){const n=new Uint32Array(t),f=new Int32Array(n.buffer),o=n[r++];this.lineVertexBuffer=i.createVertex(e,35044,new Int32Array(f.buffer,4*r,o)),r+=o;const a=n[r++];this.lineIndexBuffer=i.createIndex(e,35044,new Uint32Array(n.buffer,4*r,a)),r+=a;const l=this.layer.lineMaterial;this.lineVertexArrayObject=new s(e,l.getAttributeLocations(),l.getLayoutInfo(),{geometry:this.lineVertexBuffer},this.lineIndexBuffer)}}class a extends f{constructor(e,t){super(e,t),this.type=1,this.fillIndexStart=0,this.fillIndexCount=0,this.outlineIndexStart=0,this.outlineIndexCount=0;const r=new Uint32Array(e);let i=this.bufferDataOffset;this.fillIndexStart=r[i++],this.fillIndexCount=r[i++],this.outlineIndexStart=r[i++],this.outlineIndexCount=r[i++];const s=r[i++];if(s>0){const e=new Map;for(let t=0;t<s;t++){const t=r[i++],s=r[i++],n=r[i++];e.set(t,[s,n])}this.patternMap=e}this.bufferDataOffset=i}hasData(){return this.fillIndexCount>0||this.outlineIndexCount>0}triangleCount(){return(this.fillIndexCount+this.outlineIndexCount)/3}doDestroy(){t(this.fillVertexArrayObject)&&this.fillVertexArrayObject.dispose(),t(this.fillVertexBuffer)&&this.fillVertexBuffer.dispose(),t(this.fillIndexBuffer)&&this.fillIndexBuffer.dispose(),this.fillVertexArrayObject=null,this.fillVertexBuffer=null,this.fillIndexBuffer=null,t(this.outlineVertexArrayObject)&&this.outlineVertexArrayObject.dispose(),t(this.outlineVertexBuffer)&&this.outlineVertexBuffer.dispose(),t(this.outlineIndexBuffer)&&this.outlineIndexBuffer.dispose(),this.outlineVertexArrayObject=null,this.outlineVertexBuffer=null,this.outlineIndexBuffer=null,this.memoryUsed=0}doPrepareForRendering(e,t,r){const n=new Uint32Array(t),f=new Int32Array(n.buffer),o=n[r++];this.fillVertexBuffer=i.createVertex(e,35044,new Int32Array(f.buffer,4*r,o)),r+=o;const a=n[r++];this.fillIndexBuffer=i.createIndex(e,35044,new Uint32Array(n.buffer,4*r,a)),r+=a;const l=n[r++];this.outlineVertexBuffer=i.createVertex(e,35044,new Int32Array(f.buffer,4*r,l)),r+=l;const u=n[r++];this.outlineIndexBuffer=i.createIndex(e,35044,new Uint32Array(n.buffer,4*r,u)),r+=u;const h=this.layer,c=h.fillMaterial,x=h.outlineMaterial;this.fillVertexArrayObject=new s(e,c.getAttributeLocations(),c.getLayoutInfo(),{geometry:this.fillVertexBuffer},this.fillIndexBuffer),this.outlineVertexArrayObject=new s(e,x.getAttributeLocations(),x.getLayoutInfo(),{geometry:this.outlineVertexBuffer},this.outlineIndexBuffer)}}class l extends f{constructor(e,t,r){super(e,t),this.type=3,this.iconPerPageElementsMap=new Map,this.glyphPerPageElementsMap=new Map,this.symbolInstances=[],this.isIconSDF=!1,this.opacityChanged=!1,this.lastOpacityUpdate=0,this.symbols=[];const i=new Uint32Array(e),s=new Int32Array(e),f=new Float32Array(e);let o=this.bufferDataOffset;this.isIconSDF=!!i[o++];const a=i[o++];for(let n=0;n<a;n++){const e=i[o++],t=i[o++],r=i[o++];this.iconPerPageElementsMap.set(e,[t,r])}const l=i[o++];for(let n=0;n<l;n++){const e=i[o++],t=i[o++],r=i[o++];this.glyphPerPageElementsMap.set(e,[t,r])}const u=i[o++],h=i[o++];this.iconOpacity=new Int32Array(u),this.textOpacity=new Int32Array(h),o=n(i,s,f,o,this.symbols,r),this.bufferDataOffset=o}hasData(){return this.iconPerPageElementsMap.size>0||this.glyphPerPageElementsMap.size>0}triangleCount(){let e=0;for(const[t,r]of this.iconPerPageElementsMap)e+=r[1];for(const[t,r]of this.glyphPerPageElementsMap)e+=r[1];return e/3}doDestroy(){t(this.iconVertexArrayObject)&&this.iconVertexArrayObject.dispose(),t(this.iconVertexBuffer)&&this.iconVertexBuffer.dispose(),t(this.iconOpacityBuffer)&&this.iconOpacityBuffer.dispose(),t(this.iconIndexBuffer)&&this.iconIndexBuffer.dispose(),this.iconVertexArrayObject=null,this.iconVertexBuffer=null,this.iconOpacityBuffer=null,this.iconIndexBuffer=null,t(this.textVertexArrayObject)&&this.textVertexArrayObject.dispose(),t(this.textVertexBuffer)&&this.textVertexBuffer.dispose(),t(this.textOpacityBuffer)&&this.textOpacityBuffer.dispose(),t(this.textIndexBuffer)&&this.textIndexBuffer.dispose(),this.textVertexArrayObject=null,this.textVertexBuffer=null,this.textOpacityBuffer=null,this.textIndexBuffer=null,this.memoryUsed=0}updateOpacityInfo(){if(!this.opacityChanged)return;this.opacityChanged=!1;const e=r(this.iconOpacity),t=r(this.iconOpacityBuffer);e.length>0&&e.byteLength===t.size&&t.setSubData(e);const i=r(this.textOpacity),s=r(this.textOpacityBuffer);i.length>0&&i.byteLength===s.size&&s.setSubData(i)}doPrepareForRendering(e,t,n){const f=new Uint32Array(t),o=new Int32Array(f.buffer),a=f[n++];this.iconVertexBuffer=i.createVertex(e,35044,new Int32Array(o.buffer,4*n,a)),n+=a;const l=f[n++];this.iconIndexBuffer=i.createIndex(e,35044,new Uint32Array(f.buffer,4*n,l)),n+=l;const u=f[n++];this.textVertexBuffer=i.createVertex(e,35044,new Int32Array(o.buffer,4*n,u)),n+=u;const h=f[n++];this.textIndexBuffer=i.createIndex(e,35044,new Uint32Array(f.buffer,4*n,h)),n+=h,this.iconOpacityBuffer=i.createVertex(e,35044,r(this.iconOpacity).buffer),this.textOpacityBuffer=i.createVertex(e,35044,r(this.textOpacity).buffer);const c=this.layer,x=c.iconMaterial,y=c.textMaterial;this.iconVertexArrayObject=new s(e,x.getAttributeLocations(),x.getLayoutInfo(),{geometry:this.iconVertexBuffer,opacity:this.iconOpacityBuffer},this.iconIndexBuffer),this.textVertexArrayObject=new s(e,y.getAttributeLocations(),y.getLayoutInfo(),{geometry:this.textVertexBuffer,opacity:this.textOpacityBuffer},this.textIndexBuffer)}}class u extends f{constructor(e,t){super(e,t),this.type=4,this.circleIndexStart=0,this.circleIndexCount=0;const r=new Uint32Array(e);let i=this.bufferDataOffset;this.circleIndexStart=r[i++],this.circleIndexCount=r[i++],this.bufferDataOffset=i}hasData(){return this.circleIndexCount>0}triangleCount(){return this.circleIndexCount/3}doDestroy(){t(this.circleVertexArrayObject)&&this.circleVertexArrayObject.dispose(),t(this.circleVertexBuffer)&&this.circleVertexBuffer.dispose(),t(this.circleIndexBuffer)&&this.circleIndexBuffer.dispose(),this.circleVertexArrayObject=null,this.circleVertexBuffer=null,this.circleIndexBuffer=null,this.memoryUsed=0}doPrepareForRendering(e,t,r){const n=new Uint32Array(t),f=new Int32Array(n.buffer),o=n[r++];this.circleVertexBuffer=i.createVertex(e,35044,new Int32Array(f.buffer,4*r,o)),r+=o;const a=n[r++];this.circleIndexBuffer=i.createIndex(e,35044,new Uint32Array(n.buffer,4*r,a)),r+=a;const l=this.layer.circleMaterial;this.circleVertexArrayObject=new s(e,l.getAttributeLocations(),l.getLayoutInfo(),{geometry:this.circleVertexBuffer},this.circleIndexBuffer)}}export{u as CircleRenderBucket,a as FillRenderBucket,o as LineRenderBucket,f as RenderBucketBase,l as SymbolRenderBucket};
