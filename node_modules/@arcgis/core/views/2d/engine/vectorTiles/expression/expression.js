/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import t from"../../../../../Color.js";import{toLCH as e,toRGB as r,toLAB as s}from"../../../../../core/colorUtils.js";import{unitBezier as n}from"../../../unitBezier.js";import{interpolate as a}from"../GeometryUtils.js";import{ValueType as o,StringType as i,ObjectType as l,NumberType as u,BooleanType as c,ColorType as h,typeToString as p,arrayType as g,getType as f,matchType as w,valueToString as m}from"./types.js";class y{constructor(t){this.parent=t,this.vars={}}add(t,e){this.vars[t]=e}get(t){return this.vars[t]?this.vars[t]:this.parent?this.parent.get(t):null}}class v{constructor(){this.type=o}static parse(t){if(t.length>1)throw new Error('"id" does not expect arguments');return new v}evaluate(t,e){return null==t?void 0:t.id}}class b{constructor(){this.type=i}static parse(t){if(t.length>1)throw new Error('"geometry-type" does not expect arguments');return new b}evaluate(t,e){if(!t)return null;switch(t.type){case 1:return"Point";case 2:return"LineString";case 3:return"Polygon";default:return null}}}class d{constructor(){this.type=l}static parse(t){if(t.length>1)throw new Error('"properties" does not expect arguments');return new d}evaluate(t,e){return null==t?void 0:t.values}}class x{constructor(){this.type=u}static parse(t){if(t.length>1)throw new Error('"zoom" does not expect arguments');return new x}evaluate(t,e){return e}}class E{constructor(t,e,r){this.lhs=t,this.rhs=e,this.compare=r,this.type=c}static parse(t,e,r){if(3!==t.length&&4!==t.length)throw new Error(`"${t[0]}" expects 2 or 3 arguments`);if(4===t.length)throw new Error(`"${t[0]}" collator not supported`);return new E(ht(t[1],e),ht(t[2],e),r)}evaluate(t,e){return this.compare(this.lhs.evaluate(t,e),this.rhs.evaluate(t,e))}}class $ extends E{static parse(t,e){return E.parse(t,e,((t,e)=>t===e))}}class M extends E{static parse(t,e){return E.parse(t,e,((t,e)=>t!==e))}}class k extends E{static parse(t,e){return E.parse(t,e,((t,e)=>t<e))}}class A extends E{static parse(t,e){return E.parse(t,e,((t,e)=>t<=e))}}class j extends E{static parse(t,e){return E.parse(t,e,((t,e)=>t>e))}}class q extends E{static parse(t,e){return E.parse(t,e,((t,e)=>t>=e))}}class N{constructor(t){this.arg=t,this.type=c}static parse(t,e){if(2!==t.length)throw new Error('"!" expects 1 argument');return new N(ht(t[1],e))}evaluate(t,e){return!this.arg.evaluate(t,e)}}class _{constructor(t){this.args=t,this.type=c}static parse(t,e){const r=[];for(let s=1;s<t.length;s++)r.push(ht(t[s],e));return new _(r)}evaluate(t,e){for(const r of this.args)if(!r.evaluate(t,e))return!1;return!0}}class R{constructor(t){this.args=t,this.type=c}static parse(t,e){const r=[];for(let s=1;s<t.length;s++)r.push(ht(t[s],e));return new R(r)}evaluate(t,e){for(const r of this.args)if(r.evaluate(t,e))return!0;return!1}}class C{constructor(t){this.args=t,this.type=c}static parse(t,e){const r=[];for(let s=1;s<t.length;s++)r.push(ht(t[s],e));return new C(r)}evaluate(t,e){for(const r of this.args)if(r.evaluate(t,e))return!1;return!0}}class z{constructor(t,e,r){this.type=t,this.args=e,this.fallback=r}static parse(t,e,r){if(t.length<4)throw new Error('"case" expects at least 3 arguments');if(t.length%2==1)throw new Error('"case" expects an odd number of arguments');let s;const n=[];for(let o=1;o<t.length-1;o+=2){const a=ht(t[o],e),i=ht(t[o+1],e,r);s||(s=i.type),n.push({condition:a,output:i})}const a=ht(t[t.length-1],e,r);return s||(s=a.type),new z(s,n,a)}evaluate(t,e){for(const r of this.args)if(r.condition.evaluate(t,e))return r.output.evaluate(t,e);return this.fallback.evaluate(t,e)}}class I{constructor(t,e){this.type=t,this.args=e}static parse(t,e){if(t.length<2)throw new Error('"coalesce" expects at least 1 argument');let r;const s=[];for(let n=1;n<t.length;n++){const a=ht(t[n],e);r||(r=a.type),s.push(a)}return new I(r,s)}evaluate(t,e){for(const r of this.args){const s=r.evaluate(t,e);if(null!==s)return s}return null}}class L{constructor(t,e,r,s,n){this.type=t,this.input=e,this.labels=r,this.outputs=s,this.fallback=n}static parse(t,e){if(t.length<3)throw new Error('"match" expects at least 3 arguments');if(t.length%2==0)throw new Error('"case" expects an even number of arguments');let r;const s=ht(t[1],e),n=[],a={};let o;for(let i=2;i<t.length-1;i+=2){let s=t[i];Array.isArray(s)||(s=[s]);for(const t of s){const e=typeof t;if("string"!==e&&"number"!==e)throw new Error('"match" requires string or number literal as labels');if(o){if(e!==o)throw new Error('"match" requires labels to have the same type')}else o=e;a[t]=n.length}const l=ht(t[i+1],e);r||(r=l.type),n.push(l)}return new L(r,s,a,n,ht(t[t.length-1],e))}evaluate(t,e){const r=this.input.evaluate(t,e);return(this.outputs[this.labels[r]]||this.fallback).evaluate(t,e)}}class U{constructor(t,e,r,s,n){this.operator=t,this.type=e,this.interpolation=r,this.input=s,this.stops=n}static parse(t,e,r){const s=t[0];if(t.length<5)throw new Error(`"${s}" expects at least 4 arguments`);const n=t[1];if(!Array.isArray(n)||0===n.length)throw new Error(`"${n}" is not a valid interpolation`);switch(n[0]){case"linear":if(1!==n.length)throw new Error("Linear interpolation cannot have parameters");break;case"exponential":if(2!==n.length||"number"!=typeof n[1])throw new Error("Exponential interpolation requires one numeric argument");break;case"cubic-bezier":if(5!==n.length)throw new Error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1");for(let t=1;t<5;t++){const e=n[t];if("number"!=typeof e||e<0||e>1)throw new Error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1")}break;default:throw new Error(`"${t[0]}" unknown interpolation type "${n[0]}"`)}if(t.length%2!=1)throw new Error(`"${s}" expects an even number of arguments`);const a=ht(t[2],e,u);let o;"interpolate-hcl"===s||"interpolate-lab"===s?o=h:r&&"value"!==r.kind&&(o=r);const i=[];for(let l=3;l<t.length;l+=2){const r=t[l];if("number"!=typeof r)throw new Error(`"${s}" requires stop inputs as literal numbers`);if(i.length&&i[i.length-1][0]>=r)throw new Error(`"${s}" requires strictly ascending stop inputs`);const n=ht(t[l+1],e,o);o||(o=n.type),i.push([r,n])}if(o&&o!==h&&o!==u&&("array"!==o.kind||o.itemType!==u))throw new Error(`"${s}" cannot interpolate type ${p(o)}`);return new U(s,o,n,a,i)}evaluate(n,o){const i=this.stops;if(1===i.length)return i[0][1].evaluate(n,o);const l=this.input.evaluate(n,o);if(l<=i[0][0])return i[0][1].evaluate(n,o);if(l>=i[i.length-1][0])return i[i.length-1][1].evaluate(n,o);let u=0;for(;++u<i.length&&!(l<i[u][0]););const c=i[u-1][0],h=i[u][0],g=U.interpolationRatio(this.interpolation,l,c,h),f=i[u-1][1].evaluate(n,o),w=i[u][1].evaluate(n,o);if("interpolate"===this.operator){if("array"===this.type.kind&&Array.isArray(f)&&Array.isArray(w))return f.map(((t,e)=>a(t,w[e],g)));if("color"===this.type.kind&&f instanceof t&&w instanceof t){const e=new t(f),r=new t(w);return new t([a(e.r,r.r,g),a(e.g,r.g,g),a(e.b,r.b,g),a(e.a,r.a,g)])}if("number"===this.type.kind&&"number"==typeof f&&"number"==typeof w)return a(f,w,g);throw new Error(`"${this.operator}" cannot interpolate type ${p(this.type)}`)}if("interpolate-hcl"===this.operator){const s=e(f),n=e(w),o=n.h-s.h,i=r({h:s.h+g*(o>180||o<-180?o-360*Math.round(o/360):o),c:a(s.c,n.c,g),l:a(s.l,n.l,g)});return new t({a:a(f.a,w.a,g),...i})}if("interpolate-lab"===this.operator){const e=s(f),n=s(w),o=r({l:a(e.l,n.l,g),a:a(e.a,n.a,g),b:a(e.b,n.b,g)});return new t({a:a(f.a,w.a,g),...o})}throw new Error(`Unexpected operator "${this.operator}"`)}interpolationUniformValue(t,e){const r=this.stops;if(1===r.length)return 0;if(t>=r[r.length-1][0])return 0;let s=0;for(;++s<r.length&&!(t<r[s][0]););const n=r[s-1][0],a=r[s][0];return U.interpolationRatio(this.interpolation,e,n,a)}getInterpolationRange(t){const e=this.stops;if(1===e.length){const t=e[0][0];return[t,t]}const r=e[e.length-1][0];if(t>=r)return[r,r];let s=0;for(;++s<e.length&&!(t<e[s][0]););return[e[s-1][0],e[s][0]]}static interpolationRatio(t,e,r,s){let a=0;if("linear"===t[0])a=U.exponentialInterpolationRatio(e,1,r,s);else if("exponential"===t[0])a=U.exponentialInterpolationRatio(e,t[1],r,s);else if("cubic-bezier"===t[0]){a=n(t[1],t[2],t[3],t[4])(U.exponentialInterpolationRatio(e,1,r,s),1e-5)}return a<0?a=0:a>1&&(a=1),a}static exponentialInterpolationRatio(t,e,r,s){const n=s-r;if(0===n)return 0;const a=t-r;return 1===e?a/n:(e**a-1)/(e**n-1)}}class B{constructor(t,e,r){this.type=t,this.input=e,this.stops=r}static parse(t,e){if(t.length<5)throw new Error('"step" expects at least 4 arguments');if(t.length%2!=1)throw new Error('"step" expects an even number of arguments');const r=ht(t[1],e,u);let s;const n=[];n.push([-1/0,ht(t[2],e)]);for(let a=3;a<t.length;a+=2){const r=t[a];if("number"!=typeof r)throw new Error('"step" requires stop inputs as literal numbers');if(n.length&&n[n.length-1][0]>=r)throw new Error('"step" requires strictly ascending stop inputs');const o=ht(t[a+1],e);s||(s=o.type),n.push([r,o])}return new B(s,r,n)}evaluate(t,e){const r=this.stops;if(1===r.length)return r[0][1].evaluate(t,e);const s=this.input.evaluate(t,e);let n=0;for(;++n<r.length&&!(s<r[n][0]););return this.stops[n-1][1].evaluate(t,e)}}class S{constructor(t,e){this.type=t,this.output=e}static parse(t,e,r){if(t.length<4)throw new Error('"let" expects at least 3 arguments');if(t.length%2==1)throw new Error('"let" expects an odd number of arguments');const s=new y(e);for(let a=1;a<t.length-1;a+=2){const r=t[a];if("string"!=typeof r)throw new Error(`"let" requires a string to define variable names - found ${r}`);s.add(r,ht(t[a+1],e))}const n=ht(t[t.length-1],s,r);return new S(n.type,n)}evaluate(t,e){return this.output.evaluate(t,e)}}class O{constructor(t,e){this.type=t,this.output=e}static parse(t,e,r){if(2!==t.length||"string"!=typeof t[1])throw new Error('"var" requires just one literal string argument');const s=e.get(t[1]);if(!s)throw new Error(`${t[1]} must be defined before being used in a "var" expression`);return new O(r||o,s)}evaluate(t,e){return this.output.evaluate(t,e)}}class P{constructor(t,e,r){this.type=t,this.index=e,this.array=r}static parse(t,e){if(3!==t.length)throw new Error('"at" expects 2 arguments');const r=ht(t[1],e,u),s=ht(t[2],e);return new P(s.type.itemType,r,s)}evaluate(t,e){const r=this.index.evaluate(t,e),s=this.array.evaluate(t,e);if(r<0||r>=s.length)throw new Error('"at" index out of bounds');if(r!==Math.floor(r))throw new Error('"at" index must be an integer');return s[r]}}class T{constructor(t,e){this.key=t,this.obj=e,this.type=o}static parse(t,e){let r,s;switch(t.length){case 2:return r=ht(t[1],e),new T(r);case 3:return r=ht(t[1],e),s=ht(t[2],e),new T(r,s);default:throw new Error('"get" expects 1 or 2 arguments')}}evaluate(t,e){const r=this.key.evaluate(t,e);if(this.obj){return this.obj.evaluate(t,e)[r]}return null==t?void 0:t.values[r]}}class F{constructor(t,e){this.key=t,this.obj=e,this.type=c}static parse(t,e){let r,s;switch(t.length){case 2:return r=ht(t[1],e),new F(r);case 3:return r=ht(t[1],e),s=ht(t[2],e),new F(r,s);default:throw new Error('"has" expects 1 or 2 arguments')}}evaluate(t,e){const r=this.key.evaluate(t,e);if(this.obj){return r in this.obj.evaluate(t,e)}return!(null==t||!t.values[r])}}class G{constructor(t,e){this.key=t,this.vals=e,this.type=c}static parse(t,e){if(3!==t.length)throw new Error('"in" expects 2 arguments');return new G(ht(t[1],e),ht(t[2],e))}evaluate(t,e){const r=this.key.evaluate(t,e);return-1!==this.vals.evaluate(t,e).indexOf(r)}}class V{constructor(t,e,r){this.item=t,this.array=e,this.from=r,this.type=u}static parse(t,e){if(t.length<3||t.length>4)throw new Error('"index-of" expects 3 or 4 arguments');const r=ht(t[1],e),s=ht(t[2],e);if(4===t.length){const n=ht(t[3],e,u);return new V(r,s,n)}return new V(r,s)}evaluate(t,e){const r=this.item.evaluate(t,e),s=this.array.evaluate(t,e);if(this.from){const n=this.from.evaluate(t,e);if(n!==Math.floor(n))throw new Error('"index-of" index must be an integer');return s.indexOf(r,n)}return s.indexOf(r)}}class D{constructor(t){this.arg=t,this.type=u}static parse(t,e){if(2!==t.length)throw new Error('"length" expects 2 arguments');const r=ht(t[1],e);return new D(r)}evaluate(t,e){const r=this.arg.evaluate(t,e);if("string"==typeof r)return r.length;if(Array.isArray(r))return r.length;throw new Error('"length" expects string or array')}}class H{constructor(t,e,r,s){this.type=t,this.array=e,this.from=r,this.to=s}static parse(t,e){if(t.length<3||t.length>4)throw new Error('"slice" expects 2 or 3 arguments');const r=ht(t[1],e),s=ht(t[2],e,u);if(s.type!==u)throw new Error('"slice" index must return a number');if(4===t.length){const n=ht(t[3],e,u);if(n.type!==u)throw new Error('"slice" index must return a number');return new H(r.type,r,s,n)}return new H(r.type,r,s)}evaluate(t,e){const r=this.array.evaluate(t,e);if(!Array.isArray(r)&&"string"!=typeof r)throw new Error('"slice" input must be an array or a string');const s=this.from.evaluate(t,e);if(s<0||s>=r.length)throw new Error('"slice" index out of bounds');if(s!==Math.floor(s))throw new Error('"slice" index must be an integer');if(this.to){const n=this.to.evaluate(t,e);if(n<0||n>=r.length)throw new Error('"slice" index out of bounds');if(n!==Math.floor(n))throw new Error('"slice" index must be an integer');return r.slice(s,n)}return r.slice(s)}}class J{constructor(){this.type=c}static parse(t){if(1!==t.length)throw new Error('"has-id" expects no arguments');return new J}evaluate(t,e){return t&&void 0!==t.id}}class K{constructor(t,e){this.args=t,this.calculate=e,this.type=u}static parse(t,e,r){const s=t.slice(1).map((t=>ht(t,e)));return new K(s,r)}evaluate(t,e){let r;return this.args&&(r=this.args.map((r=>r.evaluate(t,e)))),this.calculate(r)}}class Q extends K{static parse(t,e){switch(t.length){case 2:return K.parse(t,e,(t=>-t[0]));case 3:return K.parse(t,e,(t=>t[0]-t[1]));default:throw new Error('"-" expects 1 or 2 arguments')}}}class W extends K{static parse(t,e){return K.parse(t,e,(t=>{let e=1;for(const r of t)e*=r;return e}))}}class X extends K{static parse(t,e){if(3===t.length)return K.parse(t,e,(t=>t[0]/t[1]));throw new Error('"/" expects 2 arguments')}}class Y extends K{static parse(t,e){if(3===t.length)return K.parse(t,e,(t=>t[0]%t[1]));throw new Error('"%" expects 2 arguments')}}class Z extends K{static parse(t,e){if(3===t.length)return K.parse(t,e,(t=>t[0]**t[1]));throw new Error('"^" expects 1 or 2 arguments')}}class tt extends K{static parse(t,e){return K.parse(t,e,(t=>{let e=0;for(const r of t)e+=r;return e}))}}class et{constructor(t,e){this.args=t,this.calculate=e,this.type=u}static parse(t,e){const r=t.slice(1).map((t=>ht(t,e)));return new et(r,et.ops[t[0]])}evaluate(t,e){let r;return this.args&&(r=this.args.map((r=>r.evaluate(t,e)))),this.calculate(r)}}et.ops={abs:t=>Math.abs(t[0]),acos:t=>Math.acos(t[0]),asin:t=>Math.asin(t[0]),atan:t=>Math.atan(t[0]),ceil:t=>Math.ceil(t[0]),cos:t=>Math.cos(t[0]),e:()=>Math.E,floor:t=>Math.floor(t[0]),ln:t=>Math.log(t[0]),ln2:()=>Math.LN2,log10:t=>Math.log(t[0])/Math.LN10,log2:t=>Math.log(t[0])/Math.LN2,max:t=>Math.max(...t),min:t=>Math.min(...t),pi:()=>Math.PI,round:t=>Math.round(t[0]),sin:t=>Math.sin(t[0]),sqrt:t=>Math.sqrt(t[0]),tan:t=>Math.tan(t[0])};class rt{constructor(t){this.args=t,this.type=i}static parse(t,e){return new rt(t.slice(1).map((t=>ht(t,e))))}evaluate(t,e){return this.args.map((r=>r.evaluate(t,e))).join("")}}class st{constructor(t,e){this.arg=t,this.calculate=e,this.type=i}static parse(t,e){if(2!==t.length)throw new Error(`${t[0]} expects 1 argument`);const r=ht(t[1],e);return new st(r,st.ops[t[0]])}evaluate(t,e){return this.calculate(this.arg.evaluate(t,e))}}st.ops={downcase:t=>t.toLowerCase(),upcase:t=>t.toUpperCase()};class nt{constructor(t){this.args=t,this.type=h}static parse(t,e){if(4!==t.length)throw new Error('"rgb" expects 3 arguments');const r=t.slice(1).map((t=>ht(t,e)));return new nt(r)}evaluate(e,r){const s=this._validate(this.args[0].evaluate(e,r)),n=this._validate(this.args[1].evaluate(e,r)),a=this._validate(this.args[2].evaluate(e,r));return new t({r:s,g:n,b:a})}_validate(t){if("number"!=typeof t||t<0||t>255)throw new Error(`${t}: invalid color component`);return Math.round(t)}}class at{constructor(t){this.args=t,this.type=h}static parse(t,e){if(5!==t.length)throw new Error('"rgba" expects 4 arguments');const r=t.slice(1).map((t=>ht(t,e)));return new at(r)}evaluate(e,r){const s=this._validate(this.args[0].evaluate(e,r)),n=this._validate(this.args[1].evaluate(e,r)),a=this._validate(this.args[2].evaluate(e,r)),o=this._validateAlpha(this.args[3].evaluate(e,r));return new t({r:s,g:n,b:a,a:o})}_validate(t){if("number"!=typeof t||t<0||t>255)throw new Error(`${t}: invalid color component`);return Math.round(t)}_validateAlpha(t){if("number"!=typeof t||t<0||t>1)throw new Error(`${t}: invalid alpha color component`);return t}}class ot{constructor(t){this.color=t,this.type=g(u,4)}static parse(t,e){if(2!==t.length)throw new Error('"to-rgba" expects 1 argument');const r=ht(t[1],e);return new ot(r)}evaluate(e,r){return new t(this.color.evaluate(e,r)).toRgba()}}class it{constructor(t,e){this.type=t,this.args=e}static parse(t,e){const r=t[0];if(t.length<2)throw new Error(`${r} expects at least one argument`);let s,n=1;if("array"===r){if(t.length>2){switch(t[1]){case"string":s=i;break;case"number":s=u;break;case"boolean":s=c;break;default:throw new Error('"array" type argument must be string, number or boolean')}n++}else s=o;let e;if(t.length>3){if(e=t[2],null!==e&&("number"!=typeof e||e<0||e!==Math.floor(e)))throw new Error('"array" length argument must be a positive integer literal');n++}s=g(s,e)}else switch(r){case"string":s=i;break;case"number":s=u;break;case"boolean":s=c;break;case"object":s=l}const a=[];for(;n<t.length;n++){const r=ht(t[n],e);a.push(r)}return new it(s,a)}evaluate(t,e){let r;for(const s of this.args){const n=s.evaluate(t,e);if(r=f(n),w(r,this.type))return n}throw new Error(`Expected ${p(this.type)} but got ${p(r)}`)}}class lt{constructor(t,e){this.type=t,this.args=e}static parse(t,e){const r=t[0],s=lt.types[r];if(s===c||s===i){if(2!==t.length)throw new Error(`${r} expects one argument`)}else if(t.length<2)throw new Error(`${r} expects at least one argument`);const n=[];for(let a=1;a<t.length;a++){const r=ht(t[a],e);n.push(r)}return new lt(s,n)}evaluate(e,r){if(this.type===c)return Boolean(this.args[0].evaluate(e,r));if(this.type===i)return m(this.args[0].evaluate(e,r));if(this.type===u){for(const t of this.args){const s=Number(t.evaluate(e,r));if(!isNaN(s))return s}return null}if(this.type===h){for(const s of this.args)try{const n=lt.toColor(s.evaluate(e,r));if(n instanceof t)return n}catch{}return null}}static toBoolean(t){return Boolean(t)}static toString(t){return m(t)}static toNumber(t){const e=Number(t);if(isNaN(e))throw new Error(`"${t}" is not a number`);return e}static toColor(e){if(e instanceof t)return e;if("string"==typeof e){const r=t.fromString(e);if(r)return r;throw new Error(`"${e}" is not a color`)}if(Array.isArray(e))return t.fromArray(e);throw new Error(`"${e}" is not a color`)}}lt.types={"to-boolean":c,"to-color":h,"to-number":u,"to-string":i};class ut{constructor(t){this.val=t,this.type=f(t)}static parse(t){if(2!==t.length)throw new Error('"literal" expects 1 argument');return new ut(t[1])}evaluate(t,e){return this.val}}class ct{constructor(t){this.arg=t,this.type=i}static parse(t,e){if(2!==t.length)throw new Error('"typeof" expects 1 argument');return new ct(ht(t[1],e))}evaluate(t,e){return p(f(this.arg.evaluate(t,e)))}}function ht(t,e,r){const s=typeof t;if("string"===s||"boolean"===s||"number"===s||null===t){if(r)switch(r.kind){case"string":"string"!==s&&(t=lt.toString(t));break;case"number":"number"!==s&&(t=lt.toNumber(t));break;case"color":t=lt.toColor(t)}t=["literal",t]}if(!Array.isArray(t)||0===t.length)throw new Error("Expression must be a non empty array");const n=t[0];if("string"!=typeof n)throw new Error("First element of expression must be a string");const a=pt[n];if(void 0===a)throw new Error(`Invalid expression operator "${n}"`);if(!a)throw new Error(`Unimplemented expression operator "${n}"`);return a.parse(t,e,r)}const pt={array:it,boolean:it,collator:null,format:null,image:null,literal:ut,number:it,"number-format":null,object:it,string:it,"to-boolean":lt,"to-color":lt,"to-number":lt,"to-string":lt,typeof:ct,accumulated:null,"feature-state":null,"geometry-type":b,id:v,"line-progress":null,properties:d,at:P,get:T,has:F,in:G,"index-of":V,length:D,slice:H,"!":N,"!=":M,"<":k,"<=":A,"==":$,">":j,">=":q,all:_,any:R,case:z,coalesce:I,match:L,within:null,interpolate:U,"interpolate-hcl":U,"interpolate-lab":U,step:B,let:S,var:O,concat:rt,downcase:st,"is-supported-script":null,"resolved-locale":null,upcase:st,rgb:nt,rgba:at,"to-rgba":ot,"-":Q,"*":W,"/":X,"%":Y,"^":Z,"+":tt,abs:et,acos:et,asin:et,atan:et,ceil:et,cos:et,e:et,floor:et,ln:et,ln2:et,log10:et,log2:et,max:et,min:et,pi:et,round:et,sin:et,sqrt:et,tan:et,zoom:x,"heatmap-density":null,"has-id":J,none:C};export{_ as ALL,R as ANY,tt as Add,it as Assert,P as At,et as Calculate,z as Case,I as Coalesce,lt as Coerce,rt as Concat,X as Div,$ as EQ,q as GE,j as GT,b as GeomType,T as Get,F as Has,J as HasID,v as ID,G as In,V as IndexOf,U as Interpolate,A as LE,k as LT,D as Length,S as Let,ut as Literal,L as Match,Y as Mod,W as Mul,M as NE,C as NONE,N as NOT,Z as Pow,d as Properties,nt as Rgb,at as Rgba,H as Slice,B as Step,st as String,Q as Sub,ot as ToRgba,ct as TypeOf,O as Var,x as Zoom,ht as createExpression,pt as ops};
