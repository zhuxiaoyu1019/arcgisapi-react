/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../request.js";import t from"../../../../core/has.js";import s from"../../../../core/ItemCache.js";import{isAbortError as r,eachAlways as i}from"../../../../core/promiseUtils.js";import{open as o}from"../../../../core/workers/workers.js";import a from"./GlyphMosaic.js";import l from"./GlyphSource.js";import n from"./SpriteMosaic.js";import c from"./TileIndex.js";import{perfAdd as h}from"./decluttering/debugging.js";import u from"../../tiling/TileKey.js";const p=new s(10),y=new Map;class f{constructor(e,t,s){this._vectorTileLayer=e,this._styleRepository=t,this.devicePixelRatio=s,this._spriteMosaic=null,this._glyphMosaic=null,this._connection=null}destroy(){this._connection&&(this._connection.close(),this._connection=null),this._styleRepository=null,this._vectorTileLayer=null,this._spriteMosaic&&(this._spriteMosaic=null),this._glyphMosaic&&(this._glyphMosaic=null)}get spriteMosaic(){return this._spriteSourcePromise.then((()=>this._spriteMosaic))}get glyphMosaic(){return this._glyphMosaic}async start(e){const s=this._vectorTileLayer,r=s.sourceNameToSource,i=[];for(const t in r)i.push(this._fetchTileMap(r[t],e));this._spriteSourcePromise=this._vectorTileLayer.loadSpriteSource(this.devicePixelRatio,e),this._spriteSourcePromise.then((e=>{this._spriteMosaic=new n(1024,1024,250),this._spriteMosaic.setSpriteSource(e)}));const c=this._styleRepository,h=new l(c.glyphs);return this._glyphMosaic=new a(1024,1024,h),this._broadcastPromise=o("WorkerTileHandler",{client:this,schedule:e.schedule,signal:e.signal}).then((r=>(this._connection=r,Promise.all(this._connection.broadcast("setStyle",{style:s.currentStyleInfo.style,vectorTileLayerMaxBuffers:t("vectortilelayer-max-buffers")},e))))),Promise.all(i)}async updateStyle(e){return await this._broadcastPromise,this._broadcastPromise=new Promise(((t,s)=>{Promise.all(this._connection.broadcast("updateStyle",e)).then(t,s)})),this._broadcastPromise}async setStyle(e,s){await this._broadcastPromise,this._styleRepository=e;const r=this._vectorTileLayer.sourceNameToSource,i=[];for(const t in r)i.push(this._fetchTileMap(r[t],null));this._spriteSourcePromise=this._vectorTileLayer.loadSpriteSource(this.devicePixelRatio,null),this._spriteSourcePromise.then((e=>{this._spriteMosaic=new n(1024,1024,250),this._spriteMosaic.setSpriteSource(e)}));const o=new l(e.glyphs);return this._glyphMosaic=new a(1024,1024,o),this._broadcastPromise=new Promise(((e,r)=>{Promise.all(this._connection.broadcast("setStyle",{style:s,vectorTileLayerMaxBuffers:t("vectortilelayer-max-buffers")})).then(e,r)})),i.push(this._broadcastPromise),Promise.all(i)}fetchTileData(e,t){return this._getRefKeys(e,t).then((e=>{const s=this._vectorTileLayer.sourceNameToSource,r=[];for(const t in s)r.push(t);return this._getSourcesData(r,e,t)}))}parseTileData(e,t){const s=e&&e.data;if(!s)return Promise.resolve(null);const{sourceName2DataAndRefKey:r,transferList:i}=s;return 0===Object.keys(r).length?Promise.resolve(null):this._broadcastPromise.then((()=>this._connection.getAvailableClient().then((s=>s.invoke("createTileAndParse",{key:e.key.id,sourceName2DataAndRefKey:r,styleLayerUIDs:e.styleLayerUIDs},{...t,transferList:i}).then((e=>({tileData:e})))))))}async getSprites(e){return await this._spriteSourcePromise,this._spriteMosaic.getSpriteItems(e)}getGlyphs(e){return this._glyphMosaic.getGlyphItems(e.font,e.codePoints)}perfReport({key:e,milliseconds:t}){h(e,t,"ms")}async _getTilePayload(e,t,s){const i=u.pool.acquire(e.id),o=this._vectorTileLayer.sourceNameToSource[t].getSourceTileUrl(i.level,i.row,i.col);u.pool.release(i);try{return{protobuff:await this.request(o,s),sourceName:t}}catch(a){if(r(a))throw a;return{protobuff:null,sourceName:t}}}request(t,s){return e(t,{responseType:"array-buffer",...s}).then((({data:e})=>e))}async _fetchTileMap(t,s){if(t.capabilities.operations.supportsTileMap&&t.tileIndex)return Promise.resolve();if(!t.tileMapURL)return;const i=p.get(t.tileMapURL);if(i)return void(t.tileIndex=i);let o;if(y.has(t.tileMapURL)){try{o=await y.get(t.tileMapURL),t.tileIndex=new c(o.data)}catch(l){if(r(l))throw l}return}const a=e(t.tileMapURL,s);y.set(t.tileMapURL,a);try{o=await a,y.delete(t.tileMapURL),p.put(t.tileMapURL,t.tileIndex),t.tileIndex=new c(o.data)}catch(l){if(y.delete(t.tileMapURL),r(l))throw l}}_getRefKeys(e,t){const s=this._vectorTileLayer.sourceNameToSource,r=new Array;for(const i in s){const o=s[i].getRefKey(e,t);r.push(o)}return i(r)}_getSourcesData(e,t,s){const r=[];for(let i=0;i<t.length;i++)if(null==t[i].value||null==e[i])r.push(null);else{const o=this._getTilePayload(t[i].value,e[i],s);r.push(o)}return i(r).then((e=>{const s={},r=[];for(let i=0;i<e.length;i++)if(e[i].value&&e[i].value&&e[i].value.protobuff&&e[i].value.protobuff.byteLength>0){const o=t[i].value.id;s[e[i].value.sourceName]={refKey:o,protobuff:e[i].value.protobuff},r.push(e[i].value.protobuff)}return{sourceName2DataAndRefKey:s,transferList:r}}))}}export{f as TileHandler};
