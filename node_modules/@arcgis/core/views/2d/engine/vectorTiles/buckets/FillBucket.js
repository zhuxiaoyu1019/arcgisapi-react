/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import t from"../../../../../core/ArrayPool.js";import{e}from"../../../../../chunks/earcut.js";import i from"./BaseBucket.js";import{Point as l}from"../../webgl/Geometry.js";import n from"../../webgl/mesh/Tesselator.js";const r=new n;class s extends i{constructor(t,e,i,l,n,r,s){super(t,e,i),this.type=1,this._patternMap=new Map,this._fillVertexBuffer=l,this._fillIndexBuffer=n,this._outlineVertexBuffer=r,this._outlineIndexBuffer=s}get fillIndexStart(){return this._fillIndexStart}get fillIndexCount(){return this._fillIndexCount}get outlineIndexStart(){return this._outlineIndexStart}get outlineIndexCount(){return this._outlineIndexCount}getResources(t,e,i){const l=this.layer,n=this.zoom,r=l.getPaintProperty("fill-pattern");if(r)if(r.isDataDriven)for(const s of this._features)e.add({name:r.getValue(n,s),repeat:!0});else e.add({name:r.getValue(n),repeat:!0})}processFeatures(t){this._fillIndexStart=3*this._fillIndexBuffer.index,this._fillIndexCount=0,this._outlineIndexStart=3*this._outlineIndexBuffer.index,this._outlineIndexCount=0;const e=this.layer,i=this.zoom,{fillMaterial:l,outlineMaterial:n,hasDataDrivenFill:r,hasDataDrivenOutline:s}=e;t&&t.setExtent(this.layerExtent);const o=e.getPaintProperty("fill-pattern"),a=null==o?void 0:o.isDataDriven;let f=!o&&e.getPaintValue("fill-antialias",i);if(e.outlineUsesFillColor){if(f&&!e.hasDataDrivenOpacity){const t=e.getPaintValue("fill-opacity",i),l=e.getPaintValue("fill-opacity",i+1);t<1&&l<1&&(f=!1)}if(f&&!e.hasDataDrivenColor){const t=e.getPaintValue("fill-color",i),l=e.getPaintValue("fill-color",i+1);t[3]<1&&l[3]<1&&(f=!1)}}const u=this._features,d=null==t?void 0:t.validateTessellation;if(a){const r=[];for(const a of u){const u=o.getValue(i,a),h=this._spriteInfo[u];if(!h||!h.rect)continue;const x=l.encodeAttributes(a,i,e,h),c=f&&s?n.encodeAttributes(a,i,e):[],g=a.getGeometry(t);r.push({ddFillAttributes:x,ddOutlineAttributes:c,page:h.page,geometry:g}),r.sort(((t,e)=>t.page-e.page));for(const{ddFillAttributes:t,ddOutlineAttributes:i,page:l,geometry:n}of r)this._processFeature(n,f,e.outlineUsesFillColor,t,i,d,l)}}else for(const h of u){const o=r?l.encodeAttributes(h,i,e):null,a=f&&s?n.encodeAttributes(h,i,e):null,u=h.getGeometry(t);this._processFeature(u,f,e.outlineUsesFillColor,o,a,d)}}serialize(){let t=10;t+=this.layerUIDs.length,t+=this._fillVertexBuffer.array.length,t+=this._fillIndexBuffer.array.length,t+=this._outlineVertexBuffer.array.length,t+=this._outlineIndexBuffer.array.length,t+=3*this._patternMap.size+1;const e=new Uint32Array(t),i=new Int32Array(e.buffer);let l=0;e[l++]=this.type,e[l++]=this.layerUIDs.length;for(let s=0;s<this.layerUIDs.length;s++)e[l++]=this.layerUIDs[s];e[l++]=this._fillIndexStart,e[l++]=this._fillIndexCount,e[l++]=this._outlineIndexStart,e[l++]=this._outlineIndexCount;const n=this._patternMap,r=n.size;if(e[l++]=r,r>0)for(const[s,[o,a]]of n)e[l++]=s,e[l++]=o,e[l++]=a;e[l++]=this._fillVertexBuffer.array.length;for(let s=0;s<this._fillVertexBuffer.array.length;s++)i[l++]=this._fillVertexBuffer.array[s];e[l++]=this._fillIndexBuffer.array.length;for(let s=0;s<this._fillIndexBuffer.array.length;s++)e[l++]=this._fillIndexBuffer.array[s];e[l++]=this._outlineVertexBuffer.array.length;for(let s=0;s<this._outlineVertexBuffer.array.length;s++)i[l++]=this._outlineVertexBuffer.array[s];e[l++]=this._outlineIndexBuffer.array.length;for(let s=0;s<this._outlineIndexBuffer.array.length;s++)e[l++]=this._outlineIndexBuffer.array[s];return e.buffer}_processFeature(t,e,i,l,n,r,o){if(!t)return;const a=t.length,f=!n||0===n.length;if(e&&(!i||f))for(let s=0;s<a;s++)this._processOutline(t[s],n);const u=32;let d;for(let h=0;h<a;h++){const e=s._area(t[h]);e>u?(void 0!==d&&this._processFill(t,d,l,r,o),d=[h]):e<-u&&void 0!==d&&d.push(h)}void 0!==d&&this._processFill(t,d,l,r,o)}_processOutline(t,e){const i=this._outlineVertexBuffer,n=this._outlineIndexBuffer,r=n.index;let s,o,a;const f=new l(0,0),u=new l(0,0),d=new l(0,0);let h=-1,x=-1,c=-1,g=-1,y=-1,_=!1;const p=0;let I=t.length;if(I<2)return;const B=t[p];let V=t[I-1];for(;I&&V.isEqual(B);)--I,V=t[I-1];if(!(I-p<2)){for(let l=p;l<I;++l){l===p?(s=t[I-1],o=t[p],a=t[p+1],f.assignSub(o,s),f.normalize(),f.rightPerpendicular()):(s=o,o=a,a=l!==I-1?t[l+1]:t[p],f.assign(u));const r=this._isClipEdge(s,o);-1===g&&(_=r),u.assignSub(a,o),u.normalize(),u.rightPerpendicular();const B=f.x*u.y-f.y*u.x;d.assignAdd(f,u),d.normalize();const V=-d.x*-f.x+-d.y*-f.y;let m=Math.abs(0!==V?1/V:1);m>8&&(m=8),B>=0?(c=i.add(o.x,o.y,f.x,f.y,0,1,e),-1===g&&(g=c),h>=0&&x>=0&&c>=0&&!r&&n.add(h,x,c),x=i.add(o.x,o.y,m*-d.x,m*-d.y,0,-1,e),-1===y&&(y=x),h>=0&&x>=0&&c>=0&&!r&&n.add(h,x,c),h=x,x=c,c=i.add(o.x,o.y,d.x,d.y,0,1,e),h>=0&&x>=0&&c>=0&&!r&&n.add(h,x,c),x=i.add(o.x,o.y,u.x,u.y,0,1,e),h>=0&&x>=0&&c>=0&&!r&&n.add(h,x,c)):(c=i.add(o.x,o.y,m*d.x,m*d.y,0,1,e),-1===g&&(g=c),h>=0&&x>=0&&c>=0&&!r&&n.add(h,x,c),x=i.add(o.x,o.y,-f.x,-f.y,0,-1,e),-1===y&&(y=x),h>=0&&x>=0&&c>=0&&!r&&n.add(h,x,c),h=x,x=c,c=i.add(o.x,o.y,-d.x,-d.y,0,-1,e),h>=0&&x>=0&&c>=0&&!r&&n.add(h,x,c),h=i.add(o.x,o.y,-u.x,-u.y,0,-1,e),h>=0&&x>=0&&c>=0&&!r&&n.add(h,x,c))}h>=0&&x>=0&&g>=0&&!_&&n.add(h,x,g),h>=0&&g>=0&&y>=0&&!_&&n.add(h,y,g),this._outlineIndexCount+=3*(n.index-r)}}_processFill(i,l,n,r,s){r=!0;let a;l.length>1&&(a=[]);let f=0;for(const t of l)0!==f&&a.push(f),f+=i[t].length;const u=2*f,d=t.acquire();for(const t of l){const e=i[t],l=e.length;for(let t=0;t<l;++t)d.push(e[t].x,e[t].y)}const h=e(d,a,2);if(r&&e.deviation(d,a,2,h)>0){const t=[],e=[];if(o(t,e,i,l),e.length>0){const i=this._fillVertexBuffer.index;let l=0;for(;l<t.length;)this._fillVertexBuffer.add(t[l++],t[l++],n);let r=0;for(;r<e.length;)this._fillIndexBuffer.add(i+e[r+0],i+e[r+1],i+e[r+2]),r+=3;if(void 0!==s){const t=this._patternMap,i=t.get(s);i?i[1]+=e.length:t.set(s,[this._fillIndexStart+this._fillIndexCount,e.length])}this._fillIndexCount+=e.length}}else{const t=h.length;if(t>0){const e=this._fillVertexBuffer.index;let i=0;for(;i<u;)this._fillVertexBuffer.add(d[i++],d[i++],n);let l=0;for(;l<t;)this._fillIndexBuffer.add(e+h[l++],e+h[l++],e+h[l++]);if(void 0!==s){const e=this._patternMap,i=e.get(s);i?i[1]+=t:e.set(s,[this._fillIndexStart+this._fillIndexCount,t])}this._fillIndexCount+=t}}t.release(d)}_isClipEdge(t,e){return t.x===e.x?t.x<=-64||t.x>=4160:t.y===e.y&&(t.y<=-64||t.y>=4160)}static _area(t){let e=0;const i=t.length-1;for(let l=0;l<i;l++)e+=(t[l].x-t[l+1].x)*(t[l].y+t[l+1].y);return e+=(t[i].x-t[0].x)*(t[i].y+t[0].y),.5*e}}function o(t,e,i,l){let n,s;r.beginPolygon(t,e);for(const o of l){const t=i[o];if(!(t.length<3)){r.beginContour();for(let e=0;e<t.length;++e){n=t[e].x,s=t[e].y;const i=[n,s,0];r.addVertex(i,i)}r.endContour()}}r.endPolygon()}export default s;
