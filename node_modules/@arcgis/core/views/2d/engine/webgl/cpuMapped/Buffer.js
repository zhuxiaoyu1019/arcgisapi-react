/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{andThen as t,unwrapOrThrow as i,isNone as e}from"../../../../../core/maybe.js";import r from"../../../../webgl/BufferObject.js";import"../../../../webgl/FramebufferObject.js";import"../../../../../core/has.js";import"../../../../webgl/enums.js";import"../../../../webgl/RenderingContext.js";import"../../../../../chunks/builtins.js";import"../../../../webgl/Texture.js";import"../../../../webgl/VertexArrayObject.js";import{FreeList as s}from"./FreeList.js";const h=32767,n=h<<16|h;class d{constructor(t,i,e){const r=new Uint32Array(i*e);this.strideInt=e,this.bufferType=t,this.dirty={start:1/0,end:0},this.cpu=r,this.gpu=null,this.clear()}destroy(){t(this.gpu,(t=>t.dispose()))}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new s({start:0,end:this.cpu.length/this.strideInt}),this.fillPointer=0}get bufferSize(){return this.cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(t,e,r,s){const h=r*this.strideInt,n=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d=new Uint32Array(t,n,h),a=i(this.freeList.firstFit(r),"First fit region must be defined"),f=a*this.strideInt,o=h*this.strideInt,u=a-e;if(0!==s)for(let i=0;i<d.length;i++)d[i]+=s;return this.cpu.set(d,f),this.dirty.start=Math.min(this.dirty.start,f),this.dirty.end=Math.max(this.dirty.end,f+o),this.fillPointer=Math.max(this.fillPointer,f+o),u}free(t,i,e){const r=t*this.strideInt,s=(t+i)*this.strideInt;if(!0===e)for(let h=t;h!==t+i;h++)this.cpu[h*this.strideInt]=n;this.dirty.start=Math.min(this.dirty.start,r),this.dirty.end=Math.max(this.dirty.end,s),this.freeList.free(t,i)}upload(t){if(this.dirty.end){if(e(this.gpu))return this.gpu=this._createBuffer(t),this.dirty.start=1/0,void(this.dirty.end=0);this.gpu.setSubData(this.cpu,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}_createBuffer(t){const i=35048;return"index"===this.bufferType?r.createIndex(t,i,this.cpu):r.createVertex(t,i,this.cpu)}}export{d as Buffer};
