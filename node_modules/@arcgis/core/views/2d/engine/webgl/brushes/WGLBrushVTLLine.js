/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{isSome as e,isNone as t}from"../../../../../core/maybe.js";import{VTL_TEXTURE_BINDING_UNIT_SPRITES as i}from"../definitions.js";import{WGLDrawPhase as n}from"../enums.js";import{u32to4Xu8 as a}from"../number.js";import r from"./WGLBrush.js";class o extends r{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(r,o){const{context:s,displayLevel:l,state:f,drawPhase:m,painter:u,pixelRatio:c,spriteMosaic:d,styleLayerUID:p}=r;if(!o.some((e=>{var t,i;return null!=(t=null==(i=e.layerData.get(p))?void 0:i.lineIndexCount)&&t})))return;const g=r.styleLayer,y=g.lineMaterial,M=u.vectorTilesMaterialManager,v=g.getPaintValue("line-translate",l),_=g.getPaintValue("line-translate-anchor",l),U=g.getPaintProperty("line-pattern"),x=void 0!==U,P=x&&U.isDataDriven;let E,D;if(x&&!P){const e=U.getValue(l);E=d.getMosaicItemPosition(e)}let V=!1;if(!x){const e=g.getPaintProperty("line-dasharray");if(D=void 0!==e,V=D&&e.isDataDriven,D&&!V){const t=e.getValue(l),i=g.getDashKey(t,g.getLayoutValue("line-cap",l));E=d.getMosaicItemPosition(i)}}const h=1/c,I=m===n.HITTEST,S=this._programOptions;S.id=I,S.pattern=x,S.sdf=D;const T=M.getMaterialProgram(s,y,S);if(s.useProgram(T),T.setUniformMatrix3fv("u_displayViewMat3",f.displayViewMat3),T.setUniformMatrix3fv("u_displayMat3",1===_?f.displayMat3:f.displayViewMat3),T.setUniform2fv("u_lineTranslation",v),T.setUniform1f("u_depth",g.z),T.setUniform1f("u_antialiasing",h),I){const e=a(p+1);T.setUniform4fv("u_id",e)}if(E&&e(E)){const{page:t}=E,n=d.getPageSize(t);e(n)&&(d.bind(s,9729,t,i),T.setUniform2fv("u_mosaicSize",n),T.setUniform1i("u_texture",i))}let w=-1;for(const n of o){if(!n.layerData.has(p))continue;n.key.level!==w&&(w=n.key.level,y.setDataUniforms(T,l,g,w,d));const a=2**(l-w)/c;T.setUniform1f("u_zoomFactor",a);const r=n.layerData.get(p);if(!r.lineIndexCount)continue;r.prepareForRendering(s);const o=r.lineVertexArrayObject;if(!t(o)){if(s.bindVAO(o),T.setUniformMatrix3fv("u_dvsMat3",n.transforms.dvs),s.setStencilFunction(514,n.stencilRef,255),P||V){const t=r.patternMap;if(!t)continue;for(const[n,a]of t){const t=d.getPageSize(n);e(t)&&(d.bind(s,9729,n,i),T.setUniform2fv("u_mosaicSize",t),T.setUniform1i("u_texture",i),s.drawElements(4,a[1],5125,Uint32Array.BYTES_PER_ELEMENT*a[0]))}}else s.drawElements(4,r.lineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*r.lineIndexStart);n.triangleCount+=r.lineIndexCount/3}}}}export{o as WGLBrushVTLLine};
