/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import t from"../../VertexStream.js";import e from"../WGLBrush.js";import{setTextures as r,getCommonUniforms as s,setUniforms as a,getColormapUniforms as i,getStretchUniforms as o,getShadedReliefUniforms as n,getUniformLocationInfos as h,getBasicGridUniforms as c}from"../../../../../webgl/rasterUtils.js";class l extends e{constructor(){super(...arguments),this._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:new Map([["a_position",0],["a_texcoord",1]])},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:new Map([["a_position",0],["a_texcoord",1]])},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:new Map([["a_position",0],["a_texcoord",1]])}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:t},e){t.setBlendingEnabled(!0),t.setBlendFunctionSeparate(1,771,1,771),t.setColorMask(!0,!0,!0,!0),t.setStencilWriteMask(0),t.setStencilTestEnabled(!0),t.setStencilFunction(514,e.stencilRef,255)}draw(t,e){var r;if(!e.source)return;if(e.suspended)return;t.timeline.begin(this.name);const s=!(null!=(r=t.context.capabilities.textureFloat)&&r.textureFloatLinear);e.updateTexture(t);const a=this.getShaderVariations(e,s),i=t.painter.materialManager.getProgram(t,this._desc[e.symbolizerParameters.type],a);this.drawWithProgram(t.context,i,e),t.timeline.end(this.name)}drawWithProgram(e,h,l,d=1,u=[0,0],p=!1){this._quad||(this._quad=new t(e,[0,0,1,0,0,1,1,1]));const{symbolizerParameters:m,transformGrid:f,width:g,height:_,opacity:b}=l,x=m.type;e.useProgram(h);const P=this.getShaderVariations(l),w=this.getUniformInfos(x,e,h,P),{names:S,textures:y}=l.getTextures();r(e,h,S,y);const M=c(d,u),U=s(f,[g,_],[l.source.width,l.source.height],b,p);if(a(h,w,{u_coordScale:l.coordScale,u_dvsMat3:l.transforms.dvs,...M,...U}),m.colormap){const{colormap:t,colormapOffset:e}=m,r=i(t,e);a(h,w,r)}if("stretch"===m.type){const t=o(m);a(h,w,t)}else if("hillshade"===m.type){const t=n(m);a(h,w,t)}this._quad.draw()}getUniformInfos(t,e,r,s){const a=s.length>0?t+"-"+s.join("-"):t;if(this._rendererUniformInfos.has(a))return this._rendererUniformInfos.get(a);const i=h(e,r);return this._rendererUniformInfos.set(a,i),i}getShaderVariations(t,e=!1){const r=[];return"cubic"===t.interpolation?r.push("bicubic"):e&&"bilinear"===t.interpolation&&r.push("bilinear"),t.isRendereredSource?r.push("noop"):t.symbolizerParameters.colormap&&r.push("applyColormap"),t.transformGrid&&r.push("applyProjection"),r}}export default l;
