/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import"../../../../../../core/has.js";import{isSome as e}from"../../../../../../core/maybe.js";import{isAborted as t}from"../../../../../../core/promiseUtils.js";import r from"../templates/WGLLabelTemplate.js";import s from"../templates/WGLMarkerTemplate.js";import{isDynamicId as o}from"../templates/WGLTemplateStore.js";import{isAggregateId as a}from"../../../../layers/features/support/AttributeStore.js";class i{constructor(e,t,r){this._geometryType=e,this._idField=t,this._templateStore=r}update(t,r){e(t.mesh.labels)&&(this._labelTemplates=this._createLabelTemplates(t.mesh.labels,r))}_createLabelTemplates(e,t){const s=new Map;if("simple"===e.type){for(const o of e.classes){const e=r.fromLabelClass(o,t);s.set(o.index,e)}return s}for(const o in e.classes){const a=e.classes[o];for(const e of a){const o=r.fromLabelClass(e,t);s.set(e.index,o)}}return s}get templates(){return this._templateStore}async analyze(r,s,i,l,n,p){if(t(p))return;let f;"dictionary"===s.type&&(f=await s.analyze(this._idField,r.copy(),l,n,p));let m=0;for(;r.next();){let t;if(t=f?f[m++]:e(i)&&a(r.getDisplayId())&&1!==r.readAttribute("cluster_count")?i.match(this._idField,r,this._geometryType,l,n):s.match(this._idField,r,this._geometryType,l,n),r.setGroupId(t),o(t)){const e=this._templateStore.getDynamicTemplateGroup(t);for(const t of e)t&&t.analyze&&t.analyze(this._templateStore,r,l,n)}}return this._templateStore.finalize(p)}async analyzeGraphics(e,r,s,a,i){if(t(i))return;const l=e.getCursor();for(r&&await r.analyze(this._idField,l.copy(),s,a,i);l.next();){let e=l.getGroupId();if(null!=e&&-1!==e||(e=r.match(this._idField,l,l.geometryType,s,a),l.setGroupId(e)),o(e)){const t=this._templateStore.getDynamicTemplateGroup(e);for(const e of t)e&&e.analyze&&e.analyze(this._templateStore,l,s,a)}l.setGroupId(e)}return this._templateStore.finalize(i)}writeGraphic(e,t,r){const s=t.getGroupId(),a=t.getDisplayId(),i=this._templateStore.getTemplateGroup(s);if(e.featureStart(t.insertAfter),null!=a){if(o(s))for(const e of i)e.bindFeature(t,null,null);if(i){for(const s of i)s&&s.write(e,t,r);e.featureEnd()}}}writeCursor(t,r,s,a,i,l){const n=r.getGroupId(),p=r.getDisplayId(),f=this._templateStore.getTemplateGroup(n);if(r.getObjectId(),null!=p&&f){if(o(n))for(const e of f)e.bindFeature(r,s,a);for(const e of f)e.write(t,r,i);if(e(l)&&t.hasRecords){const e=l&&this._findLabelRef(f);this._writeLabels(t,r,l,e,i)}}}_findLabelRef(e){for(const t of e)if(t instanceof s)return t;return null}_writeLabels(t,r,s,o,a){for(const i of s)if(e(i)&&i){const{glyphs:e,rtl:s,index:l}=i,n=this._labelTemplates.get(l);n.setZoomLevel(a),n.bindReferenceTemplate(o),n.bindTextInfo(e,s),n.write(t,r,null)}}}export{i as WGLMeshFactory};
