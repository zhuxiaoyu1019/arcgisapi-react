/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{isNone as e}from"../../../../../../core/maybe.js";import{THIN_LINE_HALF_WIDTH_THRESHOLD as t}from"../../definitions.js";import{WGLGeometryType as i}from"../../enums.js";import{i1616to32 as s,i8888to32 as r}from"../../number.js";import{LineTessellation as o}from"../../TurboLine.js";import{LineMaterialKey as n}from"../../materialKey/MaterialKey.js";import{clipLinesMarshall as l}from"./templateUtils.js";const a=8,h=31,p=1024,m=65535,d=s=>class extends s{constructor(...e){super(...e),this.tessellationProperties={},this._tessellationOptions={halfWidth:0,pixelCoordRatio:1,offset:0},this.geometryType=i.LINE}_initializeTessellator(e){const i=n.load(this._materialKey),s=this._tessellationOptions,r=i.vvSizeFieldStops||i.vvSizeMinMaxValue||i.vvSizeScaleStops||i.vvSizeUnitValue,l=this.tessellationProperties._halfWidth<t;this.tessellationProperties.minMaxZoom=this._minMaxZoom;const a=l&&!e&&!r;s.wrapDistance=m,s.textured=this._isDashed||this._hasPattern,s.offset=this.tessellationProperties.offset,s.halfWidth=this.tessellationProperties._halfWidth;const h=a?0:1;this._lineTessellator=new o(f(this.tessellationProperties,h,h),u(this.tessellationProperties),a)}_write(e,t,i){const s="esriGeometryPoint"===t.geometryType;e.recordStart(t.getDisplayId(),this._materialKey,this.geometryType,!1,s),this._writeGeometry(e,t,i,s),e.recordEnd()}_writeGeometry(t,i,s,r){const o=null!=s?s:i.readLegacyGeometry(),n=this._getLines(o,r);e(n)||this._writeVertices(t,i,n)}_getLines(t,i){if(e(t))return null;const s=t.paths||t.rings;if(e(s))return null;return l(s,i?256:16)}_writeVertices(e,t,i){const s=t.getDisplayId(),r=e.vertexCount(),o=this.tessellationProperties,n=this._tessellationOptions;o.out=e,o.id=s,o.indexCount=0,o.vertexCount=0,o.offset=r,n.capType=this._capType,n.joinType=this._joinType;for(const{line:l,start:a}of i)n.initialDistance=a%m,this._lineTessellator.tessellate(l,n)}},f=(e,t,i)=>(o,n,l,m,d,f,u,c,x,_,v)=>{const y=s(v,Math.ceil(p*e._halfWidth)),W=r(Math.round(h*u),Math.round(h*c),Math.round(h*x),Math.round(h*_)),M=r(h*d,h*f,0,e._bitset),T=e.out;return T.vertexBounds(o,n,t,i),T.vertexWrite(s(a*o,a*n)),T.vertexWrite(e.id),T.vertexWrite(e._fillColor),T.vertexWrite(W),T.vertexWrite(y),T.vertexWrite(e._tl),T.vertexWrite(e._br),T.vertexWrite(M),T.vertexWrite(s(Math.ceil(p*e._halfReferenceWidth),0)),T.vertexWrite(e.minMaxZoom),T.vertexEnd(),e.offset+e.vertexCount++},u=e=>(t,i,s)=>{const r=e.out;r.indexWrite(t),r.indexWrite(i),r.indexWrite(s),e.indexCount+=3};export default d;
