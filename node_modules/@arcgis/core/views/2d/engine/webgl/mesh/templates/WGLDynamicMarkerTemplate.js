/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import t from"../../../../../../core/Error.js";import e from"../../../../../../core/Logger.js";import{unwrapOr as i}from"../../../../../../core/maybe.js";import{pt2px as s}from"../../../../../../core/screenUtils.js";import{c as r}from"../../../../../../chunks/mat2df32.js";import{c as o}from"../../../../../../chunks/vec2f32.js";import{premultiplyAlphaRGBA as a}from"../../color.js";import{MIN_MAX_ZOOM_PRECISION_FACTOR as h,SPRITE_PADDING as n}from"../../definitions.js";import{i1616to32 as c,i8888to32 as m}from"../../number.js";import{MarkerMaterialKey as l}from"../../materialKey/MaterialKey.js";import{isFunction as f,getMinMaxZoom as _}from"./util.js";import p from"./WGLBaseMarkerTemplate.js";import y from"./WGLDynamicMeshTemplate.js";import{ok as d}from"../../util/Result.js";const M=o(),u=r(),g=e.getLogger("esri.views.2d.engine.webgl.WGLDynamicMarkerTemplate");class k extends(p(y)){constructor(t,e,r){if(super(t),this._cimMarkerLayer=t,this._minMaxZoom=c(Math.round(e*h),Math.round(r*h)),f(t.color)){const e=(e,i,s)=>a(t.color(e,i,s));this._dynamicPropertyMap.set("_fillColor",e)}else this._fillColor=a(t.color);if(f(t.outlineColor)){const e=(e,i,s)=>a(t.outlineColor(e,i,s));this._dynamicPropertyMap.set("_outlineColor",e)}else this._outlineColor=a(t.outlineColor);if(f(t.size)){const e=(e,i,r)=>s(t.size(e,i,r));this._dynamicPropertyMap.set("_size",e)}else this._size=s(t.size);if(f(t.scaleX)?this._dynamicPropertyMap.set("_scaleX",t.scaleX):this._scaleX=t.scaleX,f(t.offsetX)){const e=(e,i,r)=>s(t.offsetX(e,i,r));this._dynamicPropertyMap.set("xOffset",e)}else this.xOffset=s(t.offsetX);if(f(t.offsetY)){const e=(e,i,r)=>s(t.offsetY(e,i,r));this._dynamicPropertyMap.set("yOffset",e)}else this.yOffset=s(t.offsetY);if(f(t.outlineWidth)){const e=(e,i,r)=>s(t.outlineWidth(e,i,r));this._dynamicPropertyMap.set("_outlineWidth",e)}else this._outlineWidth=s(t.outlineWidth);f(t.rotation)?this._dynamicPropertyMap.set("_angle",t.rotation):this._angle=t.rotation,this._scaleFactor=i(t.scaleFactor,1),this._markerPlacement=t.markerPlacement,this._effects=t.effects,this._bitSet=(1===t.alignment?1:0)|(t.colorLocked?1:0)<<1|(t.scaleSymbolsProportionally?1:0)<<3,this._materialKey=t.materialKey}static fromCIMMarker(t,e){const[i,s]=_(t.scaleInfo,e);return new k(t,i,s)}bindFeature(e,i,r){const o=e.readLegacyFeature();this._dynamicPropertyMap.forEach(((t,e)=>{this[e]=t(o,i,r)}));const a=this._cimMarkerLayer.materialHash,h="function"==typeof a?a(o,i,r):a,f=this._materialCache.get(h);if(!f||!d(f.spriteMosaicItem)||!f.spriteMosaicItem)return void g.error(new t("mapview-cim","Encountered an error when binding feature"));const _=f.spriteMosaicItem,p=this._cimMarkerLayer.sizeRatio,y=_.width/_.height*this._scaleX,k=this._cimMarkerLayer.rotateClockwise?this._angle:-this._angle;let L=this._size,x=L*y;const P=this.xOffset,j=this.yOffset;this.xOffset*=this._scaleFactor,this.yOffset*=this._scaleFactor;const w=this._cimMarkerLayer.scaleSymbolsProportionally&&this._cimMarkerLayer.frameHeight?this._size/s(this._cimMarkerLayer.frameHeight):1,z=this._outlineWidth*w,b=s(this._cimMarkerLayer.referenceSize);let O=0,W=0;const C=this._cimMarkerLayer.anchorPoint;C&&(this._cimMarkerLayer.isAbsoluteAnchorPoint?this._size&&(O=-C.x/(this._size*y),W=C.y/this._size):(O=C.x,W=C.y)),this._sizeOutlineWidth=m(Math.round(Math.min(Math.sqrt(128*x),255)),Math.round(Math.min(Math.sqrt(128*L),255)),Math.round(Math.min(Math.sqrt(128*z),255)),Math.round(Math.min(Math.sqrt(128*b),255))),this.angle=k;const X=Math.round(64*p);this._bitestAndDistRatio=c(this._bitSet,X);const F=_.rect.x+n,K=_.rect.y+n,B=F+_.width,I=K+_.height;this._texUpperLeft=c(F,K),this._texUpperRight=c(B,K),this._texBottomLeft=c(F,I),this._texBottomRight=c(B,I);const R=l.load(this._materialKey);R.sdf=_.sdf,R.pattern=!0,R.textureBinding=_.textureBinding,this._materialKey=R.data,this._anchorX=.5-(.5+O)*_.width/_.width,this._anchorY=.5-(.5+W)*_.height/_.height,x*=p,L*=p,x*=this._scaleFactor,L*=this._scaleFactor,x*=_.rect.width/_.width,L*=_.rect.height/_.height,this._computedWidth=x,this._computedHeight=L,this._applyTransformation(u,M),this.xOffset=P,this.yOffset=j}}export default k;
