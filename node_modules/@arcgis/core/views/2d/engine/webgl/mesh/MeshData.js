/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import"../../../tiling/PagedTileQueue.js";import"../../../tiling/TileInfoView.js";import t from"../../../tiling/TileKey.js";import"../../../tiling/TileQueue.js";import"../../../tiling/TileStrategy.js";import{PATCH_PIXEL_BUFFER_ALLOC_SIZE as e,TILE_SIZE as r}from"../definitions.js";import{WGLGeometryType as i}from"../enums.js";import{getStrides as s}from"../Utils.js";import{VertexDataWriter as n}from"./VertexDataWriter.js";import{getDisplayIdTexel as u}from"../../../layers/features/support/AttributeStore.js";import{getPow2NeighborKey as a}from"../../../layers/features/support/tileUtils.js";const h=1,c=2,o=4,_=8,l=16,d=32,g=64,p=128;function f(t){switch(t){case h:case _:case d:return-1;case c:case g:return 0;case o:case l:case p:return 1}}function m(t){switch(t){case h:case c:case o:return-1;case _:case l:return 0;case d:case g:case p:return 1}}const x=h|_|d,w=o|l|p,y=h|c|o,v=d|g|p;class E{constructor(t,e,r,i,s){this._hasDotDensity=!1,this._hasAggregate=!1,this.hasRecords=!1,this._data={self:new Map,neighbors:new Array},this._current={geometryType:0,writer:null,overlaps:0,start:0,insertAfter:0,id:0,materialKey:0,indexStart:0,vertStart:0,isDotDensity:!1,bufferingEnabled:!1,metricBoxLenPointer:0},this.hint=e,this.tileKey=t,this._hasDotDensity=r,this._hasAggregate=i,this._pixelBufferEnabled=s}get hasAggregates(){return this._hasAggregate}get hasPixelBufferEnabled(){return this._pixelBufferEnabled}serialize(e){const r=[];return r.push(this._serializeTileVertexData(this.tileKey,this._data.self)),this._data.neighbors.forEach(((i,s)=>{const n=1<<s,u=f(n),h=m(n),c=a(new t(this.tileKey),u,h,e);r.push(this._serializeTileVertexData(c.id,i))})),r}_serializeTileVertexData(t,e){var r,s,n,u,a;const h=new Array;return{message:{tileKey:t,data:{[i.MARKER]:null==(r=e.get(i.MARKER))?void 0:r.serialize(h),[i.FILL]:null==(s=e.get(i.FILL))?void 0:s.serialize(h),[i.LINE]:null==(n=e.get(i.LINE))?void 0:n.serialize(h),[i.TEXT]:null==(u=e.get(i.TEXT))?void 0:u.serialize(h),[i.LABEL]:null==(a=e.get(i.LABEL))?void 0:a.serialize(h)}},transferList:h}}featureStart(t=0){this._current.insertAfter=t}featureEnd(){}recordStart(t,e,r,i,s){this._current.writer=this._getVertexWriter(r,i),this._current.overlaps=0,this._current.indexStart=this._current.writer.indexCount,this._current.vertStart=this._current.writer.vertexCount,this._current.bufferingEnabled=s,this._current.id=t,this._current.materialKey=e,this._current.geometryType=r,this._current.isDotDensity=!1,this._current.writer.recordStart()}recordCount(){return this._current.writer.recordCount}vertexCount(){return this._current.writer.vertexCount}indexCount(){return this._current.writer.indexCount}vertexBounds(t,e,r,i){this._current.bufferingEnabled&&this._addOverlap(t,e,r,i)}vertexWrite(t){this._current.writer.writeVertex(t)}vertexWriteF32(t){this._current.writer.writeVertexF32(t)}vertexEnd(){}vertexWriter(){return this._current.writer.vertexWriter}indexWrite(t){this._current.writer.writeIndex(t)}indexWriter(){return this._current.writer.indexWriter}metricWriter(){return this._current.writer.metricWriter}metricStart(t,e,r,s,n,a,h,c){this._current.writer=this._getVertexWriter(i.LABEL,!1);const o=this._current.writer.metricWriter;o.push(u(t)),o.push(e),o.push(r),o.push(s),o.push(n),o.push(a),o.push(h),o.push(c),o.push(255),this._current.metricBoxLenPointer=o.push(0)}metricEnd(){const t=this._current.writer.metricWriter;0===t.getValue(this._current.metricBoxLenPointer)&&t.seek(t.length-10)}metricBoxWrite(t,e,r,i){const s=this._current.writer.metricWriter;s.incr(this._current.metricBoxLenPointer),s.push(0),s.push(0),s.push(t),s.push(e),s.push(r),s.push(i)}recordEnd(){const t=this._current.indexStart,r=this._current.writer.indexCount;if(t===r)return!1;this.hasRecords=!0;const u=r-t,a=this._current.vertStart,h=this._current.writer.vertexCount-a;if(this._current.writer.recordEnd(this._current.id,this._current.materialKey,this._current.insertAfter,t,u,a,h),!this._pixelBufferEnabled||this._hasAggregate||0===this._current.overlaps||this._current.geometryType===i.LABEL)return!0;const c=this._current.writer;for(let i=0;i<8;i++){const t=1<<i;if(!!(this._current.overlaps&t)){if(!this._data.neighbors[i]){const t=new Map;this._data.neighbors[i]=t}const r=this._data.neighbors[i],u=this._current.geometryType;if(!r.has(u)){const t=s(u,this._current.isDotDensity).geometry;r.set(u,new n(u,t,e))}const a=r.get(this._current.geometryType),h=8,o=512*-f(t)*h,_=512*-m(t)*h;a.copyLastFrom(c,o,_)}}return!0}_addOverlap(t,e,i,s){const n=255^((t<0+i?w:t>=r-i?x:w|x)|(e<0+s?v:e>=r-s?y:v|y));this._current.overlaps|=n}_getVertexWriter(t,e){if(!this._data.self.has(t)){const e=this._data.self,r=s(t,this._hasDotDensity).geometry;e.set(t,new n(t,r,8e3))}return this._data.self.get(t)}}export{E as MeshData};
