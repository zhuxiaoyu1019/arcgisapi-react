/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../../../core/Error.js";import t from"../../../../../../core/Logger.js";import{isAbortError as r}from"../../../../../../core/promiseUtils.js";import{errorPolygonSymbol2D as s,errorPointSymbol2D as i,errorPolylineSymbol2D as a}from"../../../../../../symbols/support/defaults.js";import o from"./WGLDynamicFillTemplate.js";import m from"./WGLDynamicLineTemplate.js";import c from"./WGLDynamicMarkerTemplate.js";import l from"./WGLDynamicTextTemplate.js";import n from"./WGLFillTemplate.js";import h from"./WGLLineTemplate.js";import p from"./WGLMarkerTemplate.js";import _ from"./WGLTextTemplate.js";import u,{withLock as f}from"../../util/Lock.js";import{ok as M}from"../../util/Result.js";import{createSymbolSchema as T}from"../../../../layers/features/schemaUtils.js";import{codepoints as I}from"../../../../layers/features/textUtils.js";const y=t.getLogger("esri.views.2d.engine.webgl.mesh.templates.WGLTemplateStore"),d=new Array;function g(e,t){const r=e.length;return e.push(null),t.then((t=>e[r]=t)),e}function S(e){return!!(1&e)}function w(e){return"worker:port-closed"===e.name}class k{constructor(e,t){this._idCounter=1,this._templateIdCounter=1,this._idToTemplateGroup=new Map,this._symbolToTemplate=new Map,this._fetchQueue=[],this._idToResolver=new Map,this._cimTemplateCache=new Map,this._cimAnalyses=[],this._lock=new u,this._fetchResource=e,this._tileInfo=t}get _markerError(){return this._errorTemplates.marker[0]}get _fillError(){return this._errorTemplates.fill[0]}get _lineError(){return this._errorTemplates.line[0]}get _textError(){return this._errorTemplates.line[0]}createTemplateGroup(e,t){this._initErrorTemplates();const r=e.hash;if(this._symbolToTemplate.has(r))return this._symbolToTemplate.get(r);const s=new Array;t&&this._createMeshTemplates(s,t,!0),this._createMeshTemplates(s,e,!1);const i=this._createGroupId("expanded-cim"===e.type);return this._idToTemplateGroup.set(i,s),this._symbolToTemplate.set(r,i),i}getTemplateGroup(e){return this._idToTemplateGroup.has(e)?this._idToTemplateGroup.get(e):d}getDynamicTemplateGroup(e){return this._idToTemplateGroup.has(e)?(S(e)||y.error("mapview-template-store",`Id ${e} does not refer to a dynamic template`),this._idToTemplateGroup.get(e)):d}getMosaicItem(e,t){const r=this._createTemplateId(),s=new Promise((e=>this._idToResolver.set(r,e)));return this._fetchQueue.push({symbol:e,id:r,glyphIds:t}),s}finalize(e){return this._fetchQueue.length||this._lock.isHeld()?f(this._lock,this._fetchAllQueuedResources.bind(this),e):Promise.resolve()}_initErrorTemplates(){this._errorTemplates||(this._errorTemplates={fill:this._createMeshTemplates([],T(s),!1),marker:this._createMeshTemplates([],T(i),!1),line:this._createMeshTemplates([],T(a),!1)})}_fetchAllQueuedResources(t){if(!this._fetchQueue.length)return Promise.resolve();const s=this._fetchQueue,i=this._cimAnalyses;return this._fetchQueue=[],this._cimAnalyses=[],Promise.all(i).then((()=>this._fetchResource(s,t).then((e=>{for(const{id:t,mosaicItem:r}of e){this._idToResolver.get(t)(r),this._idToResolver.delete(t)}})))).catch((t=>{r(t)?this._fetchQueue=this._fetchQueue.concat(s):w(t)||y.error(new e("mapview-template-store","Unable to fetch requested texture resources",t))}))}_createGroupId(e){return this._idCounter++<<1|(e?1:0)}_createTemplateId(){return this._templateIdCounter++}async _createSMS(e){const{spriteMosaicItem:t}=await this.getMosaicItem(e);return M(t,y)?p.fromSimpleMarker(e,t):this._markerError}async _createPMS(e){const{spriteMosaicItem:t}=await this.getMosaicItem(e);return M(t,y)?p.fromPictureMarker(e,t):this._markerError}async _createSFS(e,t){const{spriteMosaicItem:r}=await this.getMosaicItem(e);return M(r,y)?n.fromSimpleFill(e,r,t):this._fillError}async _createPFS(e,t){const{spriteMosaicItem:r}=await this.getMosaicItem(e);return M(r,y)?n.fromPictureFill(e,r,t):this._fillError}async _createSLS(e,t){const{spriteMosaicItem:r}=await this.getMosaicItem(e);return M(r,y)?h.fromSimpleLine(e,r):this._lineError}async _createLMS(e){const{spriteMosaicItem:t}=await this.getMosaicItem(e);return M(t,y)?p.fromLineSymbolMarker(e,t):this._markerError}async _createTS(e){const{glyphMosaicItems:t}=await this.getMosaicItem(e);return _.fromText(e,t)}async _createCIMText(e){const{glyphMosaicItems:t}=await this.getMosaicItem(e.cim,I(e.text));return M(t,y)?_.fromCIMText(e,t,this._tileInfo):this._textError}async _createCIMFill(e){const{spriteMosaicItem:t}=await this.getMosaicItem(e.cim);return M(t,y)?n.fromCIMFill(e,t,this._tileInfo):this._fillError}async _createCIMLine(e){const{spriteMosaicItem:t}=await this.getMosaicItem(e.cim);return M(t,y)?h.fromCIMLine(e,t,this._tileInfo):this._lineError}async _createCIMMarker(e){const{spriteMosaicItem:t}=await this.getMosaicItem(e.cim);return M(t,y)?p.fromCIMMarker(e,t,this._tileInfo):this._markerError}async _createCIM(e){const t=e.templateHash;if(this._cimTemplateCache.has(t))return this._cimTemplateCache.get(t);const r={...e,cim:{...e.cim,mosaicHash:e.materialHash}};let s;switch(r.type){case"marker":s=this._createCIMMarker(r);break;case"line":s=this._createCIMLine(r);break;case"fill":s=this._createCIMFill(r);break;case"text":s=this._createCIMText(r)}return s.then((e=>this._cimTemplateCache.set(t,e))),s}_createDynamicCIM(e){const t=e.templateHash;if(this._cimTemplateCache.has(t))return this._cimTemplateCache.get(t);let r;switch(e.type){case"marker":r=c.fromCIMMarker(e,this._tileInfo);break;case"line":r=m.fromCIMLine(e,this._tileInfo);break;case"fill":r=o.fromCIMFill(e,this._tileInfo);break;case"text":r=l.fromCIMText(e,this._tileInfo)}return this._cimTemplateCache.set(t,r),r}_createPrimitiveMeshTemplates(e,t,r){switch(t.type){case"esriSMS":return g(e,this._createSMS(t));case"esriPMS":return g(e,this._createPMS(t));case"esriSFS":return g(e,this._createSFS(t,r));case"line-marker":return g(e,this._createLMS(t));case"esriPFS":return g(e,this._createPFS(t,r));case"esriSLS":return g(e,this._createSLS(t,!1));case"esriTS":return g(e,this._createTS(t));default:return y.error("Unable to create mesh template for unknown symbol type {: $ }{symbol.type}"),e}}_createMeshTemplates(e,t,r){if(-1!==t.type.indexOf("3d"))return y.error("3D symbols are not supported with MapView"),e;if("expanded-cim"===t.type){for(const r of t.layers)"function"==typeof r.materialHash?e.push(this._createDynamicCIM(r)):g(e,this._createCIM(r));return e}if("composite-symbol"===t.type){for(const s of t.layers)this._createPrimitiveMeshTemplates(e,s,r);return e}return"cim"===t.type||"label"===t.type||"web-style"===t.type?e:this._createPrimitiveMeshTemplates(e,t,r)}}export{k as WGLTemplateStore,S as isDynamicId};
