/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../../../core/Logger.js";import{analyzeCIMResource as t}from"../../../../../../symbols/cim/cimAnalyzer.js";import a from"./WGLMeshTemplate.js";const i=e.getLogger("esri.views.2d.engine.webgl.WGLDynamicMeshTemplate");class s extends a{constructor(e){super(),this._ongoingMaterialRequestMap=new Map,this._materialCache=new Map,this._dynamicPropertyMap=new Map,this._cimLayer=e}analyze(e,a,s,r){const o=a.readLegacyFeature(),n=this._materialCache,m=this._cimLayer.materialHash;if(!m)return i.error("A Dynamic mesh template must have a material hash value or function!"),Promise.reject(null);const c="function"==typeof m?m(o,s,r):m;if(n.has(c)){const e=n.get(c);return Promise.resolve(e)}if(this._ongoingMaterialRequestMap.has(c))return this._ongoingMaterialRequestMap.get(c);const l=t(this._cimLayer.cim,this._cimLayer.materialOverrides);l.mosaicHash=c;const h=e.getMosaicItem(l).then((e=>(this._ongoingMaterialRequestMap.delete(c),n.set(c,e),e))).catch((e=>(this._ongoingMaterialRequestMap.delete(c),i.error(".analyze()",e.message),null)));return this._ongoingMaterialRequestMap.set(c,h),h}}export default s;
