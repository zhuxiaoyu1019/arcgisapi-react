/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../config.js";import t from"../../../../request.js";import i from"../../../../core/Error.js";import s from"../../../../core/Logger.js";import{isNone as r}from"../../../../core/maybe.js";import{throwIfAborted as a,isAbortError as n}from"../../../../core/promiseUtils.js";import{pt2px as o}from"../../../../core/screenUtils.js";import{s as c}from"../../../../chunks/vec2.js";import{c as h}from"../../../../chunks/vec2f32.js";import u from"../../../../symbols/cim/Rasterizer.js";import{TEXTURE_BINDING_GLYPH_ATLAS as d,TEXTURE_BINDING_SPRITE_ATLAS as l}from"./definitions.js";import{MosaicType as m}from"./enums.js";import{getFullyQualifiedFontName as g}from"./fontUtils.js";import p from"./GlyphMosaic.js";import f from"./GlyphSource.js";import _ from"./SDFConverter.js";import y from"./SpriteMosaic.js";import w,{isPNG as M,isAnimatedPNG as S}from"./animatedFormats/apng.js";import I,{isGIF as v,isAnimatedGIF as T}from"./animatedFormats/gif.js";import{bidiText as b}from"./util/BidiText.js";import{ok as x}from"./util/Result.js";import{keyFromSymbol as z}from"./util/symbolUtils.js";import{QueueProcessor as R}from"../../../support/QueueProcessor.js";const j=h(),C="arial-unicode-ms-regular",F=126,U=s.getLogger("esri.views.2d.engine.webgl.TextureManager"),P=e=>"esriSMS"===e.type&&e.path,B=e=>e.url||e.imageData,G=e=>e.url&&-1!==e.url.indexOf(".gif")||e.contentType&&"image/gif"===e.contentType||e.imageData&&-1!==e.imageData.indexOf("data:image/gif"),L=e=>e.url&&-1!==e.url.indexOf(".png")||e.contentType&&"image/png"===e.contentType||e.imageData&&-1!==e.imageData.indexOf("data:image/png"),O=e=>e.type&&-1!==e.type.toLowerCase().indexOf("3d");function $(e){switch(e.type){case"CIMSolidStroke":case"CIMSolidFill":return!0;case"esriSFS":return"esriSFSSolid"===e.style||"esriSFSNull"===e.style;case"esriSLS":return"esriSLSSolid"===e.style||"esriSLSNull"===e.style;default:return!1}}const k=e=>-1!==e.indexOf("data:image/svg+xml");function q(e){switch(e.type){case"esriSMS":case"esriPMS":case"CIMPointSymbol":case"CIMVectorMarker":case"CIMPictureMarker":case"CIMCharacterMarker":return!1;default:return!0}}function D(e){const t=[];for(let i=0;i<e.length;i++)t.push(e.charCodeAt(i));return t}async function A(e,s){const r=e.imageData?`data:${e.contentType};base64,${e.imageData}`:e.url;let a;const o=";base64,";if(-1!==r.indexOf(o)){const e=r.indexOf(o)+o.length,t=r.substring(e),i=atob(t),s=new Uint8Array(i.length);for(let r=0;r<i.length;r++)s[r]=i.charCodeAt(r);a=s.buffer}else try{const{data:e}=await t(r,{responseType:"array-buffer",...s});a=e}catch(c){if(!n(c))return new i("mapview-invalid-resource",`Could not fetch requested resource at ${r}`)}return a}function N(e,t){const i=Math.round(o(t)*window.devicePixelRatio),s=i>=128?2:4;return Math.min(e,i*s)}const Q=(e,t,s)=>U.error(new i(e,t,s));class E{constructor(e,t,i){this.mosaicType=e,this.page=t,this.sdf=i}static fromMosaic(e,t){return new E(e,t.page,t.sdf)}}class H{constructor(s){this._invalidFontsMap=new Map,this._sdfConverter=new _(F),this._bindingInfos=new Array,this._hashToBindingIndex=new Map,this._rasterizer=new u,this._ongoingRasterizations=new Map,this._imageRequestQueue=new R({concurrency:10,process:async(e,s)=>{a(s);try{return await t(e,{responseType:"image",signal:s})}catch(r){if(!n(r))throw new i("mapview-invalid-resource",`Could not fetch requested resource at ${e}`,r);throw r}}}),this._spriteMosaic=new y(s,2048,2048,500),this._glyphSource=new f(`${e.fontsUrl}/{fontstack}/{range}.pbf`),this._glyphMosaic=new p(1024,1024,this._glyphSource)}dispose(){this._spriteMosaic.dispose(),this._glyphMosaic.dispose(),this._rasterizer.dispose(),this._sdfConverter.dispose(),this._spriteMosaic=null,this._glyphMosaic=null,this._rasterizer=null,this._sdfConverter=null,this._hashToBindingIndex.clear(),this._hashToBindingIndex=null,this._bindingInfos=null,this._ongoingRasterizations.clear(),this._ongoingRasterizations=null,this._imageRequestQueue.clear(),this._imageRequestQueue=null}get sprites(){return this._spriteMosaic}get glyphs(){return this._glyphMosaic}async rasterizeItem(e,t,i,s){if(r(e))return Q("mapview-null-resource","Unable to rasterize null resource"),null;switch(e.type){case"CIMTextSymbol":case"esriTS":{const t=await this._rasterizeText(e,i,s);return t.forEach((e=>this._setTextureBinding(m.GLYPH,e))),{glyphMosaicItems:t}}case"esriSMS":case"esriPMS":case"esriSFS":case"esriPFS":case"esriSLS":default:{if(O(e))return Q("mapview-invalid-type",`MapView does not support symbol type: ${e.type}`,e),null;const i=await this._rasterizeSpriteSymbol(e,t,s);return x(i)&&i&&this._setTextureBinding(m.SPRITE,i),{spriteMosaicItem:i}}}}bindTextures(e,t,i,s=!1){if(0===i.textureBinding)return;const r=this._bindingInfos[i.textureBinding-1],a=r.page,n=s?9987:9729;switch(r.mosaicType){case m.SPRITE:{const i=this.sprites.getWidth(a),s=this.sprites.getHeight(a),r=c(j,i,s);return this._spriteMosaic.bind(e,n,a,l),t.setUniform1i("u_texture",l),void t.setUniform2fv("u_mosaicSize",r)}case m.GLYPH:{const i=this.glyphs.width,s=this.glyphs.height,r=c(j,i,s);return this._glyphMosaic.bind(e,n,a,d),t.setUniform1i("u_texture",d),void t.setUniform2fv("u_mosaicSize",r)}default:U.error("mapview-texture-manager",`Cannot handle unknown type ${r.mosaicType}`)}}_hashMosaic(e,t){return 1|e<<1|(t.sdf?1:0)<<2|t.page<<3}_setTextureBinding(e,t){const i=this._hashMosaic(e,t);if(!this._hashToBindingIndex.has(i)){const s=E.fromMosaic(e,t),r=this._bindingInfos.length+1;this._hashToBindingIndex.set(i,r),this._bindingInfos.push(s)}t.textureBinding=this._hashToBindingIndex.get(i)}async _rasterizeText(e,t,i){const s=g(e.font),r=this._invalidFontsMap.has(s),a=t||D(b(e.text)[0]);try{return await this._glyphMosaic.getGlyphItems(r?C:s,a,i)}catch(n){return Q("mapview-invalid-resource",`Couldn't find font ${s}. Falling back to Arial Unicode MS Regular`),this._invalidFontsMap.set(s,!0),this._glyphMosaic.getGlyphItems(C,a,i)}}async _rasterizeSpriteSymbol(e,t,s){if($(e))return null;const r=z(e);if(this._spriteMosaic.has(r))return this._spriteMosaic.getSpriteItem(r);if(P(e)||B(e))return this._handleAsyncResource(r,e,s);const a=this._rasterizer.rasterizeJSONResource(e,t);if(a){const{size:t,image:i,sdf:s,simplePattern:n}=a;return this._addItemToMosaic(r,t,{type:"static",data:i},q(e),s,n)}return new i("TextureManager","unrecognized or null rasterized image")}async _handleAsyncResource(e,t,i){if(this._ongoingRasterizations.has(e))return this._ongoingRasterizations.get(e);let s;s=P(t)?this._handleSVG(t,e,i):this._handleImage(t,e,i),this._ongoingRasterizations.set(e,s);try{await s,this._ongoingRasterizations.delete(e)}catch{this._ongoingRasterizations.delete(e)}return s}async _handleSVG(e,t,i){const s=[F,F],r=await this._sdfConverter.draw(e.path,i);return this._addItemToMosaic(t,s,{type:"static",data:new Uint32Array(r.buffer)},!1,!0,!0)}async _handleGIFOrPNG(e,t,s){const r=await A(e,s);if(x(r)){const o=v(r),c=M(r);if(!o&&!c)return new i("mapview-invalid-resource","Image data is neither GIF nor PNG!");let h;try{o&&T(r)?h=await I.create(r,s):c&&S(r)&&(h=await w.create(r,s))}catch(a){if(!n(a))return new i("mapview-invalid-resource","Could not fetch requested resource!")}if(h&&x(h))return this._addItemToMosaic(t,[h.width,h.height],{type:"animated",data:h},q(e),!1,!1);const u=new Blob([r],{type:o?"image/gif":"image/png"}),d=await this._imageFromBlob(u);if(d&&d instanceof HTMLImageElement){let i=d.width,s=d.height;"esriPMS"===e.type&&(i=Math.round(N(d.width,e.width)),s=Math.round(d.height*(i/d.width)));const{size:r,sdf:a,image:n}=this._rasterizer.rasterizeImageResource(i,s,d,e.colorSubstitutions);return this._addItemToMosaic(t,r,{type:"static",data:n},q(e),a,!1)}}return new i("mapview-invalid-resource","Could not handle resource!")}async _handleImage(e,t,s){if(G(e)||L(e))return this._handleGIFOrPNG(e,t,s);const r=e.imageData?`data:${e.contentType};base64,${e.imageData}`:e.url;try{const{data:i}=await this._imageRequestQueue.push(r,{...s});k(r)&&(i.width=o(e.width),i.height=o(e.height));let a=i.width,n=i.height;"esriPMS"===e.type&&(a=Math.round(N(i.width,e.width)),n=Math.round(i.height*(a/i.width)));const{size:c,sdf:h,image:u}=this._rasterizer.rasterizeImageResource(a,n,i,e.colorSubstitutions);return this._addItemToMosaic(t,c,{type:"static",data:u},q(e),h,!1)}catch(a){if(!n(a))return new i("mapview-invalid-resource",`Could not fetch requested resource at ${r}. ${a.message}`)}}async _imageFromBlob(e){const t=window.URL.createObjectURL(e);try{const{data:e}=await this._imageRequestQueue.push(t);return window.URL.revokeObjectURL(t),e}catch(s){if(window.URL.revokeObjectURL(t),!n(s))return new i("mapview-invalid-resource",`Could not fetch requested resource at ${t}`);throw s}}_addItemToMosaic(e,t,i,s,r,a){return this._spriteMosaic.addSpriteItem(e,t,i,s,r,a)}}export default H;
