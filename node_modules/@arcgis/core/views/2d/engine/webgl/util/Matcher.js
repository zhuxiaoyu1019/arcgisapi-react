/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../../../../core/Error.js";import t from"../../../../../core/Logger.js";import s from"../../../../../core/LRUCache.js";import{createRendererExpression as r}from"../../../../../support/arcadeOnDemand.js";import{expandSymbol as i}from"../../../../../symbols/cim/cimSymbolUtils.js";import{createLabelOverrideFunction as a}from"../../../../../symbols/cim/utils.js";import n from"../../../arcade/callExpressionWithFeature.js";import{createSymbolSchema as l}from"../../../layers/features/schemaUtils.js";const o=t.getLogger("esri/views/2d/engine/webgl/util/Matcher");async function u(e,t,s){switch(e.type){case"simple":return c.fromBasicRenderer(e,t,s);case"map":return h.fromUVRenderer(e,t,s);case"interval":return m.fromCBRenderer(e,t,s);case"dictionary":return p.fromDictionaryRenderer(e,t,s);case"subtype":return d.fromSubtypes(e,t,s)}}class c{constructor(){this.type="feature",this._defaultResult=null}static async fromBasicRenderer(e,t,s){const r=new c;if(e.symbol){const a=await i(e.symbol,s),n=t.createTemplateGroup(a,null);r.setDefault(n)}return r}size(){return 1}getDefault(){return this._defaultResult}setDefault(e){this._defaultResult=e}match(e,t,s,r,i){return this.getDefault()}async analyze(e,t,s,r,i){return null}}class d extends c{constructor(e,t){super(),this._subMatchers=e,this._subtypeField=t}static async fromSubtypes(e,t,s){const r=new Map,i=[];for(const a in e.renderers){const n=parseInt(a,10),l=u(e.renderers[a],t,s).then((e=>r.set(n,e)));i.push(l)}return await Promise.all(i),new d(r,e.subtypeField)}match(e,t,s,r,i){const a=t.readAttribute(this._subtypeField),n=this._subMatchers.get(a);return n?n.match(e,t,s,r,i):null}}class m extends c{constructor(e,t,s,r){super(),this.type="interval",this._intervals=[],this._isMaxInclusive=t,this._fieldIndex=r,this._field=e,this._normalizationInfo=s}static async fromCBRenderer(e,t,s){const{isMaxInclusive:r,normalizationField:a,normalizationTotal:n,normalizationType:l}=e,o=e.field,u=new m(o,r,{normalizationField:a,normalizationTotal:n,normalizationType:l},e.fieldIndex),c=await i(e.backgroundFillSymbol,s);await Promise.all(e.intervals.map((async e=>{const r=await i(e.symbol,s),a=await t.createTemplateGroup(r,c),n={min:e.min,max:e.max};u.add(n,a)})));const d=await i(e.defaultSymbol,s);if(d){const e=await t.createTemplateGroup(d,c);u.setDefault(e)}return u}add(e,t){this._intervals.push({interval:e,result:t}),this._intervals.sort(((e,t)=>e.interval.min-t.interval.min))}size(){return super.size()+this._intervals.length}match(e,t,s,r,i){if(null==this._fieldIndex&&!this._field)return this.getDefault();const a=null!=this._fieldIndex?t.getComputedNumericAtIndex(this._fieldIndex):this._getValueFromField(t);if(!a&&(null==a||isNaN(a)))return this.getDefault();for(let n=0;n<this._intervals.length;n++){const{interval:e,result:t}=this._intervals[n],s=a>=e.min,r=this._isMaxInclusive?a<=e.max:a<e.max;if(s&&r)return t}return this.getDefault()}_needsNormalization(){const e=this._normalizationInfo;return e&&(e.normalizationField||e.normalizationTotal||e.normalizationType)}_getValueFromField(e){const t=e.readAttribute(this._field);if(!this._needsNormalization()||null==t)return t;const{normalizationField:s,normalizationTotal:r,normalizationType:i}=this._normalizationInfo,a=!!s&&e.readAttribute(s);if(i)switch(i){case"esriNormalizeByField":return a?t/a:void 0;case"esriNormalizeByLog":return Math.log(t)*Math.LOG10E;case"esriNormalizeByPercentOfTotal":return t/r*100;default:return void o.error(`Found unknown normalization type: ${i}`)}else o.error("Normalization is required, but no type was set!")}}class h extends c{constructor(e,t,s){super(),this.type="map",this._nullResult=null,this._resultsMap=new Map,this._fieldsIndex=s,this._fields=e,this._seperator=t||""}static async fromUVRenderer(e,t,s){const r=e.fieldDelimiter,a=[e.field];e.field2&&a.push(e.field2),e.field3&&a.push(e.field3);const n=await i(e.backgroundFillSymbol,s),l=new h(a,r,e.fieldIndex);await Promise.all(e.map.map((async e=>{const r=await i(e.symbol,s),a=await t.createTemplateGroup(r,n);"<Null>"===e.value?l.setNullResult(a):l.add(e.value,a)})));const o=await i(e.defaultSymbol,s);if(o){const e=await t.createTemplateGroup(o,n);l.setDefault(e)}return l}setNullResult(e){this._nullResult=e}add(e,t){this._resultsMap.set(e.toString(),t)}size(){return super.size()+this._resultsMap.size}match(e,t,s,r,i){if(null==this._fieldsIndex&&!this._fields)return this.getDefault();const a=null!=this._fieldsIndex?t.getComputedStringAtIndex(this._fieldsIndex):this._getValueFromFields(t);if(null!==this._nullResult&&(null==a||""===a||"<Null>"===a))return this._nullResult;if(!a&&null==a)return this.getDefault();const n=a.toString();return this._resultsMap.has(n)?this._resultsMap.get(n):this.getDefault()}_getValueFromFields(e){const t=[];for(const s of this._fields){const r=e.readAttribute(s);null==r||""===r?t.push("<Null>"):t.push(r)}return t.join(this._seperator)}}async function f(e,t){const s=e||1;if("number"==typeof s)return(e,t,r)=>s;const i=await r(s,t.spatialReference,t.fields);return(e,s,r)=>n(i,e,{$view:r},t.geometryType,s)||1}class p extends c{constructor(e,t,r,i){super(),this.type="dictionary",this._groupIdCache=new s(100),this._renderer=e,this._fieldMap=e.fieldMap,this._symbolFields=e.getSymbolFields(),this._templates=t,this._info=r,this._scaleFn=i}static async fromDictionaryRenderer(e,t,s){const r=(await import("../../../../../renderers/DictionaryRenderer.js")).default.fromJSON(e.renderer);await r.fetchResources({spatialReference:s.spatialReference,fields:s.fields});const i=await f(r.scaleExpression,s);return new p(r,t,s,i)}async _analyzeFeature(t,s,r,n){const u=t.readLegacyFeature(),c=this._scaleFn(u,s,r),d=this._attributeHash(u)+"-"+c,m=this._groupIdCache.get(d);if(m)return m;const h={...r,spatialReference:this._info.spatialReference,abortOptions:n,fields:this._info.fields},f=await this._renderer.getSymbolAsync(u,h),p=l(f,this._renderer),_=i(p,this._info,n).then((t=>{if("expanded-cim"!==t.type)return o.error(new e("mapview-bad-type",`Found unexpected type ${t.type} in dictionary response`)),null;t.hash+="-"+c;for(const e of t.layers)e.scaleFactor=c,e.templateHash+="-"+c,"text"===e.type&&"string"==typeof e.text&&e.text.indexOf("[")>-1&&(e.text=a(this._fieldMap,e.text,e.cim.textCase));return this._templates.createTemplateGroup(t,null)}));return this._groupIdCache.put(d,_,1),_}async analyze(e,t,s,r,i){const a=t.getCursor(),n=[];for(;a.next();)n.push(this._analyzeFeature(a,s,r,i));return Promise.all(n)}match(e,t,s,r,i){return null}_attributeHash(e){let t="";for(const s of this._symbolFields){const r=this._fieldMap[s];r&&(t+=e.attributes[r]+"-")}return t}}export{p as DictionaryMatcher,c as FeatureMatcher,m as IntervalMatcher,h as MapMatcher,d as SubtypeMatcher,u as createMatcher};
