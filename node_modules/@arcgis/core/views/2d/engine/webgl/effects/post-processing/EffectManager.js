/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
function e(e){switch(e){case"bloom":case"blur":case"opacity":case"drop-shadow":return e;default:return"colorize"}}const t={colorize:async()=>new((await import("./Colorize.js")).Colorize),blur:async()=>new((await import("./Blur.js")).Blur),bloom:async()=>new((await import("./Bloom.js")).Bloom),opacity:async()=>new((await import("./Opacity.js")).Opacity),"drop-shadow":async()=>new((await import("./DropShadow.js")).DropShadow)};class s{constructor(e){this._requestRender=e,this._effectMap=new Map,this._effectPromiseMap=new Map}dispose(){this._requestRender&&(this._requestRender=null),this._effectMap.forEach((e=>e.dispose())),this._effectMap.clear(),this._effectPromiseMap.clear()}getPostProcessingEffects(t){if(!t||0===t.length)return[];const s=[];for(const o of t){const t=e(o.type),r=this._effectMap.get(t);r?s.push({postProcessingEffect:r,effect:o}):this._enablePostProcessingEffect(t)}return s}async _enablePostProcessingEffect(e){const t=await this._loadPostProcessingEffect(e);this._requestRender&&(this._effectMap.set(e,t),this._requestRender.requestRender())}async _loadPostProcessingEffect(e){return this._effectPromiseMap.has(e)||this._effectPromiseMap.set(e,t[e]()),this._effectPromiseMap.get(e)}}export{s as EffectManager};
