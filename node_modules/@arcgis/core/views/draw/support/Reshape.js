/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import t from"../../../Graphic.js";import i from"../../../core/Collection.js";import s from"../../../core/Evented.js";import r from"../../../core/Handles.js";import{destroyMaybe as o,isNone as n,isSome as a,abortMaybe as c,get as h}from"../../../core/maybe.js";import{createTask as p}from"../../../core/promiseUtils.js";import{whenOnce as l,pausable as d}from"../../../core/watchUtils.js";import{property as m}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/Logger.js";import{subclass as v}from"../../../core/accessorSupport/decorators/subclass.js";import{geometryToCoordinates as y,getMidpoint as _}from"../../../geometry/support/coordsUtils.js";import g from"../../../layers/GraphicsLayer.js";import u from"../../../symbols/SimpleMarkerSymbol.js";import{SnappingVisualizer2D as x}from"../../2d/interactive/SnappingVisualizer2D.js";import{cloneMove as f}from"./drawUtils.js";import G from"./GraphicMover.js";import{addUniqueLayer as b}from"./layerUtils.js";import{settings as V}from"./settings.js";import{ViewEventPriorities as M}from"../../input/InputManager.js";import{SKETCH_KEYS as S}from"../../interactive/keybindings.js";import{EditGeometryHelper as w}from"../../interactive/editGeometry/EditGeometryHelper.js";import{SnappingContext as k}from"../../interactive/snapping/SnappingContext.js";import I from"../../../geometry/Point.js";class E{constructor(e,t,i){this.graphic=e,this.mover=t,this.selected=i,this.type="reshape-start"}}class C{constructor(e,t,i){this.graphic=e,this.mover=t,this.selected=i,this.type="reshape"}}class H{constructor(e,t,i){this.graphic=e,this.mover=t,this.selected=i,this.type="reshape-stop"}}class R{constructor(e,t,i){this.mover=e,this.dx=t,this.dy=i,this.type="move-start"}}class O{constructor(e,t,i){this.mover=e,this.dx=t,this.dy=i,this.type="move"}}class j{constructor(e,t,i){this.mover=e,this.dx=t,this.dy=i,this.type="move-stop"}}class A{constructor(e){this.added=e,this.type="vertex-select"}}class U{constructor(e){this.removed=e,this.type="vertex-deselect"}}class D{constructor(e,t,i,s){this.added=e,this.graphic=t,this.oldGraphic=i,this.vertices=s,this.type="vertex-add"}}class F{constructor(e,t,i,s){this.removed=e,this.graphic=t,this.oldGraphic=i,this.vertices=s,this.type="vertex-remove"}}const T=V.reshapeGraphics,z={vertices:{default:new u({style:"circle",size:T.vertex.size,color:T.vertex.color,outline:{color:T.vertex.outlineColor,width:1}}),hover:new u({style:"circle",size:T.vertex.hoverSize,color:T.vertex.hoverColor,outline:{color:T.vertex.hoverOutlineColor,width:1}}),selected:new u({style:"circle",size:T.selected.size,color:T.selected.color,outline:{color:T.selected.outlineColor,width:1}})},midpoints:{default:new u({style:"circle",size:T.midpoint.size,color:T.midpoint.color,outline:{color:T.midpoint.outlineColor,width:1}}),hover:new u({style:"circle",size:T.midpoint.size,color:T.midpoint.color,outline:{color:T.midpoint.outlineColor,width:1}})}};let L=class extends s.EventedAccessor{constructor(e){super(e),this._activeOperationInfo=null,this._handles=new r,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._snappingTask=null,this._stagedVertex=null,this._viewHandles=new r,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.enableMidpoints=!0,this.enableMovement=!0,this.enableVertices=!0,this.graphic=null,this.vertexGraphics=new i,this.layer=null,this.midpointGraphics=new i,this.midpointSymbol=new u({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedVertices=[],this.snappingManager=null,this.type="reshape",this.view=null}initialize(){this._setup(),this._handles.add([l(this,"view.ready",(()=>{const{layer:e,view:t}=this;b(t,e),this._viewHandles.add([t.on("key-down",(e=>this._keyDownHandler(e)),M.TOOL)])})),d(this,"graphic",(()=>this.refresh())),d(this,"layer",((e,t)=>{t&&(this._clearSelection(),this._resetGraphics(t)),this.refresh()})),d(this,"enableMidpoints",(()=>{this.refresh()}))])}destroy(){var e;this._reset(),null==(e=this._mover)||e.destroy(),this._mover=null,this._handles=o(this._handles),this._viewHandles=o(this._viewHandles)}get state(){const e=!!this.get("view.ready"),t=!(!this.get("graphic")||!this.get("layer"));return e&&t?"active":e?"ready":"disabled"}set symbols(e){const{midpoints:t=z.midpoints,vertices:i=z.vertices}=e||{};this._set("symbols",{midpoints:t,vertices:i})}isUIGraphic(e){const t=[];return this.graphic&&t.push(this.graphic),t.concat(this.vertexGraphics.items,this.midpointGraphics.items),t.length&&t.includes(e)}refresh(){this._reset(),this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedVertices(){this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_setup(){const{graphic:e,layer:t}=this;e&&t&&!n(e.geometry)&&(this._setupGraphics(),this._setupMover())}_setUpGeometryHelper(){const e=this.graphic.geometry;n(e)||"point"!==e.type&&"polygon"!==e.type&&"polyline"!==e.type||(this._geometryHelper=w.fromGeometry(e,"local"))}_saveSnappingContextForHandle(e,t){var i;this._snappingGraphicsLayer=new g({listMode:"hide",internal:!0,title:"Reshape snapping layer"}),this.view.map.layers.add(this._snappingGraphicsLayer),this._snappingContext=new k({geometry:this._geometryHelper,elevationInfo:{mode:"on-the-ground",offset:0},pointer:(null==(i=t.viewEvent)?void 0:i.pointerType)||"mouse",excludeFeature:this.graphic,visualizer:new x(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(e)})}_reset(){this._clearSelection(),this._resetGraphics(),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._mover&&this._mover.destroy(),this._mover=null,this.view.cursor="default"}_resetSnappingStateVars(){var e;a(this.snappingManager)&&this.snappingManager.doneSnapping(),a(this._snappingGraphicsLayer)&&(this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy()),null==(e=this._geometryHelper)||e.destroy(),this._geometryHelper=null,this._snappingTask=c(this._snappingTask),this._snappingTask=null,this._snappingContext=null,this._stagedVertex=null}_resetGraphics(e){this._removeMidpointGraphics(e),this._removeVertexGraphics(e),this._set("selectedVertices",[])}_removeMidpointGraphics(e){const t=e||this.layer;t&&t.removeMany(this.midpointGraphics.items),this.midpointGraphics.items.forEach((e=>e.destroy())),this.midpointGraphics.removeAll()}_removeVertexGraphics(e){const t=e||this.layer;t&&t.removeMany(this.vertexGraphics.items),this.vertexGraphics.items.forEach((e=>e.destroy())),this.vertexGraphics.removeAll()}_getCoordinatesForUI(e){const t=y(e.clone());if("polygon"===e.type)for(const i of t){const e=i[i.length-1];i[0][0]===e[0]&&i[0][1]===e[1]&&i.length>2&&i.pop()}return t}_setupGraphics(){const e=this.graphic.geometry;if(a(e)&&("polyline"===e.type||"polygon"===e.type)){const t=this._getCoordinatesForUI(e);this.enableMidpoints&&this._setUpMidpointGraphics(t),this.enableVertices&&this._setUpVertexGraphics(t)}}_setUpMidpointGraphics(e){this._removeMidpointGraphics();const t=this._createMidpointGraphics(e);this.midpointGraphics.addMany(t),this.layer.addMany(t)}_setUpVertexGraphics(e){this._removeVertexGraphics();const t=this._createVertexGraphics(e);this.vertexGraphics.addMany(t),this._storeRelatedVertexIndices(),this.layer.addMany(t)}_createVertexGraphics(e){const{_graphicAttributes:i,symbols:s,view:{spatialReference:r}}=this,o=[];return null==e||e.forEach(((e,n)=>{e.forEach(((e,a)=>{var c;const[h,p]=e;o.push(new t({geometry:new I({x:h,y:p,spatialReference:r}),symbol:null==s||null==(c=s.vertices)?void 0:c.default,attributes:{...i,pathIndex:n,pointIndex:a}}))}))})),o}_createMidpointGraphics(e){const{_graphicAttributes:i,symbols:s,view:{spatialReference:r}}=this,o=[];return null==e||e.forEach(((e,n)=>{e.forEach(((a,c)=>{const[p,l]=a,d=e[c+1]?c+1:0;if("polygon"===h(this.graphic.geometry,"type")||0!==d){const[a,h]=e[d],[m,v]=_([p,l],[a,h]);o.push(new t({geometry:new I({x:m,y:v,spatialReference:r}),symbol:s.midpoints.default,attributes:{...i,pathIndex:n,pointIndexStart:c,pointIndexEnd:d}}))}}))})),o}_storeRelatedVertexIndices(){const e=this.vertexGraphics.items;if(!e)return;const t=e.map((({geometry:e})=>({x:e.x,y:e.y})));for(let i=0;i<t.length;i++){const s=[];for(let e=0;e<t.length;e++){if(i===e)continue;const r=t[i],o=t[e];r.x===o.x&&r.y===o.y&&s.push(e)}e[i].attributes.relatedGraphicIndices=s}}_setupMover(){const{enableMovement:e,graphic:t,midpointGraphics:i,vertexGraphics:s,view:r}=this,o="point"===h(t.geometry,"type"),n=s.concat(i).items;e&&n.push(t),this._mover=new G({enableMoveAllGraphics:!1,indicatorsEnabled:o,graphics:n,view:r,callbacks:{onGraphicClick:e=>this._onGraphicClickCallback(e),onGraphicMoveStart:e=>this._onGraphicMoveStartCallback(e),onGraphicMove:e=>this._onGraphicMoveCallback(e),onGraphicMoveStop:e=>this._onGraphicMoveStopCallback(e),onGraphicPointerOver:e=>this._onGraphicPointerOverCallback(e),onGraphicPointerOut:e=>this._onGraphicPointerOutCallback(e)}})}_onGraphicClickCallback(e){e.viewEvent.stopPropagation();const t=e.graphic;if(t===this.graphic)this.clearSelection(),this.emit("graphic-click",e),this.callbacks.onGraphicClick&&this.callbacks.onGraphicClick(e);else if(this._isMidpoint(t)){if(2===e.viewEvent.button)return;const i=this.graphic.clone(),s=this._createVertexFromMidpoint(t);this.refresh(),this._emitVertexAddEvent([t],i,s)}else if(this._isVertex(t))if(e.viewEvent.stopPropagation(),2===e.viewEvent.button)this._removeVertices(t);else{e.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(t)?this._removeFromSelection(t,!0):this._addToSelection(t)}}_setUpOperation(e){const{graphic:t,dx:i,dy:s}=e,r=t===this.graphic;this._resetSnappingStateVars(),this._setUpGeometryHelper(),this._saveSnappingContextForHandle(t,e),this._activeOperationInfo={target:this.graphic,mover:t,operationType:r?"move":"reshape",totalDx:i,totalDy:s}}_onGraphicMoveStartCallback(e){const t=e.graphic,{dx:i,dy:s}=e;if(t===this.graphic)return this._clearSelection(),this._resetGraphics(),this._setUpOperation(e),this._emitMoveStartEvent(i,s),void("point"===this._geometryHelper.geometry.type&&this._onHandleMove(t,i,s,e,(()=>this._emitMoveEvent(i,s))));if(!this.selectedVertices.includes(t)){if(this._clearSelection(),this._isMidpoint(t)){const e=this.graphic.clone(),i=this._createVertexFromMidpoint(t);this._emitVertexAddEvent([t],e,i)}this._addToSelection(t)}this._setUpOperation(e),this._emitReshapeStartEvent(t),this._onHandleMove(t,i,s,e,(()=>this._emitReshapeEvent(t)))}_onGraphicMoveCallback(e){const{graphic:t,dx:i,dy:s}=e;this._activeOperationInfo.totalDx+=i,this._activeOperationInfo.totalDy+=s;const{operationType:r}=this._activeOperationInfo,{geometry:o}=this._geometryHelper;"move"===r?"point"===o.type?this._onHandleMove(t,i,s,e,(()=>this._emitMoveEvent(i,s))):this._emitMoveEvent(i,s):this._onHandleMove(t,i,s,e,(()=>this._emitReshapeEvent(t)))}_onGraphicMoveStopCallback(e){const{graphic:t,dx:i,dy:s}=e;this._activeOperationInfo.totalDx+=i,this._activeOperationInfo.totalDy+=s,t===this.graphic?(this._emitMoveStopEvent(),this.refresh()):(this._onHandleMove(t,i,s,e,(()=>this._emitReshapeStopEvent(t))),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._isMidpoint(t)&&this.refresh())}_updateMidpointGraphicLocations(e){for(const t of this.midpointGraphics){const{pathIndex:i,pointIndexStart:s,pointIndexEnd:r}=t.attributes,[o,n]=e[i][s],[a,c]=e[i][r],[h,p]=_([o,n],[a,c]);t.geometry=new I({x:h,y:p,spatialReference:this.view.spatialReference})}}_getIndicesForVertexGraphic({attributes:e}){return[(null==e?void 0:e.pathIndex)||0,(null==e?void 0:e.pointIndex)||0]}_getVertexFromEditGeometry(e){var t;const[i,s]=this._getIndicesForVertexGraphic(e);return null==(t=this._geometryHelper)?void 0:t.editGeometry.components[i].vertices[s]}_onHandleMove(e,t,i,s,r){c(this._snappingTask);const o=e.geometry,n="graphic-move-stop"===s.type;if(a(this.snappingManager)&&this.selectedVertices.length<2&&!n){const s=this.snappingManager;this._stagedVertex=s.update(o,this._snappingContext),this._syncGeometryAfterVertexMove(e,new I(this._stagedVertex),t,i,n),r(),this._snappingTask=p((async a=>{const c=await s.snap(o,this._snappingContext,a);c.valid&&(this._stagedVertex=c.apply(),this._syncGeometryAfterVertexMove(e,new I(this._stagedVertex),t,i,n),r())}))}else{const s=a(this._stagedVertex)?new I(this._stagedVertex):o;this._syncGeometryAfterVertexMove(e,s,t,i,n),r()}}async _syncGeometryAfterVertexMove(e,t,i,s,r=!1){const o=this._geometryHelper.geometry;if("point"===o.type)e.geometry=t;else{const{x:n,y:a}=t,[c,h]=this._getIndicesForVertexGraphic(e);let p=y(o);const l=p[c].length-1;p[c][h]=[n,a],"polygon"===o.type&&(0===h?p[c][l]=[n,a]:h===l&&(p[c][0]=[n,a])),this._isVertex(e)&&(p=this._moveRelatedCoordinates(p,e,n,a),p=this._moveSelectedHandleCoordinates(p,e,i,s,"polygon"===o.type),this._updateMidpointGraphicLocations(p)),this.graphic.geometry=o.clone(),this._syncEditGeometryAfterVertexMove(e,n,a),r&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(e),t):e.geometry=t)}}_moveRelatedCoordinates(e,t,i,s){const{relatedGraphicIndices:r}=t.attributes;for(const o of r){const r=this.vertexGraphics.getItemAt(o),{pathIndex:n,pointIndex:a}=r.attributes;e[n][a]=[i,s],r.geometry=t.geometry}return e}_moveSelectedHandleCoordinates(e,t,i,s,r){for(const o of this.selectedVertices)if(o!==t){const{pathIndex:t,pointIndex:n,relatedGraphicIndices:a}=o.attributes,c=f(o.geometry,i,s,this.view),h=e[t].length-1;e[t][n]=[c.x,c.y],o.geometry=c,r&&(0===n?e[t][h]=[c.x,c.y]:n===h&&(e[t][0]=[c.x,c.y]));for(const i of a){const t=this.vertexGraphics.getItemAt(i),{pathIndex:s,pointIndex:r}=t.attributes;e[s][r]=[c.x,c.y],t.geometry=c}}return e}_syncEditGeometryAfterVertexMove(e,t,i){const s=this._getVertexFromEditGeometry(e),r=t-s.pos[0],o=i-s.pos[1];this._geometryHelper.moveVertices([s],r,o,0)}_onGraphicPointerOverCallback(e){const t=e.graphic;this._isVertex(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.hover),this._updateHoverCursor(t)}_onGraphicPointerOutCallback(e){const t=e.graphic;this._isVertex(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.default),this.view.cursor="default"}_createVertexFromMidpoint(e){const{_graphicAttributes:t,graphic:i}=this,s=i.geometry;if(n(s)||"polygon"!==s.type&&"polyline"!==s.type)return[];const r=s.clone(),o=[],{pathIndex:a,pointIndexStart:c,pointIndexEnd:h}=e.attributes,{x:p,y:l}=e.geometry,d=0===h?c+1:h,m=y(r);return m[a].splice(d,0,[p,l]),e.attributes={...t,pathIndex:a,pointIndex:d,relatedGraphicIndices:[]},o.push({coordinates:m[a][d],componentIndex:a,vertexIndex:d}),this.graphic.geometry=r,o}_addToSelection(e){e instanceof t&&(e=[e]);for(const t of e)t.symbol=this.symbols.vertices.selected;this._set("selectedVertices",this.selectedVertices.concat(e)),this._emitSelectEvent(e)}_removeFromSelection(e,i){const{vertices:s}=this.symbols,r=i?s.hover:s.default;e instanceof t&&(e=[e]);for(const t of e)this.selectedVertices.splice(this.selectedVertices.indexOf(t),1),this._set("selectedVertices",this.selectedVertices),t.set("symbol",r);this._emitDeselectEvent(e)}_clearSelection(){if(this.selectedVertices.length){const e=this.selectedVertices;for(const t of this.selectedVertices)t.set("symbol",this.symbols.vertices.default);this._set("selectedVertices",[]),this._emitDeselectEvent(e)}}_keyDownHandler(e){S.delete.includes(e.key)&&!e.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_removeVertices(e){const i=this.graphic.geometry;if(n(i)||"polygon"!==i.type&&"polyline"!==i.type)return;if("polygon"===i.type&&this.vertexGraphics.length<4||this.vertexGraphics.length<3)return;e instanceof t&&(e=[e]);const s=this.graphic.clone(),r=i.clone(),o=y(r),a=[];e instanceof t&&(e=[e]);for(const t of e){const{x:e,y:i}=t.geometry;for(let t=0;t<o.length;t++){const s=o[t];for(let r=0;r<s.length;r++){const[n,c]=s[r];e===n&&i===c&&(a.push({coordinates:o[t][r],componentIndex:t,vertexIndex:r}),o[t].splice(Number(r),1))}}}if("polygon"===r.type)for(const t of o){const[e,i]=t[0],[s,r]=t[t.length-1];(1===t.length||t.length<3&&e===s&&i===r)&&o.splice(o.indexOf(t),1),t.length>2&&(e!==s||i!==r)&&t.push(t[0])}else for(const t of o)1===t.length&&o.splice(o.indexOf(t),1);this.graphic.geometry=r,this.refresh(),this._emitVertexRemoveEvent(e,s,a)}_isVertex(e){return this.vertexGraphics.includes(e)}_isSelected(e){return this._isVertex(e)&&this.selectedVertices.includes(e)}_isMidpoint(e){return this.midpointGraphics.includes(e)}_updateHoverCursor(e){this.view.cursor=this._isMidpoint(e)?"copy":"move"}_emitMoveStartEvent(e,t){const i=new R(this.graphic,e,t);this.emit("move-start",i),this.callbacks.onMoveStart&&this.callbacks.onMoveStart(i)}_emitMoveEvent(e,t){const i=new O(this.graphic,e,t);this.emit("move",i),this.callbacks.onMove&&this.callbacks.onMove(i)}_emitMoveStopEvent(){const{totalDx:e,totalDy:t}=this._activeOperationInfo,i=new j(this.graphic,e,t);this.emit("move-stop",i),this.callbacks.onMoveStop&&this.callbacks.onMoveStop(i)}_emitReshapeStartEvent(e){const t=new E(this.graphic,e,this.selectedVertices);this.emit("reshape-start",t),this.callbacks.onReshapeStart&&this.callbacks.onReshapeStart(t)}_emitReshapeEvent(e){const t=new C(this.graphic,e,this.selectedVertices);this.emit("reshape",t),this.callbacks.onReshape&&this.callbacks.onReshape(t)}_emitReshapeStopEvent(e){const t=new H(this.graphic,e,this.selectedVertices);this.emit("reshape-stop",t),this.callbacks.onReshapeStop&&this.callbacks.onReshapeStop(t)}_emitSelectEvent(e){const t=new A(e);this.emit("select",t),this.callbacks.onVertexSelect&&this.callbacks.onVertexSelect(t)}_emitDeselectEvent(e){const t=new U(e);this.emit("deselect",t),this.callbacks.onVertexDeselect&&this.callbacks.onVertexDeselect(t)}_emitVertexAddEvent(e,t,i){const s=new D(e,this.graphic,t,i);this.emit("vertex-add",s),this.callbacks.onVertexAdd&&this.callbacks.onVertexAdd(s)}_emitVertexRemoveEvent(e,t,i){const s=new F(e,this.graphic,t,i);this.emit("vertex-remove",s),this.callbacks.onVertexRemove&&this.callbacks.onVertexRemove(s)}};e([m()],L.prototype,"callbacks",void 0),e([m()],L.prototype,"enableMidpoints",void 0),e([m()],L.prototype,"enableMovement",void 0),e([m()],L.prototype,"enableVertices",void 0),e([m()],L.prototype,"graphic",void 0),e([m({readOnly:!0})],L.prototype,"vertexGraphics",void 0),e([m()],L.prototype,"layer",void 0),e([m({readOnly:!0})],L.prototype,"midpointGraphics",void 0),e([m()],L.prototype,"midpointSymbol",void 0),e([m({readOnly:!0})],L.prototype,"selectedVertices",void 0),e([m()],L.prototype,"snappingManager",void 0),e([m({readOnly:!0})],L.prototype,"state",null),e([m({value:z})],L.prototype,"symbols",null),e([m({readOnly:!0})],L.prototype,"type",void 0),e([m()],L.prototype,"view",void 0),L=e([v("esri.views.draw.support.Reshape")],L);var P=L;export default P;
