/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{sign as t}from"../../../core/mathUtils.js";import{unwrap as e}from"../../../core/maybe.js";import{a as i,h as r,q as o,p as s}from"../../../chunks/vec2.js";import{a as n,f as p}from"../../../chunks/vec2f64.js";import{SnappingAlgorithm as h}from"./SnappingAlgorithm.js";import{RayConstraint as a}from"./SnappingConstraint.js";import{anyMapPointToScreenPoint as c,squareDistance as f}from"./snappingUtils.js";import{RightAngleSnappingCandidate as g}from"./candidates/RightAngleSnappingCandidate.js";class l extends h{constructor(){super(...arguments),this._tmp=n()}snapNewVertex(t,e){const i=e.geometry.editGeometry.components[0],r=i.vertices.length,o=[];if(r<2)return o;const s=c(t,e.coordinateHelper,e.elevationInfo,this.view),n=i.vertices[r-1];this._checkForSnappingCandidate(o,n.left,n.pos,t,n.left.left.pos,n.pos,e,t,s);const p=i.vertices[0];return this._checkForSnappingCandidate(o,p.right,p.pos,t,p.right.right.pos,p.pos,e,t,s),o}snapExistingVertex(t,i){const r=[],o=e(i.vertexHandle),s=o.component,n=s.vertices.length;if(n<3)return r;const p=c(t,i.coordinateHelper,i.elevationInfo,this.view),h=o.left,a=o.right,f=s.vertices[0],g=s.vertices[n-1];if(!h)return this._checkForSnappingCandidate(r,f.right.right.right,f.right.right.pos,t,f.right.right.right.right.pos,f.right.right.pos,i,t,p),r;if(!a)return this._checkForSnappingCandidate(r,g.left.left.left,g.left.left.pos,t,g.left.left.left.left.pos,g.left.left.pos,i,t,p),r;if(h&&h.left.left){const e=h.left.left;this._checkForSnappingCandidate(r,e,h.left.pos,t,e.left.pos,h.left.pos,i,t,p)}if(a&&a.right.right){const e=a.right.right;this._checkForSnappingCandidate(r,e,a.right.pos,t,e.right.pos,a.right.pos,i,t,p)}return r}_checkForSnappingCandidate(e,h,l,d,m,v,u,_,x){if(!this.edgeExceedsShortLineThreshold(h,u))return;i(this._tmp,h.right.pos,h.left.pos);const S=p(this._tmp[1],-this._tmp[0]),k=r(S,i(this._tmp,d,l))/o(S),C=u.coordinateHelper,j=C.fromXYZ(s(n(),v,S,k),C.getZ(_,0));f(x,c(j,C,u.elevationInfo,this.view))<this.squaredProximityTreshold(u.pointer)&&e.push(new g({coordinateHelper:C,targetPoint:j,constraint:new a(C,v,s(C.createNew(),v,S,t(k))),previousVertex:m,otherVertex:v,otherVertexType:1}))}}export{l as RightAngleSnapper};
