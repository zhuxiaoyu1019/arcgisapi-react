/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import{removeUnordered as r}from"../../../../core/arrayUtils.js";import{HandleOwnerMixin as s}from"../../../../core/HandleOwner.js";import{isSome as o,isNone as i}from"../../../../core/maybe.js";import{eachAlwaysValues as a,createTask as n}from"../../../../core/promiseUtils.js";import{property as p}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import"../../../../core/Logger.js";import{subclass as d}from"../../../../core/accessorSupport/decorators/subclass.js";import c from"../../../../geometry/Point.js";import l from"../../../../geometry/Polygon.js";import{initializeProjection as u,canProjectWithoutEngine as h,project as m}from"../../../../geometry/projection.js";import{normalizeCentralMeridianSync as y}from"../../../../geometry/support/normalizeUtilsSync.js";import{featureGeometryTypeKebabDictionary as g}from"../../../../geometry/support/typeUtils.js";import{convertFromGeometry as f}from"../../../../layers/graphics/featureConversionUtils.js";import S from"../../../../layers/graphics/OptimizedFeature.js";import j from"../../../../layers/graphics/data/FeatureStore.js";import w from"../../../../layers/graphics/data/QueryEngine.js";import{sortCandidatesInPlace as v}from"../snappingUtils.js";import{convertSnappingCandidate as k}from"./queryEngineUtils.js";let O=class extends(s(t)){constructor(e){super(e),this.availability=1,this.sources={multipoint:null,point:null,polygon:null,polyline:null},this.loadedWkids=new Set,this.loadedWkts=new Set,this.pendingAdds=[]}get updating(){return this.updatingHandles.updating}get layer(){return this.layerSource.layer}destroy(){const e=this.pendingAdds;this.pendingAdds.length=0;for(const t of e)t.task.abort();this.mapSources((e=>this.destroySource(e)))}initialize(){this.handles.add([this.layer.on("graphic-update",(e=>this.onGraphicUpdate(e))),this.updatingHandles.addOnCollectionChange(this.layer.graphics,(e=>this.onGraphicsChanged(e)))]),this.addMany(this.layer.graphics.toArray())}async fetchCandidates(e,t){const r=(await a(this.mapSources((r=>r.queryEngine.executeQueryForSnapping({point:e.coordinateHelper.toPoint(e.point,new c).toJSON(),distance:e.distance,types:e.types,query:o(e.filter)?e.filter.createQuery().toJSON():{where:"1=1"}},t).then((({candidates:e})=>e)))))).flat().map((t=>k(t,e.coordinateHelper)));return v(e.point,r),r}refresh(){}onGraphicUpdate(e){switch(e.property){case"geometry":case"visible":this.remove(e.graphic),this.addMany([e.graphic])}}onGraphicsChanged(e){for(const t of e.removed)this.remove(t);this.addMany(e.added)}addMany(e){const t=[],r=new Map;for(const s of e)i(s.geometry)||(this.needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),r.set(s.uid,s)):this.add(s));this.createPendingAdd(t,r)}createPendingAdd(e,t){if(!e.length)return;const s=n((async r=>{await u(e.map((e=>({source:e,dest:this.spatialReference}))),{signal:r}),this.markLoadedSpatialReferences(e);for(const[,e]of t)this.add(e)}));this.updatingHandles.addPromise(s.promise);const o={task:s,graphics:t},i=()=>r(this.pendingAdds,o);s.promise.then(i,i),this.pendingAdds.push(o)}markLoadedSpatialReferences(e){for(const t of e)null!=t.wkid&&this.loadedWkids.add(t.wkid),null!=t.wkt&&this.loadedWkts.add(t.wkt)}add(e){if(i(e.geometry)||!e.visible)return;let t=e.geometry;if("mesh"===t.type)return;"extent"===t.type&&(t=l.fromExtent(t));const r=this.ensureSource(t.type);if(i(r))return;const s=this.createOptimizedFeature(e.uid,t);o(s)&&r.featureStore.add(s)}needsInitializeProjection(e){return(null==e.wkid||!this.loadedWkids.has(e.wkid))&&((null==e.wkt||!this.loadedWkts.has(e.wkt))&&!h(e,this.spatialReference))}createOptimizedFeature(e,t){const r=m(y(t),this.spatialReference);return r?new S(f(r,!1,!1),{[b]:e},null,e):null}ensureSource(e){const t=this.sources[e];if(o(t))return t;const r=this.createSource(e);return this.sources[e]=r,r}createSource(e){const t=g.toJSON(e),r=new j({geometryType:t,hasZ:!1,hasM:!1});return{featureStore:r,queryEngine:new w({featureStore:r,fields:[{name:b,type:"esriFieldTypeOID",alias:b}],geometryType:t,hasM:!1,hasZ:!1,objectIdField:b,spatialReference:this.spatialReference,scheduler:o(this.view)&&"3d"===this.view.type?this.view.resourceController.scheduler:null}),type:e}}remove(e){this.mapSources((t=>this.removeFromSource(t,e)));for(const t of this.pendingAdds)t.graphics.delete(e.uid),0===t.graphics.size&&t.task.abort()}removeFromSource(e,t){const r=t.uid;e.featureStore.has(r)&&e.featureStore.removeById(t.uid)}destroySource(e){e.queryEngine.destroy(),this.sources[e.type]=null}mapSources(e){const{point:t,polygon:r,polyline:s,multipoint:i}=this.sources,a=[];return o(t)&&a.push(e(t)),o(r)&&a.push(e(r)),o(s)&&a.push(e(s)),o(i)&&a.push(e(i)),a}};e([p({constructOnly:!0})],O.prototype,"spatialReference",void 0),e([p({constructOnly:!0})],O.prototype,"layerSource",void 0),e([p({constructOnly:!0})],O.prototype,"view",void 0),e([p({readOnly:!0})],O.prototype,"updating",null),e([p({readOnly:!0})],O.prototype,"availability",void 0),O=e([d("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],O);const b="OBJECTID";export{O as GraphicsSnappingSource};
