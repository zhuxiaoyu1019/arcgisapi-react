/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import r from"../../../core/Error.js";import"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/Logger.js";import{subclass as t}from"../../../core/accessorSupport/decorators/subclass.js";import{createGenerateRendererClassBreaks as i,createGenerateRendererUniqueValues as s}from"../../../rest/support/generateRendererUtils.js";import{mergeWhereClauses as o}from"../../statistics/support/utils.js";import{getFieldsList as a}from"../utils.js";import n from"./FeatureLayerAdapter.js";import{calculateStatsFromMemory as l,getDataValues as u}from"./support/utils.js";function p(e){return"esri.rest.support.ClassBreaksDefinition"===e.declaredClass}function c(e){return"esri.rest.support.UniqueValueDefinition"===e.declaredClass}let d=class extends n{constructor(e){super(e)}async _createGenerateRendererResult(e,t,o,a,n){const d=e&&e.features;if(!(d&&d.length))throw new r("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");let m=null;if("percent-of-total"===a){if(m=(await l({field:t},d)).sum,null==m)throw new r("csv-layer-adapter:invalid","invalid normalizationTotal")}if(p(n)){const e=(await u({field:t,normalizationType:a,normalizationField:o,normalizationTotal:m},d)).filter((e=>Number.isFinite(e)));return i({definition:n,values:e,normalizationTotal:m})}if(c(n)){const e=(await u({field:t},d)).filter((e=>null!=e&&"string"==typeof e&&""!==e.trim()));return s(e)}}generateRenderer(e,r){const t=e.classificationDefinition;let i=null,s=null,n=null;p(t)?(i=t.classificationField,s=t.normalizationField,n=t.normalizationType):c(t)&&(i=t.attributeField);const l=this.layer;return a({field:i,normalizationField:s}).then((a=>{const u=l.createQuery();return u.returnGeometry=!1,u.outFields=a,u.where=o(u.where,e.where),l.queryFeatures(u,{signal:r}).then((e=>this._createGenerateRendererResult(e,i,s,n,t)))}))}load(e){const r=this.layer.load(e).then((e=>{this.geometryType=e.geometryType,this.objectIdField=e.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0}));return this.addResolvingPromise(r),Promise.resolve(this)}};d=e([t("esri.smartMapping.support.adapters.CSVLayerAdapter")],d);var m=d;export default m;
