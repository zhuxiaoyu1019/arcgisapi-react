/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../Graphic.js";import{pickRandom as a}from"../../../core/arrayUtils.js";import r from"../../../core/Error.js";import{isSome as s}from"../../../core/maybe.js";import{createAbortController as i,timeout as o,throwIfAborted as n}from"../../../core/promiseUtils.js";import{whenFalseOnce as l}from"../../../core/watchUtils.js";import{property as u}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/Logger.js";import{subclass as c}from"../../../core/accessorSupport/decorators/subclass.js";import{isDateField as m,isNumericField as p}from"../../../layers/support/fieldUtils.js";import d from"../../../rest/support/FeatureSet.js";import{getSQLFilterForNormalization as h}from"../../statistics/support/utils.js";import{getFieldsList as f}from"../utils.js";import y from"./FeatureLayerAdapter.js";import g from"./LayerAdapter.js";import{getMissingFields as F,ensureFeaturesJSON as w,calculateStatsFromMemory as _,processSummaryStatisticsResult as v,getUniqueValuesFromFeatureSet as S,createUVResult as x,calculateUniqueValuesFromMemory as L,getHistogramFromFeatureSet as E,calculateClassBreaksFromMemory as j,calculateHistogramFromMemory as q,generateBinParams as A}from"./support/utils.js";let z=class extends g{constructor(e){super(e)}_hasCachedStatistics(e){return this.layer.hasCachedStatistics(e)}_updateQuery(e,t=[],a=[]){if(!a.length)return e;const r=this.layer.objectIdField,s=e.clone(),i=t.filter((e=>{const t=this.layer.getField(e);return-1===a.indexOf(t.name)})),o=i.some((e=>this.layer.getField(e).name===r));return s.outFields=o?i:[...i,r],s}async _fetchFeaturesFromMemory(e,t,a){if(!e)throw new r("scene-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const s=await e.whenLayerView(this.layer),n=i(),u=l(s,"updating",n.signal);await o(u,5e3,n);const c=await F(this,a,s),m=this._updateQuery(t,a,c),p=(await s.queryFeatures(m)).features;return c.length?s.whenGraphicAttributes(p,c):p}async _fetchFeaturesJSONFromMemory(e,t,a){return this._fetchFeaturesFromMemory(e,t,a).then(w)}_fetchFeaturesForStats(e){return f({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((t=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:t,signal:e.signal})))}_generateFeatureSetForCachedHistogram(e,a=e.minimum,r=e.maximum,s){const i=[];for(let t=0;t<s;t++)i[t]=0;const o=e.counts.length,n=e.minimum,l=e.maximum;for(let t=0;t<o;t++){const u=(t+.5)/o,c=((1-u)*n+u*l-a)/(r-a)*s;c>=0&&c<=s&&(i[c===s?s-1:Math.floor(c)]+=e.counts[t])}const u=[];i.forEach(((e,a)=>{const r=new t({attributes:{}});r.attributes.EXPR_1=a+1,r.attributes.countOFExpr=e,u.push(r)}));const c=new d;return c.features=u,c}_getCachedStatistics(e,t){const a=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.minValue||e.maxValue?Promise.reject(new r("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression', 'sqlWhere', 'minValue' or 'maxValue' is specified")):a.queryCachedStatistics(t&&t.name,{signal:e.signal}).then((e=>{const t=e.stats,{min:a,max:r,totalValuesCount:s}=t;let{avg:i,stddev:o,sum:n,variance:l,count:u}=t;return 0===a&&0===r||(i=0===i?null:i,n=0===n?null:n,o=0===o?null:o,l=0===l?null:l,u=0===u?null:u),null==u&&(null!=n&&null!=i?u=Math.round(n/i):null!=s&&(u=s)),{avg:i,count:u,max:r,min:a,stddev:o,sum:n,variance:l}}))}async _getSummaryStatisticsFromMemory(e,t){const a={field:e.field,valueExpression:e.valueExpression,normalizationField:e.normalizationField,view:e.view,signal:e.signal},s=e.features?e.features:await this._fetchFeaturesForStats(a);if(!(s&&s.length))throw new r("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");const i=m(t),o={...e};if("percent-of-total"===o.normalizationType){const e=(await _({field:o.field},s)).sum;if(null==e)throw new r("scene-layer-adapter:invalid","invalid normalizationTotal");o.normalizationTotal=e}const n=await _(o,s,i);return v(n)}_getCachedStatisticsForUniqueValues(e,a){const s=this.layer,i=a&&a.name,o=a&&this.getFieldDomain(e.field);return e.valueExpression||e.sqlExpression||e.sqlWhere?Promise.reject(new r("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression' or 'sqlWhere' is specified")):s.queryCachedStatistics(i,{signal:e.signal}).then((r=>{const o=r.stats;if(!o.mostFrequentValues)return Promise.reject();const n=r.labels&&r.labels.labels,l={},u=[],c="countOF"+i;o.mostFrequentValues.forEach((e=>{const r=new t({attributes:{}});r.attributes[i]=a&&a.name!==s.objectIdField&&(p(a)||m(a))?Number(e.value):e.value,r.attributes[c]=e.count,u.push(r)})),n&&n.forEach((e=>{l[e.value]=e.label}));const h=new d;return h.features=u,S(h,this,e.field,l,e.signal)})).then((t=>x(t,o,e.returnAllCodedValues)))}_getUniqueValuesFromMemory(e,t){const a=t&&this.getFieldDomain(e.field),r={field:e.field,valueExpression:e.valueExpression,view:e.view,signal:e.signal};return(e.features?Promise.resolve(e.features):this._fetchFeaturesForStats(r)).then((t=>L(e,t,a)))}_getCachedStatisticsForHistogram(e,t){const a=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.normalizationType?Promise.reject(new r("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression' or 'sqlExpression' or 'sqlWhere' or 'normalizationType' is specified")):a.queryCachedStatistics(t&&t.name,{signal:e.signal}).then((t=>{const a=t.stats,{minValue:r,maxValue:s}=e,i=null!=r?r:a.min,o=null!=s?s:a.max,n=e.numBins||10,l=this._generateFeatureSetForCachedHistogram(a.histogram,i,o,n);return E(l,i,o,n)}))}async _getClassBreaksFromMemory(e){const t={field:e.field,valueExpression:e.valueExpression,normalizationField:e.normalizationField,view:e.view,signal:e.signal},a=e.features?e.features:await this._fetchFeaturesForStats(t);if(!(a&&a.length))throw new r("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");const s={...e};if("percent-of-total"===s.normalizationType){const e=(await _({field:s.field},a)).sum;if(null==e)throw new r("scene-layer-adapter:invalid","invalid normalizationTotal");s.normalizationTotal=e}return j(s,a)}_getHistogramFromMemory(e){const t={field:e.field,valueExpression:e.valueExpression,normalizationField:e.normalizationField,view:e.view,signal:e.signal};return(e.features?Promise.resolve(e.features):this._fetchFeaturesForStats(t)).then((t=>{if(!(t&&t.length))throw new r("scene-layer-adapter:insufficient-data","No features are available to calculate histogram");const{field:a,normalizationType:s,valueExpression:i,classificationMethod:o,minValue:n,maxValue:l,view:u}=e;let c=null;if((!o||"equal-interval"===o)&&!s)c=null!=n&&null!=l?Promise.resolve({min:n,max:l}):this.summaryStatistics({field:a,valueExpression:i,features:t,view:u,signal:e.signal}).then((e=>e.count?{min:e.min,max:e.max}:Promise.reject(new r("feature-layer-adapter:insufficient-data","No features are available to calculate histogram"))));else{const a={...e};a.features=t,c=this._getBinParamsFromMemory(a)}return c.then((a=>q(e,a,t)))}))}async _getBinParamsFromMemory(e){const{field:t,valueExpression:a,classificationMethod:r,standardDeviationInterval:s,normalizationType:i,normalizationField:o,minValue:n,maxValue:l,features:u,view:c}=e;return this._getClassBreaksFromMemory({field:t,valueExpression:a,normalizationType:i,normalizationField:o,classificationMethod:r,standardDeviationInterval:s,minValue:n,maxValue:l,numClasses:e.numBins,features:u,view:c}).then((e=>{const a=e.normalizationTotal,r=e.classBreakInfos,s=h({field:t,normalizationType:i,normalizationField:o});return A({field:t,normalizationType:i,normalizationField:o,normalizationTotal:a,classBreaks:r,where:s,layer:this})}))}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this.layer.getFieldUsageInfo(t.name);return{supportsLabelingInfo:a.supportsLabelingInfo,supportsPopupTemplate:a.supportsPopupTemplate,supportsRenderer:a.supportsRenderer,supportsLayerQuery:a.supportsLayerQuery,supportsStatistics:!0}}getFieldDomain(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.getFieldDomain(e,t):null}summaryStatistics(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.summaryStatistics(e):this._hasCachedStatistics(t&&t.name)?this._getCachedStatistics(e,t).catch((()=>(n(e.signal),this._getSummaryStatisticsFromMemory(e,t)))):this._getSummaryStatisticsFromMemory(e,t)}uniqueValues(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.uniqueValues(e):this._hasCachedStatistics(t&&t.name)?this._getCachedStatisticsForUniqueValues(e,t).catch((()=>(n(e.signal),this._getUniqueValuesFromMemory(e,t)))):this._getUniqueValuesFromMemory(e,t)}histogram(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.histogram(e):this._hasCachedStatistics(t&&t.name)?this._getCachedStatisticsForHistogram(e,t).catch((()=>(n(e.signal),this._getHistogramFromMemory(e)))):this._getHistogramFromMemory(e)}classBreaks(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.classBreaks(e):this._hasCachedStatistics(t&&t.name)?Promise.reject(new r("scene-layer-adapter:not-supported","Cached stats not supported")):this._getClassBreaksFromMemory(e)}queryFeatureCount(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.queryFeatureCount(e,t):Promise.reject(new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support count query"))}generateRenderer(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.generateRenderer(e,t):Promise.reject(new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support generateRenderer operation"))}heatmapStatistics(e){return this._featureLayerAdapter?this._featureLayerAdapter.heatmapStatistics(e):Promise.reject(new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support heatmapStatistics operation"))}async predominantCategories(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.predominantCategories(e);throw new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support predominantCategories")}async getSampleFeatures(e,t){const{view:r,sampleSize:s,requiredFields:i,returnGeometry:o,signal:l}=e,u=1,c="json"===t,m=this.layer.createQuery();m.outFields=i,m.returnGeometry=!!o,m.where=null,m.num=s;let p=[];try{if(p=c?await this._fetchFeaturesJSONFromMemory(r,m,i):await this._fetchFeaturesFromMemory(r,m,i),p.length&&s>0&&s<=p.length)return a(p,s,u)}catch(h){n(l)}let d=null;if(this._featureLayerAdapter){const a={...e};delete a.view,d=await this._featureLayerAdapter.getSampleFeatures(a,t)}return d&&d.length?d:a(p,p.length,u)}load(e){const t=this.layer.load(e).then((t=>{const a=t.associatedLayer;if(this.geometryType=t.geometryType,s(a)){this._featureLayerAdapter=new y({layer:a});return this._featureLayerAdapter.load(e).then((()=>{this.objectIdField=this._featureLayerAdapter.objectIdField,this.supportsSQLExpression=this._featureLayerAdapter.supportsSQLExpression,this.minScale=this._featureLayerAdapter.minScale,this.maxScale=this._featureLayerAdapter.maxScale,this.fullExtent=this._featureLayerAdapter.fullExtent}))}this.objectIdField=t.objectIdField,this.supportsSQLExpression=!1,this.hasQueryEngine=!1,this.fullExtent=t.fullExtent}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([u({constructOnly:!0})],z.prototype,"layer",void 0),z=e([c("esri.smartMapping.support.adapters.SceneLayerAdapter")],z);var C=z;export default C;
