/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import e from"../../Color.js";import"../../renderers/ClassBreaksRenderer.js";import"../../renderers/DictionaryRenderer.js";import"../../renderers/DotDensityRenderer.js";import r from"../../renderers/HeatmapRenderer.js";import"../../renderers/Renderer.js";import"../../renderers/SimpleRenderer.js";import"../../renderers/UniqueValueRenderer.js";import"../../renderers/support/jsonUtils.js";import a from"../../core/Error.js";import{isSome as s}from"../../core/maybe.js";import t from"../../renderers/support/HeatmapColorStop.js";import{verifyBasicFieldValidity as i,createColors as n,getBasemapInfo as o}from"./support/utils.js";import m from"../statistics/heatmapStatistics.js";import{getFieldsList as l}from"../support/utils.js";import{createLayerAdapter as p,getLayerTypeLabels as d}from"../support/adapters/support/layerUtils.js";import{c as u,g as c}from"../../chunks/heatmap.js";const f=.01;async function h(e){if(!(e&&e.layer&&e.view))throw new a("heatmap-renderer:missing-parameters","'layer' and 'view' parameters are required");const{blurRadius:r,minRatio:t,maxRatio:n,fadeToTransparent:o}=e,m={...e};m.blurRadius=null==r?10:r,m.minRatio=null==t?.01:t,m.maxRatio=null==n?1:n,m.fadeToTransparent=null==o||o;const u=[0,2,1,5],c=p(m.layer,u);if(m.layer=c,!c)throw new a("heatmap-renderer:invalid-parameters","'layer' must be one of these types: "+d(u).join(", "));const f=s(m.signal)?{signal:m.signal}:null;await c.load(f);const h=await l({field:m.field}),b=i(c,h,"heatmap-renderer:invalid-parameters");if(b)throw b;return m}async function b(e){let r=e.scheme,a=null,t=null;const i=await o(e.basemap,e.view);if(a=s(i.basemapId)?i.basemapId:null,t=s(i.basemapTheme)?i.basemapTheme:null,r)return{scheme:u(r),basemapId:a,basemapTheme:t};const n=c({basemap:a,basemapTheme:t});return n&&(r=n.primaryScheme,a=n.basemapId,t=n.basemapTheme),{scheme:r,basemapId:a,basemapTheme:t}}async function w(a,s){const{fieldOffset:i}=a,{field:o,basemap:m,blurRadius:l,minRatio:p,maxRatio:d,fadeToTransparent:c,heatmapScheme:h,view:w}=s,{scheme:j,basemapId:y,basemapTheme:R}=await b({basemap:m,scheme:h,view:w}),T=j.colors,g=T.length,v=!a.count,I=v?[0,100]:[a.min,a.max],x=(d-p)/(g-1),S=T[0],O=[new t({ratio:0,color:new e([S.r,S.g,S.b,0])}),new t({ratio:f,color:new e([S.r,S.g,S.b,0])}),new t({ratio:c?p:f,color:S})];n(T,g).forEach(((e,r)=>{O.push(new t({ratio:p+x*r,color:e}))}));const U=new r({blurRadius:l,colorStops:O,field:o,minPixelIntensity:I[0],maxPixelIntensity:I[1]});return null!=i&&(U.fieldOffset=i),{renderer:U,statistics:a,defaultValuesUsed:v,scheme:u(j),basemapId:y,basemapTheme:R}}async function j(e){const r=await h(e);return w(r.statistics?r.statistics:await m({layer:r.layer,field:r.field,fieldOffset:r.fieldOffset,blurRadius:r.blurRadius,view:r.view,signal:r.signal}),r)}export{j as createRenderer};
