/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
const t=.03;class e{constructor(){this._path=[]}path(){return this._path}addPath(t,e){e||t.reverse(),Array.prototype.push.apply(this._path,t),e||t.reverse()}static mergePath(t,e){e&&Array.prototype.push.apply(t,e)}startPath(t){this._path.push(t)}lineTo(t){this._path.push(t)}close(){const t=this._path;t.length>1&&(t[0][0]===t[t.length-1][0]&&t[0][1]===t[t.length-1][1]||t.push([t[0][0],t[0][1]]))}}class s{constructor(t=0,e=!1){}normalize(t){const e=Math.sqrt(t[0]*t[0]+t[1]*t[1]);t[0]/=e,t[1]/=e}calculateLength(t,e){const s=e[0]-t[0],n=e[1]-t[1];return Math.sqrt(s*s+n*n)}calculateSegLength(t,e){return this.calculateLength(t[e],t[e+1])}calculatePathLength(t){let e=0;const s=t?t.length:0;for(let n=0;n<s-1;++n)e+=this.calculateSegLength(t,n);return e}calculatePathArea(t){let e=0;const s=t?t.length:0;for(let n=0;n<s-1;++n)e+=(t[n+1][0]-t[n][0])*(t[n+1][1]+t[n][1]);return e/2}getCoord2D(t,e,s){return[t[0]+(e[0]-t[0])*s,t[1]+(e[1]-t[1])*s]}getSegCoord2D(t,e,s){return this.getCoord2D(t[e],t[e+1],s)}getAngle(t,e,s){const n=e[0]-t[0],r=e[1]-t[1];return Math.atan2(r,n)}getSegAngle(t,e,s){return this.getAngle(t[e],t[e+1],s)}getAngleCS(t,e,s){const n=e[0]-t[0],r=e[1]-t[1],h=Math.sqrt(n*n+r*r);return h>0?[n/h,r/h]:[1,0]}getSegAngleCS(t,e,s){return this.getAngleCS(t[e],t[e+1],s)}cut(t,e,s,n){return[s<=0?t[e]:this.getSegCoord2D(t,e,s),n>=1?t[e+1]:this.getSegCoord2D(t,e,n)]}addSegment(t,e,s){s&&t.push(e[0]),t.push(e[1])}getSubCurve(t,e,s){const n=[];return this.appendSubCurve(n,t,e,s)?n:null}appendSubCurve(t,e,s,n){const r=e?e.length-1:0;let h=0,l=!0,a=0;for(;a<r;){const r=this.calculateSegLength(e,a);if(0!==r){if(l){if(h+r>s){const o=(s-h)/r;let u=1,c=!1;h+r>=n&&(u=(n-h)/r,c=!0);const i=this.cut(e,a,o,u);if(i&&this.addSegment(t,i,l),c)break;l=!1}}else{if(h+r>n){const s=this.cut(e,a,0,(n-h)/r);s&&this.addSegment(t,s,l);break}this.addSegment(t,[e[a],e[a+1]],l)}h+=r,++a}else++a}return!0}getCIMPointAlong(t,e){const s=t?t.length-1:0;let n=0,r=-1;for(;r<s;){++r;const s=this.calculateSegLength(t,r);if(0!==s){if(n+s>e){const h=(e-n)/s;return this.getCoord2D(t[r],t[r+1],h)}n+=s}}return null}isEmpty(t,e){if(!t||t.length<=1)return!0;const s=t?t.length-1:0;let n=-1;for(;n<s;){if(++n,t[n+1][0]!==t[n][0]||t[n+1][1]!==t[n][1])return!1;if(e&&t[n+1][2]!==t[n][2])return!1}return!0}offset(t,e,s,n,r){if(!t||t.length<2)return null;let h=t.length;const l=t[0][0]===t[h-1][0]&&t[0][1]===t[h-1][1];if(l){if(t.length<3)return null;--h}const a=[];let o=l?t[h-1]:null,u=t[0];for(let c=0;c<h;c++){const r=c===h-1?l?t[0]:null:t[c+1];if(o)if(r){const t=[r[0]-u[0],r[1]-u[1]];this.normalize(t);const h=[u[0]-o[0],u[1]-o[1]];this.normalize(h);const l=h[0]*t[1]-h[1]*t[0],c=h[0]*t[0]+h[1]*t[1];if(l>=0==e<=0){const s=[t[0]-h[0],t[1]-h[1]];this.normalize(s);const n=Math.sqrt((1+c)/2),r=-Math.abs(e)/n;a.push([u[0]-s[0]*r,u[1]-s[1]*r])}else switch(s){case"Mitered":{const s=Math.sqrt((1+c)/2);if(s>0&&1/s<n){const n=[t[0]-h[0],t[1]-h[1]];this.normalize(n);const r=Math.abs(e)/s;a.push([u[0]-n[0]*r,u[1]-n[1]*r]);break}}case"Bevelled":a.push([u[0]+h[1]*e,u[1]-h[0]*e]),a.push([u[0]+t[1]*e,u[1]-t[0]*e]);break;case"Rounded":{a.push([u[0]+h[1]*e,u[1]-h[0]*e]);const s=5,n=1/s;let r=n;for(let l=1;l<s;l++,r+=n){const s=[h[1]*(1-r)+t[1]*r,-h[0]*(1-r)-t[0]*r];this.normalize(s),a.push([u[0]+s[0]*e,u[1]+s[1]*e])}a.push([u[0]+t[1]*e,u[1]-t[0]*e]);break}case"Square":default:if(l<0)a.push([u[0]+(h[1]+h[0])*e,u[1]+(h[1]-h[0])*e]),a.push([u[0]+(t[1]-t[0])*e,u[1]-(t[0]+t[1])*e]);else{const s=Math.sqrt((1+Math.abs(c))/2),n=[t[0]-h[0],t[1]-h[1]];this.normalize(n);const r=e/s;a.push([u[0]-n[0]*r,u[1]-n[1]*r])}}}else{const t=[u[0]-o[0],u[1]-o[1]];this.normalize(t),a.push([u[0]+t[1]*e,u[1]-t[0]*e])}else{const t=[r[0]-u[0],r[1]-u[1]];this.normalize(t),a.push([u[0]+t[1]*e,u[1]-t[0]*e])}o=u,u=r}return l&&a.push([a[0][0],a[0][1]]),a}}export{s as CurveHelper,t as PIXEL_TOLERANCE,e as PathHelper};
