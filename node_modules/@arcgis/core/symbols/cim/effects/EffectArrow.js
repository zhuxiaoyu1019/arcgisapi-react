/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{PathGeometryCursor as t,setId as e}from"../CIMCursor.js";import{CurveHelper as r,PIXEL_TOLERANCE as n,PathHelper as o}from"../CurveHelper.js";const s=1.7320508075688772,i=5,l="OpenEnded";class c{static local(){return null===c.instance&&(c.instance=new c),c.instance}execute(t,e,r){return new u(t,e,r)}}c.instance=null;class u extends t{constructor(t,e,o){super(t,!1,!0),this._curveHelper=new r,this._width=(void 0!==e.width?e.width:i)*o,this._arrowType=void 0!==e.geometricEffectArrowType?e.geometricEffectArrowType:l,this._offsetFlattenError=n*o}processPath(t){switch(this._arrowType){case"OpenEnded":default:return this._constructSimpleArrow(t,!0);case"Block":return this._constructSimpleArrow(t,!1);case"Crossed":return this._constructCrossedArrow(t)}}_constructSimpleArrow(t,e){const r=this._curveHelper.calculatePathLength(t);let n=this._width;r<2*n&&(n=r/2);const s=this._curveHelper.getSubCurve(t,0,r-n);if(!s)return null;const i=n/2;if(this._curveHelper.isEmpty(s,!1))return null;const l=this._constructOffset(s,-i);if(!l)return null;const c=this._constructOffset(s,i);if(!c)return null;const u=this._constructArrowBasePoint(l,-i/2);if(!u)return null;const h=this._constructArrowBasePoint(c,i/2);if(!h)return null;const a=t[t.length-1];e||(this._makeControlPoint(c,!0),this._makeControlPoint(l,!0));const _=new o;return _.addPath(c,!0),_.lineTo(h),this._makeControlPoint(_.path()),_.lineTo(a),this._makeControlPoint(_.path()),_.lineTo(u),this._makeControlPoint(_.path()),_.addPath(l,!1),e?{paths:[_.path()]}:(_.close(),{rings:[_.path()]})}_constructCrossedArrow(t){const e=this._curveHelper.calculatePathLength(t);let r=this._width;e<r*(1+s+1)&&(r=e/(1+s+1));const n=this._curveHelper.getSubCurve(t,0,e-r*(1+s));if(!n)return null;const i=r/2;if(this._curveHelper.isEmpty(n,!1))return null;const l=this._constructOffset(n,i);if(!l)return null;const c=this._constructOffset(n,-i);if(!c)return null;const u=this._curveHelper.getSubCurve(t,0,e-r);if(!u)return null;if(this._curveHelper.isEmpty(u,!1))return null;const h=this._constructOffset(u,i);if(!h)return null;const a=this._constructOffset(u,-i);if(!a)return null;const _=h[h.length-1],f=this._constructArrowBasePoint(h,i/2);if(!f)return null;const p=a[a.length-1],d=this._constructArrowBasePoint(a,-i/2);if(!d)return null;const m=t[t.length-1];this._makeControlPoint(l,!1),this._makeControlPoint(c,!1);const w=new o;return w.addPath(l,!0),this._makeControlPoint(w.path()),w.lineTo(p),w.lineTo(d),this._makeControlPoint(w.path()),w.lineTo(m),this._makeControlPoint(w.path()),w.lineTo(f),this._makeControlPoint(w.path()),w.lineTo(_),this._makeControlPoint(w.path()),w.addPath(c,!1),{paths:[w.path()]}}_constructOffset(t,e){return this._curveHelper.offset(t,e,"Rounded",4,this._offsetFlattenError)}_constructArrowBasePoint(t,e){if(!t||t.length<2)return null;const r=t[t.length-2],n=t[t.length-1],o=[n[0]-r[0],n[1]-r[1]];return this._curveHelper.normalize(o),[n[0]+o[1]*e,n[1]-o[0]*e]}_makeControlPoint(t,r=!1){e(r?t[0]:t[t.length-1],1)}}export{c as EffectArrow};
