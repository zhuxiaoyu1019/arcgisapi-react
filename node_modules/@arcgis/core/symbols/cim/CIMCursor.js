/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{clone as t}from"../../core/lang.js";import{isPolygon as i,isPolyline as h,isMultipoint as n,isExtent as s}from"../../geometry/support/jsonUtils.js";import{Placement as e}from"./CIMPlacements.js";function o(i){const h=t(i);return c(h),h}function a(t){if(t){for(let i=t.length-1;i>0;--i)t[i][0]-=t[i-1][0],t[i][1]-=t[i-1][1]}}function r(t){if(t)for(const i of t)a(i)}function l(t){if(t){const i=t.length;for(let h=1;h<i;++h)t[h][0]+=t[h-1][0],t[h][1]+=t[h-1][1]}}function u(t){if(t)for(const i of t)l(i)}function c(t){t&&(i(t)?u(t.rings):h(t)?u(t.paths):n(t)&&l(t.points))}function p(t){t&&(i(t)?r(t.rings):h(t)?r(t.paths):n(t)&&a(t.points))}function m(t){if(t)for(const i of t)f(i)}function f(t){t&&t.reverse()}function P(t,i,h){return[t[0]+(i[0]-t[0])*h,t[1]+(i[1]-t[1])*h]}function x(t){return!(!t||0===t.length)&&(t[0][0]===t[t.length-1][0]&&t[0][1]===t[t.length-1][1])}function g(t){return t[4]}function d(t,i){t[4]=i}class C{constructor(t,n,o,a){this.acceptPolygon=n,this.acceptPolyline=o,this.geomUnitsPerPoint=a,this.pathCount=-1,this.pathIndex=-1,this.iteratePath=!1,t&&(i(t)?n&&(this.multiPath=t.rings,this.isClosed=!0):h(t)?o&&(this.multiPath=t.paths,this.isClosed=!1):s(t)&&n&&(this.multiPath=I(t).rings,this.isClosed=!0),this.multiPath&&(this.pathCount=this.multiPath.length)),this.internalPlacement=new e}next(){if(!this.multiPath)return null;for(;this.iteratePath||this.pathIndex<this.pathCount-1;){this.iteratePath||this.pathIndex++;const t=this.processPath(this.multiPath[this.pathIndex]);if(t)return t}return this.pathCount=-1,this.pathIndex=-1,this.multiPath=null,null}}class y{constructor(t,i,h,n){this.inputGeometries=t,this.acceptPolygon=i,this.acceptPolyline=h,this.geomUnitsPerPoint=n,this.pathCount=-1,this.pathIndex=-1,this.iteratePath=!1}next(){for(;;){if(!this.multiPath){let t=this.inputGeometries.next();for(;t;){if(i(t)?this.acceptPolygon&&(this.multiPath=t.rings,this.isClosed=!0):h(t)?this.acceptPolyline&&(this.multiPath=t.paths,this.isClosed=!1):s(t)&&this.acceptPolygon&&(this.multiPath=I(t).rings,this.isClosed=!0),this.multiPath){this.pathCount=this.multiPath.length,this.pathIndex=-1;break}t=this.inputGeometries.next()}if(!this.multiPath)return null}for(;this.iteratePath||this.pathIndex<this.pathCount-1;){this.iteratePath||this.pathIndex++;const t=this.processPath(this.multiPath[this.pathIndex]);if(t)return t}this.pathCount=-1,this.pathIndex=-1,this.multiPath=null}}}function I(t){return{rings:[[[t.xmin,t.ymin],[t.xmin,t.ymax],[t.xmax,t.ymax],[t.xmax,t.ymin],[t.xmin,t.ymin]]]}}export{y as PathGeometryCursor,C as PathTransformationCursor,o as cloneAndDecodeGeometry,c as deltaDecodeGeometry,p as deltaEncodeGeometry,P as getCoord2D,g as getId,x as isClosedPath,m as reverseMultipath,f as reversePath,d as setId};
