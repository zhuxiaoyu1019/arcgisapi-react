/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{ForwardLinearDepth as e}from"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js";import{Slice as a}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as i}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{PathVertexPosition as o}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/PathVertexPosition.glsl.js";import{OutputDepth as r}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js";import{OutputHighlight as l}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{ReadLinearDepth as d}from"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js";import{EvaluateAmbientOcclusion as n}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js";import{EvaluateSceneLighting as t}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js";import{multipassTerrainTest as s}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js";import{Normals as c}from"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js";import{NormalUtils as m}from"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js";import{ReadShadowMap as g}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js";import{ColorConversion as v}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{glsl as p}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as u}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";function h(h){const f=new u;return f.vertex.uniforms.add("proj","mat4").add("view","mat4").add("camPos","vec3").add("localOrigin","vec3"),f.varyings.add("vpos","vec3"),f.include(o,h),0!==h.output&&7!==h.output||(f.include(i,{linearDepth:!1}),h.receiveShadows&&f.include(g,h),f.include(e,h),f.varyings.add("vnormal","vec3"),f.varyings.add("vcolor","vec4"),h.multipassTerrainEnabled&&f.varyings.add("depth","float"),f.vertex.code.add(p`
      void main() {
        vpos = calculateVPos();
        vnormal = normalize(localNormal());

        ${h.multipassTerrainEnabled?"depth = (view * vec4(vpos, 1.0)).z;":""}
        gl_Position = transformPosition(proj, view, vpos);

        ${0===h.output?"forwardLinearDepth();":""}

        vcolor = getColor();
      }
    `)),h.multipassTerrainEnabled&&(f.fragment.include(d),f.include(s,h)),7===h.output&&(f.include(a,h),f.fragment.uniforms.add("camPos","vec3"),f.fragment.uniforms.add("localOrigin","vec3"),f.fragment.uniforms.add("opacity","float"),f.fragment.code.add(p`
      void main() {
        discardBySlice(vpos);
        ${h.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}
        float combinedOpacity = vcolor.a * opacity;
        gl_FragColor = vec4(combinedOpacity);
      }
    `)),0===h.output&&(f.include(a,h),f.include(t,h),f.include(n,h),h.receiveShadows&&f.include(g,h),f.include(c,h),f.fragment.uniforms.add("camPos","vec3").add("localOrigin","vec3").add("ambient","vec3").add("diffuse","vec3").add("specular","vec3").add("opacity","float"),f.fragment.include(v),f.fragment.code.add(p`
      void main() {
        discardBySlice(vpos);
        ${h.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}

        shadingParams.viewDirection = normalize(vpos - camPos);
        shadingParams.normalView = vnormal;
        vec3 normal = shadingNormal(shadingParams);
        float ssao = evaluateAmbientOcclusionInverse();

        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);
        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;
        ${h.receiveShadows?"float shadow = readShadowMap(vpos, linearDepth);":1===h.viewingMode?"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);":"float shadow = 0.0;"}
        vec3 albedo = vcolor.rgb * max(ambient, diffuse); // combine the old material parameters into a single one
        float combinedOpacity = vcolor.a * opacity;
        albedo += 0.25 * specular; // don't completely ignore specular for now

        vec3 shadedColor = evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight);
        gl_FragColor = vec4(shadedColor, combinedOpacity);
        gl_FragColor = highlightSlice(gl_FragColor, vpos);
        ${h.OITEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}
      }
    `)),1!==h.output&&3!==h.output||(f.include(i,{linearDepth:!0}),f.vertex.uniforms.add("nearFar","vec2"),f.varyings.add("depth","float"),f.vertex.code.add(p`void main() {
vpos = calculateVPos();
gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);
}`),f.include(a,h),f.include(r,h),f.fragment.uniforms.add("timeElapsed","float"),f.fragment.code.add(p`void main() {
discardBySlice(vpos);
outputDepth(depth);
}`)),2===h.output&&(f.include(i,{linearDepth:!1}),f.include(m,h),f.vertex.uniforms.add("viewNormal","mat4"),f.varyings.add("vnormal","vec3"),f.vertex.code.add(p`void main(void) {
vpos = calculateVPos();
vnormal = normalize((viewNormal * vec4(localNormal(), 1.0)).xyz);
gl_Position = transformPosition(proj, view, vpos);
}`),f.include(a,h),f.fragment.uniforms.add("waterColor","vec4"),f.fragment.code.add(p`void main() {
discardBySlice(vpos);
vec3 normal = normalize(vnormal);
if (gl_FrontFacing == false) normal = -normal;
gl_FragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);
}`)),4===h.output&&(f.include(i,{linearDepth:!1}),f.include(m,h),f.vertex.uniforms.add("viewNormal","mat4"),f.varyings.add("vnormal","vec3"),f.vertex.code.add(p`void main(void) {
vpos = calculateVPos();
gl_Position = transformPosition(proj, view, vpos);
}`),f.include(a,h),f.include(l),f.fragment.code.add(p`void main() {
discardBySlice(vpos);
outputHighlight();
}`)),f}var f=Object.freeze({__proto__:null,build:h});export{f as P,h as b};
