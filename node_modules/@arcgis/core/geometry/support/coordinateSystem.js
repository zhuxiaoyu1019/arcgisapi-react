/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{d as t}from"../../chunks/mat4.js";import{s as n,d as e,g as o,n as r,c as u}from"../../chunks/vec3.js";import{c as s}from"../../chunks/vec3f64.js";import{getReferenceEllipsoid as a}from"../projectionEllipsoid.js";import{f as i,b as c}from"../../chunks/boundedPlane.js";import{f as l,s as f}from"../../chunks/sphere.js";function p(t){const{value:n,operations:e}=t;return{operations:e,value:e.create(n)}}function v(t,n,e){return t.operations.setExtent(t.value,n,e.value),e}function m(t){return{operations:t,value:t.create()}}function d(t,n,e=m(t)){return e.operations=t,t.copy(n,e.value),e}function h(t){return d(f,l(0,0,0,a(t).radius))}const j=2**50;function k(){return d(c,i([0,0,0],[j,0,0],[0,j,0]))}function A(t,n){return z.operations=t,z.value=n,z}function x(t,n,e){return t.operations.axisAt(t.value,n,2,e)}function y(t,n,e,o){return t.operations.axisAt(t.value,n,e,o)}function P(t,n,e){return t.operations.intersectRay(t.value,n,e)}function R(t,n){return t.operations.intersectRay(t.value,n,null)}function S(t,n,e){return t.operations.closestPoint(t.value,n,e)}function b(t,n,e){return t.operations.intersectRayClosestSilhouette(t.value,n,e)}function E(t,n,e){return t.operations.closestPointOnSilhouette(t.value,n,e)}function g(t,n){return t.operations.distanceToSilhouette(t.value,n)}function C(t,n){return t.operations.altitudeAt(t.value,n)}function O(t,n,e,o){return t.operations.setAltitudeAt(t.value,n,e,o)}function T(e,o,r,u){return o!==u&&t(u,o),n(w,u[12],u[13],u[14]),O(e,w,r,w),u[12]=w[0],u[13]=w[1],u[14]=w[2],u}function q(t,n,e){return t.operations.elevate(t.value,n,e.value)}const w=s(),z={operations:null,value:null};function B(t,n,o,r,u){return u[0]=e(t,n),u[1]=e(t,o),u[2]=e(t,r),u}function D(t,n,e,s,a){o(e,t),o(F,n),r(F,F),u(s,F,e),u(a,s,e)}const F=s();export{C as altitudeAt,y as axisAt,S as closestPoint,E as closestPointOnSilhouette,D as coordinateSystemFromOneAxisAndNormalVector,p as create,m as createFromOperations,h as createGlobal,k as createLocal,g as distanceToSilhouette,q as elevate,d as fromValues,P as intersectRay,b as intersectRayClosestSilhouette,R as intersectsRay,x as normalAt,O as setAltitudeAt,T as setAltitudeOfTransformation,v as setExtent,B as vectorCoordinates,A as wrap};
