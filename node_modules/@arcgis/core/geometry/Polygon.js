/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
import{_ as t}from"../chunks/tslib.es6.js";import{clone as e}from"../core/lang.js";import{property as r}from"../core/accessorSupport/decorators/property.js";import"../core/accessorSupport/ensureType.js";import"../core/has.js";import"../core/Logger.js";import{subclass as s}from"../core/accessorSupport/decorators/subclass.js";import{writer as i}from"../core/accessorSupport/decorators/writer.js";import n from"./Extent.js";import o from"./Geometry.js";import a from"./Point.js";import l from"./SpatialReference.js";import{polygonCentroid as h}from"./support/centroid.js";import{polygonContainsPoint as p}from"./support/contains.js";import{isClockwise as c}from"./support/coordsUtils.js";import{getPolygonExtent as m}from"./support/extentUtils.js";import{isSelfIntersecting as u}from"./support/intersectsBase.js";import{canProject as f,project as g}from"./support/webMercatorUtils.js";import{updateSupportFromPoint as y}from"./support/zmUtils.js";var d;function R(t){return!Array.isArray(t[0])}let x=d=class extends o{constructor(...t){super(...t),this.rings=[],this.type="polygon"}static fromExtent(t){const e=t.clone().normalize(),r=t.spatialReference;let s=!1,i=!1;e.map((t=>{t.hasZ&&(s=!0),t.hasM&&(i=!0)}));const n={rings:e.map((function(t){const e=[[t.xmin,t.ymin],[t.xmin,t.ymax],[t.xmax,t.ymax],[t.xmax,t.ymin],[t.xmin,t.ymin]];if(s&&t.hasZ){const r=t.zmin+.5*(t.zmax-t.zmin);for(let t=0;t<e.length;t++)e[t].push(r)}if(i&&t.hasM){const r=t.mmin+.5*(t.mmax-t.mmin);for(let t=0;t<e.length;t++)e[t].push(r)}return e})),spatialReference:r};return s&&(n.hasZ=!0),i&&(n.hasM=!0),new d(n)}normalizeCtorArgs(t,e){let r,s,i=null,n=null;return t&&!Array.isArray(t)?(i=t.rings?t.rings:null,e||(t.spatialReference?e=t.spatialReference:t.rings||(e=t)),r=t.hasZ,s=t.hasM):i=t,i=i||[],e=e||l.WGS84,i.length&&i[0]&&null!=i[0][0]&&"number"==typeof i[0][0]&&(i=[i]),n=i[0]&&i[0][0],n&&(void 0===r&&void 0===s?(r=n.length>2,s=n.length>3):void 0===r?r=s?n.length>3:n.length>2:void 0===s&&(s=r?n.length>3:n.length>2)),{rings:i,spatialReference:e,hasZ:r,hasM:s}}get cache(){return this.commitProperty("rings"),this.commitProperty("hasZ"),this.commitProperty("hasM"),this.commitProperty("spatialReference"),{}}get centroid(){const t=h(this);if(!t||isNaN(t[0])||isNaN(t[1])||this.hasZ&&isNaN(t[2]))return null;const e=new a;return e.x=t[0],e.y=t[1],e.spatialReference=this.spatialReference,this.hasZ&&(e.z=t[2]),e}get extent(){const{spatialReference:t}=this,e=m(this);if(!e)return null;const r=new n(e);return r.spatialReference=t,r}get isSelfIntersecting(){return u(this.rings)}writeRings(t,r){r.rings=e(this.rings)}addRing(t){if(!t)return;const e=this.rings,r=e.length;if(R(t)){const s=[];for(let e=0,r=t.length;e<r;e++)s[e]=t[e].toArray();e[r]=s}else e[r]=t.concat();return this.notifyChange("rings"),this}clone(){const t=new d;return t.spatialReference=this.spatialReference,t.rings=e(this.rings),t.hasZ=this.hasZ,t.hasM=this.hasM,t}contains(t){return!!t&&(f(t,this.spatialReference)&&(t=g(t,this.spatialReference)),p(this,t))}isClockwise(t){let e;return e=R(t)?t.map((t=>this.hasZ?this.hasM?[t.x,t.y,t.z,t.m]:[t.x,t.y,t.z]:[t.x,t.y])):t,c(e,this.hasM,this.hasZ)}getPoint(t,e){if(!this._validateInputs(t,e))return null;const r=this.rings[t][e],s=this.hasZ,i=this.hasM;return s&&!i?new a(r[0],r[1],r[2],void 0,this.spatialReference):i&&!s?new a(r[0],r[1],void 0,r[2],this.spatialReference):s&&i?new a(r[0],r[1],r[2],r[3],this.spatialReference):new a(r[0],r[1],this.spatialReference)}insertPoint(t,e,r){return this._validateInputs(t,e,!0)?(y(this,r),Array.isArray(r)||(r=r.toArray()),this.rings[t].splice(e,0,r),this.notifyChange("rings"),this):this}removePoint(t,e){if(!this._validateInputs(t,e))return null;const r=new a(this.rings[t].splice(e,1)[0],this.spatialReference);return this.notifyChange("rings"),r}removeRing(t){if(!this._validateInputs(t,null))return null;const e=this.rings.splice(t,1)[0],r=this.spatialReference,s=e.map((t=>new a(t,r)));return this.notifyChange("rings"),s}setPoint(t,e,r){return this._validateInputs(t,e)?(y(this,r),Array.isArray(r)||(r=r.toArray()),this.rings[t][e]=r,this.notifyChange("rings"),this):this}_validateInputs(t,e,r=!1){if(null==t||t<0||t>=this.rings.length)return!1;if(null!=e){const s=this.rings[t];if(r&&(e<0||e>s.length))return!1;if(!r&&(e<0||e>=s.length))return!1}return!0}toJSON(t){return this.write(null,t)}};t([r({readOnly:!0})],x.prototype,"cache",null),t([r({readOnly:!0})],x.prototype,"centroid",null),t([r({readOnly:!0})],x.prototype,"extent",null),t([r({readOnly:!0})],x.prototype,"isSelfIntersecting",null),t([r({type:[[[Number]]],json:{write:{isRequired:!0}}})],x.prototype,"rings",void 0),t([i("rings")],x.prototype,"writeRings",null),x=d=t([s("esri.geometry.Polygon")],x),x.prototype.toJSON.isDefaultToJSON=!0;var j=x;export default j;
